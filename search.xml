<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>head-MYSQL-part2</title>
      <link href="/2020/04/20/head-MYSQL-part2/"/>
      <url>/2020/04/20/head-MYSQL-part2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-next()&amp;&amp;nextline()etc</title>
      <link href="/2020/04/10/java-next-nextline-etc/"/>
      <url>/2020/04/10/java-next-nextline-etc/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>next（）</strong>:  一定要读取到有效字符后才可以结束输入，对输入有效字符之前遇到的空格键、Tab键或Enter键等结束符，next（）方法会自动将其去掉，只有在输入有效字符之后，next（）方法才将其后输入的空格键、Tab键或Enter键等视为分隔符或结束符。简单地说，next（）查找并返回来自此扫描器的下一个完整标记。完整标记的前后是与分隔模式匹配的输入信息，所以next方法不能得到带空格的字符串。</p></blockquote><p>只有第一个单词</p><blockquote><p>而<strong>nextLine（）</strong>  方法的结束符只是Enter键，即nextLine（）方法返回的是Enter键之前的所有字符，它是可以得到带空格的字符串的。</p></blockquote><p>nextline（）会自动读取next() nextIn 等 的enter</p><p>字节流和字符流 比较好的规范用法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>） File file = <span class="keyword">new</span> File (<span class="string">"hello.txt"</span>); </span><br><span class="line">FileInputStream in=<span class="keyword">new</span> FileInputStream (file); </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>） File file = <span class="keyword">new</span> File (<span class="string">"hello.txt"</span>); </span><br><span class="line">FileInputStream in=<span class="keyword">new</span> FileInputStream (file); </span><br><span class="line">InputStreamReader inReader=<span class="keyword">new</span> InputStreamReader (in,<span class="string">"UTF-8"</span>); </span><br><span class="line">BufferedReader bufReader=<span class="keyword">new</span> BufferedReader(inReader); </span><br><span class="line"></span><br><span class="line"><span class="number">3</span>） File file = <span class="keyword">new</span> File (<span class="string">"hello.txt"</span>); </span><br><span class="line">FileReader fileReader=<span class="keyword">new</span> FileReader(file); </span><br><span class="line">BufferedReader bufReader=<span class="keyword">new</span> BufferedReader(fileReader);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课堂 </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>head-MYSQL</title>
      <link href="/2020/04/06/head-MYSQL/"/>
      <url>/2020/04/06/head-MYSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="了解SQL"><a href="#了解SQL" class="headerlink" title="了解SQL"></a>了解SQL</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>表</li><li>列和数据类型</li><li>行</li><li><strong>主键</strong><br>每行（列）一个主键不相同</li></ul><h2 id="SQL（Structured-Query-Language）"><a href="#SQL（Structured-Query-Language）" class="headerlink" title="SQL（Structured Query Language）"></a>SQL（Structured Query Language）</h2><h1 id="了解MYSQL"><a href="#了解MYSQL" class="headerlink" title="了解MYSQL"></a>了解MYSQL</h1><p>DBMS 数据库管理系统 两种</p><ul><li>共享文件系统<br>  用的少 低端</li><li>客户机 服务器</li></ul><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><ul><li>开源</li><li>快</li><li>简单<br>安装：<blockquote><p><a href="https://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-install.html</a></p></blockquote><h3 id="CS程序"><a href="#CS程序" class="headerlink" title="CS程序"></a>CS程序</h3></li></ul><p>客户机应用</p><ul><li>命令行</li><li>MYSQL administrator 服务器管理</li><li>MYSQL Query Browser 执行命令</li></ul><h1 id="使用MYSQL"><a href="#使用MYSQL" class="headerlink" title="使用MYSQL"></a>使用MYSQL</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><strong>以下命令要不就全大写或者全小写</strong></p><h2 id="创建-导入数据库"><a href="#创建-导入数据库" class="headerlink" title="创建 导入数据库"></a>创建 导入数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> xxx</span><br><span class="line"><span class="keyword">use</span> xxx</span><br><span class="line"><span class="keyword">source</span> d:\test.sql</span><br></pre></td></tr></table></figure><h2 id="使用某数据库"><a href="#使用某数据库" class="headerlink" title="使用某数据库"></a>使用某数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">database</span>;</span><br></pre></td></tr></table></figure><h2 id="数据库列表"><a href="#数据库列表" class="headerlink" title="数据库列表"></a>数据库列表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h2 id="数据中的表"><a href="#数据中的表" class="headerlink" title="数据中的表"></a>数据中的表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><h2 id="数据表的属性，属性类型，主键信息"><a href="#数据表的属性，属性类型，主键信息" class="headerlink" title="数据表的属性，属性类型，主键信息"></a>数据表的属性，属性类型，主键信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> xxxx;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/1.png" alt></p><h2 id="数据表的索引信息"><a href="#数据表的索引信息" class="headerlink" title="数据表的索引信息"></a>数据表的索引信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> xxxx;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/2.png" alt></p><h2 id="数据表的性能信息"><a href="#数据表的性能信息" class="headerlink" title="数据表的性能信息"></a>数据表的性能信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> mysql <span class="keyword">like</span> <span class="string">'user%'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/3.png" alt></p><h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><h2 id="检索单个列-检查多个列-所有列"><a href="#检索单个列-检查多个列-所有列" class="headerlink" title="检索单个列 检查多个列 所有列"></a>检索单个列 检查多个列 所有列</h2><p><strong>无序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> xxxx;</span><br><span class="line"><span class="keyword">select</span> xxx，xx,xxx <span class="keyword">from</span> xxxx;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> xxx;</span><br></pre></td></tr></table></figure><h2 id="检索出不同的行-DISTINCT"><a href="#检索出不同的行-DISTINCT" class="headerlink" title="检索出不同的行 DISTINCT"></a>检索出不同的行 DISTINCT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> vend_id <span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><p>本来有14行<br><img src="/2020/04/06/head-MYSQL/5.png" alt></p><h2 id="限制结果-LIMIT"><a href="#限制结果-LIMIT" class="headerlink" title="限制结果 LIMIT"></a>限制结果 LIMIT</h2><p>从第4行开始5个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  vend_id <span class="keyword">from</span> products <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h2 id="完全限定"><a href="#完全限定" class="headerlink" title="完全限定"></a>完全限定</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  products.prod_name <span class="keyword">from</span> crashcourse.products <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">4</span>;</span><br></pre></td></tr></table></figure><h1 id="排序检索"><a href="#排序检索" class="headerlink" title="排序检索"></a>排序检索</h1><h2 id="单行排序"><a href="#单行排序" class="headerlink" title="单行排序"></a>单行排序</h2><p>实际上可以用<strong>别的列</strong>按字母排序 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name</span><br></pre></td></tr></table></figure><h2 id="多行-多规则排序"><a href="#多行-多规则排序" class="headerlink" title="多行 多规则排序"></a>多行 多规则排序</h2><p>检索三个列，按其中两个列排序 首先价格（价格相同的情况） 在按名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_price,prod_name</span><br></pre></td></tr></table></figure><h2 id="降序-DESC"><a href="#降序-DESC" class="headerlink" title="降序 DESC"></a>降序 DESC</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_price <span class="keyword">desc</span>,prod_name</span><br></pre></td></tr></table></figure><h2 id="找最贵"><a href="#找最贵" class="headerlink" title="找最贵"></a>找最贵</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_price <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>order by 需要在whre 后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_price=<span class="number">2.50</span></span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/6.png" alt></p><h3 id="空值检测"><a href="#空值检测" class="headerlink" title="空值检测"></a>空值检测</h3><p>空值和0值、空字符、空格不一样 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_price <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><h2 id="and-or"><a href="#and-or" class="headerlink" title="and or"></a>and or</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> (vend_id = <span class="number">1002</span> <span class="keyword">or</span> vend_id = <span class="number">1003</span>) <span class="keyword">and</span> prod_price&gt;=<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="in-清晰的or-执行更快"><a href="#in-清晰的or-执行更快" class="headerlink" title="in (清晰的or) 执行更快"></a>in (清晰的or) 执行更快</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> (vend_id <span class="keyword">in</span> (<span class="number">1002</span>,<span class="number">1003</span>)) <span class="keyword">and</span> prod_price&gt;=<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="not-不在后续的条件"><a href="#not-不在后续的条件" class="headerlink" title="not 不在后续的条件"></a>not 不在后续的条件</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> (vend_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1002</span>,<span class="number">1003</span>)) <span class="keyword">and</span> prod_price&gt;=<span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h1><h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2><p><strong>%</strong> 代表任意字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'jet%'</span></span><br><span class="line"><span class="keyword">where</span> prod_name <span class="keyword">like</span> <span class="string">'%jet%'</span> 含有 jet</span><br></pre></td></tr></table></figure><p><strong>_</strong> 代表单个字符</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>很复杂 只讲一些</p><h2 id="REGEXP-代表后面是正则表达"><a href="#REGEXP-代表后面是正则表达" class="headerlink" title="REGEXP 代表后面是正则表达"></a>REGEXP 代表后面是正则表达</h2><p><strong>默认不区分大小写</strong><br>除了加上binary </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where prod_name regexp binary 'JetPACK .000';</span><br></pre></td></tr></table></figure><p><strong>.</strong>代表任意一个字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'1000'</span>; 匹配1000的</span><br><span class="line">where prod_name regexp '.000'; 匹配x000的</span><br></pre></td></tr></table></figure><h3 id="like-和-regexp-区别-（对于同样能执行的语句）"><a href="#like-和-regexp-区别-（对于同样能执行的语句）" class="headerlink" title="like 和 regexp 区别 （对于同样能执行的语句）"></a>like 和 regexp 区别 （对于同样能执行的语句）</h3><ul><li>like是对整个列查找 </li><li>regexp 是对列的具体里面值 查找看含有没有 ，但是regexp可以通过别的符号来实现对整个列匹配</li></ul><p><img src="/2020/04/06/head-MYSQL/7.png" alt> </p><h2 id="表示or"><a href="#表示or" class="headerlink" title="| 表示or"></a>| 表示or</h2><h2 id="代表组合"><a href="#代表组合" class="headerlink" title="[]代表组合"></a>[]代表组合</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'[123] Ton'</span>; 将含有匹配'1 ton'or '2 ton''3 ton'的匹配</span><br><span class="line">where prod_name regexp '[1-3] Ton'; 将含有匹配'1 ton'or '2 ton''3 ton'的匹配</span><br></pre></td></tr></table></figure><p>与|的不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'1|2|3 Ton'</span>;将含有 '1' or '2' or '3' ton 匹配</span><br></pre></td></tr></table></figure><h2 id="匹配特殊字符-就是"><a href="#匹配特殊字符-就是" class="headerlink" title="匹配特殊字符 就是% . -"></a>匹配特殊字符 就是% . -</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'\\.'</span>;将含有.的匹配</span><br></pre></td></tr></table></figure><p>引用元字符<br><img src="/2020/04/06/head-MYSQL/8.png" alt><br><img src="/2020/04/06/head-MYSQL/9.png" alt> </p><h2 id="匹配多个实例-（多次-或几次）"><a href="#匹配多个实例-（多次-或几次）" class="headerlink" title="匹配多个实例 （多次 或几次）"></a>匹配多个实例 （多次 或几次）</h2><p><img src="/2020/04/06/head-MYSQL/10.png" alt> </p><p><strong>?</strong> 代表前面一个字符出现0 或者1次</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'\\([0-9] sticks?\\)'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/11.png" alt> </p><p><strong>{4}</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'[[:digit:]]&#123;4&#125;'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</span><br></pre></td></tr></table></figure><p>匹配四个数字</p><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p><img src="/2020/04/06/head-MYSQL/12.png" alt> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  prod_id,prod_price,prod_name</span><br><span class="line"><span class="keyword">from</span> products </span><br><span class="line"><span class="keyword">where</span> prod_name regexp <span class="string">'^[[:digit:]\\.]'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/13.png" alt> </p><p>可以用select 测试 正则</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'hello'</span> regexp <span class="string">'^[[:digit:]\\.]'</span></span><br></pre></td></tr></table></figure><p>会返回0</p><h1 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h1><p>数据表的数据用到的一般不是应用程序需要的格式</p><p>字段（field） 基本和列一样 在计算字段用到</p><p><strong>为什么不在应用程序处理呢</strong><br>因为DBMS快得多</p><h2 id="concat-拼接"><a href="#concat-拼接" class="headerlink" title="concat 拼接"></a>concat 拼接</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(vend_name,<span class="string">'('</span>,vend_country,<span class="string">')'</span>)</span><br><span class="line"><span class="keyword">from</span> vendors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/14.png" alt> </p><h2 id="trim-Ltrim-Rtrim-去左右空格-去左-去右"><a href="#trim-Ltrim-Rtrim-去左右空格-去左-去右" class="headerlink" title="trim Ltrim Rtrim 去左右空格 去左 去右"></a>trim Ltrim Rtrim 去左右空格 去左 去右</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">Rtrim</span>(vend_name),<span class="string">'('</span>,<span class="keyword">Rtrim</span>(vend_country),<span class="string">')'</span>)</span><br><span class="line"><span class="keyword">from</span> vendors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</span><br></pre></td></tr></table></figure><h2 id="导出列-别名-AS"><a href="#导出列-别名-AS" class="headerlink" title="导出列 别名 AS"></a>导出列 别名 AS</h2><p>之前只是看 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">Rtrim</span>(vend_name),<span class="string">'('</span>,<span class="keyword">Rtrim</span>(vend_country),<span class="string">')'</span>)</span><br><span class="line"><span class="keyword">as</span> vend_title</span><br><span class="line"><span class="keyword">from</span> vendors</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name;</span><br></pre></td></tr></table></figure><h2 id="计算"><a href="#计算" class="headerlink" title="计算 +-*/"></a>计算 +-*/</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id,quantity,item_price,</span><br><span class="line">       quantity*item_price <span class="keyword">as</span> expand_price //取名字不同会自动覆盖字段</span><br><span class="line"><span class="keyword">from</span> orderitems</span><br><span class="line"><span class="keyword">where</span> order_num=<span class="number">20005</span>;</span><br></pre></td></tr></table></figure><h1 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h1><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><p><img src="/2020/04/06/head-MYSQL/15-1.png" alt><br><img src="/2020/04/06/head-MYSQL/15-2.png" alt> </p><p>其中Soundex() 是匹配发音的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">soundex</span>(cust_contact)=<span class="keyword">soundex</span>(<span class="string">'Y lie'</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/16.png" alt> </p><h2 id="日期时间处理"><a href="#日期时间处理" class="headerlink" title="日期时间处理"></a>日期时间处理</h2><p>日期格式 最好 xxxx-xx-xx<br><img src="/2020/04/06/head-MYSQL/17.png" alt> </p><p>如果要日期 用Data（）<br>如果要时间 用Time()<br>他们会从列出提取 就算只有一个</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id,order_num</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">soundex</span>(cust_contact)=<span class="keyword">soundex</span>(<span class="string">'Y lie'</span>);</span><br></pre></td></tr></table></figure><h2 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h2><p><img src="/2020/04/06/head-MYSQL/18.png" alt> </p><h1 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h1><p>经常需要汇总数据而不用实际检索(会浪费时间)<br><img src="/2020/04/06/head-MYSQL/19.png" alt> </p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(prod_price) <span class="keyword">as</span> avg_price</span><br><span class="line"><span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h3><p>count(*) 计算所有行数 包括空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> cust_num</span><br><span class="line"><span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><p>count(cust_mail) 计算列中非null的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(cust_mail)  <span class="keyword">as</span> cust_num</span><br><span class="line"><span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><h3 id="MAX"><a href="#MAX" class="headerlink" title="MAX()"></a>MAX()</h3><p>对于数值和时间返回最大的 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(prod_price) <span class="keyword">as</span> max_price</span><br><span class="line"><span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><p>对于别的数据就返回最后一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(prod_name) <span class="keyword">as</span> max_prod_name</span><br><span class="line"><span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><h3 id="MIN（）与上同"><a href="#MIN（）与上同" class="headerlink" title="MIN（）与上同"></a>MIN（）与上同</h3><h3 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h3><h2 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h2><p>可用于上述函数</p><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>只考虑不同值 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">AVG</span>(<span class="keyword">distinct</span> prod_price) <span class="keyword">as</span> avg_price</span><br><span class="line"><span class="keyword">from</span> products;</span><br></pre></td></tr></table></figure><h1 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h1><p>在汇总数据的基础上 想知道每个供应商对应的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> num_pords</span><br><span class="line"><span class="keyword">from</span> products</span><br></pre></td></tr></table></figure><p>这样就失败，没有得到我们想要的<br><img src="/2020/04/06/head-MYSQL/21.png" alt>   </p><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> num_pords</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> vend_id;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/20.png" alt> </p><h2 id="过滤分组（注意此时不能where-where-是决定什么行不要"><a href="#过滤分组（注意此时不能where-where-是决定什么行不要" class="headerlink" title="过滤分组（注意此时不能where where 是决定什么行不要)"></a>过滤分组（注意此时不能where where 是决定什么行不要)</h2><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> num_pords</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> vend_id</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/22.png" alt> </p><h2 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h2><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>order by 与 group by的区别<br><img src="/2020/04/06/head-MYSQL/23.png" alt> </p><p>第一点很重要<br>应该提供明确的order by 决定分组顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_num,<span class="keyword">sum</span>(quantity*item_price) <span class="keyword">as</span> order_total</span><br><span class="line"><span class="keyword">from</span> orderitems</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> order_num</span><br><span class="line"><span class="keyword">having</span> order_total&gt;<span class="number">50</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> order_total;</span><br></pre></td></tr></table></figure><p>无order by<br><img src="/2020/04/06/head-MYSQL/24_1.png" alt></p><p>you order by<br><img src="/2020/04/06/head-MYSQL/24_2.png" alt></p><h3 id="select-顺序"><a href="#select-顺序" class="headerlink" title="select 顺序"></a>select 顺序</h3><p><img src="/2020/04/06/head-MYSQL/25_1.png" alt><br><img src="/2020/04/06/head-MYSQL/25_2.png" alt></p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>想要查询所有订购了’TNT2’的用户id 但是 他们之间没有直接的表</p><p>只能先查 数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_num</span><br><span class="line"><span class="keyword">from</span> orderitems</span><br><span class="line"><span class="keyword">where</span> prod_id=<span class="string">'TNT2'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/26_1.png" alt><br>在通过数量查询用户id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span> (<span class="number">20005</span>,<span class="number">20007</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/26_2.png" alt></p><h2 id="子查询过滤"><a href="#子查询过滤" class="headerlink" title="子查询过滤"></a>子查询过滤</h2><p>嵌套查询 出客户的id </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span> (<span class="keyword">select</span> order_num</span><br><span class="line">                    <span class="keyword">from</span> orderitems</span><br><span class="line">                    <span class="keyword">where</span> prod_id=<span class="string">'TNT2'</span>);</span><br></pre></td></tr></table></figure><p>在继续查询出客户的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">where</span> cust_id <span class="keyword">in</span> (</span><br><span class="line">                  <span class="keyword">select</span> cust_id</span><br><span class="line">                  <span class="keyword">from</span> orders</span><br><span class="line">                  <span class="keyword">where</span> order_num <span class="keyword">in</span> (</span><br><span class="line">                                      <span class="keyword">select</span> order_num</span><br><span class="line">                                      <span class="keyword">from</span> orderitems</span><br><span class="line">                                      <span class="keyword">where</span> prod_id=<span class="string">'TNT2'</span>);</span><br></pre></td></tr></table></figure><h2 id="计算子查询"><a href="#计算子查询" class="headerlink" title="计算子查询"></a>计算子查询</h2><p>1.检查 customersl里面的客户列表<br>2.对于每个客户计算在orders里面的订单数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id</span><br><span class="line"><span class="keyword">from</span> customers;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/27_1.png" alt></p><p>只能单独算 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> orders</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">where</span> cust_id = <span class="number">10001</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_state,cust_id,</span><br><span class="line">       (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> orders</span><br><span class="line">        <span class="keyword">from</span> orders</span><br><span class="line">        <span class="keyword">where</span> orders.cust_id=customers.cust_id) <span class="keyword">as</span> orders</span><br><span class="line"><span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cust_name;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/27_2.png" alt><br>如果cust_id = cust_id 会导致歧义</p><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><p>假如有一个包含产品目录的数据库列表，每种类别一行<br>对于每种物品存储的信息包括产品描述、价格、供应商等。</p><p>如果需要保存同一个供应商生成的多个产品？</p><p>为什么要分开存储数据和产品信息？</p><ul><li>防止重复</li><li>信息更改只要一次</li><li>如果每个产品都存供应商信息，不能保证数据一致性</li><li>相同数据出现多次不是好事</li></ul><p>建立关系表 一个是产品信息 一个是供应商信息</p><ul><li><p>供应商信息 每个供应商存着信息 有着唯一的标识 就是主键（primary key)</p></li><li><p>产品信息 只存产品信息 加上供应商信息primary key 也就是对于products 来说的外键</p></li></ul><p>这样的好处</p><ul><li>供应商信息不重复</li><li>供应商信息改变只要改供应商表</li><li>数据无重复且一致</li></ul><h2 id="为什么联结"><a href="#为什么联结" class="headerlink" title="为什么联结"></a>为什么联结</h2><p>联结是一种机制，更好处理<br>要保证外键存在</p><h2 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">from</span> vendors,products</span><br><span class="line"><span class="keyword">where</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name,prod_name;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/28.png" alt></p><p>同样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price</span><br><span class="line"><span class="keyword">from</span> vendors <span class="keyword">inner</span> <span class="keyword">join</span> products</span><br><span class="line"><span class="keyword">on</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name,prod_name;</span><br></pre></td></tr></table></figure><h2 id="多联结"><a href="#多联结" class="headerlink" title="多联结"></a>多联结</h2><p>可以先列出所有的表 在决定关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price,quantity</span><br><span class="line"><span class="keyword">from</span> orderitems,products,vendors</span><br><span class="line"><span class="keyword">where</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">and</span> orderitems.prod_id=products.prod_id</span><br><span class="line"><span class="keyword">and</span> order_num=<span class="number">20005</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name,prod_name;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name,prod_name,prod_price,quantity</span><br><span class="line"><span class="keyword">from</span> orderitems,products,vendors</span><br><span class="line"><span class="keyword">where</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">and</span> orderitems.prod_id=products.prod_id</span><br><span class="line"><span class="keyword">and</span> order_num=<span class="number">20005</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> vend_name,prod_name;</span><br></pre></td></tr></table></figure><p>实现14章子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">from</span> customers,orders,orderitems</span><br><span class="line"><span class="keyword">where</span> customers.cust_id=orders.cust_id</span><br><span class="line"><span class="keyword">and</span> orders.order_num=orderitems.order_num</span><br><span class="line"><span class="keyword">and</span> prod_id=<span class="string">'TNT2'</span>;</span><br></pre></td></tr></table></figure><h1 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h1><h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">from</span> customers <span class="keyword">as</span> c,orders <span class="keyword">as</span> o,orderitems <span class="keyword">as</span> oi</span><br><span class="line"><span class="keyword">where</span> c.cust_id=o.cust_id</span><br><span class="line"><span class="keyword">and</span> o.order_num=oi.order_num</span><br><span class="line"><span class="keyword">and</span> prod_id=<span class="string">'TNT2'</span>;</span><br></pre></td></tr></table></figure><h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><p>发现某物品有问题 查该物品的供应商的其他物品是否有问题<br>找该供应商生成的其他产品</p><p>子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id,prod_name</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">where</span> vend_id= (<span class="keyword">select</span> vend_id</span><br><span class="line">                <span class="keyword">from</span> products</span><br><span class="line">                <span class="keyword">where</span> prod_id=<span class="string">'DTNTR'</span>);</span><br></pre></td></tr></table></figure><p>自联结</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c.*,o.order_num,o.order_date,</span><br><span class="line">       oi.prod_id,oi.quantity,oi.item_price</span><br><span class="line"><span class="keyword">from</span> customers <span class="keyword">as</span> c,orders <span class="keyword">as</span> o,orderitems <span class="keyword">as</span> oi</span><br><span class="line"><span class="keyword">where</span> c.cust_id =o.cust_id</span><br><span class="line"><span class="keyword">and</span> oi.order_num =o.order_num</span><br><span class="line"><span class="keyword">and</span> oi.prod_id=<span class="string">'FB'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/29.png" alt></p><h2 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h2><p>重复的列不会列出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p1.prod_id,p1.prod_name</span><br><span class="line"><span class="keyword">from</span> products <span class="keyword">as</span> p1,products <span class="keyword">as</span> p2</span><br><span class="line"><span class="keyword">where</span> p1.vend_id=p2.vend_id</span><br><span class="line"><span class="keyword">and</span> p2.prod_id=<span class="string">'DTNTR'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/30.png" alt></p><h2 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h2><p>没有关联行的行 外部联行</p><p>目标：</p><ul><li>对每个客户下多少订单计数 包括没人订购的</li><li>列出所有产品 包括没人订购的</li><li>平均规模，包括未下单的</li></ul><p>内联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customers.cust_id,orders.order_num</span><br><span class="line"><span class="keyword">from</span> customers <span class="keyword">inner</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> customers.cust_id = orders.cust_id;</span><br></pre></td></tr></table></figure><p>外左联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customers.cust_id,orders.order_num</span><br><span class="line"><span class="keyword">from</span> customers <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> customers.cust_id = orders.cust_id;</span><br></pre></td></tr></table></figure><p>外右联</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customers.cust_id,orders.order_num</span><br><span class="line"><span class="keyword">from</span> customers <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> orders</span><br><span class="line"><span class="keyword">on</span> customers.cust_id = orders.cust_id;</span><br></pre></td></tr></table></figure><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>相当于输出两个查询的结果 连接起来</p><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">where</span> prod_price &lt;=<span class="number">5</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">where</span> vend_id <span class="keyword">in</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/31.png" alt></p><p><strong>注意点</strong>:查询的东西一样</p><h2 id="UION-ALL"><a href="#UION-ALL" class="headerlink" title="UION ALL"></a>UION ALL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">where</span> prod_price &lt;=<span class="number">5</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> vend_id,prod_id,prod_price</span><br><span class="line"><span class="keyword">from</span> products</span><br><span class="line"><span class="keyword">where</span> vend_id <span class="keyword">in</span> (<span class="number">1001</span>,<span class="number">1002</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/32.png" alt></p><h1 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h1><p>有几种数据库引擎<br>常见有MyISAM 支持  InnoDB不支持</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> productnotes</span><br><span class="line">(</span><br><span class="line">    note_id     <span class="built_in">int</span>         <span class="keyword">not</span> <span class="literal">null</span> AUTO_INCREMENT,</span><br><span class="line">    prod_id     <span class="built_in">char</span>(<span class="number">10</span>)    <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    note_date   datetime    <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    note_text   <span class="built_in">text</span>        <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(note_id),</span><br><span class="line">    fulltext(note_text)</span><br><span class="line">)<span class="keyword">engine</span>=MyISAM;</span><br></pre></td></tr></table></figure><p>定义了表并列出它包含的列<br>根据fulltext(note_text) 指示来对它索引<br>也可索引多个列</p><p><strong>tips</strong> 不要在导入数据时 使用fulltext ,应该先导入数据到新表<br>在修改表定义</p><h2 id="Match-against"><a href="#Match-against" class="headerlink" title="Match() against()"></a>Match() against()</h2><p>match 某列 against 关键词</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'rabbit'</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/33_1.png" alt></p><p>简单搜索和like差不多</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> note_text <span class="keyword">like</span> <span class="string">'%rabbit%'</span>;</span><br></pre></td></tr></table></figure><p><strong>重要</strong> : 可以对结果排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text,</span><br><span class="line">        <span class="keyword">match</span>(note_text) against(<span class="string">'rabbit'</span>) <span class="keyword">as</span> rank1</span><br><span class="line"><span class="keyword">from</span> productnotes;</span><br></pre></td></tr></table></figure><p>根据匹配词的数目 唯一词的数目 包含行的行数 对结果排序</p><p><img src="/2020/04/06/head-MYSQL/33_2.png" alt></p><h2 id="查询扩展"><a href="#查询扩展" class="headerlink" title="查询扩展"></a>查询扩展</h2><ul><li>先全文本搜索出 相关行</li><li>在相关行中检测出有用词（MYSQL断定的）</li><li>根据这些有用词在查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'anvils'</span> <span class="keyword">with</span> <span class="keyword">query</span> expansion);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/34.png" alt></p><h2 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h2><ul><li>要匹配的词</li><li>要排斥的词</li><li>排列提示 （哪些词更重要)</li></ul><p><strong>没有FULLTEXT索引也可以用</strong>布尔方式，但是很慢</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'heavy'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/35_1.png" alt><br>排斥任意以rope开始的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'heavy -rope*'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>);</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/35_2.png" alt></p><p><strong>操作表</strong><br><img src="/2020/04/06/head-MYSQL/36.png" alt></p><p><strong>例子</strong><br>搜索包含rabbit <strong>和</strong>bait的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'+rabbit +bait'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>;</span><br></pre></td></tr></table></figure><p>搜索包含rabbit或者bait <strong>至少一个的行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'rabbit bait'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>;</span><br></pre></td></tr></table></figure><p>搜索包含 <strong>rabbit bait的短语</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'+rabbit +bait'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>;</span><br></pre></td></tr></table></figure><p>搜索包含rabbit或者bait <strong>至少一个的行</strong> 增加前者的登记</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> note_text</span><br><span class="line"><span class="keyword">from</span> productnotes</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">match</span>(note_text) against(<span class="string">'+rabbit +bait'</span> <span class="keyword">in</span> <span class="built_in">boolean</span> <span class="keyword">mode</span>;</span><br></pre></td></tr></table></figure><h1 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h1><h2 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers</span><br><span class="line"><span class="keyword">values</span>(<span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Pep E.LaPew'</span>,</span><br><span class="line">        <span class="string">'100 Main Street'</span>,</span><br><span class="line">        <span class="string">'Log Angeles'</span>,</span><br><span class="line">        <span class="string">'CA'</span>,</span><br><span class="line">        <span class="string">'90046'</span>,</span><br><span class="line">        <span class="string">'USA'</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>简单但不使用 因为依赖次序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country,</span><br><span class="line">        cust_contact,</span><br><span class="line">        cust_email)</span><br><span class="line"><span class="keyword">values</span>(<span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Pep E.LaPew'</span>,</span><br><span class="line">        <span class="string">'100 Main Street'</span>,</span><br><span class="line">        <span class="string">'Log Angeles'</span>,</span><br><span class="line">        <span class="string">'CA'</span>,</span><br><span class="line">        <span class="string">'90046'</span>,</span><br><span class="line">        <span class="string">'USA'</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这样表结构变了 依然能使用</p><p><strong>提高性能</strong><br>可以在insert 和into 直接添加 low_priority 降低优先级来先处理优先级高的</p><h2 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h2><p><strong>1方式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country,</span><br><span class="line">        cust_contact,</span><br><span class="line">        cust_email)</span><br><span class="line"><span class="keyword">values</span>(<span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Pep E.LaPew'</span>,</span><br><span class="line">        <span class="string">'100 Main Street'</span>,</span><br><span class="line">        <span class="string">'Log Angeles'</span>,</span><br><span class="line">        <span class="string">'CA'</span>,</span><br><span class="line">        <span class="string">'90046'</span>,</span><br><span class="line">        <span class="string">'USA'</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country,</span><br><span class="line">        cust_contact,</span><br><span class="line">        cust_email)</span><br><span class="line"><span class="keyword">values</span>(<span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Pe2p E.LaPew'</span>,</span><br><span class="line">        <span class="string">'1002 Main Street'</span>,</span><br><span class="line">        <span class="string">'Log2 Angeles'</span>,</span><br><span class="line">        <span class="string">'CA2'</span>,</span><br><span class="line">        <span class="string">'900462'</span>,</span><br><span class="line">        <span class="string">'USA2'</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p><strong>2方式</strong><br>效率高 相当于单insert</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country,</span><br><span class="line">        cust_contact,</span><br><span class="line">        cust_email)</span><br><span class="line"><span class="keyword">values</span>(<span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Pep E.LaPew'</span>,</span><br><span class="line">        <span class="string">'100 Main Street'</span>,</span><br><span class="line">        <span class="string">'Log Angeles'</span>,</span><br><span class="line">        <span class="string">'CA'</span>,</span><br><span class="line">        <span class="string">'90046'</span>,</span><br><span class="line">        <span class="string">'USA'</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="literal">null</span>)，</span><br><span class="line"><span class="keyword">values</span>(<span class="literal">null</span>,</span><br><span class="line">        <span class="string">'Pe2p E.LaPew'</span>,</span><br><span class="line">        <span class="string">'1002 Main Street'</span>,</span><br><span class="line">        <span class="string">'Log2 Angeles'</span>,</span><br><span class="line">        <span class="string">'CA2'</span>,</span><br><span class="line">        <span class="string">'900462'</span>,</span><br><span class="line">        <span class="string">'USA2'</span>,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="插入检索数据"><a href="#插入检索数据" class="headerlink" title="插入检索数据"></a>插入检索数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> customers(cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country,</span><br><span class="line">        cust_contact,</span><br><span class="line">        cust_email)</span><br><span class="line"><span class="keyword">select</span> cust_name,</span><br><span class="line">        cust_address,</span><br><span class="line">        cust_city,</span><br><span class="line">        cust_state,</span><br><span class="line">        cust_zip,</span><br><span class="line">        cust_country,</span><br><span class="line">        cust_contact,</span><br><span class="line">        cust_email</span><br><span class="line"><span class="keyword">from</span> custnew;</span><br></pre></td></tr></table></figure><p><strong>注意</strong> 不一定要名称一样</p><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><ul><li>页面创建</li><li>语句创建</li></ul><h2 id="创建基础"><a href="#创建基础" class="headerlink" title="创建基础"></a>创建基础</h2><p><img src="/2020/04/06/head-MYSQL/37.png" alt></p><h3 id="MYSQL-忽略空格"><a href="#MYSQL-忽略空格" class="headerlink" title="MYSQL 忽略空格"></a><strong>MYSQL 忽略空格</strong></h3><p>以cust_id 为主键</p><h3 id="使用null"><a href="#使用null" class="headerlink" title="使用null"></a><strong>使用null</strong></h3><p>创建的时候不允许null not null在插入时不允许null值<br>null 和 空 不一定</p><h3 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h3><p>每增加一行 自动增 也可以给一个值只要是唯一的<br>select last_insert_id() 可以获得</p><h3 id="default-值"><a href="#default-值" class="headerlink" title="default 值"></a>default 值</h3><h3 id="引擎类型"><a href="#引擎类型" class="headerlink" title="引擎类型"></a>引擎类型</h3><ul><li><p>InnoDB 是可靠的事务处理 不支持全文搜索</p></li><li><p>MEMROY 功能等于MyISAM 数据存在内存，速度很快</p></li><li><p>MyISAM 性能极高 支持全文本搜索 不支持事务处理</p></li></ul><h2 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h2><h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><ul><li>添加列<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> vendors</span><br><span class="line"><span class="keyword">add</span> vend_phone <span class="built_in">char</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li>删除列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> vendors</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">columns</span> vend_phone;</span><br></pre></td></tr></table></figure><ul><li>加外键<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> orderitems</span><br><span class="line"><span class="keyword">add</span> consraint fk_orderitems_orders</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> (order_num) <span class="keyword">references</span> orders (order_num);</span><br></pre></td></tr></table></figure></li></ul><ul><li>复杂表结构更改一般需要手动删除<ul><li>新布局建表</li><li>insert select导入旧表数据</li><li>检验新表</li><li>重命名旧表</li><li>重命名新表</li><li>根据需要 重新创建触发器 存储过程 索引 外键</li></ul></li></ul><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>没确认 不撤销</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> custmers2;</span><br></pre></td></tr></table></figure><h2 id="重命名新表"><a href="#重命名新表" class="headerlink" title="重命名新表"></a>重命名新表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> custmers2 <span class="keyword">to</span> customers;</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图-1"><a href="#视图-1" class="headerlink" title="视图"></a>视图</h2><p>15章的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">from</span> customers,orders,orderitems</span><br><span class="line"><span class="keyword">where</span> customers.cust_id=orders.cust_id</span><br><span class="line"><span class="keyword">and</span> orders.order_num=orderitems.order_num</span><br><span class="line"><span class="keyword">and</span> prod_id=<span class="string">'TNT2'</span>;</span><br></pre></td></tr></table></figure><p>整个查询包装成一个名为 productscustomers 虚拟表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name,cust_contact</span><br><span class="line"><span class="keyword">from</span> productscustomers</span><br><span class="line"><span class="keyword">where</span> prod_id=<span class="string">'TNT2'</span>;</span><br></pre></td></tr></table></figure><p>作为视图不应该有任何列或数据 包含SQL查询</p><h3 id="视图作用"><a href="#视图作用" class="headerlink" title="视图作用"></a>视图作用</h3><ul><li>重用SQL语句</li><li>保护表</li><li>使用表的组成部分而不是整个表</li><li>可更改数据格式</li></ul><p>视图可使用和表基本相同的方式</p><p><strong>视图不包含数据，大量视图可能导致性能问题</strong></p><h3 id="视图规则"><a href="#视图规则" class="headerlink" title="视图规则"></a>视图规则</h3><p><img src="/2020/04/06/head-MYSQL/38.png" alt></p><h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><h3 id="简化复杂联结"><a href="#简化复杂联结" class="headerlink" title="简化复杂联结"></a>简化复杂联结</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> productscustomers <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> cust_name,cust_contact,prod_id</span><br><span class="line"><span class="keyword">from</span> customers,orders,orderitems</span><br><span class="line"><span class="keyword">where</span> customers.cust_id=orders.cust_id</span><br><span class="line"><span class="keyword">and</span> orders.order_num=orderitems.order_num</span><br></pre></td></tr></table></figure><p>创建了productcustomers视图 联结了三个表</p><h3 id="视图格式化检索数据"><a href="#视图格式化检索数据" class="headerlink" title="视图格式化检索数据"></a>视图格式化检索数据</h3><h3 id="过滤不想要的数据"><a href="#过滤不想要的数据" class="headerlink" title="过滤不想要的数据"></a>过滤不想要的数据</h3><h3 id="应该视图用于检索-不更新"><a href="#应该视图用于检索-不更新" class="headerlink" title="应该视图用于检索 不更新"></a>应该视图用于检索 不更新</h3><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>为以后的使用保存一条或者多条MySQL的语句</p><h2 id="为什么使用存储过程"><a href="#为什么使用存储过程" class="headerlink" title="为什么使用存储过程"></a>为什么使用存储过程</h2><ul><li>封装</li><li>保证开发人员和应用程序一个存储过程</li><li>简化对变动的管理</li><li>安全性</li><li>提高性能<h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2></li></ul><h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> productpricing(@pricelow,</span><br><span class="line">                    @pricehigh,</span><br><span class="line">                    @priceaverage</span><br><span class="line">                        );</span><br></pre></td></tr></table></figure><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> productpricing()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">avg</span>(prod_price) <span class="keyword">as</span> priceaverage</span><br><span class="line">        <span class="keyword">from</span> products;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>如果是命令行<br>因为Mysql 默认分隔符是; 向上面那样创建会报错<br><strong>解决方法</strong><br>通过delimiter 更改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> productpricing()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">avg</span>(prod_price) <span class="keyword">as</span> priceaverage</span><br><span class="line">        <span class="keyword">from</span> products;</span><br><span class="line"><span class="keyword">end</span> //</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> productpricing()</span><br></pre></td></tr></table></figure><h3 id="使用参数的存储过程"><a href="#使用参数的存储过程" class="headerlink" title="使用参数的存储过程"></a>使用参数的存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> productpricing(</span><br><span class="line">        <span class="keyword">out</span> pl <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">        <span class="keyword">out</span> ph <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>),</span><br><span class="line">        <span class="keyword">out</span> pa <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">min</span>(prod_price)</span><br><span class="line">        <span class="keyword">into</span> pl</span><br><span class="line">        <span class="keyword">from</span> products;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">max</span>(prod_price)</span><br><span class="line">        <span class="keyword">into</span> ph</span><br><span class="line">        <span class="keyword">from</span> products;</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">avg</span>(prod_price)</span><br><span class="line">        <span class="keyword">into</span> pa</span><br><span class="line">        <span class="keyword">from</span> products;</span><br><span class="line"><span class="keyword">end</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> productpricing(@pricelow,</span><br><span class="line">                    @pricehigh,</span><br><span class="line">                    @priceaverage</span><br><span class="line">                        );</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/39.png" alt></p><p>带输入输出参数的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</span><br><span class="line">        <span class="keyword">in</span> onnumber <span class="built_in">int</span>,</span><br><span class="line">        <span class="keyword">out</span> ototal <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(item_price*quantity)</span><br><span class="line">        <span class="keyword">from</span> orderitems</span><br><span class="line">        <span class="keyword">where</span> order_num = onnumber</span><br><span class="line">        <span class="keyword">into</span> ototal;</span><br><span class="line"><span class="keyword">end</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</span><br><span class="line">        <span class="keyword">in</span> onnumber <span class="built_in">int</span>,</span><br><span class="line">        <span class="keyword">out</span> ototal <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(item_price*quantity)</span><br><span class="line">        <span class="keyword">from</span> orderitems</span><br><span class="line">        <span class="keyword">where</span> order_num = onnumber</span><br><span class="line">        <span class="keyword">into</span> ototal;</span><br><span class="line"><span class="keyword">end</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/40.png" alt></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> ordertotal(<span class="number">20009</span>,@total);</span><br><span class="line"><span class="keyword">select</span> @total;</span><br></pre></td></tr></table></figure><h3 id="建立智能存储过程"><a href="#建立智能存储过程" class="headerlink" title="建立智能存储过程"></a>建立智能存储过程</h3><ul><li>获得总计</li><li>把营业税 有条件添加</li><li>返回合计（带税或者不带）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="comment">-- Name : ordertotal</span></span><br><span class="line"><span class="comment">-- Parameters : onnumber = order_num</span></span><br><span class="line"><span class="comment">--              taxable = 0 if not taxalbe, 1 if taxalbe</span></span><br><span class="line"><span class="comment">--              ototal = 0 order total variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal(</span><br><span class="line">        <span class="keyword">in</span> onnumber <span class="built_in">int</span>,</span><br><span class="line">        <span class="keyword">in</span> taxable <span class="built_in">boolean</span>,</span><br><span class="line">        <span class="keyword">out</span> ototal <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>)</span><br><span class="line">) <span class="keyword">comment</span> <span class="string">'Obtain order total,optionally adding tax'</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="comment">-- Declare variable for total</span></span><br><span class="line">        <span class="keyword">declare</span> total <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">-- Declare tax percentage</span></span><br><span class="line">        <span class="keyword">declare</span> taxrate <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- get the order total</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">sum</span>(item_price*quantity)</span><br><span class="line">        <span class="keyword">from</span> orderitems</span><br><span class="line">        <span class="keyword">where</span> order_num = onnumber</span><br><span class="line">        <span class="keyword">into</span> total;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- Is this taxalbe?</span></span><br><span class="line">        if taxable then</span><br><span class="line">                <span class="comment">-- yes add tax rate to total</span></span><br><span class="line">                <span class="keyword">select</span> total+(total/<span class="number">100</span>*taxable) <span class="keyword">into</span> total;</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">        <span class="comment">-- finally save </span></span><br><span class="line">        <span class="keyword">select</span> total <span class="keyword">into</span> ototal;</span><br><span class="line"><span class="keyword">end</span> //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> ordertotal(<span class="number">20005</span>,<span class="number">0</span>,@total);</span><br><span class="line"><span class="keyword">select</span> @total;</span><br><span class="line"><span class="keyword">call</span> ordertotal(<span class="number">20005</span>,<span class="number">1</span>,@total);</span><br><span class="line"><span class="keyword">select</span> @total;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/41.png" alt></p><h3 id="检查存储过程"><a href="#检查存储过程" class="headerlink" title="检查存储过程"></a>检查存储过程</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> ordertotal</span><br></pre></td></tr></table></figure><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>普通查询没办法得到 第一行 下一行 前10行<br>游标存储在Mysql服务器的数据库查询 是检索出来的结果集 </p><h2 id="使用游标cursor"><a href="#使用游标cursor" class="headerlink" title="使用游标cursor"></a>使用游标cursor</h2><ul><li>使用前要定义 </li><li>使用完要关闭</li></ul><h3 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">        <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>上面定义了游标<br>存储过程处理完成后，游标就消失</p><h3 id="打开关闭游标"><a href="#打开关闭游标" class="headerlink" title="打开关闭游标"></a>打开关闭游标</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">        <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line">        open ordernumbers;</span><br><span class="line">        close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line">        open ordernumbers;</span><br><span class="line">        fetch ordernumbers into o;</span><br><span class="line">        close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>fetch 检索当前行的order_num列 （自动从第一行开始）<br>到一个名为o的局部变量 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">declare</span> o <span class="built_in">int</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> </span><br><span class="line">        <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line">        <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done=<span class="number">1</span>;</span><br><span class="line">        open ordernumbers;</span><br><span class="line">                repeat</span><br><span class="line">                        fetch ordernumbers into o;</span><br><span class="line">                until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">        close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>反复执行到done 为真 此时是sqlstate ‘02000’ 如果没找到就是所有行循环完</p><p>局部变量定义在游标之前 句柄在游标之后</p><p><strong>最终案例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> processorders()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> done <span class="built_in">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">declare</span> o <span class="built_in">int</span>;</span><br><span class="line">        <span class="keyword">declare</span> t <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">declare</span> ordernumbers <span class="keyword">cursor</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> </span><br><span class="line">        <span class="keyword">select</span> order_num <span class="keyword">from</span> orders;</span><br><span class="line">        <span class="keyword">declare</span> continue <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> ordertotals</span><br><span class="line">                                   (order_num <span class="built_in">int</span>,total <span class="built_in">decimal</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line">        open ordernumbers;</span><br><span class="line">                repeat</span><br><span class="line">                        fetch ordernumbers into o;</span><br><span class="line">                        <span class="keyword">call</span> ordertotal(o,<span class="number">1</span>,t);</span><br><span class="line">                        <span class="keyword">insert</span> <span class="keyword">into</span> ordertotals(order_num,total)</span><br><span class="line">                        <span class="keyword">values</span>(o,t);</span><br><span class="line">                until done <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">        close ordernumbers;</span><br><span class="line"><span class="keyword">end</span>//</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/42.png" alt></p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="触发器定义"><a href="#触发器定义" class="headerlink" title="触发器定义"></a>触发器定义</h2><p>想要某条语句在事件发生时自动执行</p><ul><li>加个顾客，检查电话号码格式是否正确，州缩写是否大写</li><li>订购一个产品，从库存数量减去订购数量</li></ul><p>只有三种语句支持在他们发生后触发</p><ul><li><p>delete</p></li><li><p>insert</p></li><li><p>update </p></li><li><p><strong>只支持表</strong> 不支持临时表和视图</p></li><li><p>每个表最多6个</p></li></ul><h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> newproduct <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> productcustomers</span><br><span class="line"><span class="comment">-- 现版本不支持for each row select 'Product added'</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">select</span> <span class="string">'Product added'</span> <span class="keyword">into</span> @productinfo;</span><br></pre></td></tr></table></figure><h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> newproduct;</span><br></pre></td></tr></table></figure><h2 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h2><h3 id="insert-触发器"><a href="#insert-触发器" class="headerlink" title="insert 触发器"></a>insert 触发器</h3><p>使用<strong>new</strong> 访问被插入的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> neworder <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">on</span> orders</span><br><span class="line"><span class="comment">-- 现版本不支持for each row select new.order_num </span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">select</span> new.order_num <span class="keyword">into</span> @new_order_num;</span><br></pre></td></tr></table></figure><p>插入一个新订单到orders表里，mysql表会自动生成<br>order_num（由于auto_increment) 而触发器取得并返回他</p><p>测试</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders(order_date,cust_id)</span><br><span class="line"><span class="keyword">values</span>(<span class="keyword">now</span>(),<span class="number">10001</span>);</span><br><span class="line"><span class="keyword">select</span> @new_order_num;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/43.png" alt></p><p><strong>还有before 用于数据检验</strong></p><h3 id="delete-触发器"><a href="#delete-触发器" class="headerlink" title="delete 触发器"></a>delete 触发器</h3><p>使用<strong>old</strong> 访问被删除的行 只读</p><p>保存任意删除订单存档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> neworder <span class="keyword">before</span> <span class="keyword">delete</span> <span class="keyword">on</span> orders</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">        <span class="keyword">insert</span> <span class="keyword">into</span> archive_orders(order_num,order_date,cust_id) </span><br><span class="line">        <span class="keyword">values</span>(old.order_num,old.order_date,old.cust_id);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>如果订单不能存档 delete 会放弃</p><h3 id="update触发器"><a href="#update触发器" class="headerlink" title="update触发器"></a>update触发器</h3><p>综合 insert 和delete</p><ul><li>old访问旧值 new访问心智</li><li>在before 之前 new运行更新 （更改update的数据）</li><li>old 只读<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> neworder <span class="keyword">before</span> <span class="keyword">update</span> <span class="keyword">on</span> orders</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> <span class="keyword">set</span> new.vend_state = <span class="keyword">upper</span>(new.vend_state);</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>需要权限 </li><li>用来保持数据一致</li><li>不支持call 得拷贝过程代码 过来</li></ul><h1 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h1><p>InnoDB支持 </p><h2 id="事务处理定义"><a href="#事务处理定义" class="headerlink" title="事务处理定义"></a>事务处理定义</h2><p>维护数据库的完整性，保证成批的Mysql操作要么完全执行，要么完全不执行<br>设计良好的数据库都是关联的<br>例：orders和orderitems两个表 orders 实际订单 orderitems 存储订购产品，两个表通过主键 互相关联</p><p>给系统添加订单过程</p><ol><li>检查有无对应客户 customers表 没有添加</li><li>检索客户id</li><li>添加一行到orders表 与客户ID关联</li><li>检索orders 赋值的新订单ID</li><li>对于每个订购物品在orderitems表添加一行 通过检索的ID与orders表关联<br>（产品ID与products表关联）</li></ol><p>如果过程中发生了数据库故障（超出空间，安全限制，表锁）<br>阻止其中的过程就会出现 有订单无信息的情况</p><p><strong>事务管理添加</strong></p><ol><li>检查有无对应客户 customers表 没有添加</li><li>提交客户信息</li><li>检索客户id</li><li>添加一行到orders表 </li><li>如果在添加行orders表 出现故障，回退</li><li>检索orders 赋值的新订单ID</li><li>对于每个订购物品在orderitems表添加一行 </li><li>如果添加新行到orderitems 出现故障，回退所有添加的orderitems行和orders行</li><li>提交订单信息</li></ol><p><strong>KEYWORDS</strong></p><ul><li>事务 transaction 一组SQL语句</li><li>回退 rollback 撤销指定SQL语句过程</li><li>提交 commit 讲为存储的SQL语句写入数据库表</li><li>保留点 savepoint 事务处理的临时占位符 place-holder 可以对它发布回退（与回退整个事务处理不同）</li></ul><h2 id="控制事务"><a href="#控制事务" class="headerlink" title="控制事务"></a>控制事务</h2><h3 id="rollback"><a href="#rollback" class="headerlink" title="rollback"></a>rollback</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ordertotals;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ordertotals;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ordertotals;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ordertotals;</span><br></pre></td></tr></table></figure><p>删了回退</p><p><img src="/2020/04/06/head-MYSQL/44.png" alt></p><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>一般Mysql语句都是直接针对数据库操作 是隐含提交<br>implicit commit </p><p>事务处理里面不会隐含提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> ordertotals <span class="keyword">where</span> order_num = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> orders <span class="keyword">where</span> order_num = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>commit 只在两条都成功的情况下提交</strong></p><h3 id="savepoint"><a href="#savepoint" class="headerlink" title="savepoint"></a>savepoint</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">savepoint</span> delete1；</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> delete1;</span><br></pre></td></tr></table></figure><ul><li>保留点越多越好 自己意愿回退</li></ul><h3 id="更改默认提交行为"><a href="#更改默认提交行为" class="headerlink" title="更改默认提交行为"></a>更改默认提交行为</h3><p>set autocommit=0 </p><h1 id="全球化和本地化（多种语言字符集）"><a href="#全球化和本地化（多种语言字符集）" class="headerlink" title="全球化和本地化（多种语言字符集）"></a>全球化和本地化（多种语言字符集）</h1><h2 id="字符集校对顺序"><a href="#字符集校对顺序" class="headerlink" title="字符集校对顺序"></a>字符集校对顺序</h2><p>多种语言 字符集</p><ul><li>字符集 字母和符合集合</li><li>编码 字符集成员内部表示</li><li>校对 规定字符如何比较<br>例：校对APE apex Apple 的正确排序顺序 依赖是否区分大小写<br>也影响搜索，以及法文 德文排序</li></ul><h2 id="使用字符集-和校对顺序"><a href="#使用字符集-和校对顺序" class="headerlink" title="使用字符集 和校对顺序"></a>使用字符集 和校对顺序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="built_in">character</span> <span class="keyword">set</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/45.png" alt></p><p>展示了可用字符集合默认校对</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">collation</span>;</span><br></pre></td></tr></table></figure><p>展示可用校对 一个字符集有很多校对  很多校对两次<br>一次区分大小写 （_cs) 一次不区分大小写（_ci)</p><p><img src="/2020/04/06/head-MYSQL/46.png" alt></p><p>默认的字符集和校对 系统管理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character%'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'collation%'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/47.png" alt></p><h3 id="创建表指定字符集校对"><a href="#创建表指定字符集校对" class="headerlink" title="创建表指定字符集校对"></a>创建表指定字符集校对</h3><ul><li><p>对整个表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable</span><br><span class="line">(</span><br><span class="line">        column1 <span class="built_in">int</span>,</span><br><span class="line">        column2 <span class="built_in">varchar</span>(<span class="number">10</span>)</span><br><span class="line">)<span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> hebrew</span><br><span class="line"><span class="keyword">collate</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>对整个表和特定的列</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytable</span><br><span class="line">(</span><br><span class="line">        column1 <span class="built_in">int</span>,</span><br><span class="line">        column2 <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">        column3 <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="built_in">character</span> <span class="keyword">set</span> latin1 <span class="keyword">collate</span></span><br><span class="line">                                          latin1_general_ci</span><br><span class="line">)<span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> hebrew</span><br><span class="line"><span class="keyword">collate</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure><ul><li>以创建表不同的校对顺序排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> customers</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> lastname,fisrtname <span class="keyword">collate</span> latin1_general_cs;</span><br></pre></td></tr></table></figure><p>临时区分大小写</p><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><ul><li>多数用户能读写 少数能创建删除</li><li>有些只能读 不能更新</li><li>允许添加 不允许删除</li><li>有用户处理用户账号权限</li><li>只能通过存储过程访问数据 不直接</li><li>登录地点限制</li></ul><p><strong>防止无意错误</strong><br><strong>不要使用root</strong> </p><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/48.png" alt></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> ben <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'p@$$w0rd'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>indentified by 指定纯文本口令作为散列值加密，密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">user</span> ben <span class="keyword">to</span> beforta;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/49.png" alt></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> beforta;</span><br></pre></td></tr></table></figure><h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h3><h4 id="查看访问权限"><a href="#查看访问权限" class="headerlink" title="查看访问权限"></a>查看访问权限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> beforta;</span><br></pre></td></tr></table></figure><p><img src="/2020/04/06/head-MYSQL/50_1.png" alt><br>权限 usage on <em>.</em> 代表根本没有任何权限</p><h4 id="赋值和撤销访问权限"><a href="#赋值和撤销访问权限" class="headerlink" title="赋值和撤销访问权限"></a>赋值和撤销访问权限</h4><p>每个grant 添加一个权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> crashcourse.* <span class="keyword">to</span> beforta;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> beforta;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">select</span> <span class="keyword">on</span> crashcourse.* <span class="keyword">from</span> beforta;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> beforta;</span><br></pre></td></tr></table></figure><p>grand 和revoke 控制访问权限层次</p><ul><li>整个服务器，使用grant all 和 revoke all</li><li>整个数据库 on database.*</li><li>特定表 on datebase.table</li><li>特定的列</li><li>特定的存储过程</li></ul><p><img src="/2020/04/06/head-MYSQL/50_2.png" alt><br><img src="/2020/04/06/head-MYSQL/50_3.png" alt></p><p><strong>注意点：</strong> </p><ul><li>grant revoke 用户必须存在但是对象不一定</li><li>可以简化 grant select,insert on crashcourse.* to bforta;</li></ul><h4 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> bforta =<span class="keyword">Password</span>(<span class="string">'n3w p@$$w0rd'</span>);</span><br></pre></td></tr></table></figure><h1 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h1><h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><ul><li>mysqldump  转储数据库到外部</li><li>mysqlhotcopy 从一个数据库复制所有数据</li><li>backup table 或者select into outfile 到外部文件<br>用restore table 复原</li></ul><h2 id="进行数据库维护"><a href="#进行数据库维护" class="headerlink" title="进行数据库维护"></a>进行数据库维护</h2><p>查看表键 对不对<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">analyze</span> <span class="keyword">table</span> orders;</span><br></pre></td></tr></table></figure></p><p>发现修复问题<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">check</span> <span class="keyword">table</span> orders,orderitems;</span><br></pre></td></tr></table></figure></p><p>删除大量数据后用回收空间<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">optimize</span> <span class="keyword">table</span> orders,orderitems;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/04/06/head-MYSQL/51.png" alt></p><h2 id="诊断启动问题"><a href="#诊断启动问题" class="headerlink" title="诊断启动问题"></a>诊断启动问题</h2><p>大多是自动启动<br>mysqld 手动启动</p><ul><li>–help 显示帮助</li><li>–safe-mode 装载 减去某些最近配置服务器</li><li>–verbose 显示全文本消息</li><li>–version </li></ul><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><ul><li>错误日志 hostname.err data目录</li><li>查询日志 所有活动hostname.log </li><li>二进制日志 更新过数据的所有语句 hostname-bin</li><li>缓慢查询日志 记录执行缓慢的任何查询来优化</li></ul><h1 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h1><blockquote><p><a href="http://dev.mysql.com/doc/" target="_blank" rel="noopener">http://dev.mysql.com/doc/</a> Mysql文档</p></blockquote><p><strong>TIPS</strong></p><ul><li>所有DBMS有特定硬件建议</li><li>开始是默认设置，一段时间可能需要调整内存分配。<br>缓存区大小 （当前设置 show variables 和show status)。</li><li>MYSQL多用户多线程的，一个执行慢，大家都满。 show processlit显示活动进程。 kill 终结。</li><li>总是有不只一种方法编写select，  联结子查询。</li><li>explain， 解释如何执行一个select 。</li><li>存储过程比一条一条快。</li><li>绝不检索比需求多。</li><li>有操作支持delayed ，将控制返回调用程序 ，一有可能再执行。</li><li>导入数据， 应该关闭自动提交， 你可能删除索引， 包括fulltext索引<br>导入完在重建。</li><li>必须索引数据库表改善数据检索性能，可需要分析使用的select以找出重复的where 和order by 。如果一个简单的where子句 返回结果所花时间太长，可以断定其中使用的列需要索引</li><li>一个select 有一系列or 吗？ 通过多条和UNION语句，极大改善性能。</li><li>索引改善检索性能，损害数据插入、删除、更新性能。（索引可根据需要添加删除）</li><li>like很慢。一般用fulltext 而不是like</li><li>数据库不断变化，理想配置也是</li><li><strong>重要的是每条规则在某些条件会被打破</strong></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>串字符<br><img src="/2020/04/06/head-MYSQL/52.png" alt></p><p>数值类型<br><img src="/2020/04/06/head-MYSQL/53.png" alt></p><p>日期时间<br><img src="/2020/04/06/head-MYSQL/54.png" alt></p><p>二进制<br><img src="/2020/04/06/head-MYSQL/55.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> head MYSQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>head java first</title>
      <link href="/2020/03/20/head-java-first/"/>
      <url>/2020/03/20/head-java-first/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#base">base</a><ul><li><a href="#对象引用问题">对象引用问题</a></li><li><a href="#数组是一个对象">数组是一个对象</a></li><li><a href="#类型转化-小到大--大到小需要显示指派">类型转化 小到大  大到小需要显示指派</a></li><li><a href="#实例变量有默认值-类里--局部变量没有默认值-直接使用报错">实例变量有默认值 （类里）  局部变量没有默认值 直接使用报错</a></li><li><a href="#-只是比较里面的字节">== 只是比较里面的字节</a></li><li><a href="#arraylist-里面放的是对象--如果是主数据类型-会被包装成object">ArrayList 里面放的是对象  如果是主数据类型 会被包装成object</a></li></ul></li><li><a href="#多态-1-继承">多态 1 继承</a><ul><li><a href="#子类想要引用父类的方法加上一些">子类想要引用父类的方法加上一些</a></li><li><a href="#运用事态时引用英型可以是实际对象类型的父类多态">运用事态时，引用英型可以是实际对象类型的父类（多态）</a></li><li><a href="#无法看到源码-又想修改方法-可以继承来做">无法看到源码 又想修改方法 可以继承来做</a></li><li><a href="#final-标记方法防止覆盖">final 标记方法防止覆盖</a></li><li><a href="#参数一样-返回类型兼容-不降低读取权限">参数一样 返回类型兼容 不降低读取权限</a></li></ul></li><li><a href="#重载">重载</a></li><li><a href="#多态-2-接口与抽象类">多态 2 接口与抽象类</a><ul><li><a href="#抽象类--不能让animals-new-出来-不知道什么动物是动物">抽象类  不能让animals new 出来 （不知道什么动物是动物）</a></li></ul></li><li><a href="#所有类继承了object">所有类继承了Object</a><ul><li><a href="#可以覆盖部分方法但是部分是final强烈建议覆盖hashcode-equals-tostring">可以覆盖部分方法，但是部分是final(强烈建议覆盖hashcode equals toString)</a></li><li><a href="#不可把所有返回和参数设置成object">不可把所有返回和参数设置成Object</a></li><li><a href="#有些动物想要pets">有些动物想要pets</a></li><li><a href="#接口类型作为多态-对象可以来自任何实现接口的子类">接口类型作为多态 对象可以来自任何实现接口的子类</a></li><li><a href="#同一个类所有实例共享一个静态变量-无对象先初始化">同一个类所有实例共享一个静态变量 无对象先初始化</a></li><li><a href="#static-final-是-常量-比如pi">Static final 是 常量 比如PI</a></li><li><a href="#final">final</a></li></ul></li><li><a href="#autobox">autobox</a><ul><li><a href="#string转primitive">String转Primitive</a></li></ul></li><li><a href="#异常处理">异常处理</a><ul><li><a href="#如果有抛出异常-编译器一定要你处理-除了runtimeexp一般是逻辑错误">如果有抛出异常 编译器一定要你处理 除了runtimeexp(一般是逻辑错误)</a></li><li><a href="#出现异常-try-直接到catch">出现异常 try 直接到catch</a></li><li><a href="#finally-无论怎么样都执行">finally 无论怎么样都执行</a></li><li><a href="#duck-给调用处理">duck 给调用处理</a></li></ul></li><li><a href="#gui">Gui</a><ul><li><a href="#监听事件源">监听事件源</a></li><li><a href="#同时监听两件事">同时监听两件事</a></li></ul></li><li><a href="#swing">Swing</a><ul><li><a href="#3种风格">3种风格</a></li></ul></li><li><a href="#序列化-文件输入输出">序列化 文件输入输出</a><ul><li><a href="#序列化">序列化</a></li><li><a href="#解序列化">解序列化</a></li><li><a href="#写文本">写文本</a></li><li><a href="#问题-万一序列化之后修改类-怎么办">问题 万一序列化之后修改类 怎么办</a></li></ul></li><li><a href="#网络和线程">网络和线程</a><ul><li><a href="#基本读图">基本读图</a></li><li><a href="#基本写图">基本写图</a></li><li><a href="#线程">线程</a><ul><li><a href="#同步化对象">同步化对象</a></li><li><a href="#丢失更新">丢失更新</a></li></ul></li></ul></li><li><a href="#集合与泛型">集合与泛型</a><ul><li><a href="#点歌系统排序-arraylist-没有sort">点歌系统排序 ArrayList 没有sort</a></li><li><a href="#obeject-有tostring-方法-可以自己覆盖想要printf-就自己覆盖">Obeject 有toString() 方法 可以自己覆盖想要printf 就自己覆盖</a></li><li><a href="#想要-sort-song4个string属性">想要 sort SONG(4个String属性)</a></li></ul></li><li><a href="#泛型">泛型</a><ul><li><a href="#song-排序实现">Song 排序实现</a></li><li><a href="#还想要通过歌星排序">还想要通过歌星排序</a></li><li><a href="#如果有重复的歌名">如果有重复的歌名</a></li><li><a href="#set-之中怎么算两元素相等">Set 之中怎么算两元素相等</a></li><li><a href="#equals-hashcode-规定">equals hashCode 规定</a></li><li><a href="#treeset-加入元素会默认通过compareto排序-或者comparator">TreeSet 加入元素会默认通过compareTo()排序 或者comparator</a></li><li><a href="#对于arraylistanimals参数-不能用arraylistdogs代替-和数组的安全检查时间不一样">对于Arraylist<animals>参数 不能用Arraylist<dogs>代替 和数组的安全检查时间不一样</dogs></animals></a></li><li><a href="#用万用字符一种泛型-会阻止破坏集合的操作">用万用字符（一种泛型） 会阻止破坏集合的操作</a></li></ul></li><li><a href="#发布程序">发布程序</a><ul><li><a href="#几种方式">几种方式</a></li><li><a href="#jar-一组类文件包装起来">JAR 一组类文件包装起来</a><ul><li><a href="#执行jar-java虚拟机能从jar中找到main">执行JAR java虚拟机能从JAR中找到main</a></li><li><a href="#包防止类冲突-编译执行">包防止类冲突 编译执行</a></li></ul></li><li><a href="#java-web-start">JAVA web Start</a></li></ul></li><li><a href="#rmi-remote-method-innovacation-远程程序">RMI (Remote Method Innovacation) 远程程序</a><ul><li><a href="#servlet">servlet</a></li><li><a href="#jini--找接口">JINI  找接口</a></li></ul></li><li><a href="#appendix">Appendix</a><ul><li><a href="#string-的不变性-包装类的不变性">String 的不变性 包装类的不变性</a></li><li><a href="#断言">断言</a></li><li><a href="#静态嵌套类">静态嵌套类</a></li><li><a href="#多维数组">多维数组</a></li><li><a href="#enum">enum</a></li></ul></li></ul><!-- /TOC --><h1 id="base"><a href="#base" class="headerlink" title="base"></a>base</h1><h2 id="对象引用问题"><a href="#对象引用问题" class="headerlink" title="对象引用问题"></a>对象引用问题</h2><p><img src="/2020/03/20/head-java-first/1.png" alt><br><img src="/2020/03/20/head-java-first/2.png" alt><br><img src="/2020/03/20/head-java-first/3.png" alt></p><h2 id="数组是一个对象"><a href="#数组是一个对象" class="headerlink" title="数组是一个对象"></a>数组是一个对象</h2><p><img src="/2020/03/20/head-java-first/4.png" alt><br><img src="/2020/03/20/head-java-first/5.png" alt></p><h2 id="类型转化-小到大-大到小需要显示指派"><a href="#类型转化-小到大-大到小需要显示指派" class="headerlink" title="类型转化 小到大  大到小需要显示指派"></a>类型转化 小到大  大到小需要显示指派</h2><h2 id="实例变量有默认值-（类里）-局部变量没有默认值-直接使用报错"><a href="#实例变量有默认值-（类里）-局部变量没有默认值-直接使用报错" class="headerlink" title="实例变量有默认值 （类里）  局部变量没有默认值 直接使用报错"></a>实例变量有默认值 （类里）  局部变量没有默认值 直接使用报错</h2><p><img src="/2020/03/20/head-java-first/6.png" alt></p><h2 id="只是比较里面的字节"><a href="#只是比较里面的字节" class="headerlink" title="== 只是比较里面的字节"></a>== 只是比较里面的字节</h2><h2 id="ArrayList-里面放的是对象-如果是主数据类型-会被包装成object"><a href="#ArrayList-里面放的是对象-如果是主数据类型-会被包装成object" class="headerlink" title="ArrayList 里面放的是对象  如果是主数据类型 会被包装成object"></a>ArrayList 里面放的是对象  如果是主数据类型 会被包装成object</h2><h1 id="多态-1-继承"><a href="#多态-1-继承" class="headerlink" title="多态 1 继承"></a>多态 1 继承</h1><h2 id="子类想要引用父类的方法加上一些"><a href="#子类想要引用父类的方法加上一些" class="headerlink" title="子类想要引用父类的方法加上一些"></a>子类想要引用父类的方法加上一些</h2><p><img src="/2020/03/20/head-java-first/7.png" alt></p><h2 id="运用事态时，引用英型可以是实际对象类型的父类（多态）"><a href="#运用事态时，引用英型可以是实际对象类型的父类（多态）" class="headerlink" title="运用事态时，引用英型可以是实际对象类型的父类（多态）"></a>运用事态时，引用英型可以是实际对象类型的父类（多态）</h2><p>多态最强的地方 数组调用<br><img src="/2020/03/20/head-java-first/8.png" alt><br>或者在传递参数时 用父类引用来控制所有子类<br><img src="/2020/03/20/head-java-first/9.png" alt></p><h2 id="无法看到源码-又想修改方法-可以继承来做"><a href="#无法看到源码-又想修改方法-可以继承来做" class="headerlink" title="无法看到源码 又想修改方法 可以继承来做"></a>无法看到源码 又想修改方法 可以继承来做</h2><h2 id="final-标记方法防止覆盖"><a href="#final-标记方法防止覆盖" class="headerlink" title="final 标记方法防止覆盖"></a>final 标记方法防止覆盖</h2><h2 id="参数一样-返回类型兼容-不降低读取权限"><a href="#参数一样-返回类型兼容-不降低读取权限" class="headerlink" title="参数一样 返回类型兼容 不降低读取权限"></a>参数一样 返回类型兼容 不降低读取权限</h2><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>与继承多态无关 只是刚好名称相同的不同方法<br>不能只改返回类型</p><h1 id="多态-2-接口与抽象类"><a href="#多态-2-接口与抽象类" class="headerlink" title="多态 2 接口与抽象类"></a>多态 2 接口与抽象类</h1><h2 id="抽象类-不能让animals-new-出来-（不知道什么动物是动物）"><a href="#抽象类-不能让animals-new-出来-（不知道什么动物是动物）" class="headerlink" title="抽象类  不能让animals new 出来 （不知道什么动物是动物）"></a>抽象类  不能让animals new 出来 （不知道什么动物是动物）</h2><p><img src="/2020/03/20/head-java-first/10.png" alt><br>抽象方法 必须在子类被实现</p><h1 id="所有类继承了Object"><a href="#所有类继承了Object" class="headerlink" title="所有类继承了Object"></a>所有类继承了Object</h1><h2 id="可以覆盖部分方法，但是部分是final-强烈建议覆盖hashcode-equals-toString"><a href="#可以覆盖部分方法，但是部分是final-强烈建议覆盖hashcode-equals-toString" class="headerlink" title="可以覆盖部分方法，但是部分是final(强烈建议覆盖hashcode equals toString)"></a>可以覆盖部分方法，但是部分是final(强烈建议覆盖hashcode equals toString)</h2><h2 id="不可把所有返回和参数设置成Object"><a href="#不可把所有返回和参数设置成Object" class="headerlink" title="不可把所有返回和参数设置成Object"></a>不可把所有返回和参数设置成Object</h2><p><img src="/2020/03/20/head-java-first/11.png" alt><br>对于Object来说定义出来只能是Object对象</p><p><img src="/2020/03/20/head-java-first/12.png" alt></p><p><img src="/2020/03/20/head-java-first/13.png" alt></p><p><img src="/2020/03/20/head-java-first/14.png" alt></p><h2 id="有些动物想要pets"><a href="#有些动物想要pets" class="headerlink" title="有些动物想要pets"></a>有些动物想要pets</h2><p><img src="/2020/03/20/head-java-first/15.png" alt></p><h2 id="接口类型作为多态-对象可以来自任何实现接口的子类"><a href="#接口类型作为多态-对象可以来自任何实现接口的子类" class="headerlink" title="接口类型作为多态 对象可以来自任何实现接口的子类"></a>接口类型作为多态 对象可以来自任何实现接口的子类</h2><h1 id="构造器和垃圾回收"><a href="#构造器和垃圾回收" class="headerlink" title="构造器和垃圾回收"></a>构造器和垃圾回收</h1><h2 id="只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造"><a href="#只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造" class="headerlink" title="只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造"></a>只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造</h2><h2 id="创建子类对象-也相当于创建出父类对象"><a href="#创建子类对象-也相当于创建出父类对象" class="headerlink" title="创建子类对象 也相当于创建出父类对象"></a>创建子类对象 也相当于创建出父类对象</h2><p> <img src="/2020/03/20/head-java-first/16.png" alt><br> <img src="/2020/03/20/head-java-first/17.png" alt></p><h2 id="如果自己没写-编译器会默认在子类构造函数最前面加上super-构造父类"><a href="#如果自己没写-编译器会默认在子类构造函数最前面加上super-构造父类" class="headerlink" title="如果自己没写 编译器会默认在子类构造函数最前面加上super() 构造父类;"></a>如果自己没写 编译器会默认在子类构造函数最前面加上super() 构造父类;</h2><h2 id="this（）-调用同一类另一个构造函数-和super-不可兼得"><a href="#this（）-调用同一类另一个构造函数-和super-不可兼得" class="headerlink" title="this（） 调用同一类另一个构造函数 和super()不可兼得"></a>this（） 调用同一类另一个构造函数 和super()不可兼得</h2><h1 id="gc回收-对象没被引用"><a href="#gc回收-对象没被引用" class="headerlink" title="gc回收 对象没被引用"></a>gc回收 对象没被引用</h1><h1 id="10-数字局全局"><a href="#10-数字局全局" class="headerlink" title="10 数字局全局"></a>10 数字局全局</h1><h2 id="Math-类-private构造-全是静态方法-不需要也不知道-实例变量值"><a href="#Math-类-private构造-全是静态方法-不需要也不知道-实例变量值" class="headerlink" title="Math 类 private构造 全是静态方法 不需要也不知道 实例变量值"></a>Math 类 private构造 全是静态方法 不需要也不知道 实例变量值</h2><h2 id="同一个类所有实例共享一个静态变量-无对象先初始化"><a href="#同一个类所有实例共享一个静态变量-无对象先初始化" class="headerlink" title="同一个类所有实例共享一个静态变量 无对象先初始化"></a>同一个类所有实例共享一个静态变量 无对象先初始化</h2><p> <img src="/2020/03/20/head-java-first/18.png" alt></p><h2 id="Static-final-是-常量-比如PI"><a href="#Static-final-是-常量-比如PI" class="headerlink" title="Static final 是 常量 比如PI"></a>Static final 是 常量 比如PI</h2><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p><img src="/2020/03/20/head-java-first/19.png" alt></p><h1 id="autobox"><a href="#autobox" class="headerlink" title="autobox"></a>autobox</h1><p><img src="/2020/03/20/head-java-first/20.png" alt><br><img src="/2020/03/20/head-java-first/21.png" alt></p><h2 id="String转Primitive"><a href="#String转Primitive" class="headerlink" title="String转Primitive"></a>String转Primitive</h2><p><img src="/2020/03/20/head-java-first/22.png" alt></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="如果有抛出异常-编译器一定要你处理-除了runtimeexp-一般是逻辑错误"><a href="#如果有抛出异常-编译器一定要你处理-除了runtimeexp-一般是逻辑错误" class="headerlink" title="如果有抛出异常 编译器一定要你处理 除了runtimeexp(一般是逻辑错误)"></a>如果有抛出异常 编译器一定要你处理 除了runtimeexp(一般是逻辑错误)</h2><p><img src="/2020/03/20/head-java-first/23.png" alt></p><h2 id="出现异常-try-直接到catch"><a href="#出现异常-try-直接到catch" class="headerlink" title="出现异常 try 直接到catch"></a>出现异常 try 直接到catch</h2><h2 id="finally-无论怎么样都执行"><a href="#finally-无论怎么样都执行" class="headerlink" title="finally 无论怎么样都执行"></a>finally 无论怎么样都执行</h2><p><img src="/2020/03/20/head-java-first/24.png" alt></p><h2 id="duck-给调用处理"><a href="#duck-给调用处理" class="headerlink" title="duck 给调用处理"></a>duck 给调用处理</h2><p><img src="/2020/03/20/head-java-first/25.png" alt></p><h1 id="Gui"><a href="#Gui" class="headerlink" title="Gui"></a>Gui</h1><h2 id="监听事件源"><a href="#监听事件源" class="headerlink" title="监听事件源"></a>监听事件源</h2><p><img src="/2020/03/20/head-java-first/26.png" alt></p><h2 id="同时监听两件事"><a href="#同时监听两件事" class="headerlink" title="同时监听两件事"></a>同时监听两件事</h2><p>方法1：在方法里查找是哪个事 （用单一的事件处理处理所有事件不太好）<br><img src="/2020/03/20/head-java-first/27.png" alt></p><p>方法2：创建不同的处理事件方法但是不能再一个类里面实现同一个方法两次<br>不同类的话又取不到GUI的对象<br><img src="/2020/03/20/head-java-first/28.png" alt></p><p>内部类解决这个问题<br><img src="/2020/03/20/head-java-first/29.png" alt></p><h1 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h1><h2 id="3种风格"><a href="#3种风格" class="headerlink" title="3种风格"></a>3种风格</h2><p><img src="/2020/03/20/head-java-first/30.png" alt></p><h1 id="序列化-文件输入输出"><a href="#序列化-文件输入输出" class="headerlink" title="序列化 文件输入输出"></a>序列化 文件输入输出</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>步骤<br><img src="/2020/03/20/head-java-first/31.png" alt></p><p>图示<br><img src="/2020/03/20/head-java-first/32.png" alt></p><p>需要被实例化的类 ,需要implements Serializeble(但是不需要实现什么方法)<br>包括里面的要保存的对象.也需要<br><img src="/2020/03/20/head-java-first/33.png" alt></p><p>不能或者 不需要序列化对象 用transient<br><img src="/2020/03/20/head-java-first/34.png" alt></p><h2 id="解序列化"><a href="#解序列化" class="headerlink" title="解序列化"></a>解序列化</h2><p>readObject 读到的对象 需要类型转化<br><img src="/2020/03/20/head-java-first/35.png" alt><br><img src="/2020/03/20/head-java-first/36.png" alt></p><h2 id="写文本"><a href="#写文本" class="headerlink" title="写文本"></a>写文本</h2><p>缓存效率高</p><p><img src="/2020/03/20/head-java-first/36.png" alt><br><img src="/2020/03/20/head-java-first/37.png" alt></p><h2 id="问题-万一序列化之后修改类-怎么办"><a href="#问题-万一序列化之后修改类-怎么办" class="headerlink" title="问题 万一序列化之后修改类 怎么办"></a>问题 万一序列化之后修改类 怎么办</h2><p>versionid 控制<br><img src="/2020/03/20/head-java-first/38.png" alt></p><h1 id="网络和线程"><a href="#网络和线程" class="headerlink" title="网络和线程"></a>网络和线程</h1><p>1-1023<br>1024-65535</p><h2 id="基本读图"><a href="#基本读图" class="headerlink" title="基本读图"></a>基本读图</h2><p><img src="/2020/03/20/head-java-first/40.png" alt><br><img src="/2020/03/20/head-java-first/39.png" alt></p><h2 id="基本写图"><a href="#基本写图" class="headerlink" title="基本写图"></a>基本写图</h2><p>因为是写字符串 用PrintWriter<br>上一章 是BufferWriter<br><img src="/2020/03/20/head-java-first/41.png" alt></p><p><img src="/2020/03/20/head-java-first/42.png" alt></p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="同步化对象"><a href="#同步化对象" class="headerlink" title="同步化对象"></a>同步化对象</h3><p><img src="/2020/03/20/head-java-first/43.png" alt></p><h3 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h3><p><img src="/2020/03/20/head-java-first/44.png" alt></p><h1 id="集合与泛型"><a href="#集合与泛型" class="headerlink" title="集合与泛型"></a>集合与泛型</h1><h2 id="点歌系统排序-ArrayList-没有sort"><a href="#点歌系统排序-ArrayList-没有sort" class="headerlink" title="点歌系统排序 ArrayList 没有sort"></a>点歌系统排序 ArrayList 没有sort</h2><p>还有其他集合<br><img src="/2020/03/20/head-java-first/45.png" alt></p><p>用Collection.sort() 可以排序ArratList</p><h2 id="Obeject-有toString-方法-可以自己覆盖想要printf-就自己覆盖"><a href="#Obeject-有toString-方法-可以自己覆盖想要printf-就自己覆盖" class="headerlink" title="Obeject 有toString() 方法 可以自己覆盖想要printf 就自己覆盖"></a>Obeject 有toString() 方法 可以自己覆盖想要printf 就自己覆盖</h2><h2 id="想要-sort-SONG-4个String属性"><a href="#想要-sort-SONG-4个String属性" class="headerlink" title="想要 sort SONG(4个String属性)"></a>想要 sort SONG(4个String属性)</h2><p>出错 处理不了 Song的list</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p><img src="/2020/03/20/head-java-first/46.png" alt></p><p>String 只实现了 Comparable 并没有继承<br>但是对于泛型来说 extend 代表extend 或者Implement<br><img src="/2020/03/20/head-java-first/47.png" alt></p><p>但是对于泛型来说 extend 代表extend 或者Implement<br><img src="/2020/03/20/head-java-first/48.png" alt></p><h2 id="Song-排序实现"><a href="#Song-排序实现" class="headerlink" title="Song 排序实现"></a>Song 排序实现</h2><p>利用其中一个属性排序<br><img src="/2020/03/20/head-java-first/49.png" alt></p><h2 id="还想要通过歌星排序"><a href="#还想要通过歌星排序" class="headerlink" title="还想要通过歌星排序"></a>还想要通过歌星排序</h2><p>查API 还有重载的Sort 版本<br><img src="/2020/03/20/head-java-first/50.png" alt></p><p><img src="/2020/03/20/head-java-first/51.png" alt></p><p>内部类实现<br><img src="/2020/03/20/head-java-first/52.png" alt></p><h2 id="如果有重复的歌名"><a href="#如果有重复的歌名" class="headerlink" title="如果有重复的歌名"></a>如果有重复的歌名</h2><p>Collections是collection的帮助类 静态方法<br>三种Collection(虽然包不在Collection里面)</p><p><img src="/2020/03/20/head-java-first/53.png" alt></p><p>继承和实现 Collections </p><p><img src="/2020/03/20/head-java-first/54.png" alt><br><img src="/2020/03/20/head-java-first/55.png" alt></p><h2 id="Set-之中怎么算两元素相等"><a href="#Set-之中怎么算两元素相等" class="headerlink" title="Set 之中怎么算两元素相等"></a>Set 之中怎么算两元素相等</h2><p>两种相等 引用相等  hashCode 没覆盖就是根据对象内存地址算</p><p>hashSet 中加入元素时先计算hashCode 不相等就加入 相等在计算euqals</p><p>同样利用hashcode 存取元素<br><img src="/2020/03/20/head-java-first/56.png" alt><br>String 的hashCode 覆盖过 值相等 hashCode会相等</p><h2 id="equals-hashCode-规定"><a href="#equals-hashCode-规定" class="headerlink" title="equals hashCode 规定"></a>equals hashCode 规定</h2><p>两对象equals hashCode 一定相等 反之不一定</p><h2 id="TreeSet-加入元素会默认通过compareTo-排序-或者comparator"><a href="#TreeSet-加入元素会默认通过compareTo-排序-或者comparator" class="headerlink" title="TreeSet 加入元素会默认通过compareTo()排序 或者comparator"></a>TreeSet 加入元素会默认通过compareTo()排序 或者comparator</h2><h2 id="对于Arraylist参数-不能用Arraylist代替-和数组的安全检查时间不一样"><a href="#对于Arraylist参数-不能用Arraylist代替-和数组的安全检查时间不一样" class="headerlink" title="对于Arraylist参数 不能用Arraylist代替 和数组的安全检查时间不一样"></a>对于Arraylist<animals>参数 不能用Arraylist<dogs>代替 和数组的安全检查时间不一样</dogs></animals></h2><p>理由如下<br><img src="/2020/03/20/head-java-first/57.png" alt><br>数组是运行错误<br><img src="/2020/03/20/head-java-first/58.png" alt></p><h2 id="用万用字符（一种泛型）-会阻止破坏集合的操作"><a href="#用万用字符（一种泛型）-会阻止破坏集合的操作" class="headerlink" title="用万用字符（一种泛型） 会阻止破坏集合的操作"></a>用万用字符（一种泛型） 会阻止破坏集合的操作</h2><p><img src="/2020/03/20/head-java-first/59.png" alt><br><img src="/2020/03/20/head-java-first/60.png" alt></p><h1 id="发布程序"><a href="#发布程序" class="headerlink" title="发布程序"></a>发布程序</h1><h2 id="几种方式"><a href="#几种方式" class="headerlink" title="几种方式"></a>几种方式</h2><p><img src="/2020/03/20/head-java-first/62.png" alt></p><h2 id="JAR-一组类文件包装起来"><a href="#JAR-一组类文件包装起来" class="headerlink" title="JAR 一组类文件包装起来"></a>JAR 一组类文件包装起来</h2><h3 id="执行JAR-java虚拟机能从JAR中找到main"><a href="#执行JAR-java虚拟机能从JAR中找到main" class="headerlink" title="执行JAR java虚拟机能从JAR中找到main"></a>执行JAR java虚拟机能从JAR中找到main</h3><p><img src="/2020/03/20/head-java-first/61.png" alt></p><h3 id="包防止类冲突-编译执行"><a href="#包防止类冲突-编译执行" class="headerlink" title="包防止类冲突 编译执行"></a>包防止类冲突 编译执行</h3><p><img src="/2020/03/20/head-java-first/64.png" alt></p><h2 id="JAVA-web-Start"><a href="#JAVA-web-Start" class="headerlink" title="JAVA web Start"></a>JAVA web Start</h2><p><img src="/2020/03/20/head-java-first/65.png" alt></p><h1 id="RMI-Remote-Method-Innovacation-远程程序"><a href="#RMI-Remote-Method-Innovacation-远程程序" class="headerlink" title="RMI (Remote Method Innovacation) 远程程序"></a>RMI (Remote Method Innovacation) 远程程序</h1><p>目的想要取得其他电脑java虚拟机的对象<br><img src="/2020/03/20/head-java-first/66.png" alt></p><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><p>请求步骤<br><img src="/2020/03/20/head-java-first/67.png" alt><br>编写步骤<br><img src="/2020/03/20/head-java-first/68.png" alt></p><h2 id="JINI-找接口"><a href="#JINI-找接口" class="headerlink" title="JINI  找接口"></a>JINI  找接口</h2><p>自适应探索<br>自恢复网络</p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="String-的不变性-包装类的不变性"><a href="#String-的不变性-包装类的不变性" class="headerlink" title="String 的不变性 包装类的不变性"></a>String 的不变性 包装类的不变性</h2><p><img src="/2020/03/20/head-java-first/69.png" alt></p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h2 id="静态嵌套类"><a href="#静态嵌套类" class="headerlink" title="静态嵌套类"></a>静态嵌套类</h2><p><img src="/2020/03/20/head-java-first/70.png" alt></p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p><img src="/2020/03/20/head-java-first/71.png" alt></p><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p><img src="/2020/03/20/head-java-first/72.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> head java first </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Base-day2</title>
      <link href="/2020/03/16/Java-Base-day2/"/>
      <url>/2020/03/16/Java-Base-day2/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-JDK-和-JRE-最详细通俗的解答"><a href="#JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="JVM JDK 和 JRE 最详细通俗的解答"></a>JVM JDK 和 JRE 最详细通俗的解答</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><h3 id="什么是字节码-采用字节码的好处是什么"><a href="#什么是字节码-采用字节码的好处是什么" class="headerlink" title="什么是字节码?采用字节码的好处是什么?"></a>什么是字节码?采用字节码的好处是什么?</h3><blockquote><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><img src="/2020/03/16/Java-Base-day2/1.png" alt><br>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><h2 id="JDK-JRE"><a href="#JDK-JRE" class="headerlink" title="JDK JRE"></a>JDK JRE</h2><p>JDK 是 Java Development Kit，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。<br>JRE 是 Java 运行时环境。</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><h1 id="String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h1><p>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，private final char value[]，所以 String 对象是不可变的。</p><blockquote><p>补充（来自issue 675）：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 private final byte[] value;</p></blockquote><p>而 StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">AbstractStringBuilder.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span>[] value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The count is the number of characters used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    AbstractStringBuilder(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line">        value = <span class="keyword">new</span> <span class="keyword">char</span>[capacity];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p>对于三者使用的总结：</p><ul><li>操作少量的数据: 适用 String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li></ul><h1 id="在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>在 Java 中定义一个不做事且没有参数的构造方法的作用</h1><p>Java 程序在执行子类的构造方法之前，如果没有用 super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super()来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p><h1 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h1><ul><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li><li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li><li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。<br>备注：</li></ul><blockquote><p>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/146。" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/issues/146。</a><br>jdk9 的接口被允许定义私有方法 。</p></blockquote><p>总结一下 jdk7~jdk9 Java 中接口概念的变化（相关阅读）：</p><ul><li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li><li>jdk8 的时候接口可以有默认方法和静态方法功能。</li><li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li></ul><h1 id="静态方法和实例方法有何不同"><a href="#静态方法和实例方法有何不同" class="headerlink" title="静态方法和实例方法有何不同"></a>静态方法和实例方法有何不同</h1><ul><li><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p></li><li><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p></li></ul><h1 id="在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"><a href="#在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是" class="headerlink" title="在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?"></a>在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?</h1><p>帮助子类做初始化工作。</p><h1 id="与-equals-重要"><a href="#与-equals-重要" class="headerlink" title="== 与 equals(重要)"></a>== 与 equals(重要)</h1><p>== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p>equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p>说明：</p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h1 id="线程基本状态"><a href="#线程基本状态" class="headerlink" title="线程基本状态"></a>线程基本状态</h1><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。<br><img src="/2020/03/16/Java-Base-day2/2.png" alt><br>状态机<br><img src="/2020/03/16/Java-Base-day2/3.png" alt><br>由上图可以看出：</p><p>线程创建之后它将处于 NEW（新建） 状态，调用 start() 方法后开始运行，线程这时候处于 READY（可运行） 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 RUNNING（运行） 状态。</p><blockquote><p>操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：HowToDoInJava：Java Thread Life Cycle and Thread States），所以 Java 系统一般将这两个状态统称为 RUNNABLE（运行中） 状态 。</p></blockquote><h1 id="关于-final-关键字的一些总结"><a href="#关于-final-关键字的一些总结" class="headerlink" title="关于 final 关键字的一些总结"></a>关于 final 关键字的一些总结</h1><p>final 关键字主要用在三个地方：变量、方法、类。</p><ul><li>对于一个 final 变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li><li>当用 final 修饰一个类时，表明这个类不能被继承。final 类中的所有成员方法都会被隐式地指定为 final 方法。</li><li>使用 final 方法的原因有两个。第一个原因是把方法锁定，以防任何继承*类修改它的含义；第二个原因是效率。在早期的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java 版本已经不需要使用 final 方法进行这些优化了）。类中所有的 private 方法都隐式地指定为 final。</li></ul><h1 id="Java-中的异常处理"><a href="#Java-中的异常处理" class="headerlink" title="Java 中的异常处理"></a>Java 中的异常处理</h1><h2 id="Java-异常类层次结构图"><a href="#Java-异常类层次结构图" class="headerlink" title="Java 异常类层次结构图"></a>Java 异常类层次结构图</h2><p><img src="/2020/03/16/Java-Base-day2/4.png" alt></p><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable： 有两个重要的子类：Exception（异常） 和 Error（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><p><strong>Error（错误）:是程序无法处理的错误</strong></p><p><strong>Exception（异常）:是程序本身可以处理的异常。</strong><br>Exception 类有一个重要的子类 RuntimeException。RuntimeException 异常由 Java 虚拟机抛出。NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）、ArithmeticException（算术运算异常，一个整数除以 0 时，抛出该异常）和 ArrayIndexOutOfBoundsException （下标越界异常）。</p><h2 id="Throwable-类常用方法"><a href="#Throwable-类常用方法" class="headerlink" title="Throwable 类常用方法"></a>Throwable 类常用方法</h2><ul><li>public string getMessage():返回异常发生时的简要描述</li><li>public string toString():返回异常发生时的详细信息</li><li>public string getLocalizedMessage():返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage（）返回的结果相同</li><li>public void printStackTrace():在控制台上打印 Throwable 对象封装的异常信息</li></ul><h2 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h2><ul><li>try 块： 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。</li><li>catch 块： 用于处理 try 捕获到的异常。</li><li>finally 块： 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。</li></ul><p><strong>注意：</strong> 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value * value;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">如果调用 f(<span class="number">2</span>)，返回值将是 <span class="number">0</span>，因为 <span class="keyword">finally</span> 语句的返回值覆盖了 <span class="keyword">try</span> 语句块的返回值。</span><br></pre></td></tr></table></figure><h1 id="Java-序列化中如果有些字段不想进行序列化，怎么办？"><a href="#Java-序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="Java 序列化中如果有些字段不想进行序列化，怎么办？"></a>Java 序列化中如果有些字段不想进行序列化，怎么办？</h1><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p><p>transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。</p><h1 id="获取用键盘输入常用的两种方法"><a href="#获取用键盘输入常用的两种方法" class="headerlink" title="获取用键盘输入常用的两种方法"></a>获取用键盘输入常用的两种方法</h1><p>方法 1：通过 Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s  = input.nextLine();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>方法 2：通过 BufferedReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String s = input.readLine();</span><br></pre></td></tr></table></figure><h1 id="Java-中-IO-流"><a href="#Java-中-IO-流" class="headerlink" title="Java 中 IO 流"></a>Java 中 IO 流</h1><h2 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h2><ul><li><p>按照流的流向分，可以分为输入流和输出流；</p></li><li><p>按照操作单元划分，可以划分为字节流和字符流；</p></li><li><p>按照流的角色划分为节点流和处理流。<br>Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p></li><li><p>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</p></li><li><p>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</p></li><li><p><em>按操作方式分类结构图：*</em><br><img src="/2020/03/16/Java-Base-day2/5.png" alt></p></li><li><p><em>按操作对象分类结构图：*</em><br><img src="/2020/03/16/Java-Base-day2/6.png" alt></p></li></ul><h2 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h2><p>问题本质想问：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h2 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h2><p><strong>BIO (Blocking I/O)</strong>: 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。<br><strong>NIO (New I/O)</strong>: NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发<br><strong>AIO (Asynchronous I/O)</strong>: AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</p><h1 id="常见关键字总结-static-final-this-super"><a href="#常见关键字总结-static-final-this-super" class="headerlink" title="常见关键字总结:static,final,this,super"></a>常见关键字总结:static,final,this,super</h1><p>详见这篇文章: <a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super" target="_blank" rel="noopener">https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super</a></p><h1 id="Collections-工具类和-Arrays-工具类常见方法总结"><a href="#Collections-工具类和-Arrays-工具类常见方法总结" class="headerlink" title="Collections 工具类和 Arrays 工具类常见方法总结"></a>Collections 工具类和 Arrays 工具类常见方法总结</h1><p>详见的这篇文章: <a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md" target="_blank" rel="noopener">https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md</a></p><h1 id="深拷贝-vs-浅拷贝"><a href="#深拷贝-vs-浅拷贝" class="headerlink" title="深拷贝 vs 浅拷贝"></a>深拷贝 vs 浅拷贝</h1><ul><li>浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</li><li>深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。<br><img src="/2020/03/16/Java-Base-day2/7.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BASE </category>
          
          <category> day2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch06-应用层</title>
      <link href="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS-domain-name-system"><a href="#DNS-domain-name-system" class="headerlink" title="DNS domain name system"></a>DNS domain name system</h1><p>域名到IP<br>多级域名<br><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/1.png" alt></p><p>分级解析 找根 后再分配<br>直接ping域名 ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>nslookup <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 查ip</p><h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/2.png" alt></p><p>13套根<br>非授权域名 只能出去找<br><a href="http://www.xxxx.xx" target="_blank" rel="noopener">www.xxxx.xx</a>  www是主机<br>ftp.xxx.xxx ftp 是主机</p><h2 id="安装自己的DNS服务器好处"><a href="#安装自己的DNS服务器好处" class="headerlink" title="安装自己的DNS服务器好处"></a>安装自己的DNS服务器好处</h2><p>配置自己的DNS windows service</p><ul><li>解析内网域名  降低到Internet 域名解析</li><li>域环境</li></ul><h1 id="FTP-file-transfer-protocol"><a href="#FTP-file-transfer-protocol" class="headerlink" title="FTP file transfer protocol"></a>FTP file transfer protocol</h1><p>屏蔽系统传输<br><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/3.png" alt></p><h2 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h2><ul><li><p>主动模式<br>ftp客户端 告诉服务器使用说明端口侦听 主动连 客户端  （开防火墙）<br>服务器端口<br>21 控制<br>20 数据传输</p></li><li><p>被动模式<br>ftp服务器就和端口建立连接<br>服务器被动打开一个 等待<br>服务器端口<br>21 控制<br>xxxx 数据传输</p></li></ul><h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h2><p>远程修改文件</p><h1 id="talnet-远程终端"><a href="#talnet-远程终端" class="headerlink" title="talnet 远程终端"></a>talnet 远程终端</h1><p>23端口<br>net user administrator al! 更改用户密码<br>net user han al! /add 添加用户<br>加端口 变成端口扫描</p><h1 id="www-万维网"><a href="#www-万维网" class="headerlink" title="www 万维网"></a>www 万维网</h1><p>一个站点访问另一个站点<br><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/4.png" alt></p><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>他是客户服务器<br>浏览器就是客户程序</p><h2 id="需求问题"><a href="#需求问题" class="headerlink" title="需求问题"></a>需求问题</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>标识独一资源<br><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/5.png" alt></p><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><p>客户机和服务器使用http协议通信</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>实现到各个地方 </p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><h2 id="搭建HTTP服务"><a href="#搭建HTTP服务" class="headerlink" title="搭建HTTP服务"></a>搭建HTTP服务</h2><p>服务器有 不同网站采取方式</p><ul><li>可以用不同端口  </li><li>服务器多加地址 保存默认都是80</li><li>只有一个公网地址  使用不同主机头只能用域名访问 </li></ul><h2 id="proxy-server-代理服务器"><a href="#proxy-server-代理服务器" class="headerlink" title="proxy server (代理服务器)"></a>proxy server (代理服务器)</h2><p><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/6.png" alt></p><h3 id="使用web-代理服务器访问网站"><a href="#使用web-代理服务器访问网站" class="headerlink" title="使用web 代理服务器访问网站"></a>使用web 代理服务器访问网站</h3><ol><li>节省内网访问internet带宽 （甚至不用网关）（静态）</li><li>利用web服务器翻墙</li><li>使用web 服务器代理 而 不让人知道 谁发的帖子（所以要实名）</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>跟踪用户活动传递用户状态</p><h1 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h1><p>发送邮件的协议：SMTP<br>读取邮件的协议：POP3 和 IMAP</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>中继过程要，要邮局转发<br>过程，域里面一个邮箱写一份信，给服务器，服务器查DNS ，放到另一个服务器里，然后另一个服务器域里的邮箱在去收下来<br><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/7.png" alt></p><p>在服务器pop3、IMAP服务（收） STMP（发）上创建邮箱</p><h2 id="邮箱格式"><a href="#邮箱格式" class="headerlink" title="邮箱格式"></a>邮箱格式</h2><p><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/8.png" alt><br>域下面加邮箱</p><h1 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h1><h2 id="获取ip过程"><a href="#获取ip过程" class="headerlink" title="获取ip过程"></a>获取ip过程</h2><p>向dhcp服务器广播，同网段所有计算机都能收到，但是DHCP服务器回应<br>先在数据库查是不是配过，没有得话在ip池分配</p><h2 id="跨网段"><a href="#跨网段" class="headerlink" title="跨网段"></a>跨网段</h2><p>并不是每个网段都有DHCP服务器，但至少有一个代理<br><img src="/2020/03/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach06-%E5%BA%94%E7%94%A8%E5%B1%82/9.png" alt><br>服务器静态ip<br>本网段 广播就直接得到不用经过路由了<br>在路由上加ip helper address （只需要在接着主机的地址配就行，然后收到网关，就会去找DHCP，跨网段 DHCP</p><h1 id="RDP远程桌面"><a href="#RDP远程桌面" class="headerlink" title="RDP远程桌面"></a>RDP远程桌面</h1><p>linux winserver多用户同时访问操作系统<br>xpwin7win8win10单用户<br>不想用管理员 可以用远程桌面组<br>还可以映射硬盘过去连远程</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch05-传输层</title>
      <link href="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
      <url>/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-概述">1. 概述</a><ul><li><a href="#11-软件端口">1.1. 软件端口</a></li><li><a href="#12-传输层和应用层关系">1.2. 传输层和应用层关系</a></li><li><a href="#13-应用层协议和服务之前的关系">1.3. 应用层协议和服务之前的关系</a></li><li><a href="#14-防火墙与木马原理">1.4. 防火墙与木马原理</a></li></ul></li><li><a href="#2-用户数据报协议-udpuser-datagram-protocol">2. 用户数据报协议 UDP(User Datagram Protocol)</a></li><li><a href="#3-传输控制协议-tcptransmission-control-protocol">3. 传输控制协议 TCP(Transmission Control Protocol)</a><ul><li><a href="#31-可靠传输">3.1. 可靠传输</a><ul><li><a href="#311-停止等待">3.1.1. 停止等待</a></li><li><a href="#312-连续arp">3.1.2. 连续ARP</a></li><li><a href="#313-窗口">3.1.3. 窗口</a></li><li><a href="#314-超时重传时间">3.1.4. 超时重传时间</a></li></ul></li><li><a href="#32-报文段首部">3.2. 报文段首部</a></li><li><a href="#33-流量控制">3.3. 流量控制</a></li><li><a href="#34-拥塞控制">3.4. 拥塞控制</a><ul><li><a href="#341-与流量控制关系">3.4.1. 与流量控制关系</a></li><li><a href="#342-慢开始">3.4.2. 慢开始</a></li></ul></li><li><a href="#35-三次握手">3.5. 三次握手</a><ul><li><a href="#351-建立连接后状态">3.5.1. 建立连接后状态</a><ul><li><a href="#3511-需要wait2ms原因">3.5.1.1. 需要wait2ms原因</a></li></ul></li><li><a href="#352-状态机">3.5.2. 状态机</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>边缘的主机才有协议栈，路由器只用下三层<br><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/1.png" alt></p><h2 id="1-1-软件端口"><a href="#1-1-软件端口" class="headerlink" title="1.1. 软件端口"></a>1.1. 软件端口</h2><ul><li>熟知端口，数值一般为 0~1023。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。 </li></ul><h2 id="1-2-传输层和应用层关系"><a href="#1-2-传输层和应用层关系" class="headerlink" title="1.2. 传输层和应用层关系"></a>1.2. 传输层和应用层关系</h2><p>http = TCP +80<br>https =TCP +443<br>ftp = TCP+21<br>SMTP=TCP+25<br>POP3=TCP+110<br>RDP=TCP+3389<br>共享文件夹 = TCP+445<br>SQL=CTP+1433<br>DNS =UDP +53 or TCP +53</p><h2 id="1-3-应用层协议和服务之前的关系"><a href="#1-3-应用层协议和服务之前的关系" class="headerlink" title="1.3. 应用层协议和服务之前的关系"></a>1.3. 应用层协议和服务之前的关系</h2><p>通过端口监听<br>可以更改服务端口<br>也可以只开哪些口<br>mstsc 远程桌面</p><h2 id="1-4-防火墙与木马原理"><a href="#1-4-防火墙与木马原理" class="headerlink" title="1.4. 防火墙与木马原理"></a>1.4. 防火墙与木马原理</h2><p>是把端口关闭  ping都ping 不通<br>可以ping别人 ，<strong>拦截进来的</strong> ，不拦截出去的<br>防火墙防不了木马 <strong>木马是连远程服务（出去的）</strong><br>从本地安全连接可以控制出入</p><h1 id="2-用户数据报协议-UDP-User-Datagram-Protocol"><a href="#2-用户数据报协议-UDP-User-Datagram-Protocol" class="headerlink" title="2. 用户数据报协议 UDP(User Datagram Protocol)"></a>2. 用户数据报协议 UDP(User Datagram Protocol)</h1><p>首部<br><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/7.png" alt><br>传输的UDP报文或用户数据报（与网络层的ip数据报有区别)<br>特点：</p><ul><li>不可靠逻辑信道 尽可能交付</li><li>不连接 不确认</li><li>无拥塞控制  适合多媒体</li><li>支持一对一、一对多、多对一和多对多的交互通信。<br><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/2.png" alt></li><li>一次发一个报文不管多大 需要应用程序控制发多大<h1 id="3-传输控制协议-TCP-Transmission-Control-Protocol"><a href="#3-传输控制协议-TCP-Transmission-Control-Protocol" class="headerlink" title="3. 传输控制协议 TCP(Transmission Control Protocol)"></a>3. 传输控制协议 TCP(Transmission Control Protocol)</h1></li></ul><p>特点：</p><ul><li>可靠全双工逻辑信道</li><li>传输的TCP报文段（segment）</li><li>分段 编号 流量控制 建立会话 netstat -n 可靠</li><li>只能一对一</li></ul><h2 id="3-1-可靠传输"><a href="#3-1-可靠传输" class="headerlink" title="3.1. 可靠传输"></a>3.1. 可靠传输</h2><h3 id="3-1-1-停止等待"><a href="#3-1-1-停止等待" class="headerlink" title="3.1.1. 停止等待"></a>3.1.1. 停止等待</h3><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/3.png" alt><br><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/4.png" alt><br>普通ARP（Automatic Repeat reQuest)信道利用率太低了</p><h3 id="3-1-2-连续ARP"><a href="#3-1-2-连续ARP" class="headerlink" title="3.1.2. 连续ARP"></a>3.1.2. 连续ARP</h3><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/5.png" alt><br><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/6.png" alt><br>累计确认不把每个字节确认 确认一堆 </p><h3 id="3-1-3-窗口"><a href="#3-1-3-窗口" class="headerlink" title="3.1.3. 窗口"></a>3.1.3. 窗口</h3><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/9.png" alt><br><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/10.png" alt></p><h3 id="3-1-4-超时重传时间"><a href="#3-1-4-超时重传时间" class="headerlink" title="3.1.4. 超时重传时间"></a>3.1.4. 超时重传时间</h3><p>complex<br>特点：</p><ul><li>TCP 连接的每一端都必须设有两个窗口——一个发送窗口和一个接收窗口。</li><li>TCP 的可靠传输机制用字节的序号进行控制。TCP 所有的确认都是基于序号而不是基于报文段。</li><li>TCP 两端的四个窗口经常处于动态变化之中。</li><li>TCP连接的往返时间 RTT 也不是固定不变的。需要使用特定的算法估算较为合理的重传时间。  </li></ul><h2 id="3-2-报文段首部"><a href="#3-2-报文段首部" class="headerlink" title="3.2. 报文段首部"></a>3.2. 报文段首部</h2><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/8.png" alt></p><ul><li>序号： 发送的第一个字节序号</li><li>确认号：期望收到对方的下一个报文段数据的第一个字节号</li><li>偏移：指出真正的TCP报文段在哪</li><li>URG：紧急数据 优先传输</li><li><strong>ACK</strong>：=1 确认号才有用</li><li>PSH：收到 PSH = 1 的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。  </li><li>RST (ReSeT) —— 当 RST=1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。 </li><li><strong>SYN</strong>：同步</li><li><strong>FIN</strong>：用来释放一个连接。FIN = 1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。 </li><li>发送窗口：让对方设置发送窗口的依据 （最大65535)</li></ul><h2 id="3-3-流量控制"><a href="#3-3-流量控制" class="headerlink" title="3.3. 流量控制"></a>3.3. 流量控制</h2><p>利用窗口<br><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/11.png" alt></p><h2 id="3-4-拥塞控制"><a href="#3-4-拥塞控制" class="headerlink" title="3.4. 拥塞控制"></a>3.4. 拥塞控制</h2><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/12.png" alt></p><h3 id="3-4-1-与流量控制关系"><a href="#3-4-1-与流量控制关系" class="headerlink" title="3.4.1. 与流量控制关系"></a>3.4.1. 与流量控制关系</h3><ul><li>拥塞控制就是网络能够承受现有的网络负荷。<br>拥塞控制是一个全局性的过程，涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。 </li><li>流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制。 流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。 </li></ul><h3 id="3-4-2-慢开始"><a href="#3-4-2-慢开始" class="headerlink" title="3.4.2. 慢开始"></a>3.4.2. 慢开始</h3><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/13.png" alt></p><h2 id="3-5-三次握手"><a href="#3-5-三次握手" class="headerlink" title="3.5. 三次握手"></a>3.5. 三次握手</h2><p><strong>为什么要三次 两次不就 回来了吗</strong></p><blockquote><p>要是两次的话 服务器发过去的那个丢了 服务器会认为以及建立了<br>客户端认为还没回 然后就不发 这就卡着了<br>三次 的话 服务器看到没回 就接着发建立 </p></blockquote><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/14.png" alt></p><h3 id="3-5-1-建立连接后状态"><a href="#3-5-1-建立连接后状态" class="headerlink" title="3.5.1. 建立连接后状态"></a>3.5.1. 建立连接后状态</h3><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/15.png" alt></p><h4 id="3-5-1-1-需要wait2ms原因"><a href="#3-5-1-1-需要wait2ms原因" class="headerlink" title="3.5.1.1. 需要wait2ms原因"></a>3.5.1.1. 需要wait2ms原因</h4><p>第一，为了保证 A 发送的最后一个 ACK 报文段能够到达 B。<br>第二，防止 “已失效的连接请求报文段”出现在本连接中。A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段，都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p><h3 id="3-5-2-状态机"><a href="#3-5-2-状态机" class="headerlink" title="3.5.2. 状态机"></a>3.5.2. 状态机</h3><p><img src="/2020/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach05-%E4%BC%A0%E8%BE%93%E5%B1%82/16.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch04-网络层</title>
      <link href="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-两种服务">1. 两种服务</a><ul><li><a href="#11-虚电路面向连接">1.1. 虚电路(面向连接)</a></li><li><a href="#12-数据报因特网-不需可靠">1.2. 数据报(因特网 不需可靠)</a></li><li><a href="#13-对比">1.3. 对比</a></li></ul></li><li><a href="#2-ip协议组">2. IP协议组</a></li><li><a href="#3-ip地址">3. IP地址</a><ul><li><a href="#31-arp-协议-adresss-resolution-protocol">3.1. ARP 协议 （Adresss resolution protocol)</a></li><li><a href="#32-数据报">3.2. 数据报</a></li><li><a href="#33-根据所在路由转发">3.3. 根据所在路由转发</a><ul><li><a href="#331-特定主机路由">3.3.1. 特定主机路由</a></li><li><a href="#332-默认路由">3.3.2. 默认路由</a></li></ul></li></ul></li><li><a href="#4-划分子网">4. 划分子网</a><ul><li><a href="#41-子网掩码">4.1. 子网掩码</a><ul><li><a href="#411-查找例子">4.1.1. 查找例子</a></li></ul></li><li><a href="#42-回到二级网络-只看子网">4.2. 回到二级网络 （只看子网）</a></li><li><a href="#43-二叉查找">4.3. 二叉查找</a></li></ul></li><li><a href="#5-icmpinternet-control-message-protocol">5. ICMP（Internet Control Message Protocol）</a></li><li><a href="#6-路由网关选择协议">6. 路由（网关）选择协议</a><ul><li><a href="#61-内部网关协议-igp-interior-gateway-protocol">6.1. 内部网关协议 IGP (Interior Gateway Protocol)</a><ul><li><a href="#611-riprouting-information-protocol规模小">6.1.1. RIP（Routing Information Protocol）（规模小）</a></li><li><a href="#612-ospf-open-shortest-path-first大规模">6.1.2. OSPF (Open Shortest Path First)（大规模）</a></li></ul></li><li><a href="#62-外部网关协议egp-external-gateway-protocol">6.2. 外部网关协议EGP (External Gateway Protocol)</a><ul><li><a href="#621-bgp">6.2.1. BGP</a></li></ul></li></ul></li><li><a href="#7-ip多播">7. IP多播</a><ul><li><a href="#71-igmp-internet-group-management-protocol">7.1. IGMP (Internet Group Management Protocol)</a></li><li><a href="#72-rpb">7.2. RPB</a></li></ul></li><li><a href="#8-vpn-virtual-private-network">8. VPN （virtual private network）</a><ul><li><a href="#81-本地地址">8.1. 本地地址</a></li><li><a href="#82-全球地址">8.2. 全球地址</a></li><li><a href="#83-全程接入vpn">8.3. 全程接入VPN</a></li><li><a href="#84-nat-network-address-translation">8.4. NAT （network Address translation）</a><ul><li><a href="#841-静态nat">8.4.1. 静态NAT</a></li><li><a href="#842-动态nat">8.4.2. 动态NAT</a></li></ul></li><li><a href="#85-pat-port-address-translation">8.5. PAT （Port Address Translation）</a></li></ul></li></ul><!-- /TOC --><h1 id="1-两种服务"><a href="#1-两种服务" class="headerlink" title="1. 两种服务"></a>1. 两种服务</h1><h2 id="1-1-虚电路-面向连接"><a href="#1-1-虚电路-面向连接" class="headerlink" title="1.1. 虚电路(面向连接)"></a>1.1. 虚电路(面向连接)</h2><p><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/1.png" alt></p><h2 id="1-2-数据报-因特网-不需可靠"><a href="#1-2-数据报-因特网-不需可靠" class="headerlink" title="1.2. 数据报(因特网 不需可靠)"></a>1.2. 数据报(因特网 不需可靠)</h2><p><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/2.png" alt></p><h2 id="1-3-对比"><a href="#1-3-对比" class="headerlink" title="1.3. 对比"></a>1.3. 对比</h2><p><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/3.png" alt></p><h1 id="2-IP协议组"><a href="#2-IP协议组" class="headerlink" title="2. IP协议组"></a>2. IP协议组</h1><p><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/4.png" alt></p><h1 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3. IP地址"></a>3. IP地址</h1><ul><li>A类：0-127.x.x.x 8位netid</li><li>B类：128-191.x.x.x 16位netid</li><li>C类：192-223.x.x.x 24位netid</li><li>D类：224-239.x.x.x 多播地址</li><li>E类：240.x.x.x 之后使用<br>一个netid 同一个局域网<br>一个路由 多个接口 每个接口就是一个地址<h2 id="3-1-ARP-协议-（Adresss-resolution-protocol"><a href="#3-1-ARP-协议-（Adresss-resolution-protocol" class="headerlink" title="3.1. ARP 协议 （Adresss resolution protocol)"></a>3.1. ARP 协议 （Adresss resolution protocol)</h2><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/5.png" alt><h2 id="3-2-数据报"><a href="#3-2-数据报" class="headerlink" title="3.2. 数据报"></a>3.2. 数据报</h2><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/6.png" alt><br>TTL生存时间 经过一个路由减一<ul><li>unix TTL默认值256</li><li>win TTL 128</li><li>linux 64<h2 id="3-3-根据所在路由转发"><a href="#3-3-根据所在路由转发" class="headerlink" title="3.3. 根据所在路由转发"></a>3.3. 根据所在路由转发</h2>根据目标网络地址选择下一跳<br>通过ARP算<br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/7.png" alt><h3 id="3-3-1-特定主机路由"><a href="#3-3-1-特定主机路由" class="headerlink" title="3.3.1. 特定主机路由"></a>3.3.1. 特定主机路由</h3><h3 id="3-3-2-默认路由"><a href="#3-3-2-默认路由" class="headerlink" title="3.3.2. 默认路由"></a>3.3.2. 默认路由</h3></li></ul></li></ul><h1 id="4-划分子网"><a href="#4-划分子网" class="headerlink" title="4. 划分子网"></a>4. 划分子网</h1><p>netid 不是刚好合适 从hostid前面拿几位subnetid<br><strong>二级变成三级网络</strong><br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/8.png" alt></p><h2 id="4-1-子网掩码"><a href="#4-1-子网掩码" class="headerlink" title="4.1. 子网掩码"></a>4.1. 子网掩码</h2><p><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/9.png" alt><br>路由器的路由表里必须同时要有目的地址和子网掩码</p><blockquote><p><strong>网络的第一个地址是子网地址，最后一个地址是广播地址 这个子网之前的地址都可用</strong>  </p></blockquote><h3 id="4-1-1-查找例子"><a href="#4-1-1-查找例子" class="headerlink" title="4.1.1. 查找例子"></a>4.1.1. 查找例子</h3><p><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/10.png" alt><br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/11.png" alt><br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/12.png" alt><br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/13.png" alt><br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/14.png" alt><br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/15.png" alt></p><h2 id="4-2-回到二级网络-（只看子网）"><a href="#4-2-回到二级网络-（只看子网）" class="headerlink" title="4.2. 回到二级网络 （只看子网）"></a>4.2. 回到二级网络 （只看子网）</h2><p>由于netid 不够了  通过202.0.68.0 /22 记录子网掩码位前22个1 </p><h2 id="4-3-二叉查找"><a href="#4-3-二叉查找" class="headerlink" title="4.3. 二叉查找"></a>4.3. 二叉查找</h2><h1 id="5-ICMP（Internet-Control-Message-Protocol）"><a href="#5-ICMP（Internet-Control-Message-Protocol）" class="headerlink" title="5. ICMP（Internet Control Message Protocol）"></a>5. ICMP（Internet Control Message Protocol）</h1><p>ping 测试连通<br>traceroute<br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/16.png" alt></p><h1 id="6-路由（网关）选择协议"><a href="#6-路由（网关）选择协议" class="headerlink" title="6. 路由（网关）选择协议"></a>6. 路由（网关）选择协议</h1><h2 id="6-1-内部网关协议-IGP-Interior-Gateway-Protocol"><a href="#6-1-内部网关协议-IGP-Interior-Gateway-Protocol" class="headerlink" title="6.1. 内部网关协议 IGP (Interior Gateway Protocol)"></a>6.1. 内部网关协议 IGP (Interior Gateway Protocol)</h2><h3 id="6-1-1-RIP（Routing-Information-Protocol）（规模小）"><a href="#6-1-1-RIP（Routing-Information-Protocol）（规模小）" class="headerlink" title="6.1.1. RIP（Routing Information Protocol）（规模小）"></a>6.1.1. RIP（Routing Information Protocol）（规模小）</h3><ul><li>根据经过的路由来判断最短路径</li><li>每30秒 交换路由信息 </li><li>只和相邻交换（导致网络故障需要 比较长时间才知道）</li></ul><h3 id="6-1-2-OSPF-Open-Shortest-Path-First-（大规模）"><a href="#6-1-2-OSPF-Open-Shortest-Path-First-（大规模）" class="headerlink" title="6.1.2. OSPF (Open Shortest Path First)（大规模）"></a>6.1.2. OSPF (Open Shortest Path First)（大规模）</h3><ul><li>根据时间判断最短路径</li><li>对所有路由发送信息</li><li>只有路由状态改变才再次发 </li><li>30分钟刷新一次链路（只看附近 对整体影响小）<h2 id="6-2-外部网关协议EGP-External-Gateway-Protocol"><a href="#6-2-外部网关协议EGP-External-Gateway-Protocol" class="headerlink" title="6.2. 外部网关协议EGP (External Gateway Protocol)"></a>6.2. 外部网关协议EGP (External Gateway Protocol)</h2><h3 id="6-2-1-BGP"><a href="#6-2-1-BGP" class="headerlink" title="6.2.1. BGP"></a>6.2.1. BGP</h3><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/17.png" alt><br><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/18.png" alt></li></ul><h1 id="7-IP多播"><a href="#7-IP多播" class="headerlink" title="7. IP多播"></a>7. IP多播</h1><p><img src="/2020/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach04-%E7%BD%91%E7%BB%9C%E5%B1%82/19.png" alt></p><h2 id="7-1-IGMP-Internet-Group-Management-Protocol"><a href="#7-1-IGMP-Internet-Group-Management-Protocol" class="headerlink" title="7.1. IGMP (Internet Group Management Protocol)"></a>7.1. IGMP (Internet Group Management Protocol)</h2><h2 id="7-2-RPB"><a href="#7-2-RPB" class="headerlink" title="7.2. RPB"></a>7.2. RPB</h2><h1 id="8-VPN-（virtual-private-network）"><a href="#8-VPN-（virtual-private-network）" class="headerlink" title="8. VPN （virtual private network）"></a>8. VPN （virtual private network）</h1><h2 id="8-1-本地地址"><a href="#8-1-本地地址" class="headerlink" title="8.1. 本地地址"></a>8.1. 本地地址</h2><p>仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向因特网的管理机构申请。</p><ul><li>10.0.0.0 到 10.255.255.255</li><li>172.16.0.0 到 172.31.255.255</li><li>192.168.0.0 到 192.168.255.255<br>专用的 不能在因特网通信 机构内部通信<h2 id="8-2-全球地址"><a href="#8-2-全球地址" class="headerlink" title="8.2. 全球地址"></a>8.2. 全球地址</h2>全球唯一的IP地址，必须向因特网的管理机构申请。 </li></ul><h2 id="8-3-全程接入VPN"><a href="#8-3-全程接入VPN" class="headerlink" title="8.3. 全程接入VPN"></a>8.3. 全程接入VPN</h2><p>可拨号接入相当于 变成局域网的一个主机 可以选择是不是用远程网关</p><h2 id="8-4-NAT-（network-Address-translation）"><a href="#8-4-NAT-（network-Address-translation）" class="headerlink" title="8.4. NAT （network Address translation）"></a>8.4. NAT （network Address translation）</h2><p>VPN中怎么和外部相互通信 </p><h3 id="8-4-1-静态NAT"><a href="#8-4-1-静态NAT" class="headerlink" title="8.4.1. 静态NAT"></a>8.4.1. 静态NAT</h3><blockquote><p>将内部本地地址与内部全局地址进行一对一的明确转换。这种方法主要用在内部网络中有对外提供服务的服务器，如WEB、MAIL服务器时。该方法的缺点是需要独占宝贵的合法IP地址。即，如果某个合法IP地址已经被NAT静态地址转换定义，即使该地址当前没有被使用，也不能被用作其它的地址转换。</p></blockquote><h3 id="8-4-2-动态NAT"><a href="#8-4-2-动态NAT" class="headerlink" title="8.4.2. 动态NAT"></a>8.4.2. 动态NAT</h3><blockquote><p>动态地址转换也是将内部本地地址与内部全局地址进行一对一的转换。但是，是从内部全局地址池中动态地选择一个未使用的地址对内部本地地址进行转换。该地址是由未被使用的地址组成的地址池中在定义时排在最前面的一个。当数据传输完毕后，路由器将把使用完的内部全局地址放回到地址池中，以供其它内部本地地址进行转换。但是在该地址被使用时，不能用该地址再进行一次转换。</p></blockquote><h2 id="8-5-PAT-（Port-Address-Translation）"><a href="#8-5-PAT-（Port-Address-Translation）" class="headerlink" title="8.5. PAT （Port Address Translation）"></a>8.5. PAT （Port Address Translation）</h2><blockquote><p>复用地址转换也称为端口地址转换（Port Address Translation，PAT），首先是一种动态地址转换。路由器将通过记录地址、应用程序端口等唯一标识一个转换。通过这种转换，可以使多个内部本地地址同时与同一个内部全局地址进行转换并对外部网络进行访问。对于只申请到少量IP地址甚至只有一个合法IP地址，却经常有很多用户同时要求上网的情况，这种转换方式非常有用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch03-数据链路层</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-信道方式">1. 信道方式</a><ul><li><a href="#11-点对点信道">1.1. 点对点信道</a><ul><li><a href="#111-传输步骤">1.1.1. 传输步骤</a><ul><li><a href="#1111-封装成帧">1.1.1.1. 封装成帧</a></li><li><a href="#1112-透明传输">1.1.1.2. 透明传输</a></li><li><a href="#1113-差错控制">1.1.1.3. 差错控制</a></li></ul></li><li><a href="#112-ppp协议">1.1.2. PPP协议</a></li></ul></li><li><a href="#12-广播信道">1.2. 广播信道</a><ul><li><a href="#121-局域网">1.2.1. 局域网</a></li><li><a href="#122-网卡网络适配器">1.2.2. 网卡（网络适配器）</a></li><li><a href="#123-以太网-csmacd-一种局域网">1.2.3. 以太网 CSMA/CD （一种局域网)</a></li><li><a href="#124-mac地址">1.2.4. MAC地址</a></li><li><a href="#125-集线器">1.2.5. 集线器</a><ul><li><a href="#1251-集线器扩展">1.2.5.1. 集线器扩展</a></li></ul></li><li><a href="#126-网桥">1.2.6. 网桥</a><ul><li><a href="#1261-透明网桥">1.2.6.1. 透明网桥</a></li></ul></li><li><a href="#127-交换机-网桥--集线器">1.2.7. 交换机 （网桥 + 集线器）</a></li><li><a href="#128-vlan-与位置无关和功能有关">1.2.8. VLAN (与位置无关和功能有关)</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-信道方式"><a href="#1-信道方式" class="headerlink" title="1. 信道方式"></a>1. 信道方式</h1><p>传输 数据帧</p><h2 id="1-1-点对点信道"><a href="#1-1-点对点信道" class="headerlink" title="1.1. 点对点信道"></a>1.1. 点对点信道</h2><h3 id="1-1-1-传输步骤"><a href="#1-1-1-传输步骤" class="headerlink" title="1.1.1. 传输步骤"></a>1.1.1. 传输步骤</h3><h4 id="1-1-1-1-封装成帧"><a href="#1-1-1-1-封装成帧" class="headerlink" title="1.1.1.1. 封装成帧"></a>1.1.1.1. 封装成帧</h4><p>加首部 尾部</p><h4 id="1-1-1-2-透明传输"><a href="#1-1-1-2-透明传输" class="headerlink" title="1.1.1.2. 透明传输"></a>1.1.1.2. 透明传输</h4><p>添加转义 防止数据里面有帧尾</p><h4 id="1-1-1-3-差错控制"><a href="#1-1-1-3-差错控制" class="headerlink" title="1.1.1.3. 差错控制"></a>1.1.1.3. 差错控制</h4><p>CRC 循环码  是FSC(Frame squence check)的一种<br>无差错接受</p><h3 id="1-1-2-PPP协议"><a href="#1-1-2-PPP协议" class="headerlink" title="1.1.2. PPP协议"></a>1.1.2. PPP协议</h3><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/1.png" alt></p><h2 id="1-2-广播信道"><a href="#1-2-广播信道" class="headerlink" title="1.2. 广播信道"></a>1.2. 广播信道</h2><h3 id="1-2-1-局域网"><a href="#1-2-1-局域网" class="headerlink" title="1.2.1. 局域网"></a>1.2.1. 局域网</h3><h3 id="1-2-2-网卡（网络适配器）"><a href="#1-2-2-网卡（网络适配器）" class="headerlink" title="1.2.2. 网卡（网络适配器）"></a>1.2.2. 网卡（网络适配器）</h3><h3 id="1-2-3-以太网-CSMA-CD-（一种局域网"><a href="#1-2-3-以太网-CSMA-CD-（一种局域网" class="headerlink" title="1.2.3. 以太网 CSMA/CD （一种局域网)"></a>1.2.3. 以太网 CSMA/CD （一种局域网)</h3><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/2.png" alt></p><h3 id="1-2-4-MAC地址"><a href="#1-2-4-MAC地址" class="headerlink" title="1.2.4. MAC地址"></a>1.2.4. MAC地址</h3><p>2^48 次方个<br><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/3.png" alt></p><h3 id="1-2-5-集线器"><a href="#1-2-5-集线器" class="headerlink" title="1.2.5. 集线器"></a>1.2.5. 集线器</h3><p>相当于总线<br><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/4.png" alt></p><h4 id="1-2-5-1-集线器扩展"><a href="#1-2-5-1-集线器扩展" class="headerlink" title="1.2.5.1. 集线器扩展"></a>1.2.5.1. 集线器扩展</h4><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/5.png" alt></p><h3 id="1-2-6-网桥"><a href="#1-2-6-网桥" class="headerlink" title="1.2.6. 网桥"></a>1.2.6. 网桥</h3><p>根据转发目的<br><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/6.png" alt></p><h4 id="1-2-6-1-透明网桥"><a href="#1-2-6-1-透明网桥" class="headerlink" title="1.2.6.1. 透明网桥"></a>1.2.6.1. 透明网桥</h4><p>自学习 生成树</p><h3 id="1-2-7-交换机-（网桥-集线器）"><a href="#1-2-7-交换机-（网桥-集线器）" class="headerlink" title="1.2.7. 交换机 （网桥 + 集线器）"></a>1.2.7. 交换机 （网桥 + 集线器）</h3><p>全双工 独占信道</p><h3 id="1-2-8-VLAN-与位置无关和功能有关"><a href="#1-2-8-VLAN-与位置无关和功能有关" class="headerlink" title="1.2.8. VLAN (与位置无关和功能有关)"></a>1.2.8. VLAN (与位置无关和功能有关)</h3><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach03-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/7.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch02-物理层</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach02-%E7%89%A9%E7%90%86%E5%B1%82/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach02-%E7%89%A9%E7%90%86%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-单工-半双工-双工">1. 单工 半双工 双工</a></li><li><a href="#2-奈氏准则-香农公式">2. 奈氏准则 香农公式</a><ul><li><a href="#21-奈氏准则">2.1. 奈氏准则</a></li><li><a href="#22-香农公式">2.2. 香农公式</a></li></ul></li><li><a href="#3-fdm-tdm-wdm光的fdm-cdm">3. FDM TDM WDM(光的FDM) CDM</a></li><li><a href="#4-adsl-拨号上网">4. ADSL 拨号上网</a></li></ul><!-- /TOC --><h1 id="1-单工-半双工-双工"><a href="#1-单工-半双工-双工" class="headerlink" title="1. 单工 半双工 双工"></a>1. 单工 半双工 双工</h1><h1 id="2-奈氏准则-香农公式"><a href="#2-奈氏准则-香农公式" class="headerlink" title="2. 奈氏准则 香农公式"></a>2. 奈氏准则 香农公式</h1><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach02-%E7%89%A9%E7%90%86%E5%B1%82/1.png" alt></p><h2 id="2-1-奈氏准则"><a href="#2-1-奈氏准则" class="headerlink" title="2.1. 奈氏准则"></a>2.1. 奈氏准则</h2><p>奈氏准则 多高频 传输快无串扰</p><h2 id="2-2-香农公式"><a href="#2-2-香农公式" class="headerlink" title="2.2. 香农公式"></a>2.2. 香农公式</h2><p>信噪比和带宽</p><h1 id="3-FDM-TDM-WDM-光的FDM-CDM"><a href="#3-FDM-TDM-WDM-光的FDM-CDM" class="headerlink" title="3. FDM TDM WDM(光的FDM) CDM"></a>3. FDM TDM WDM(光的FDM) CDM</h1><p>CDMA 利用正交 不同码元 正交0<br><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach02-%E7%89%A9%E7%90%86%E5%B1%82/2.png" alt></p><h1 id="4-ADSL-拨号上网"><a href="#4-ADSL-拨号上网" class="headerlink" title="4. ADSL 拨号上网"></a>4. ADSL 拨号上网</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch01-概述</title>
      <link href="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach01-%E6%A6%82%E8%BF%B0/"/>
      <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach01-%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-internet因特网-和-internet互联网">1. Internet（因特网) 和 internet（互联网)</a></li><li><a href="#2-主机通信方式">2. 主机通信方式</a><ul><li><a href="#21-cs">2.1. CS</a></li><li><a href="#22-p-to-p">2.2. P to P</a></li></ul></li><li><a href="#3-数据交换方式">3. 数据交换方式</a><ul><li><a href="#31-电路交换">3.1. 电路交换</a></li><li><a href="#32-分组交换">3.2. 分组交换</a></li><li><a href="#33-报文交换">3.3. 报文交换</a></li></ul></li><li><a href="#4-各种类型网络划分">4. 各种类型网络划分</a></li><li><a href="#5-路由器-router">5. 路由器 (router)</a></li><li><a href="#6-国际标准-osirm--实际标准-tcpip">6. 国际标准 OSI/RM  实际标准 TCP/IP</a></li><li><a href="#7-各层操作">7. 各层操作</a></li><li><a href="#8-路由器只用了网络层">8. 路由器只用了网络层</a></li></ul><!-- /TOC --><h1 id="1-Internet（因特网-和-internet（互联网"><a href="#1-Internet（因特网-和-internet（互联网" class="headerlink" title="1. Internet（因特网) 和 internet（互联网)"></a>1. Internet（因特网) 和 internet（互联网)</h1><p>Internet（因特网）全球最大的网络<br>internet（互联网) 多个计算机网络互连<br>ISP（Internet services provider)<br><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach01-%E6%A6%82%E8%BF%B0/1.png" alt></p><h1 id="2-主机通信方式"><a href="#2-主机通信方式" class="headerlink" title="2. 主机通信方式"></a>2. 主机通信方式</h1><h2 id="2-1-CS"><a href="#2-1-CS" class="headerlink" title="2.1. CS"></a>2.1. CS</h2><h2 id="2-2-P-to-P"><a href="#2-2-P-to-P" class="headerlink" title="2.2. P to P"></a>2.2. P to P</h2><p>使用P2P 软件 对等连接 不区分请求和提供</p><h1 id="3-数据交换方式"><a href="#3-数据交换方式" class="headerlink" title="3. 数据交换方式"></a>3. 数据交换方式</h1><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach01-%E6%A6%82%E8%BF%B0/5.png" alt></p><h2 id="3-1-电路交换"><a href="#3-1-电路交换" class="headerlink" title="3.1. 电路交换"></a>3.1. 电路交换</h2><p>直接线或者加上交换机连起来 </p><h2 id="3-2-分组交换"><a href="#3-2-分组交换" class="headerlink" title="3.2. 分组交换"></a>3.2. 分组交换</h2><p>将报文分段 重组</p><h2 id="3-3-报文交换"><a href="#3-3-报文交换" class="headerlink" title="3.3. 报文交换"></a>3.3. 报文交换</h2><h1 id="4-各种类型网络划分"><a href="#4-各种类型网络划分" class="headerlink" title="4. 各种类型网络划分"></a>4. 各种类型网络划分</h1><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach01-%E6%A6%82%E8%BF%B0/6.png" alt></p><h1 id="5-路由器-router"><a href="#5-路由器-router" class="headerlink" title="5. 路由器 (router)"></a>5. 路由器 (router)</h1><p>转发收到数据报分组</p><h1 id="6-国际标准-OSI-RM-实际标准-TCP-IP"><a href="#6-国际标准-OSI-RM-实际标准-TCP-IP" class="headerlink" title="6. 国际标准 OSI/RM  实际标准 TCP/IP"></a>6. 国际标准 OSI/RM  实际标准 TCP/IP</h1><p>TCP 4层  网络接口层分为 数据链路和物理层</p><h1 id="7-各层操作"><a href="#7-各层操作" class="headerlink" title="7. 各层操作"></a>7. 各层操作</h1><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach01-%E6%A6%82%E8%BF%B0/2.png" alt></p><h1 id="8-路由器只用了网络层"><a href="#8-路由器只用了网络层" class="headerlink" title="8. 路由器只用了网络层"></a>8. 路由器只用了网络层</h1><p><img src="/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%EF%BC%9Ach01-%E6%A6%82%E8%BF%B0/3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-secondTen-easyPart</title>
      <link href="/2020/02/25/Leetcode-secondTen-easyPart/"/>
      <url>/2020/02/25/Leetcode-secondTen-easyPart/</url>
      
        <content type="html"><![CDATA[<hr><p>title: Leetcode-secondTen-easyPart<br>date: 2020-02-25 09:42:34<br>tags:<br>    - 自学<br>    - 笔记<br>categories:<br>    - Leetcode<br>    - secondTen<br>    - easyPart<br>—<!-- TOC --></p><ul><li><a href="#1-q35">1. Q35</a></li><li><a href="#2-q38">2. Q38</a></li><li><a href="#3-q53">3. Q53</a></li><li><a href="#4-q58">4. Q58</a></li><li><a href="#5-q66">5. Q66</a></li><li><a href="#6-q67">6. Q67</a></li><li><a href="#7-q69">7. Q69</a></li><li><a href="#8-q70">8. Q70</a></li><li><a href="#9-q83">9. Q83</a></li><li><a href="#10-q88">10. Q88</a></li></ul><!-- /TOC --><h1 id="1-Q35"><a href="#1-Q35" class="headerlink" title="1. Q35"></a>1. Q35</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class="line"></span><br><span class="line">你可以假设数组中无重复元素。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br><span class="line">示例 4:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 直接遍历</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li><li><p><strong>折半查找：</strong> 注意细节 (left+right)&lt;&lt;&lt;1 无符号右移 不怕溢出。 </p><ul><li><p>第一种方法折半 left&lt;=right 注意防止死循环 可以利用right=mid-1 left=mid+1 return left</p></li><li><p>第二种方法折半 left&lt;right 分成两个区间[0,mid][mid+1,right] 然后提前判断最前面和最后面的位置防止死循环和错解。</p><p>时间复杂度：O(log2 N) 空间复杂度:O(1)</p></li></ul></li></ul><h1 id="2-Q38"><a href="#2-Q38" class="headerlink" title="2. Q38"></a>2. Q38</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：</span><br><span class="line"></span><br><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">1 被读作  &quot;one 1&quot;  (&quot;一个一&quot;) , 即 11。</span><br><span class="line">11 被读作 &quot;two 1s&quot; (&quot;两个一&quot;）, 即 21。</span><br><span class="line">21 被读作 &quot;one 2&quot;,  &quot;one 1&quot; （&quot;一个二&quot; ,  &quot;一个一&quot;) , 即 1211。</span><br><span class="line"></span><br><span class="line">给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。</span><br><span class="line"></span><br><span class="line">注意：整数序列中的每一项将表示为一个字符串。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 1</span><br><span class="line">输出: &quot;1&quot;</span><br><span class="line">解释：这是一个基本样例。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 4</span><br><span class="line">输出: &quot;1211&quot;</span><br><span class="line">解释：当 n &#x3D; 3 时，序列是 &quot;21&quot;，其中我们有 &quot;2&quot; 和 &quot;1&quot; 两组，&quot;2&quot; 可以读作 &quot;12&quot;，也就是出现频次 &#x3D; 1 而 值 &#x3D; 2；类似 &quot;1&quot; 可以读作 &quot;11&quot;。所以答案是 &quot;12&quot; 和 &quot;11&quot; 组合在一起，也就是 &quot;1211&quot;。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 迭代n轮 利用stringbuild.append 添加频率和值</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="3-Q53"><a href="#3-Q53" class="headerlink" title="3. Q53"></a>3. Q53</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br><span class="line">进阶:</span><br><span class="line"></span><br><span class="line">如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 记录当前时刻的最大值 以及 所有时刻的最大值注意用math.max</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li><li><p><strong>分治法：</strong> 每一小块的最大值 </p><p>  时间复杂度：O(N*log2 N) 空间复杂度:O(N)</p></li></ul><h1 id="4-Q58"><a href="#4-Q58" class="headerlink" title="4. Q58"></a>4. Q58</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个仅包含大小写字母和空格 &#39; &#39; 的字符串 s，返回其最后一个单词的长度。</span><br><span class="line"></span><br><span class="line">如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。</span><br><span class="line"></span><br><span class="line">如果不存在最后一个单词，请返回 0 。</span><br><span class="line"></span><br><span class="line">说明：一个单词是指仅由字母组成、不包含任何空格的 最大子字符串。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: &quot;Hello World&quot;</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>反向遍历法(暴力法)：</strong> 遍历到’ ‘通过substring()位置取出子串 （末尾的空格不算</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="5-Q66"><a href="#5-Q66" class="headerlink" title="5. Q66"></a>5. Q66</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。</span><br><span class="line"></span><br><span class="line">最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</span><br><span class="line"></span><br><span class="line">你可以假设除了整数 0 之外，这个整数不会以零开头。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3]</span><br><span class="line">输出: [1,2,4]</span><br><span class="line">解释: 输入数组表示数字 123。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [4,3,2,1]</span><br><span class="line">输出: [4,3,2,2]</span><br><span class="line">解释: 输入数组表示数字 4321。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 根据十进制 从末位开始相加 %10 carry  加到最后在申请空间</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="6-Q67"><a href="#6-Q67" class="headerlink" title="6. Q67"></a>6. Q67</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给定两个二进制字符串，返回他们的和（用二进制表示）。</span><br><span class="line"></span><br><span class="line">输入为非空字符串且只包含数字 1 和 0。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: a &#x3D; &quot;11&quot;, b &#x3D; &quot;1&quot;</span><br><span class="line">输出: &quot;100&quot;</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: a &#x3D; &quot;1010&quot;, b &#x3D; &quot;1011&quot;</span><br><span class="line">输出: &quot;10101&quot;</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>函数法：</strong> 转换成int 然后加法 然后在转换回去（有溢出)<br>可以利用biginteger去掉溢出 但是效率很慢</p><p>  时间复杂度:O(n+m)) 空间复杂度:O(max(n,m))</p></li><li><p><strong>暴力法：</strong> 遍历常的一串 利用return 的方式选取长度大的在a 小的在b 然后遍历短的在遍历长的 思路清晰 需要注意可以利用stringbuild(性能最好) append reverse </p><p>  时间复杂度:O(max(n,m)) 空间复杂度:O(max(n,m))</p></li><li><p><strong>移位法：</strong> 在不允许加法的情况下 利用a|b+ carry(a&amp;b&lt;&lt;1)<br>反复得到</p><p>  时间复杂度:O(max(n,m)) 空间复杂度:O(max(n,m))</p></li></ul><h1 id="7-Q69"><a href="#7-Q69" class="headerlink" title="7. Q69"></a>7. Q69</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">实现 int sqrt(int x) 函数。</span><br><span class="line"></span><br><span class="line">计算并返回 x 的平方根，其中 x 是非负整数。</span><br><span class="line"></span><br><span class="line">由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>公式法：</strong> e^0.5lnx</p><p>  时间复杂度:O(1) 空间复杂度:O(1)</p></li><li><p><strong>牛顿法：</strong> 迭代n轮</p><p>  时间复杂度:O(log2n) 空间复杂度:O(1)</p></li></ul><h1 id="8-Q70"><a href="#8-Q70" class="headerlink" title="8. Q70"></a>8. Q70</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</span><br><span class="line"></span><br><span class="line">每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span><br><span class="line"></span><br><span class="line">注意：给定 n 是一个正整数。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>递归法：</strong> 爬一步爬两步 </p><p>  时间复杂度:O(2^n) 空间复杂度:O(N) （<strong>树的深度</strong>）</p></li><li><p><strong>动态规划DP：</strong> 当前等于前面两步的之和</p><p>  时间复杂度:O(N) 空间复杂度:O(N)</p></li><li><p><strong>数列法（规律）：</strong> 当前等于前面两步的之和</p><p>  时间复杂度:O(N) 空间复杂度:O(1)</p></li><li><p><strong>Binets 方法：</strong> 利用矩阵计算斐波那数列</p><p>  时间复杂度:O(logn) 空间复杂度:O(1)</p></li></ul><h1 id="9-Q83"><a href="#9-Q83" class="headerlink" title="9. Q83"></a>9. Q83</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;1-&gt;2</span><br><span class="line">输出: 1-&gt;2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针：</strong> 记录当前的和已遍历</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="10-Q88"><a href="#10-Q88" class="headerlink" title="10. Q88"></a>10. Q88</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</span><br><span class="line">你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span><br><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span><br><span class="line"></span><br><span class="line">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针：</strong> 需要创建的新的空间（system.arraycopy 可以复制空间)</p><p>  时间复杂度:O(n) 空间复杂度:O(n)</p></li><li><p><strong>双指针（从后遍历）：</strong> 从后面遍历这样不需要新的空间</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-firstTen-easyPart</title>
      <link href="/2020/02/18/Leetcode-firstTen-easyPart/"/>
      <url>/2020/02/18/Leetcode-firstTen-easyPart/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-q1">1. Q1：</a></li><li><a href="#2-q7">2. Q7：</a></li><li><a href="#3-q9">3. Q9：</a></li><li><a href="#4-q13">4. Q13：</a></li><li><a href="#5-q14">5. Q14：</a></li><li><a href="#6-q20">6. Q20：</a></li><li><a href="#7-q21">7. Q21：</a></li><li><a href="#8-q26">8. Q26：</a></li><li><a href="#9-q27">9. Q27：</a></li><li><a href="#10-q28kmp">10. Q28(kmp)：</a></li></ul><!-- /TOC --><h1 id="1-Q1："><a href="#1-Q1：" class="headerlink" title="1. Q1："></a>1. Q1：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums 和一个目标值 target，请你在该数组中</span><br><span class="line">找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><br><span class="line"></span><br><span class="line">你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line"> 给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"> 因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line"> 所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 拿到一个数就把数组遍历一遍 </p><p>  时间复杂度:O(n^2) 空间复杂度:O(1)</p></li><li><p><strong>Hashmap：</strong> 存储key（ 能被查询的）value  index (利用两个互相匹配的idea 可以一次循环 不需要先存在查)</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li></ul><h1 id="2-Q7："><a href="#2-Q7：" class="headerlink" title="2. Q7："></a>2. Q7：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br><span class="line"></span><br><span class="line"> 示例 2:</span><br><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br><span class="line"></span><br><span class="line">**注意:**</span><br><span class="line">假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</span><br></pre></td></tr></table></figure><p>review ideas: </p><ul><li><p><strong>String法：</strong> 利用reverse</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li><li><p><strong>取余法：</strong> 取余得个位 除10在取余得十位 需要注意判断 最大值、最小值条件<br>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="3-Q9："><a href="#3-Q9：" class="headerlink" title="3. Q9："></a>3. Q9：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span><br><span class="line">示例 1:</span><br><span class="line">输入: 121</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">**进阶:**</span><br><span class="line">你能不将整数转为字符串来解决这个问题吗？</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>String法：</strong> 利用reverse</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li><li><p><strong>取余法：</strong> 取余得个位 除10在取余得十位 (只需一半回文即可，遍历到反转的比正常的大)</p><p>  时间复杂度：O(n/2) 空间复杂度:O(1)</p></li></ul><h1 id="4-Q13："><a href="#4-Q13：" class="headerlink" title="4. Q13："></a>4. Q13：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</span><br><span class="line"></span><br><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br><span class="line">例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span><br><span class="line"></span><br><span class="line">通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。</span><br><span class="line">这个特殊的规则只适用于以下六种情况：</span><br><span class="line"></span><br><span class="line">I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span><br><span class="line">X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </span><br><span class="line">C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span><br><span class="line"></span><br><span class="line">给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</span><br><span class="line">示例 1:</span><br><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: &quot;IX&quot;</span><br><span class="line">输出: 9</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</span><br><span class="line"></span><br><span class="line">示例 5:</span><br><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法</strong>： 找到’I’ ‘X’ ‘C’ 然后匹配左边计算 （程序比较乱)</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li><li><p><strong>list表 加value数组</strong> ： 通过index判断左右 通过value计算</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li><li><p><strong>双指针：switch得到值 pre_num和当前比较 （罗马字的特点只要之前是小的就一定减) 根据大小加减</strong></p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="5-Q14："><a href="#5-Q14：" class="headerlink" title="5. Q14："></a>5. Q14：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。</span><br><span class="line">如果不存在公共前缀，返回空字符串 &quot;&quot;。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line"></span><br><span class="line">解释: 输入不存在公共前缀。</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">所有输入只包含小写字母 a-z 。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法</strong>： 找到最小串。从他开始遍历 </p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li><li><p><strong>迭代法</strong> ： 找两个前缀 继续迭代</p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li><li><p><strong>暴力法2</strong>：从第一个串的第一个字符开始 直到每个子串没了 或者不匹配利用indexof查找字符串的最后位置（short and beauty)</p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li></ul><h1 id="6-Q20："><a href="#6-Q20：" class="headerlink" title="6. Q20："></a>6. Q20：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。</span><br><span class="line"></span><br><span class="line">有效字符串需满足：</span><br><span class="line"></span><br><span class="line">左括号必须用相同类型的右括号闭合。</span><br><span class="line">左括号必须以正确的顺序闭合。</span><br><span class="line">注意空字符串可被认为是有效字符串。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 4:</span><br><span class="line"></span><br><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 5:</span><br><span class="line"></span><br><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>栈</strong>： 注意边界问题(可以把匹配的存进Hashmap)</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li></ul><h1 id="7-Q21："><a href="#7-Q21：" class="headerlink" title="7. Q21："></a>7. Q21：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p>review ideas：<br><strong>注意 链表的空间已经有了 尽量在没申请其他空间的情况下链接他们，而不是复制</strong></p><p><strong>递归法</strong>：递归合并 遍历到空 </p><pre><code>时间复杂度：O(2n) 空间复杂度:O(n)</code></pre><p><strong>迭代法</strong>: 迭代（与上面一样的思路) (要注意保存链表头)</p><pre><code>时间复杂度：O(2n) 空间复杂度:O(n)</code></pre><h1 id="8-Q26："><a href="#8-Q26：" class="headerlink" title="8. Q26："></a>8. Q26：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</span><br><span class="line"></span><br><span class="line">不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针</strong>：记录当前位置和遍历 位置</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="9-Q27："><a href="#9-Q27：" class="headerlink" title="9. Q27："></a>9. Q27：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</span><br><span class="line"></span><br><span class="line">不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</span><br><span class="line"></span><br><span class="line">元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">给定 nums &#x3D; [3,2,2,3], val &#x3D; 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针</strong>：记录当前位置和遍历 位置</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="10-Q28-kmp-："><a href="#10-Q28-kmp-：" class="headerlink" title="10. Q28(kmp)："></a>10. Q28(kmp)：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">实现 strStr() 函数。</span><br><span class="line"></span><br><span class="line">给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">输出: -1</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</span><br><span class="line"></span><br><span class="line">对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>匹配第一个字符子串法</strong>：正常想法</p><p>  时间复杂度：O(nm) 空间复杂度:O(1)</p></li></ul><ul><li><p><strong>KMP(查找效率高，状态机)</strong>：<strong>状态机来节省时间 当大型数据时候特别有效</strong></p><p>  时间复杂度：O(n) 空间复杂度:O(m)（二维数组时空复杂度O(m))</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> firstTen </category>
          
          <category> easyPart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-variables-type</title>
      <link href="/2020/02/17/Java-variables-type/"/>
      <url>/2020/02/17/Java-variables-type/</url>
      
        <content type="html"><![CDATA[<p><strong>数组、类、接口按值传递的时候都是传递对象的地址。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> []a=&#123;<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"a[0] :"</span>a[<span class="number">0</span>]+<span class="string">"a[1] : "</span>+a[<span class="number">1</span>]);<span class="comment">//a[0]=10,a[1]=20;      </span></span><br><span class="line">        swap(a, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"a[0] :"</span>a[<span class="number">0</span>]+<span class="string">"a[1] : "</span>+a[<span class="number">1</span>]);<span class="comment">//a[0]=20,a[1]=10;  </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a[i];</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        a[j]=temp;</span><br><span class="line">        System.out.println(<span class="string">"a[0] :"</span>a[<span class="number">0</span>]+<span class="string">"a[1] : "</span>+a[<span class="number">1</span>]);<span class="comment">//a[0]=20,a[1]=10;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">/*a[0]=10 a[1]=20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  a[0]=20 a[1]=10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  a[0]=20 a[1]=10   </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/2020/02/17/Java-variables-type/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">          Foo f = <span class="keyword">new</span> Foo(<span class="string">"f"</span>);</span><br><span class="line">          changeReference(f); <span class="comment">// It won't change the reference!</span></span><br><span class="line">          modifyReference(f); <span class="comment">// It will modify the object that the reference variable "f" refers to!</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeReference</span><span class="params">(Foo a)</span></span>&#123;</span><br><span class="line">          Foo b = <span class="keyword">new</span> Foo(<span class="string">"b"</span>);</span><br><span class="line">          a = b;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyReference</span><span class="params">(Foo c)</span></span>&#123;</span><br><span class="line">          c.setAttribute(<span class="string">"c"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>changerefernce(f)</strong><br><img src="/2020/02/17/Java-variables-type/2.png" alt></p><p>String 类值不可改</p><p>StringBuffer 可以</p><p><a href="https://blog.csdn.net/u013309870/article/details/75499175" target="_blank" rel="noopener">https://blog.csdn.net/u013309870/article/details/75499175</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> variables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP26-thread-level-Parallelism</title>
      <link href="/2020/02/16/CSAPP26-thread-level-Parallelism/"/>
      <url>/2020/02/16/CSAPP26-thread-level-Parallelism/</url>
      
        <content type="html"><![CDATA[<h1 id="多核和超线程"><a href="#多核和超线程" class="headerlink" title="多核和超线程"></a>多核和超线程</h1><p><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/1.png" alt><br>现在的计算机都是并行流水线<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/2.png" alt><br>超线程(hpyerthreading)意味着在单核的情况下多个线程同时走</p><h1 id="并行加法"><a href="#并行加法" class="headerlink" title="并行加法"></a>并行加法</h1><p>目标：加0到n-1<br>想法：使用多个进程用互斥量来加globel sum<br>结果<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/3.png" alt></p><p>改进：信号同步是很慢的，每个进程单独使用数组不同步,主进程等待所有进程结束然后相加<br>结果:<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/4.png" alt></p><p>再改进：不用每次改数组，而是用局部变量（寄存器)累加，最后给数组<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/5.png" alt><br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/6.png" alt><br>可以看到这里超线程并没有帮到我们（本身就在很好的使用寄存器)<br><strong>但是实际中的程序复杂的多，并不是这么简单利用</strong></p><h1 id="Amdahl’s-Law（阿姆达尔定律）"><a href="#Amdahl’s-Law（阿姆达尔定律）" class="headerlink" title="Amdahl’s Law（阿姆达尔定律）"></a>Amdahl’s Law（阿姆达尔定律）</h1><p>研究一部分性能提升（使用并行)对总体性能的影响<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/7.png" alt></p><h1 id="快速排序（利用并行）"><a href="#快速排序（利用并行）" class="headerlink" title="快速排序（利用并行）"></a>快速排序（利用并行）</h1><p>原来的 排左 排右<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/8.png" alt></p><p>用线程递归  直到够小<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/9.png" alt><br>还要注意的是碎片太小 就不够并行性 太大就线程开销就太大了<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/10.png" alt></p><h1 id="线程连续性法则（Thread-consistency）"><a href="#线程连续性法则（Thread-consistency）" class="headerlink" title="线程连续性法则（Thread consistency）"></a>线程连续性法则（Thread consistency）</h1><p>决定了不会出现1，100  或者100,1<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/11.png" alt><br>但是如果有不耦合的缓存，就可能出现。<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/12.png" alt></p><h2 id="Snoopy-Cache-史努比缓存"><a href="#Snoopy-Cache-史努比缓存" class="headerlink" title="Snoopy Cache(史努比缓存)"></a>Snoopy Cache(史努比缓存)</h2><p>对缓存进行了三种标记<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/13.png" alt><br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/14.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> Parallelism </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-String-getEveryChar</title>
      <link href="/2020/02/15/Java-String-getEveryChar/"/>
      <url>/2020/02/15/Java-String-getEveryChar/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-导语string-常用方法">1. 导语(string 常用方法)</a></li><li><a href="#2-获取string-每个字符的方法">2. 获取String 每个字符的方法</a><ul><li><a href="#21-scharati">2.1. s.charAt(i)</a></li><li><a href="#22-ssubstringii1">2.2. s.subString(i,i+1)</a></li><li><a href="#23-stochararray-csize">2.3. s.toCharArray(), c.size()</a></li></ul></li></ul><!-- /TOC --><h1 id="1-导语-string-常用方法"><a href="#1-导语-string-常用方法" class="headerlink" title="1. 导语(string 常用方法)"></a>1. 导语(string 常用方法)</h1><p>对于字符串的操作，我们常用的就是trim()去除前后空格、subString()截取子字符串<br><img src="/2020/02/15/Java-String-getEveryChar/1.jpg" alt></p><h1 id="2-获取String-每个字符的方法"><a href="#2-获取String-每个字符的方法" class="headerlink" title="2. 获取String 每个字符的方法"></a>2. 获取String 每个字符的方法</h1><h2 id="2-1-s-charAt-i"><a href="#2-1-s-charAt-i" class="headerlink" title="2.1. s.charAt(i)"></a>2.1. s.charAt(i)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"aaabbbbccccdddd"</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//定义对象依次存放每一个字符</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() ; i++)&#123;</span><br><span class="line">  </span><br><span class="line">  String ss = String.valueOf(str.charAt(i));</span><br><span class="line">  </span><br><span class="line">  list.add(ss);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="2-2-s-subString-i-i-1"><a href="#2-2-s-subString-i-i-1" class="headerlink" title="2.2. s.subString(i,i+1)"></a>2.2. s.subString(i,i+1)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"aaabbbbccccdddd"</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//定义对象依次存放每一个字符</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() ; i++)&#123;</span><br><span class="line">  </span><br><span class="line">  String ss = String.subString(i,i+<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  list.add(ss);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="2-3-s-toCharArray-c-size"><a href="#2-3-s-toCharArray-c-size" class="headerlink" title="2.3. s.toCharArray(), c.size()"></a>2.3. s.toCharArray(), c.size()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"aaabbbbccccdddd"</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//定义对象依次存放每一个字符</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() ; i++)&#123;</span><br><span class="line">  </span><br><span class="line">  String ss = String.subString(i,i+<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  list.add(ss);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP25-synchronization-Advanced</title>
      <link href="/2020/02/15/CSAPP25-synchronization-Advanced/"/>
      <url>/2020/02/15/CSAPP25-synchronization-Advanced/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-use-semaphores-to-protectd-shared-variables">1. use semaphores to protectd shared variables</a><ul><li><a href="#11-two-classical-examples">1.1. two classical examples</a><ul><li><a href="#111-the-producer-consumer-probelm">1.1.1. the producer-consumer probelm</a></li><li><a href="#112-reader-writer-problem">1.1.2. reader writer problem</a></li></ul></li><li><a href="#12-put-it-together">1.2. put it together</a></li></ul></li><li><a href="#2-线程安全">2. 线程安全</a><ul><li><a href="#21-unsafe-types-functions">2.1. unsafe types functions</a><ul><li><a href="#211-class1-没保护共享变量">2.1.1. class1 没保护共享变量</a></li><li><a href="#212-class2-依赖全局变量状态">2.1.2. class2 依赖全局变量状态</a></li><li><a href="#213-class3-返回一个静态变量的地址">2.1.3. class3 返回一个静态变量的地址</a></li><li><a href="#214-class4-调用任何线程不安全的函数在函数里面">2.1.4. class4 调用任何线程不安全的函数在函数里面</a></li><li><a href="#215-重定位函数没有任何shared变量">2.1.5. 重定位函数（没有任何shared变量）</a></li></ul></li><li><a href="#22-problems">2.2. problems</a><ul><li><a href="#221-races-不能假设一个线程先到达一个点在另一个线程到达那个点前">2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）</a></li><li><a href="#222-deadlock两个线程互相等待对方释放">2.2.2. deadlock（两个线程互相等待对方释放）</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-use-semaphores-to-protectd-shared-variables"><a href="#1-use-semaphores-to-protectd-shared-variables" class="headerlink" title="1. use semaphores to protectd shared variables"></a>1. use semaphores to protectd shared variables</h1><p>mutex（互斥量）</p><h2 id="1-1-two-classical-examples"><a href="#1-1-two-classical-examples" class="headerlink" title="1.1. two classical examples"></a>1.1. two classical examples</h2><h3 id="1-1-1-the-producer-consumer-probelm"><a href="#1-1-1-the-producer-consumer-probelm" class="headerlink" title="1.1.1. the producer-consumer probelm"></a>1.1.1. the producer-consumer probelm</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/1.png" alt><br>生产者等待buffer的空槽 插入items<br>消费者等待items 将其重buffer中移除 告知生产者<br>图像渲染帧：帧被创建 然后在被渲染<br>图形页面驱动：鼠标等事件发生 然后响应</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Insert item onto the rear of shared buffer sp */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sbuf_insert</span><span class="params">(<span class="keyword">sbuf_t</span> *sp, <span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P(&amp;sp-&gt;slots); <span class="comment">/* Wait for available slot */</span></span><br><span class="line">P(&amp;sp-&gt;mutex); <span class="comment">/* Lock the buffer */</span></span><br><span class="line">sp-&gt;buf[(++sp-&gt;rear)%(sp-&gt;n)] = item; <span class="comment">/* Insert the item */</span></span><br><span class="line">V(&amp;sp-&gt;mutex); <span class="comment">/* Unlock the buffer */</span></span><br><span class="line">V(&amp;sp-&gt;items); <span class="comment">/* Announce available item */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Remove and return the first item from buffer sp */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sbuf_remove</span><span class="params">(<span class="keyword">sbuf_t</span> *sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> item;</span><br><span class="line">P(&amp;sp-&gt;items); <span class="comment">/* Wait for available item */</span></span><br><span class="line">P(&amp;sp-&gt;mutex); <span class="comment">/* Lock the buffer */</span></span><br><span class="line">item = sp-&gt;buf[(++sp-&gt;front)%(sp-&gt;n)]; <span class="comment">/* Remove the item */</span></span><br><span class="line">V(&amp;sp-&gt;mutex); <span class="comment">/* Unlock the buffer */</span></span><br><span class="line">V(&amp;sp-&gt;slots); <span class="comment">/* Announce available slot */</span></span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-reader-writer-problem"><a href="#1-1-2-reader-writer-problem" class="headerlink" title="1.1.2. reader writer problem"></a>1.1.2. reader writer problem</h3><p>读者只读 只有作者有权利写</p><ul><li>reader优先<br>当作者写完buffer后，同时等待时，读者优先 </li><li>writer优先<br>当作者写完buffer后，同时等待时，作者优先 </li></ul><h2 id="1-2-put-it-together"><a href="#1-2-put-it-together" class="headerlink" title="1.2. put it together"></a>1.2. put it together</h2><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/2.png" alt><br><strong>预线程并发服务器</strong>好处显然：少了创建销毁进程或者线程 在buffer操作简单 效率高</p><h1 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2. 线程安全"></a>2. 线程安全</h1><p>被线程函数调用的函数必须是线程安全的<br><strong>定义</strong>：被多个并发线程调用也无论多少次都能产生正确结果</p><h2 id="2-1-unsafe-types-functions"><a href="#2-1-unsafe-types-functions" class="headerlink" title="2.1. unsafe types functions"></a>2.1. unsafe types functions</h2><h3 id="2-1-1-class1-没保护共享变量"><a href="#2-1-1-class1-没保护共享变量" class="headerlink" title="2.1.1. class1 没保护共享变量"></a>2.1.1. class1 没保护共享变量</h3><p>改进：使用mutex 然后PV保护就行<br>问题：太慢了 同步</p><h3 id="2-1-2-class2-依赖全局变量状态"><a href="#2-1-2-class2-依赖全局变量状态" class="headerlink" title="2.1.2. class2 依赖全局变量状态"></a>2.1.2. class2 依赖全局变量状态</h3><p>比如rand函数 依赖种子 原理上种子不变随机数不变 但是如图next很有可能在调用的时候被改变（很多lic库的在写的时候还没有线程）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rand: return pseudo-random integer on 0..32767 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next = next*<span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* srand: set seed for rand() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进：用指针保存seed代替全局变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rand_r - return pseudo-random integer on 0..32767 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand_r</span><span class="params">(<span class="keyword">int</span> *nextp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*nextp = *nextp * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*nextp/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-class3-返回一个静态变量的地址"><a href="#2-1-3-class3-返回一个静态变量的地址" class="headerlink" title="2.1.3. class3 返回一个静态变量的地址"></a>2.1.3. class3 返回一个静态变量的地址</h3><p>比如time 返回的一直是一个相同的地址 只不过上面的字符串不一样<br>改进：重写库（难） 或者重写调用 把静态变量的地方改成每个独有的地址</p><h3 id="2-1-4-class4-调用任何线程不安全的函数在函数里面"><a href="#2-1-4-class4-调用任何线程不安全的函数在函数里面" class="headerlink" title="2.1.4. class4 调用任何线程不安全的函数在函数里面"></a>2.1.4. class4 调用任何线程不安全的函数在函数里面</h3><h3 id="2-1-5-重定位函数（没有任何shared变量）"><a href="#2-1-5-重定位函数（没有任何shared变量）" class="headerlink" title="2.1.5. 重定位函数（没有任何shared变量）"></a>2.1.5. 重定位函数（没有任何shared变量）</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/3.png" alt></p><p>所有Standard C的函数都是线程安全的</p><h2 id="2-2-problems"><a href="#2-2-problems" class="headerlink" title="2.2. problems"></a>2.2. problems</h2><h3 id="2-2-1-races-（不能假设一个线程先到达一个点在另一个线程到达那个点前）"><a href="#2-2-1-races-（不能假设一个线程先到达一个点在另一个线程到达那个点前）" class="headerlink" title="2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）"></a>2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/4.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/5.png" alt></p><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/6.png" alt></p><h3 id="2-2-2-deadlock（两个线程互相等待对方释放）"><a href="#2-2-2-deadlock（两个线程互相等待对方释放）" class="headerlink" title="2.2.2. deadlock（两个线程互相等待对方释放）"></a>2.2.2. deadlock（两个线程互相等待对方释放）</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/7.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/8.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/9.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/10.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> synchronization </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP24-synchronization-Basic</title>
      <link href="/2020/02/14/CSAPP24-synchronization-Basic/"/>
      <url>/2020/02/14/CSAPP24-synchronization-Basic/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-why-synchronization">1. why synchronization</a></li><li><a href="#2-what-is-shared-variables-in-thread">2. what is shared variables in thread</a><ul><li><a href="#21-通过将变量放入内存搞清一个变量有多少个实例">2.1. 通过将变量放入内存搞清一个变量有多少个实例</a></li></ul></li><li><a href="#3-probelems">3. probelems</a><ul><li><a href="#31-进程图分析">3.1. 进程图分析</a></li><li><a href="#32-信号量semaphores">3.2. 信号量（Semaphores）</a></li></ul></li></ul><!-- /TOC --><h1 id="1-why-synchronization"><a href="#1-why-synchronization" class="headerlink" title="1. why synchronization"></a>1. why synchronization</h1><p>为了在关键步骤发生不必要的共享 导致错误</p><h1 id="2-what-is-shared-variables-in-thread"><a href="#2-what-is-shared-variables-in-thread" class="headerlink" title="2. what is shared variables in thread"></a>2. what is shared variables in thread</h1><p>不一定是全局变量（全局变量只被自己引用就不是，只要是被多个进程指向的变量就是分享变量）<br>虽然每个线程栈独立，由于指针的特性，程序是能影响其他栈的</p><h2 id="2-1-通过将变量放入内存搞清一个变量有多少个实例"><a href="#2-1-通过将变量放入内存搞清一个变量有多少个实例" class="headerlink" title="2.1. 通过将变量放入内存搞清一个变量有多少个实例"></a>2.1. 通过将变量放入内存搞清一个变量有多少个实例</h2><ul><li>global variables<br>放在全局区，在链接时链接器就只存放了同名全局变量的一个实例在虚拟内存里面</li><li>local variables<br>非static 变量放在栈上 每个进程有自己的栈</li><li>local static variables<br>放在全局区 虚拟内存里面只有一个实例<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/1.png" alt><br>从share的角度<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/2.png" alt></li><li><em>ptr, cnt, and msgs are shared<br>n i and myid are not shared*</em></li></ul><h1 id="3-probelems"><a href="#3-probelems" class="headerlink" title="3. probelems"></a>3. probelems</h1><p>volatile 可以防止变量一直存在寄存器里面 （不写回）<br>交给内核完成上下文交换 只有系统调用和定时器中断 所以数字大的话错误概率就高<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/3.png" alt><br><strong>反汇编</strong> 发现改变cnt需要三个步骤 只有最后一个步骤写回<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/4.png" alt><br>正确顺序<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/5.png" alt><br>可能的顺序<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/6.png" alt><br><img src="/2020/02/14/CSAPP24-synchronization-Basic/7.png" alt></p><h2 id="3-1-进程图分析"><a href="#3-1-进程图分析" class="headerlink" title="3.1. 进程图分析"></a>3.1. 进程图分析</h2><p><img src="/2020/02/14/CSAPP24-synchronization-Basic/8.png" alt></p><h2 id="3-2-信号量（Semaphores）"><a href="#3-2-信号量（Semaphores）" class="headerlink" title="3.2. 信号量（Semaphores）"></a>3.2. 信号量（Semaphores）</h2><p>Monitors (Java)<br>Semaphores 是非负全局<strong><em>同步</em></strong>变量。</p><p>因此可以通过PV加减信号量来保证不会进入危险区域</p><p><img src="/2020/02/14/CSAPP24-synchronization-Basic/9.png" alt></p><ul><li>P 减少 信号量 如果信号量是0 那么就会阻塞等待V增加信号量</li><li>V 不会阻塞 只是在增加后 会随机选择 多个阻塞线程中的一个<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/10.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> synchronization </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP23-concurrent-programming</title>
      <link href="/2020/02/13/CSAPP23-concurrent-programming/"/>
      <url>/2020/02/13/CSAPP23-concurrent-programming/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-probelms">1. Probelms</a></li><li><a href="#2-neccessity">2. Neccessity</a></li><li><a href="#3-approaches-for-writing-a-concurrent-program">3. Approaches for Writing a concurrent program</a><ul><li><a href="#31-progress-based">3.1. Progress-based</a><ul><li><a href="#311-features">3.1.1. Features</a></li><li><a href="#312-pros-and-cons">3.1.2. Pros and Cons</a></li></ul></li><li><a href="#32-event-based">3.2. Event-based</a><ul><li><a href="#321-pros-and-cons">3.2.1. Pros and Cons</a></li></ul></li><li><a href="#33-thread-based">3.3. Thread-based</a><ul><li><a href="#331-differences-and-similarities-between-process-and-thread">3.3.1. differences and similarities between process and thread</a></li><li><a href="#332-thread-mode">3.3.2. thread mode</a></li></ul></li></ul></li><li><a href="#4-summary">4. Summary</a></li></ul><!-- /TOC --><h1 id="1-Probelms"><a href="#1-Probelms" class="headerlink" title="1. Probelms"></a>1. Probelms</h1><ul><li>Races：结果取决于随机的调度(谁得到最后一张票,父进程在子进程加入列表前运行完了)</li><li>Deadlock: 等待着一个永远不发生的信号到来（主程序printf，信号处理程序同时printf；交通谁先谁通过，但是同时到达四个，就不知道怎么走)</li><li>livelock /starvations/ fairness: 两个进程内核总是安排一个</li></ul><h1 id="2-Neccessity"><a href="#2-Neccessity" class="headerlink" title="2. Neccessity"></a>2. Neccessity</h1><p><img src="/2020/02/13/CSAPP23-concurrent-programming/1.png" alt><br>如果不并发 客户端2 connect 就算没建立连接也会return  要等待服务端结束前一个再accept<br>再发</p><h1 id="3-Approaches-for-Writing-a-concurrent-program"><a href="#3-Approaches-for-Writing-a-concurrent-program" class="headerlink" title="3. Approaches for Writing a concurrent program"></a>3. Approaches for Writing a concurrent program</h1><h2 id="3-1-Progress-based"><a href="#3-1-Progress-based" class="headerlink" title="3.1. Progress-based"></a>3.1. Progress-based</h2><h3 id="3-1-1-Features"><a href="#3-1-1-Features" class="headerlink" title="3.1.1. Features"></a>3.1.1. Features</h3><ul><li>内核自动调度</li><li>单独地址空间<br>如图<br><img src="/2020/02/13/CSAPP23-concurrent-programming/2.png" alt></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char **argv)!</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> listenfd, connfd;</span><br><span class="line"><span class="keyword">socklen_t</span> clientlen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">clientaddr</span>;</span></span><br><span class="line"></span><br><span class="line">Signal(SIGCHLD, sigchld_handler);</span><br><span class="line">listenfd = Open_listenfd(argv[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">clientlen = <span class="keyword">sizeof</span>(struct sockaddr_storage);</span><br><span class="line">connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);</span><br><span class="line"><span class="keyword">if</span> (Fork() == <span class="number">0</span>) &#123;</span><br><span class="line">Close(listenfd); <span class="comment">/* Child closes its listening socket */</span></span><br><span class="line">echo(connfd); <span class="comment">/* Child services client */</span></span><br><span class="line">Close(connfd); <span class="comment">/* Child closes connection with client */</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">/* Child exits */</span></span><br><span class="line">&#125;</span><br><span class="line">Close(connfd); <span class="comment">/* Parent closes connected socket (important!) */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在程序里需要注意</strong>：<br>每个父进程和子进程里面都有listenfd和connfd，refcnt=2 所以需要分别在父进程关闭connfd 子进程关闭listenfd</p><h3 id="3-1-2-Pros-and-Cons"><a href="#3-1-2-Pros-and-Cons" class="headerlink" title="3.1.2. Pros and Cons"></a>3.1.2. Pros and Cons</h3><ul><li>pros：<ul><li>并发</li><li>清晰的共享模式：单独的描述符，共享描述符表已经打开文件表，不共享全局变量地址</li><li>简单</li></ul></li><li>cons<ul><li>额外进程开销</li><li>不共享数据地址<h2 id="3-2-Event-based"><a href="#3-2-Event-based" class="headerlink" title="3.2. Event-based"></a>3.2. Event-based</h2></li></ul></li><li>程序员调度多重的逻辑流</li><li>所有流 同样的地址</li><li>I/O 复用</li><li>可以Debug</li></ul><p>对所有输入都挂起读取</p><p><img src="/2020/02/13/CSAPP23-concurrent-programming/3.png" alt><br>如图现在挂起的三个输入然后又三个listenfd 也就是事件来了我再去读</p><h3 id="3-2-1-Pros-and-Cons"><a href="#3-2-1-Pros-and-Cons" class="headerlink" title="3.2.1. Pros and Cons"></a>3.2.1. Pros and Cons</h3><ul><li>pros：<ul><li>一个逻辑流，一个地址空间，可以Debug</li><li>没有进程线程控制开销，高并发数必要（Node.js, nginx, Tornado）</li></ul></li><li>cons<ul><li>难code</li><li>没利用多核</li></ul></li></ul><h2 id="3-3-Thread-based"><a href="#3-3-Thread-based" class="headerlink" title="3.3. Thread-based"></a>3.3. Thread-based</h2><ul><li>内核自动调度</li><li>每个flow 同样的地址</li><li>混合了Progress-based Event-based</li></ul><p>和进程很像<br><img src="/2020/02/13/CSAPP23-concurrent-programming/4.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/5.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/6.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/7.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/8.png" alt></p><h3 id="3-3-1-differences-and-similarities-between-process-and-thread"><a href="#3-3-1-differences-and-similarities-between-process-and-thread" class="headerlink" title="3.3.1. differences and similarities between process and thread"></a>3.3.1. differences and similarities between process and thread</h3><ul><li>similarities <ul><li>都有自己的逻辑流</li><li>都是上下文交换</li></ul></li><li>differences<ul><li>thread 共享除了栈的数据 进程是不能共享全局数据</li><li>thread 的开销低 一半</li></ul></li></ul><h3 id="3-3-2-thread-mode"><a href="#3-3-2-thread-mode" class="headerlink" title="3.3.2. thread mode"></a>3.3.2. thread mode</h3><p>detached 不被其他thread打扰 内核回收<br>防止内存泄漏<br>注意分享给主thread的指针</p><h1 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4. Summary"></a>4. Summary</h1><ul><li>process <ul><li>很难共享数据但是也避免了不想要的共享</li><li>建立断开开销大</li></ul></li><li>event<ul><li>难编程</li><li>可调试</li><li>底层</li><li>没利用多核</li></ul></li><li>thread <ul><li>容易共享数据（太容易了）</li><li>开销比 进程小</li><li>很难debug （事件的发生不是可重复的）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> concurrent programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-algorithm-HashMap</title>
      <link href="/2020/02/12/Java-algorithm-HashMap/"/>
      <url>/2020/02/12/Java-algorithm-HashMap/</url>
      
        <content type="html"><![CDATA[<p><strong>推荐链接</strong><br><a href="https://blog.csdn.net/woshimaxiao1/article/details/83661464" target="_blank" rel="noopener">https://blog.csdn.net/woshimaxiao1/article/details/83661464</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Algorithm </category>
          
          <category> HashMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP22-networking-programming-part1</title>
      <link href="/2020/02/12/CSAPP22-networking-programming-part1/"/>
      <url>/2020/02/12/CSAPP22-networking-programming-part1/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-normal-tcp">1. Normal TCP</a><ul><li><a href="#11-key-part">1.1. Key part</a></li></ul></li><li><a href="#2-web-server">2. Web server</a><ul><li><a href="#21-http协议">2.1. http协议</a><ul><li><a href="#211-url">2.1.1. URL</a></li><li><a href="#212-http-requests">2.1.2. http requests</a><ul><li><a href="#2121-proxies">2.1.2.1. Proxies</a></li></ul></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-Normal-TCP"><a href="#1-Normal-TCP" class="headerlink" title="1. Normal TCP"></a>1. Normal TCP</h1><p><img src="/2020/02/12/CSAPP22-networking-programming-part1/1.png" alt></p><h2 id="1-1-Key-part"><a href="#1-1-Key-part" class="headerlink" title="1.1. Key part"></a>1.1. Key part</h2><p>client getaddrinfo （需要目标域名)<br>server getaddrinfo （不需要目标域名)</p><p>socket 返回整形（类似文件表述符，通信就是通过这个描述符来进行)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure><p>返回的是从socket 转换的listenfd 在服务周期永远存在</p><p><strong>重点来了</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> listenfd, SA *addr, <span class="keyword">int</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>也就是说accept 会产生一个额外的clientfd 多线程就会有多个clientfd<br>如图<br><img src="/2020/02/12/CSAPP22-networking-programming-part1/2.png" alt></p><p>talnet 测试回响服务器（echo）</p><h1 id="2-Web-server"><a href="#2-Web-server" class="headerlink" title="2. Web server"></a>2. Web server</h1><h2 id="2-1-http协议"><a href="#2-1-http协议" class="headerlink" title="2.1. http协议"></a>2.1. http协议</h2><p><img src="/2020/02/12/CSAPP22-networking-programming-part1/3.png" alt></p><p>返回静态，或者动态的东西（需要执行程序)</p><h3 id="2-1-1-URL"><a href="#2-1-1-URL" class="headerlink" title="2.1.1. URL"></a>2.1.1. URL</h3><ul><li>Unique name for a file:URL (Universal Resource Locator)</li><li>client 用前缀prefix导入 例如：<a href="http://www.cmu.edu:80" target="_blank" rel="noopener">http://www.cmu.edu:80</a></li><li>server 用后缀决定静态动态内容 /index.html<br>如果不是特别的 就是/ 默认大多数是index.html</li></ul><h3 id="2-1-2-http-requests"><a href="#2-1-2-http-requests" class="headerlink" title="2.1.2. http requests"></a>2.1.2. http requests</h3><p>Request line: <method> <uri> <version><br>A URL is a type of URI(Uniform Resource Identifier)<br><img src="/2020/02/12/CSAPP22-networking-programming-part1/4.png" alt></version></uri></method></p><p>动态请求<br><img src="/2020/02/12/CSAPP22-networking-programming-part1/5.png" alt></p><h4 id="2-1-2-1-Proxies"><a href="#2-1-2-1-Proxies" class="headerlink" title="2.1.2.1. Proxies"></a>2.1.2.1. Proxies</h4><p><img src="/2020/02/12/CSAPP22-networking-programming-part1/6.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> networking programming </category>
          
          <category> part1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Features-Day0</title>
      <link href="/2020/02/11/Java-Features-day0/"/>
      <url>/2020/02/11/Java-Features-day0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-继承">1. 继承</a><ul><li><a href="#11-extends">1.1. extends</a></li><li><a href="#12-instanceof-关键字">1.2. instanceof 关键字</a></li><li><a href="#13-implements">1.3. implements</a></li></ul></li><li><a href="#2-重写和重载">2. 重写和重载</a><ul><li><a href="#21-override-重写">2.1. Override 重写</a></li><li><a href="#22-overload-重载">2.2. Overload 重载</a></li><li><a href="#23-二者区别">2.3. 二者区别</a></li></ul></li><li><a href="#3-抽象类">3. 抽象类</a><ul><li><a href="#31-抽象方法">3.1. 抽象方法</a></li></ul></li><li><a href="#4-封装">4. 封装</a></li><li><a href="#5-接口">5. 接口</a><ul><li><a href="#51-接口与类相似点">5.1. 接口与类相似点：</a></li><li><a href="#52-接口与类的区别">5.2. 接口与类的区别：</a></li><li><a href="#53-implements">5.3. implements</a></li><li><a href="#54-标记接口">5.4. 标记接口</a></li></ul></li><li><a href="#6-包">6. 包</a><ul><li><a href="#61-作用">6.1. 作用</a></li><li><a href="#62-tips">6.2. tips</a></li></ul></li><li><a href="#7-多态">7. 多态</a></li></ul><!-- /TOC --><h1 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h1><h2 id="1-1-extends"><a href="#1-1-extends" class="headerlink" title="1.1. extends"></a>1.1. extends</h2><p>IS-A关系</p><h2 id="1-2-instanceof-关键字"><a href="#1-2-instanceof-关键字" class="headerlink" title="1.2. instanceof 关键字"></a>1.2. instanceof 关键字</h2><p>可以使用 instanceof 运算符来检验Mammal和dog对象是否是Animal类的一个实例。</p><h2 id="1-3-implements"><a href="#1-3-implements" class="headerlink" title="1.3. implements"></a>1.3. implements</h2><p>Java只支持单继承（继承基本类和抽象类），但是我们可以用接口来实现（多继承接口来实现）,脚本结构如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> <span class="keyword">implements</span> <span class="title">Fruit1</span>, <span class="title">Fruit2</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="2-重写和重载"><a href="#2-重写和重载" class="headerlink" title="2. 重写和重载"></a>2. 重写和重载</h1><h2 id="2-1-Override-重写"><a href="#2-1-Override-重写" class="headerlink" title="2.1. Override 重写"></a>2.1. Override 重写</h2><p>子类重写父类<br>用到的父类被重写方法 super</p><h2 id="2-2-Overload-重载"><a href="#2-2-Overload-重载" class="headerlink" title="2.2. Overload 重载"></a>2.2. Overload 重载</h2><h2 id="2-3-二者区别"><a href="#2-3-二者区别" class="headerlink" title="2.3. 二者区别"></a>2.3. 二者区别</h2><p><img src="/2020/02/11/Java-Features-day0/1.png" alt></p><h1 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3. 抽象类"></a>3. 抽象类</h1><p>类没有足够的信息描绘对象 （抽象类）abstract<br>继承使用</p><h2 id="3-1-抽象方法"><a href="#3-1-抽象方法" class="headerlink" title="3.1. 抽象方法"></a>3.1. 抽象方法</h2><p>继承抽象类的子类必须重写此 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h1 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h1><p>Getter Setter 类的private数据</p><p>这样的好处 这种数据的访问被严格控制 而且可以修改实现而不是调用 </p><h1 id="5-接口"><a href="#5-接口" class="headerlink" title="5. 接口"></a>5. 接口</h1><p>interface<br>与类的异同 </p><h2 id="5-1-接口与类相似点："><a href="#5-1-接口与类相似点：" class="headerlink" title="5.1. 接口与类相似点："></a>5.1. 接口与类相似点：</h2><p>一个接口可以有多个方法。</p><ul><li>接口文件保存在.java结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在.class结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul><h2 id="5-2-接口与类的区别："><a href="#5-2-接口与类的区别：" class="headerlink" title="5.2. 接口与类的区别："></a>5.2. 接口与类的区别：</h2><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法。(隐式抽象不用abstract)</li><li>接口不能包含成员变量，除了static和final变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多重继承。</li></ul><h2 id="5-3-implements"><a href="#5-3-implements" class="headerlink" title="5.3. implements"></a>5.3. implements</h2><p>实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MammalInt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span></span><br></pre></td></tr></table></figure><p>在实现接口的时候，也要注意一些规则：</p><ul><li>一个类可以同时实现多个接口。</li><li>一个类只能继承一个类，但是能实现多个接口。</li><li>一个接口能继承另一个接口，这和类之间的继承比较相似。(而且可以多重继承)</li></ul><h2 id="5-4-标记接口"><a href="#5-4-标记接口" class="headerlink" title="5.4. 标记接口"></a>5.4. 标记接口</h2><p>没有任何方法的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>目的</p><ul><li><p>建立一个公共的父接口：<br>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p></li><li><p>向一个类添加数据类型：<br>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul><h1 id="6-包"><a href="#6-包" class="headerlink" title="6. 包"></a>6. 包</h1><p>如果一个源文件中没有使用包声明，那么其中的类，函数，枚举，注释等将被放在一个无名的包（unnamed package）中。通常小写避免与类冲突。</p><h2 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1. 作用"></a>6.1. 作用</h2><p>包的作用</p><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。<br>java.lang-打包基础的类<br>java.io-包含输入输出功能的函数</li></ul><h2 id="6-2-tips"><a href="#6-2-tips" class="headerlink" title="6.2. tips"></a>6.2. tips</h2><p>一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是apple.com，所有的包名都以com.apple开头。包名中的每一个部分对应一个子目录。</p><p>例如：这个公司有一个com.apple.computers的包，这个包包含一个叫做Dell.java的源文件，那么相应的，应该有如下面的一连串子目录：</p><p>这样，你可以将你的类目录分享给其他的编程人员，而不用透露自己的源码。用这种方法管理源码和类文件可以让编译器和java虚拟机（JVM）可以找到你程序中使用的所有类型。</p><p>类目录的绝对路径叫做class path。设置在系统变量CLASSPATH中。编译器和java虚拟机通过将package名字加到class path后来构造.class文件的路径。</p><p><path- two>\classes是class path，package名字是com.apple.computers,而编译器和JVM会在 <path-two>\classes\com\apple\compters中找.class文件。</path-two></path-></p><p>一个class path可能会包含好几个路径。多路径应该用分隔符分开。默认情况下，编译器和JVM查找当前目录。JAR文件按包含Java平台相关的类，所以他们的目录默认放在了class path中。</p><h1 id="7-多态"><a href="#7-多态" class="headerlink" title="7. 多态"></a>7. 多态</h1><p>在Java中，所有的对象都具有多态性，因为任何对象都能通过IS-A测试的类型和Object类。</p><p>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。</p><p>要想调用父类中被重写的方法，则必须使用关键字super。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Features </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP21-networking-programming-part0</title>
      <link href="/2020/02/10/CSAPP21-networking-programming-part0/"/>
      <url>/2020/02/10/CSAPP21-networking-programming-part0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-cs架构">1. CS架构</a><ul><li><a href="#11-ethernet">1.1. Ethernet</a></li><li><a href="#12-protocol">1.2. protocol</a></li><li><a href="#13-程序员角度的网络">1.3. 程序员角度的网络</a><ul><li><a href="#131-dnsdomain-naming-system">1.3.1. DNS(Domain Naming System)</a></li><li><a href="#132-通过端口连接为了多用户-多服务器访问">1.3.2. 通过端口连接（为了多用户 多服务器访问)</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-CS架构"><a href="#1-CS架构" class="headerlink" title="1. CS架构"></a>1. CS架构</h1><h2 id="1-1-Ethernet"><a href="#1-1-Ethernet" class="headerlink" title="1.1. Ethernet"></a>1.1. Ethernet</h2><ul><li>host链接上hub上，hub上的东西，每个host都看得到mac地址（48bit）</li><li>bridge 选择路线<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/1.png" alt></li></ul><h2 id="1-2-protocol"><a href="#1-2-protocol" class="headerlink" title="1.2. protocol"></a>1.2. protocol</h2><p>怎么样让不同网络 不同地方兼容</p><ul><li><p>IP（Internet Protocol)协议 主机到主机 （不可靠 和基本的命名解析）<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/2.png" alt></p></li><li><p>UDP (Unreliable Datagram Protocol)<br>使用IP 提供process to process 的数据包传输</p></li></ul><ul><li>TCP (Transmisson Control Protocol)<br>使用IP 提供可靠的process to process 数据流 基于连接</li></ul><h2 id="1-3-程序员角度的网络"><a href="#1-3-程序员角度的网络" class="headerlink" title="1.3. 程序员角度的网络"></a>1.3. 程序员角度的网络</h2><ul><li>主机是32bit IP address（IPv4) 128bit(IPV6)</li><li>IP address 映射成域名 （被DNS解析)<h3 id="1-3-1-DNS-Domain-Naming-System"><a href="#1-3-1-DNS-Domain-Naming-System" class="headerlink" title="1.3.1. DNS(Domain Naming System)"></a>1.3.1. DNS(Domain Naming System)</h3></li><li>本地域名localhost</li></ul><p>127.0.0.1</p><ul><li>真正的本地域名hostname</li><li>可以多对一也可以一对多 或者多对多 也可以是动态的（把你分配到哪由DNS服务器决定分配给你一个更近的地址）<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/3.png" alt><br><img src="/2020/02/10/CSAPP21-networking-programming-part0/4.png" alt></li><li>由于存在分级的机制 有些有效的域名没有对应一个host<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/5.png" alt></li></ul><h3 id="1-3-2-通过端口连接（为了多用户-多服务器访问"><a href="#1-3-2-通过端口连接（为了多用户-多服务器访问" class="headerlink" title="1.3.2. 通过端口连接（为了多用户 多服务器访问)"></a>1.3.2. 通过端口连接（为了多用户 多服务器访问)</h3><ul><li>公认提供特殊服务的端口<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/6.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> networking programming </category>
          
          <category> part0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP20-shortage-allocation-Advanced</title>
      <link href="/2020/02/09/CSAPP20-shortage-allocation-Advanced/"/>
      <url>/2020/02/09/CSAPP20-shortage-allocation-Advanced/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1free-block-strategy">1.free block strategy</a><ul><li><a href="#11-显示表explicit-free-list">1.1 显示表（explicit free list)</a><ul><li><a href="#111-显示表的两种插入规则在free-list-里面加新块">1.1.1 显示表的两种插入规则（在free list 里面加新块）</a></li></ul></li><li><a href="#12-独立分散表根据大小">1.2 独立分散表（根据大小）</a></li></ul></li><li><a href="#2-垃圾回收策略">2 垃圾回收策略</a></li></ul><!-- /TOC --><h1 id="1-free-block-strategy"><a href="#1-free-block-strategy" class="headerlink" title="1.free block strategy"></a>1.free block strategy</h1><p>除了前一天的隐式表(implicit free list)：最原始的方法需要大量搜索时间(吞吐量)，以及内存利用率也不高(字节对齐)<br>衍生出更现代的方法</p><h2 id="1-1-显示表（explicit-free-list"><a href="#1-1-显示表（explicit-free-list" class="headerlink" title="1.1 显示表（explicit free list)"></a>1.1 显示表（explicit free list)</h2><p>已分配的和隐式表一样 非分配用双向链表链接(不一定地址连续) 空闲的表<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/1.png" alt></p><h3 id="1-1-1-显示表的两种插入规则（在free-list-里面加新块）"><a href="#1-1-1-显示表的两种插入规则（在free-list-里面加新块）" class="headerlink" title="1.1.1 显示表的两种插入规则（在free list 里面加新块）"></a>1.1.1 显示表的两种插入规则（在free list 里面加新块）</h3><ul><li>LIFO （last-in-first-out）<ul><li>把新块加入到free list 首部<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/2.png" alt></li><li>优点: 简单的常数时间</li><li>缺点：研究表示内部碎片比地址顺序多</li></ul></li><li>地址顺序<ul><li>把地址插入到两个地址（大小）之中</li><li>优点：研究表明内部碎片少一点</li><li>缺点：需要搜索</li></ul></li></ul><p><strong>summary</strong> 显示表的搜索时间从隐式表的所有block到现在只是free的block，多了点内部碎片（两个指针)</p><h2 id="1-2-独立分散表（根据大小）"><a href="#1-2-独立分散表（根据大小）" class="headerlink" title="1.2 独立分散表（根据大小）"></a>1.2 独立分散表（根据大小）</h2><p>根据size分配到地方 地方不够就找更大的size<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/3.png" alt></p><p>优点：搜索时间更快 （吞吐量） 内存利用率高（内部碎片少 因为对应大小</p><h1 id="2-垃圾回收策略"><a href="#2-垃圾回收策略" class="headerlink" title="2 垃圾回收策略"></a>2 垃圾回收策略</h1><p>在动态语言差不多相同 （python java等）C++、C也有了 但是由于指针（会把大整数当指针)存在导致很多垃圾回收不了<br><strong>可以确定回收的垃圾，没有被指向或者间接指向</strong></p><p>最基础的 标记清理法（又可以利用字节对齐的3-4位bit）</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Base-day1</title>
      <link href="/2020/02/09/Java-Base-day1/"/>
      <url>/2020/02/09/Java-Base-day1/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-只写模糊的">1. <strong><em>只写模糊的</em></strong></a><ul><li><a href="#11-正则表达式">1.1. 正则表达式</a><ul><li><a href="#111-pattern类">1.1.1. Pattern类</a></li><li><a href="#112-matcher类">1.1.2. Matcher类</a></li></ul></li><li><a href="#12-可变参数-有点像指针">1.2. 可变参数 （有点像指针)</a></li><li><a href="#13-finalize方法">1.3. finalize()方法</a></li><li><a href="#14-stream-file-io">1.4. Stream File IO</a><ul><li><a href="#141-控制台输入-systemin对象">1.4.1. 控制台输入 System.in对象</a></li><li><a href="#142-控制台输入-systemout对象">1.4.2. 控制台输入 System.out对象</a></li></ul></li><li><a href="#15-读写文件">1.5. 读写文件</a><ul><li><a href="#151-fileoutputstream">1.5.1. FileOutputStream</a></li><li><a href="#152-目录">1.5.2. 目录</a></li></ul></li><li><a href="#16-scanner类">1.6. Scanner类</a></li><li><a href="#17-try-catch-异常处理">1.7. try catch 异常处理</a></li></ul></li></ul><!-- /TOC --><h1 id="1-只写模糊的"><a href="#1-只写模糊的" class="headerlink" title="1. 只写模糊的"></a>1. <strong><em>只写模糊的</em></strong></h1><h2 id="1-1-正则表达式"><a href="#1-1-正则表达式" class="headerlink" title="1.1. 正则表达式"></a>1.1. 正则表达式</h2><h3 id="1-1-1-Pattern类"><a href="#1-1-1-Pattern类" class="headerlink" title="1.1.1. Pattern类"></a>1.1.1. Pattern类</h3><p>pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。</p><h3 id="1-1-2-Matcher类"><a href="#1-1-2-Matcher类" class="headerlink" title="1.1.2. Matcher类"></a>1.1.2. Matcher类</h3><p>Matcher类：<br>Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。</p><h2 id="1-2-可变参数-（有点像指针"><a href="#1-2-可变参数-（有点像指针" class="headerlink" title="1.2. 可变参数 （有点像指针)"></a>1.2. 可变参数 （有点像指针)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarargsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 调用可变参数的方法</span></span><br><span class="line">  printMax(<span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">56.5</span>);</span><br><span class="line">      printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">( <span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"No argument passed"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;  numbers.length; i++)       <span class="keyword">if</span> (numbers[i] &gt;  result)</span><br><span class="line">      result = numbers[i];</span><br><span class="line">      System.out.println(<span class="string">"The max value is "</span> + result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-finalize-方法"><a href="#1-3-finalize-方法" class="headerlink" title="1.3. finalize()方法"></a>1.3. finalize()方法</h2><p>Java允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做finalize( )，它用来清除回收对象。</p><h2 id="1-4-Stream-File-IO"><a href="#1-4-Stream-File-IO" class="headerlink" title="1.4. Stream File IO"></a>1.4. Stream File IO</h2><h3 id="1-4-1-控制台输入-System-in对象"><a href="#1-4-1-控制台输入-System-in对象" class="headerlink" title="1.4.1. 控制台输入 System.in对象"></a>1.4.1. 控制台输入 System.in对象</h3><p>read() readline</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 BufferedReader 在控制台读取字符</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BRReadLines</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// 使用 System.in 创建 BufferedReader </span></span><br><span class="line">      BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span></span><br><span class="line">                              InputStreamReader(System.in));</span><br><span class="line">      String str;</span><br><span class="line">      System.out.println(<span class="string">"Enter lines of text."</span>);</span><br><span class="line">      System.out.println(<span class="string">"Enter 'end' to quit."</span>);</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         str = br.readLine();</span><br><span class="line">         System.out.println(str);</span><br><span class="line">      &#125; <span class="keyword">while</span>(!str.equals(<span class="string">"end"</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-控制台输入-System-out对象"><a href="#1-4-2-控制台输入-System-out对象" class="headerlink" title="1.4.2. 控制台输入 System.out对象"></a>1.4.2. 控制台输入 System.out对象</h3><p>write()不常用 因为print() 和println()好用</p><h2 id="1-5-读写文件"><a href="#1-5-读写文件" class="headerlink" title="1.5. 读写文件"></a>1.5. 读写文件</h2><p><img src="/2020/02/09/Java-Base-day1/1.png" alt></p><h3 id="1-5-1-FileOutputStream"><a href="#1-5-1-FileOutputStream" class="headerlink" title="1.5.1. FileOutputStream"></a>1.5.1. FileOutputStream</h3><p>使用字符串类型的文件名来创建一个输出流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">"C:/java/hello"</span>)</span><br></pre></td></tr></table></figure><p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"C:/java/hello"</span>);</span><br><span class="line">OutputStream f = <span class="keyword">new</span> FileOutputStream(f);</span><br></pre></td></tr></table></figure><h3 id="1-5-2-目录"><a href="#1-5-2-目录" class="headerlink" title="1.5.2. 目录"></a>1.5.2. 目录</h3><p>mkdir()</p><h2 id="1-6-Scanner类"><a href="#1-6-Scanner类" class="headerlink" title="1.6. Scanner类"></a>1.6. Scanner类</h2><h2 id="1-7-try-catch-异常处理"><a href="#1-7-try-catch-异常处理" class="headerlink" title="1.7. try catch 异常处理"></a>1.7. try catch 异常处理</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BASE </category>
          
          <category> day1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Base day0</title>
      <link href="/2020/02/08/Java-Base-day0/"/>
      <url>/2020/02/08/Java-Base-day0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-只写模糊的">1. <strong><em>只写模糊的</em></strong></a></li><li><a href="#2-修饰符">2. 修饰符</a><ul><li><a href="#21-访问修饰符">2.1. 访问修饰符</a></li><li><a href="#22-非访问修饰符">2.2. 非访问修饰符</a></li></ul></li><li><a href="#3-运算符">3. 运算符</a></li><li><a href="#4-特殊类">4. 特殊类</a></li><li><a href="#5-数组">5. 数组</a></li><li><a href="#6-arrays-类">6. Arrays 类</a></li><li><a href="#7-data-calendar-gregoriancalendar">7. Data Calendar GregorianCalendar</a></li></ul><!-- /TOC --><h1 id="1-只写模糊的"><a href="#1-只写模糊的" class="headerlink" title="1. 只写模糊的"></a>1. <strong><em>只写模糊的</em></strong></h1><h1 id="2-修饰符"><a href="#2-修饰符" class="headerlink" title="2. 修饰符"></a>2. 修饰符</h1><h2 id="2-1-访问修饰符"><a href="#2-1-访问修饰符" class="headerlink" title="2.1. 访问修饰符"></a>2.1. 访问修饰符</h2><ul><li><p>默认的，也称为default，在同一包内可见，不使用任何修饰符。<br>接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。</p></li><li><p>受保护的，以protected修饰符指定，对同一包内的类和所有子类可见（只为了子类访问）</p><ul><li>Protected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。</li><li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li></ul></li><li><p>私有的，以private修饰符指定，在同一类内可见。</p></li><li><p>共有的，以public修饰符指定，对所有类可见。</p></li></ul><h2 id="2-2-非访问修饰符"><a href="#2-2-非访问修饰符" class="headerlink" title="2.2. 非访问修饰符"></a>2.2. 非访问修饰符</h2><ul><li>static修饰符，用来创建类方法和类变量(静态方法使用静态变量)<ul><li>static 变量 类变量</li><li>static 方法 静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</li></ul></li><li>final修饰符，用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。<ul><li>final变量：final变量能被显式地初始化并且只能初始化一次。但是final对象里的数据可以被改变。也就是说final对象的引用不能改变，但是里面的值可以改变。</li><li>final方法:类中的Final方法可以被子类继承，但是不能被子类修改。声明final方法的主要目的是防止该方法的内容被修改。</li></ul></li></ul><p>final修饰符通常和static修饰符一起使用来创建类常量。</p><ul><li><p>abstract修饰符，用来创建抽象类和抽象方法。</p><ul><li>抽象类：抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充 extend。</li><li>抽象方法： 抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</li></ul></li><li><p>synchronized和volatile修饰符，主要用于线程的编程。</p></li></ul><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h1><ul><li><p>instanceOf 运算符<br>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p></li><li><p>增强for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-特殊类"><a href="#4-特殊类" class="headerlink" title="4. 特殊类"></a>4. 特殊类</h1><ul><li><p>Number类：在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。<br><img src="/2020/02/08/Java-Base-day0/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Integer x = <span class="number">5</span>; <span class="comment">// boxes int to an Integer object</span></span><br><span class="line">      x =  x + <span class="number">10</span>;   <span class="comment">// unboxes the Integer to a int</span></span><br><span class="line">      System.out.println(x); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Math 类:数学操作</p></li><li><p>Character 类:我们经常会遇到需要使用对象，而不是内置数据类型的情况，</p><ul><li>装拆箱：例如，将一个char类型的参数传递给需要一个Character类型参数时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</li></ul></li><li><p>String 类:</p><ul><li><strong>注意</strong>:String类是不可改变的，所以你一旦创建了String对象，那它的值就无法改变了。 如果需要对字符串做很多修改，那么应该选择使用StringBuffer &amp; StringBuilder 类。</li><li>StringBuffer &amp; StringBuilder 类。<br>由于StringBuilder相较于StringBuffer有速度优势，所以多数情况下建议使用StringBuilder类。然而在应用程序要求线程安全(数据加锁)的情况下，则必须使用StringBuffer类。</li></ul></li></ul><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h1><p>dataType[] arrayRefVar;   // 首选的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><h1 id="6-Arrays-类"><a href="#6-Arrays-类" class="headerlink" title="6. Arrays 类"></a>6. Arrays 类</h1><p>java.util.Arrays类能方便地操作数组，它提供的所有方法都是静态的。具有以下功能：</p><ul><li><p>给数组赋值：通过fill方法。</p></li><li><p>对数组排序：通过sort方法,按升序。</p></li><li><p>比较数组：通过equals方法比较数组中元素值是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p></li></ul><h1 id="7-Data-Calendar-GregorianCalendar"><a href="#7-Data-Calendar-GregorianCalendar" class="headerlink" title="7. Data Calendar GregorianCalendar"></a>7. Data Calendar GregorianCalendar</h1>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BASE </category>
          
          <category> day0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP19: shortage allocation:Basic</title>
      <link href="/2020/02/07/CSAPP19-shortage-allocation-Basic/"/>
      <url>/2020/02/07/CSAPP19-shortage-allocation-Basic/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-动态分配内存堆">1. 动态分配内存（堆）</a><ul><li><a href="#11-回收方式">1.1 回收方式</a></li><li><a href="#12-衡量标准">1.2 衡量标准</a></li></ul></li><li><a href="#2-分配中的细节">2. 分配中的细节</a><ul><li><a href="#21-怎么free多少内存只靠指针">2.1 怎么free多少内存只靠指针</a></li><li><a href="#22-怎么跟踪这些没分配的内存">2.2 怎么跟踪这些没分配的内存</a></li><li><a href="#23-怎么应对格外的空间字节对齐造成的浪费">2.3 怎么应对格外的空间（字节对齐造成的浪费）</a></li><li><a href="#24-怎么找空块去分配">2.4 怎么找空块去分配</a></li><li><a href="#25-如何合理释放已经分配的块">2.5 如何合理释放已经分配的块</a></li></ul></li></ul><!-- /TOC --><h1 id="1-动态分配内存（堆）"><a href="#1-动态分配内存（堆）" class="headerlink" title="1. 动态分配内存（堆）"></a>1. 动态分配内存（堆）</h1><h2 id="1-1-回收方式"><a href="#1-1-回收方式" class="headerlink" title="1.1 回收方式"></a>1.1 回收方式</h2><ul><li>c 显示分配 显示回收 </li><li>java等 显示分配 隐式回收</li></ul><h2 id="1-2-衡量标准"><a href="#1-2-衡量标准" class="headerlink" title="1.2 衡量标准"></a>1.2 衡量标准</h2><ul><li>吞吐量：每秒能调用多少次</li><li>内存利用率：就是分配中使用的有效内存<br>  影响因素<ul><li>内部碎片：字节对齐 需要标记等</li><li>外部碎片： 如下图<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/1.png" alt></li></ul></li></ul><h1 id="2-分配中的细节"><a href="#2-分配中的细节" class="headerlink" title="2. 分配中的细节"></a>2. 分配中的细节</h1><h2 id="2-1-怎么free多少内存只靠指针"><a href="#2-1-怎么free多少内存只靠指针" class="headerlink" title="2.1 怎么free多少内存只靠指针"></a>2.1 怎么free多少内存只靠指针</h2><p>通过堆的header标识</p><h2 id="2-2-怎么跟踪这些没分配的内存"><a href="#2-2-怎么跟踪这些没分配的内存" class="headerlink" title="2.2 怎么跟踪这些没分配的内存"></a>2.2 怎么跟踪这些没分配的内存</h2><p>4种方法<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/2.png" alt></p><p><strong><em>以下以第一种方法讲解后续问题</em></strong></p><h2 id="2-3-怎么应对格外的空间（字节对齐造成的浪费）"><a href="#2-3-怎么应对格外的空间（字节对齐造成的浪费）" class="headerlink" title="2.3 怎么应对格外的空间（字节对齐造成的浪费）"></a>2.3 怎么应对格外的空间（字节对齐造成的浪费）</h2><p>如下图<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/3.png" alt><br><strong><em>无可避免，但是可以节省</em></strong></p><p>因为size的大小总是8的倍数或者16的 所以要存一些东西的时候回出现空的</p><p>也因为size的大小总是8的倍数或者16的 所以不需要一个额外的word来存状态 只需存在size的 最后3位bit里面的一位 因为他们一直是0</p><h2 id="2-4-怎么找空块去分配"><a href="#2-4-怎么找空块去分配" class="headerlink" title="2.4 怎么找空块去分配"></a>2.4 怎么找空块去分配</h2><ul><li>first fit：从头开始找（线性时间 terrible)</li><li>Next fit: 从上次找结束的地方开始够放置的就行 （也并不好）</li><li>best fit：找到最好的块放置</li><li>good fit：first fit + best fit 再开始的地方找一些最合适的块存放</li></ul><h2 id="2-5-如何合理释放已经分配的块"><a href="#2-5-如何合理释放已经分配的块" class="headerlink" title="2.5 如何合理释放已经分配的块"></a>2.5 如何合理释放已经分配的块</h2><ul><li><p>直接释放 （置位释放）<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/4.png" alt><br>waste too much  内存会逐渐崩溃</p></li><li><p>连接的下一个释放<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/5.png" alt><br>但是处理不了上面一块</p></li><li><p>通过添加foot 连接的上下释放<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/6.png" alt><br>但是这样有点太浪费了，因为对于分配过的内存是不需要合并的。<br>可以通过利用size那最后3位都是0，拿出一位来标记上面是否是已分配的块，这样不是的话它肯定有foot， 一切一样是的话就不做操作。（tricks)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP18: virtual memory(real system)</title>
      <link href="/2020/02/07/CSAPP18-virtual-memory-real-system/"/>
      <url>/2020/02/07/CSAPP18-virtual-memory-real-system/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-symple-system-memory-address-translastion">1 symple system memory address translastion</a></li><li><a href="#2-i7-linux-memory-system">2 i7 linux memory system</a></li><li><a href="#3-memory-mapping">3 memory mapping</a></li></ul><!-- /TOC --><h1 id="1-symple-system-memory-address-translastion"><a href="#1-symple-system-memory-address-translastion" class="headerlink" title="1 symple system memory address translastion"></a>1 symple system memory address translastion</h1><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/1.png" alt><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>hit 直接得到PPN 然后VPO和PPO是完全相等的</li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/1.png" alt><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>没有hit 得去PTE里面找了 发现在里面 没有page falut </li><li>得到了PPN </li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><h1 id="2-i7-linux-memory-system"><a href="#2-i7-linux-memory-system" class="headerlink" title="2 i7 linux memory system"></a>2 i7 linux memory system</h1><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/3.png" alt><br>Key  Point</p><ul><li>L1:4 cycle L2:10 cycle L3: 40-50 cyclce ps:L3是四核共用</li><li>有d-cache 和i-cache d-TLB 和 i-TLB</li><li>为什么不把L2 L1 合并原因有: d i占比不一定一样 还有就是缓存的限制大小<br>具体流程<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/4.png" alt></li></ul><p>技巧可以VPO=PPO=CI+CO先找到对应的位置在等tag（translation）匹配<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/6.png" alt></p><p>linux 把VM看做一个链表类似<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/8.png" alt></p><h1 id="3-memory-mapping"><a href="#3-memory-mapping" class="headerlink" title="3 memory mapping"></a>3 memory mapping</h1><p>两种分享方式</p><ol><li><p>共享地址<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/9.png" alt></p></li><li><p>私密的共享（such as fork and execve)<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/11.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual memory </category>
          
          <category> real system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP17: virtual memory concept</title>
      <link href="/2020/02/05/CSAPP17-virtual-memory-concept/"/>
      <url>/2020/02/05/CSAPP17-virtual-memory-concept/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1what-is-virtual-memory">1.what is virtual memory</a></li><li><a href="#2why-vm">2.why VM</a><ul><li><a href="#21-for-cache">2.1 for cache</a><ul><li><a href="#211-overview">2.1.1 overview</a></li><li><a href="#212-pte">2.1.2 PTE</a></li></ul></li><li><a href="#22-for-memory-management">2.2 for memory management</a></li><li><a href="#23-for-memory-protection">2.3 for memory protection</a></li></ul></li><li><a href="#3-detail-va-virtual-address">3 detail VA virtual address</a></li><li><a href="#4-summary">4 Summary</a></li></ul><!-- /TOC --><h1 id="1-What-is-virtual-memory"><a href="#1-What-is-virtual-memory" class="headerlink" title="1. What is virtual memory"></a>1. What is virtual memory</h1><p>cpu访问的都是虚拟内存通过MMU</p><h1 id="2-Why-VM"><a href="#2-Why-VM" class="headerlink" title="2.Why VM"></a>2.Why VM</h1><h2 id="2-1-for-cache"><a href="#2-1-for-cache" class="headerlink" title="2.1 for cache"></a>2.1 for cache</h2><h3 id="2-1-1-overview"><a href="#2-1-1-overview" class="headerlink" title="2.1.1 overview"></a>2.1.1 overview</h3><p>如下图<br><img src="https://i.loli.net/2020/02/05/yc96l5gPtokXm7O.png" alt="image.png"><br><strong>注意</strong> ：</p><ul><li>virtual pages代表着磁盘上的地址 </li><li>有些被缓存了 </li><li>有些没有还在磁盘上 </li><li>有些未分配代表连磁盘上都没</li></ul><p>DRAM slower than SRAM 10x</p><p>Disk slower 10000x than DRAM</p><p>so</p><ul><li>page sizes 4KB to 4MB</li><li>全相缓存 （尽管要很久搜索）</li></ul><h3 id="2-1-2-PTE"><a href="#2-1-2-PTE" class="headerlink" title="2.1.2 PTE"></a>2.1.2 PTE</h3><p>使用Page table entries 去map VP 到 PP<br><img src="https://i.loli.net/2020/02/05/qPa5F8gHERhOb61.png" alt="image.png"></p><p>如果CPU给的VP没有page hit 会有page falut 然后和缓存一样替代进去</p><h2 id="2-2-for-memory-management"><a href="#2-2-for-memory-management" class="headerlink" title="2.2 for memory management"></a>2.2 for memory management</h2><p><strong>关键点</strong> 每个进程都有独立的虚拟地址从0开始 似乎都有独立的空间 共享库也得益于此 每个进程似乎<br>单独拥有一个共享库函数代码<br><img src="https://i.loli.net/2020/02/05/1E94grucImyD2YR.png" alt="image.png"></p><h2 id="2-3-for-memory-protection"><a href="#2-3-for-memory-protection" class="headerlink" title="2.3 for memory protection"></a>2.3 for memory protection</h2><p>在PTE上对每个PP 有4个bit位<br>intel 虚拟内存是48位的 剩下的地址有些只能内核去用 高位<br><img src="https://i.loli.net/2020/02/05/IQbFqrRsKTo8mNV.png" alt="image.png"></p><h1 id="3-detail-VA-virtual-address"><a href="#3-detail-VA-virtual-address" class="headerlink" title="3 detail VA virtual address"></a>3 detail VA virtual address</h1><p><img src="https://i.loli.net/2020/02/05/GnjrcmY6t2JWH9L.png" alt="image.png"><br><img src="https://i.loli.net/2020/02/06/qcUxJmFO3vaWLdb.png" alt="2.png"><br><img src="https://i.loli.net/2020/02/06/7f5OK1IrH9FkqTd.png" alt="3.png"></p><h1 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4 Summary"></a>4 Summary</h1><ul><li>程序角度角度 VM<ul><li>每个进程有独立空间 不会被其他进程打乱</li></ul></li><li>系统角度 VM<ul><li>使得内存 更好缓存 （局部性是关键）</li><li>简化了内存管理 </li><li>内存保护</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual memory </category>
          
          <category> concept </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
