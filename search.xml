<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode-secondTen-easyPart</title>
      <link href="/2020/02/25/Leetcode-secondTen-easyPart/"/>
      <url>/2020/02/25/Leetcode-secondTen-easyPart/</url>
      
        <content type="html"><![CDATA[<h1 id="Q35"><a href="#Q35" class="headerlink" title="Q35"></a>Q35</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</span><br><span class="line"></span><br><span class="line">你可以假设数组中无重复元素。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br><span class="line">示例 4:</span><br><span class="line"></span><br><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 直接遍历</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li><li><p><strong>折半查找：</strong> 注意细节 (left+right)&lt;&lt;&lt;1 无符号右移 不怕溢出。 </p><ul><li><p>第一种方法折半 left&lt;=right 注意防止死循环 可以利用right=mid-1 left=mid+1 return left</p></li><li><p>第二种方法折半 left&lt;right 分成两个区间[0,mid][mid+1,right] 然后提前判断最前面和最后面的位置防止死循环和错解。</p><p>时间复杂度：O(log2 N) 空间复杂度:O(1)</p></li></ul></li></ul><h1 id="Q38"><a href="#Q38" class="headerlink" title="Q38"></a>Q38</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：</span><br><span class="line"></span><br><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">1 被读作  &quot;one 1&quot;  (&quot;一个一&quot;) , 即 11。</span><br><span class="line">11 被读作 &quot;two 1s&quot; (&quot;两个一&quot;）, 即 21。</span><br><span class="line">21 被读作 &quot;one 2&quot;,  &quot;one 1&quot; （&quot;一个二&quot; ,  &quot;一个一&quot;) , 即 1211。</span><br><span class="line"></span><br><span class="line">给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。</span><br><span class="line"></span><br><span class="line">注意：整数序列中的每一项将表示为一个字符串。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 1</span><br><span class="line">输出: &quot;1&quot;</span><br><span class="line">解释：这是一个基本样例。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 4</span><br><span class="line">输出: &quot;1211&quot;</span><br><span class="line">解释：当 n &#x3D; 3 时，序列是 &quot;21&quot;，其中我们有 &quot;2&quot; 和 &quot;1&quot; 两组，&quot;2&quot; 可以读作 &quot;12&quot;，也就是出现频次 &#x3D; 1 而 值 &#x3D; 2；类似 &quot;1&quot; 可以读作 &quot;11&quot;。所以答案是 &quot;12&quot; 和 &quot;11&quot; 组合在一起，也就是 &quot;1211&quot;。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 迭代n轮 利用stringbuild.append 添加频率和值</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q53"><a href="#Q53" class="headerlink" title="Q53"></a>Q53</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br><span class="line">进阶:</span><br><span class="line"></span><br><span class="line">如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 记录当前时刻的最大值 以及 所有时刻的最大值注意用math.max</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li><li><p><strong>分治法：</strong> 每一小块的最大值 </p><p>  时间复杂度：O(N*log2 N) 空间复杂度:O(N)</p></li></ul><h1 id="Q58"><a href="#Q58" class="headerlink" title="Q58"></a>Q58</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">给定一个仅包含大小写字母和空格 &#39; &#39; 的字符串 s，返回其最后一个单词的长度。</span><br><span class="line"></span><br><span class="line">如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。</span><br><span class="line"></span><br><span class="line">如果不存在最后一个单词，请返回 0 。</span><br><span class="line"></span><br><span class="line">说明：一个单词是指仅由字母组成、不包含任何空格的 最大子字符串。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入: &quot;Hello World&quot;</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>反向遍历法(暴力法)：</strong> 遍历到’ ‘通过substring()位置取出子串 （末尾的空格不算</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q66"><a href="#Q66" class="headerlink" title="Q66"></a>Q66</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。</span><br><span class="line"></span><br><span class="line">最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</span><br><span class="line"></span><br><span class="line">你可以假设除了整数 0 之外，这个整数不会以零开头。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [1,2,3]</span><br><span class="line">输出: [1,2,4]</span><br><span class="line">解释: 输入数组表示数字 123。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: [4,3,2,1]</span><br><span class="line">输出: [4,3,2,2]</span><br><span class="line">解释: 输入数组表示数字 4321。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 根据十进制 从末位开始相加 %10 carry  加到最后在申请空间</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q67"><a href="#Q67" class="headerlink" title="Q67"></a>Q67</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给定两个二进制字符串，返回他们的和（用二进制表示）。</span><br><span class="line"></span><br><span class="line">输入为非空字符串且只包含数字 1 和 0。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: a &#x3D; &quot;11&quot;, b &#x3D; &quot;1&quot;</span><br><span class="line">输出: &quot;100&quot;</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: a &#x3D; &quot;1010&quot;, b &#x3D; &quot;1011&quot;</span><br><span class="line">输出: &quot;10101&quot;</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>函数法：</strong> 转换成int 然后加法 然后在转换回去（有溢出)<br>可以利用biginteger去掉溢出 但是效率很慢</p><p>  时间复杂度:O(n+m)) 空间复杂度:O(max(n,m))</p></li><li><p><strong>暴力法：</strong> 遍历常的一串 利用return 的方式选取长度大的在a 小的在b 然后遍历短的在遍历长的 思路清晰 需要注意可以利用stringbuild(性能最好) append reverse </p><p>  时间复杂度:O(max(n,m)) 空间复杂度:O(max(n,m))</p></li><li><p><strong>移位法：</strong> 在不允许加法的情况下 利用a|b+ carry(a&amp;b&lt;&lt;1)<br>反复得到</p><p>  时间复杂度:O(max(n,m)) 空间复杂度:O(max(n,m))</p></li></ul><h1 id="Q69"><a href="#Q69" class="headerlink" title="Q69"></a>Q69</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">实现 int sqrt(int x) 函数。</span><br><span class="line"></span><br><span class="line">计算并返回 x 的平方根，其中 x 是非负整数。</span><br><span class="line"></span><br><span class="line">由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>公式法：</strong> e^0.5lnx</p><p>  时间复杂度:O(1) 空间复杂度:O(1)</p></li><li><p><strong>牛顿法：</strong> 迭代n轮</p><p>  时间复杂度:O(log2n) 空间复杂度:O(1)</p></li></ul><h1 id="Q70"><a href="#Q70" class="headerlink" title="Q70"></a>Q70</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</span><br><span class="line"></span><br><span class="line">每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span><br><span class="line"></span><br><span class="line">注意：给定 n 是一个正整数。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>递归法：</strong> 爬一步爬两步 </p><p>  时间复杂度:O(2^n) 空间复杂度:O(N) （<strong>树的深度</strong>）</p></li><li><p><strong>动态规划DP：</strong> 当前等于前面两步的之和</p><p>  时间复杂度:O(N) 空间复杂度:O(N)</p></li><li><p><strong>数列法（规律）：</strong> 当前等于前面两步的之和</p><p>  时间复杂度:O(N) 空间复杂度:O(1)</p></li><li><p><strong>Binets 方法：</strong> 利用矩阵计算斐波那数列</p><p>  时间复杂度:O(logn) 空间复杂度:O(1)</p></li></ul><h1 id="Q83"><a href="#Q83" class="headerlink" title="Q83"></a>Q83</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;1-&gt;2</span><br><span class="line">输出: 1-&gt;2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: 1-&gt;1-&gt;2-&gt;3-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针：</strong> 记录当前的和已遍历</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q88"><a href="#Q88" class="headerlink" title="Q88"></a>Q88</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</span><br><span class="line">你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line">输入:</span><br><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span><br><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span><br><span class="line"></span><br><span class="line">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针：</strong> 需要创建的新的空间（system.arraycopy 可以复制空间)</p><p>  时间复杂度:O(n) 空间复杂度:O(n)</p></li><li><p><strong>双指针（从后遍历）：</strong> 从后面遍历这样不需要新的空间</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> secondTen </category>
          
          <category> easyPart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-firstTen-easyPart</title>
      <link href="/2020/02/18/Leetcode-firstTen-easyPart/"/>
      <url>/2020/02/18/Leetcode-firstTen-easyPart/</url>
      
        <content type="html"><![CDATA[<h1 id="Q1："><a href="#Q1：" class="headerlink" title="Q1："></a>Q1：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数数组 nums 和一个目标值 target，请你在该数组中</span><br><span class="line">找出和为目标值的那 两个 整数，并返回他们的数组下标。</span><br><span class="line"></span><br><span class="line">你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line"></span><br><span class="line"> 给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"> 因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line"> 所以返回 [0, 1]</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 拿到一个数就把数组遍历一遍 </p><p>  时间复杂度:O(n^2) 空间复杂度:O(1)</p></li><li><p><strong>Hashmap：</strong> 存储key（ 能被查询的）value  index (利用两个互相匹配的idea 可以一次循环 不需要先存在查)</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li></ul><h1 id="Q7："><a href="#Q7：" class="headerlink" title="Q7："></a>Q7：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br><span class="line"></span><br><span class="line"> 示例 2:</span><br><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br><span class="line"></span><br><span class="line">**注意:**</span><br><span class="line">假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</span><br></pre></td></tr></table></figure><p>review ideas: </p><ul><li><p><strong>String法：</strong> 利用reverse</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li><li><p><strong>取余法：</strong> 取余得个位 除10在取余得十位 需要注意判断 最大值、最小值条件<br>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q9："><a href="#Q9：" class="headerlink" title="Q9："></a>Q9：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span><br><span class="line">示例 1:</span><br><span class="line">输入: 121</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">**进阶:**</span><br><span class="line">你能不将整数转为字符串来解决这个问题吗？</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>String法：</strong> 利用reverse</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li><li><p><strong>取余法：</strong> 取余得个位 除10在取余得十位 (只需一半回文即可，遍历到反转的比正常的大)</p><p>  时间复杂度：O(n/2) 空间复杂度:O(1)</p></li></ul><h1 id="Q13："><a href="#Q13：" class="headerlink" title="Q13："></a>Q13：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</span><br><span class="line"></span><br><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br><span class="line">例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span><br><span class="line"></span><br><span class="line">通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。</span><br><span class="line">这个特殊的规则只适用于以下六种情况：</span><br><span class="line"></span><br><span class="line">I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span><br><span class="line">X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </span><br><span class="line">C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span><br><span class="line"></span><br><span class="line">给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</span><br><span class="line">示例 1:</span><br><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: &quot;IX&quot;</span><br><span class="line">输出: 9</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</span><br><span class="line"></span><br><span class="line">示例 5:</span><br><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法</strong>： 找到’I’ ‘X’ ‘C’ 然后匹配左边计算 （程序比较乱)</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li><li><p><strong>list表 加value数组</strong> ： 通过index判断左右 通过value计算</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li><li><p><strong>双指针：switch得到值 pre_num和当前比较 （罗马字的特点只要之前是小的就一定减) 根据大小加减</strong></p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q14："><a href="#Q14：" class="headerlink" title="Q14："></a>Q14：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。</span><br><span class="line">如果不存在公共前缀，返回空字符串 &quot;&quot;。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line"></span><br><span class="line">解释: 输入不存在公共前缀。</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">所有输入只包含小写字母 a-z 。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>暴力法</strong>： 找到最小串。从他开始遍历 </p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li><li><p><strong>迭代法</strong> ： 找两个前缀 继续迭代</p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li><li><p><strong>暴力法2</strong>：从第一个串的第一个字符开始 直到每个子串没了 或者不匹配利用indexof查找字符串的最后位置（short and beauty)</p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li></ul><h1 id="Q20："><a href="#Q20：" class="headerlink" title="Q20："></a>Q20：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。</span><br><span class="line"></span><br><span class="line">有效字符串需满足：</span><br><span class="line"></span><br><span class="line">左括号必须用相同类型的右括号闭合。</span><br><span class="line">左括号必须以正确的顺序闭合。</span><br><span class="line">注意空字符串可被认为是有效字符串。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br><span class="line">示例 3:</span><br><span class="line"></span><br><span class="line">输入: &quot;(]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 4:</span><br><span class="line"></span><br><span class="line">输入: &quot;([)]&quot;</span><br><span class="line">输出: false</span><br><span class="line">示例 5:</span><br><span class="line"></span><br><span class="line">输入: &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>栈</strong>： 注意边界问题(可以把匹配的存进Hashmap)</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li></ul><h1 id="Q21："><a href="#Q21：" class="headerlink" title="Q21："></a>Q21：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><p>review ideas：<br><strong>注意 链表的空间已经有了 尽量在没申请其他空间的情况下链接他们，而不是复制</strong></p><p><strong>递归法</strong>：递归合并 遍历到空 </p><pre><code>时间复杂度：O(2n) 空间复杂度:O(n)</code></pre><p><strong>迭代法</strong>: 迭代（与上面一样的思路) (要注意保存链表头)</p><pre><code>时间复杂度：O(2n) 空间复杂度:O(n)</code></pre><h1 id="Q26："><a href="#Q26：" class="headerlink" title="Q26："></a>Q26：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</span><br><span class="line"></span><br><span class="line">不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">给定数组 nums &#x3D; [1,1,2], </span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针</strong>：记录当前位置和遍历 位置</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q27："><a href="#Q27：" class="headerlink" title="Q27："></a>Q27：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</span><br><span class="line"></span><br><span class="line">不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</span><br><span class="line"></span><br><span class="line">元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">给定 nums &#x3D; [3,2,2,3], val &#x3D; 3,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span><br><span class="line"></span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line"></span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line"></span><br><span class="line">你不需要考虑数组中超出新长度后面的元素</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>双指针</strong>：记录当前位置和遍历 位置</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="Q28-kmp-："><a href="#Q28-kmp-：" class="headerlink" title="Q28(kmp)："></a>Q28(kmp)：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">实现 strStr() 函数。</span><br><span class="line"></span><br><span class="line">给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">输出: 2</span><br><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">输入: haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">输出: -1</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</span><br><span class="line"></span><br><span class="line">对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</span><br></pre></td></tr></table></figure><p>review ideas：</p><ul><li><p><strong>匹配第一个字符子串法</strong>：正常想法</p><p>  时间复杂度：O(nm) 空间复杂度:O(1)</p></li></ul><ul><li><p><strong>KMP(查找效率高，状态机)</strong>：<strong>状态机来节省时间 当大型数据时候特别有效</strong></p><p>  时间复杂度：O(n) 空间复杂度:O(m)（二维数组时空复杂度O(m))</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> firstTen </category>
          
          <category> easyPart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-variables-type</title>
      <link href="/2020/02/17/Java-variables-type/"/>
      <url>/2020/02/17/Java-variables-type/</url>
      
        <content type="html"><![CDATA[<p><strong>数组、类、接口按值传递的时候都是传递对象的地址。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> []a=&#123;<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"a[0] :"</span>a[<span class="number">0</span>]+<span class="string">"a[1] : "</span>+a[<span class="number">1</span>]);<span class="comment">//a[0]=10,a[1]=20;      </span></span><br><span class="line">        swap(a, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"a[0] :"</span>a[<span class="number">0</span>]+<span class="string">"a[1] : "</span>+a[<span class="number">1</span>]);<span class="comment">//a[0]=20,a[1]=10;  </span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> []a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=a[i];</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        a[j]=temp;</span><br><span class="line">        System.out.println(<span class="string">"a[0] :"</span>a[<span class="number">0</span>]+<span class="string">"a[1] : "</span>+a[<span class="number">1</span>]);<span class="comment">//a[0]=20,a[1]=10;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">/*a[0]=10 a[1]=20</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  a[0]=20 a[1]=10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  a[0]=20 a[1]=10   </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="/2020/02/17/Java-variables-type/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">          Foo f = <span class="keyword">new</span> Foo(<span class="string">"f"</span>);</span><br><span class="line">          changeReference(f); <span class="comment">// It won't change the reference!</span></span><br><span class="line">          modifyReference(f); <span class="comment">// It will modify the object that the reference variable "f" refers to!</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeReference</span><span class="params">(Foo a)</span></span>&#123;</span><br><span class="line">          Foo b = <span class="keyword">new</span> Foo(<span class="string">"b"</span>);</span><br><span class="line">          a = b;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modifyReference</span><span class="params">(Foo c)</span></span>&#123;</span><br><span class="line">          c.setAttribute(<span class="string">"c"</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>changerefernce(f)</strong><br><img src="/2020/02/17/Java-variables-type/2.png" alt></p><p>String 类值不可改</p><p>StringBuffer 可以</p><p><a href="https://blog.csdn.net/u013309870/article/details/75499175" target="_blank" rel="noopener">https://blog.csdn.net/u013309870/article/details/75499175</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> variables </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP26-thread-level-Parallelism</title>
      <link href="/2020/02/16/CSAPP26-thread-level-Parallelism/"/>
      <url>/2020/02/16/CSAPP26-thread-level-Parallelism/</url>
      
        <content type="html"><![CDATA[<h1 id="多核和超线程"><a href="#多核和超线程" class="headerlink" title="多核和超线程"></a>多核和超线程</h1><p><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/1.png" alt><br>现在的计算机都是并行流水线<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/2.png" alt><br>超线程(hpyerthreading)意味着在单核的情况下多个线程同时走</p><h1 id="并行加法"><a href="#并行加法" class="headerlink" title="并行加法"></a>并行加法</h1><p>目标：加0到n-1<br>想法：使用多个进程用互斥量来加globel sum<br>结果<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/3.png" alt></p><p>改进：信号同步是很慢的，每个进程单独使用数组不同步,主进程等待所有进程结束然后相加<br>结果:<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/4.png" alt></p><p>再改进：不用每次改数组，而是用局部变量（寄存器)累加，最后给数组<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/5.png" alt><br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/6.png" alt><br>可以看到这里超线程并没有帮到我们（本身就在很好的使用寄存器)<br><strong>但是实际中的程序复杂的多，并不是这么简单利用</strong></p><h1 id="Amdahl’s-Law（阿姆达尔定律）"><a href="#Amdahl’s-Law（阿姆达尔定律）" class="headerlink" title="Amdahl’s Law（阿姆达尔定律）"></a>Amdahl’s Law（阿姆达尔定律）</h1><p>研究一部分性能提升（使用并行)对总体性能的影响<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/7.png" alt></p><h1 id="快速排序（利用并行）"><a href="#快速排序（利用并行）" class="headerlink" title="快速排序（利用并行）"></a>快速排序（利用并行）</h1><p>原来的 排左 排右<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/8.png" alt></p><p>用线程递归  直到够小<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/9.png" alt><br>还要注意的是碎片太小 就不够并行性 太大就线程开销就太大了<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/10.png" alt></p><h1 id="线程连续性法则（Thread-consistency）"><a href="#线程连续性法则（Thread-consistency）" class="headerlink" title="线程连续性法则（Thread consistency）"></a>线程连续性法则（Thread consistency）</h1><p>决定了不会出现1，100  或者100,1<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/11.png" alt><br>但是如果有不耦合的缓存，就可能出现。<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/12.png" alt></p><h2 id="Snoopy-Cache-史努比缓存"><a href="#Snoopy-Cache-史努比缓存" class="headerlink" title="Snoopy Cache(史努比缓存)"></a>Snoopy Cache(史努比缓存)</h2><p>对缓存进行了三种标记<br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/13.png" alt><br><img src="/2020/02/16/CSAPP26-thread-level-Parallelism/14.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> Parallelism </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-String-getEveryChar</title>
      <link href="/2020/02/15/Java-String-getEveryChar/"/>
      <url>/2020/02/15/Java-String-getEveryChar/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-导语string-常用方法">1. 导语(string 常用方法)</a></li><li><a href="#2-获取string-每个字符的方法">2. 获取String 每个字符的方法</a><ul><li><a href="#21-scharati">2.1. s.charAt(i)</a></li><li><a href="#22-ssubstringii1">2.2. s.subString(i,i+1)</a></li><li><a href="#23-stochararray-csize">2.3. s.toCharArray(), c.size()</a></li></ul></li></ul><!-- /TOC --><h1 id="1-导语-string-常用方法"><a href="#1-导语-string-常用方法" class="headerlink" title="1. 导语(string 常用方法)"></a>1. 导语(string 常用方法)</h1><p>对于字符串的操作，我们常用的就是trim()去除前后空格、subString()截取子字符串<br><img src="/2020/02/15/Java-String-getEveryChar/1.jpg" alt></p><h1 id="2-获取String-每个字符的方法"><a href="#2-获取String-每个字符的方法" class="headerlink" title="2. 获取String 每个字符的方法"></a>2. 获取String 每个字符的方法</h1><h2 id="2-1-s-charAt-i"><a href="#2-1-s-charAt-i" class="headerlink" title="2.1. s.charAt(i)"></a>2.1. s.charAt(i)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"aaabbbbccccdddd"</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//定义对象依次存放每一个字符</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() ; i++)&#123;</span><br><span class="line">  </span><br><span class="line">  String ss = String.valueOf(str.charAt(i));</span><br><span class="line">  </span><br><span class="line">  list.add(ss);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="2-2-s-subString-i-i-1"><a href="#2-2-s-subString-i-i-1" class="headerlink" title="2.2. s.subString(i,i+1)"></a>2.2. s.subString(i,i+1)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"aaabbbbccccdddd"</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//定义对象依次存放每一个字符</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() ; i++)&#123;</span><br><span class="line">  </span><br><span class="line">  String ss = String.subString(i,i+<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  list.add(ss);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure><h2 id="2-3-s-toCharArray-c-size"><a href="#2-3-s-toCharArray-c-size" class="headerlink" title="2.3. s.toCharArray(), c.size()"></a>2.3. s.toCharArray(), c.size()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"aaabbbbccccdddd"</span>;</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">//定义对象依次存放每一个字符</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length() ; i++)&#123;</span><br><span class="line">  </span><br><span class="line">  String ss = String.subString(i,i+<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  list.add(ss);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list.toString());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP25-synchronization-Advanced</title>
      <link href="/2020/02/15/CSAPP25-synchronization-Advanced/"/>
      <url>/2020/02/15/CSAPP25-synchronization-Advanced/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-use-semaphores-to-protectd-shared-variables">1. use semaphores to protectd shared variables</a><ul><li><a href="#11-two-classical-examples">1.1. two classical examples</a><ul><li><a href="#111-the-producer-consumer-probelm">1.1.1. the producer-consumer probelm</a></li><li><a href="#112-reader-writer-problem">1.1.2. reader writer problem</a></li></ul></li><li><a href="#12-put-it-together">1.2. put it together</a></li></ul></li><li><a href="#2-线程安全">2. 线程安全</a><ul><li><a href="#21-unsafe-types-functions">2.1. unsafe types functions</a><ul><li><a href="#211-class1-没保护共享变量">2.1.1. class1 没保护共享变量</a></li><li><a href="#212-class2-依赖全局变量状态">2.1.2. class2 依赖全局变量状态</a></li><li><a href="#213-class3-返回一个静态变量的地址">2.1.3. class3 返回一个静态变量的地址</a></li><li><a href="#214-class4-调用任何线程不安全的函数在函数里面">2.1.4. class4 调用任何线程不安全的函数在函数里面</a></li><li><a href="#215-重定位函数没有任何shared变量">2.1.5. 重定位函数（没有任何shared变量）</a></li></ul></li><li><a href="#22-problems">2.2. problems</a><ul><li><a href="#221-races-不能假设一个线程先到达一个点在另一个线程到达那个点前">2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）</a></li><li><a href="#222-deadlock两个线程互相等待对方释放">2.2.2. deadlock（两个线程互相等待对方释放）</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-use-semaphores-to-protectd-shared-variables"><a href="#1-use-semaphores-to-protectd-shared-variables" class="headerlink" title="1. use semaphores to protectd shared variables"></a>1. use semaphores to protectd shared variables</h1><p>mutex（互斥量）</p><h2 id="1-1-two-classical-examples"><a href="#1-1-two-classical-examples" class="headerlink" title="1.1. two classical examples"></a>1.1. two classical examples</h2><h3 id="1-1-1-the-producer-consumer-probelm"><a href="#1-1-1-the-producer-consumer-probelm" class="headerlink" title="1.1.1. the producer-consumer probelm"></a>1.1.1. the producer-consumer probelm</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/1.png" alt><br>生产者等待buffer的空槽 插入items<br>消费者等待items 将其重buffer中移除 告知生产者<br>图像渲染帧：帧被创建 然后在被渲染<br>图形页面驱动：鼠标等事件发生 然后响应</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Insert item onto the rear of shared buffer sp */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sbuf_insert</span><span class="params">(<span class="keyword">sbuf_t</span> *sp, <span class="keyword">int</span> item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P(&amp;sp-&gt;slots); <span class="comment">/* Wait for available slot */</span></span><br><span class="line">P(&amp;sp-&gt;mutex); <span class="comment">/* Lock the buffer */</span></span><br><span class="line">sp-&gt;buf[(++sp-&gt;rear)%(sp-&gt;n)] = item; <span class="comment">/* Insert the item */</span></span><br><span class="line">V(&amp;sp-&gt;mutex); <span class="comment">/* Unlock the buffer */</span></span><br><span class="line">V(&amp;sp-&gt;items); <span class="comment">/* Announce available item */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Remove and return the first item from buffer sp */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sbuf_remove</span><span class="params">(<span class="keyword">sbuf_t</span> *sp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> item;</span><br><span class="line">P(&amp;sp-&gt;items); <span class="comment">/* Wait for available item */</span></span><br><span class="line">P(&amp;sp-&gt;mutex); <span class="comment">/* Lock the buffer */</span></span><br><span class="line">item = sp-&gt;buf[(++sp-&gt;front)%(sp-&gt;n)]; <span class="comment">/* Remove the item */</span></span><br><span class="line">V(&amp;sp-&gt;mutex); <span class="comment">/* Unlock the buffer */</span></span><br><span class="line">V(&amp;sp-&gt;slots); <span class="comment">/* Announce available slot */</span></span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-2-reader-writer-problem"><a href="#1-1-2-reader-writer-problem" class="headerlink" title="1.1.2. reader writer problem"></a>1.1.2. reader writer problem</h3><p>读者只读 只有作者有权利写</p><ul><li>reader优先<br>当作者写完buffer后，同时等待时，读者优先 </li><li>writer优先<br>当作者写完buffer后，同时等待时，作者优先 </li></ul><h2 id="1-2-put-it-together"><a href="#1-2-put-it-together" class="headerlink" title="1.2. put it together"></a>1.2. put it together</h2><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/2.png" alt><br><strong>预线程并发服务器</strong>好处显然：少了创建销毁进程或者线程 在buffer操作简单 效率高</p><h1 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2. 线程安全"></a>2. 线程安全</h1><p>被线程函数调用的函数必须是线程安全的<br><strong>定义</strong>：被多个并发线程调用也无论多少次都能产生正确结果</p><h2 id="2-1-unsafe-types-functions"><a href="#2-1-unsafe-types-functions" class="headerlink" title="2.1. unsafe types functions"></a>2.1. unsafe types functions</h2><h3 id="2-1-1-class1-没保护共享变量"><a href="#2-1-1-class1-没保护共享变量" class="headerlink" title="2.1.1. class1 没保护共享变量"></a>2.1.1. class1 没保护共享变量</h3><p>改进：使用mutex 然后PV保护就行<br>问题：太慢了 同步</p><h3 id="2-1-2-class2-依赖全局变量状态"><a href="#2-1-2-class2-依赖全局变量状态" class="headerlink" title="2.1.2. class2 依赖全局变量状态"></a>2.1.2. class2 依赖全局变量状态</h3><p>比如rand函数 依赖种子 原理上种子不变随机数不变 但是如图next很有可能在调用的时候被改变（很多lic库的在写的时候还没有线程）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* rand: return pseudo-random integer on 0..32767 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next = next*<span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* srand: set seed for rand() */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进：用指针保存seed代替全局变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rand_r - return pseudo-random integer on 0..32767 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand_r</span><span class="params">(<span class="keyword">int</span> *nextp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*nextp = *nextp * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*nextp/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-class3-返回一个静态变量的地址"><a href="#2-1-3-class3-返回一个静态变量的地址" class="headerlink" title="2.1.3. class3 返回一个静态变量的地址"></a>2.1.3. class3 返回一个静态变量的地址</h3><p>比如time 返回的一直是一个相同的地址 只不过上面的字符串不一样<br>改进：重写库（难） 或者重写调用 把静态变量的地方改成每个独有的地址</p><h3 id="2-1-4-class4-调用任何线程不安全的函数在函数里面"><a href="#2-1-4-class4-调用任何线程不安全的函数在函数里面" class="headerlink" title="2.1.4. class4 调用任何线程不安全的函数在函数里面"></a>2.1.4. class4 调用任何线程不安全的函数在函数里面</h3><h3 id="2-1-5-重定位函数（没有任何shared变量）"><a href="#2-1-5-重定位函数（没有任何shared变量）" class="headerlink" title="2.1.5. 重定位函数（没有任何shared变量）"></a>2.1.5. 重定位函数（没有任何shared变量）</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/3.png" alt></p><p>所有Standard C的函数都是线程安全的</p><h2 id="2-2-problems"><a href="#2-2-problems" class="headerlink" title="2.2. problems"></a>2.2. problems</h2><h3 id="2-2-1-races-（不能假设一个线程先到达一个点在另一个线程到达那个点前）"><a href="#2-2-1-races-（不能假设一个线程先到达一个点在另一个线程到达那个点前）" class="headerlink" title="2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）"></a>2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/4.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/5.png" alt></p><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/6.png" alt></p><h3 id="2-2-2-deadlock（两个线程互相等待对方释放）"><a href="#2-2-2-deadlock（两个线程互相等待对方释放）" class="headerlink" title="2.2.2. deadlock（两个线程互相等待对方释放）"></a>2.2.2. deadlock（两个线程互相等待对方释放）</h3><p><img src="/2020/02/15/CSAPP25-synchronization-Advanced/7.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/8.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/9.png" alt><br><img src="/2020/02/15/CSAPP25-synchronization-Advanced/10.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> synchronization </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP24-synchronization-Basic</title>
      <link href="/2020/02/14/CSAPP24-synchronization-Basic/"/>
      <url>/2020/02/14/CSAPP24-synchronization-Basic/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-why-synchronization">1. why synchronization</a></li><li><a href="#2-what-is-shared-variables-in-thread">2. what is shared variables in thread</a><ul><li><a href="#21-通过将变量放入内存搞清一个变量有多少个实例">2.1. 通过将变量放入内存搞清一个变量有多少个实例</a></li></ul></li><li><a href="#3-probelems">3. probelems</a><ul><li><a href="#31-进程图分析">3.1. 进程图分析</a></li><li><a href="#32-信号量semaphores">3.2. 信号量（Semaphores）</a></li></ul></li></ul><!-- /TOC --><h1 id="1-why-synchronization"><a href="#1-why-synchronization" class="headerlink" title="1. why synchronization"></a>1. why synchronization</h1><p>为了在关键步骤发生不必要的共享 导致错误</p><h1 id="2-what-is-shared-variables-in-thread"><a href="#2-what-is-shared-variables-in-thread" class="headerlink" title="2. what is shared variables in thread"></a>2. what is shared variables in thread</h1><p>不一定是全局变量（全局变量只被自己引用就不是，只要是被多个进程指向的变量就是分享变量）<br>虽然每个线程栈独立，由于指针的特性，程序是能影响其他栈的</p><h2 id="2-1-通过将变量放入内存搞清一个变量有多少个实例"><a href="#2-1-通过将变量放入内存搞清一个变量有多少个实例" class="headerlink" title="2.1. 通过将变量放入内存搞清一个变量有多少个实例"></a>2.1. 通过将变量放入内存搞清一个变量有多少个实例</h2><ul><li>global variables<br>放在全局区，在链接时链接器就只存放了同名全局变量的一个实例在虚拟内存里面</li><li>local variables<br>非static 变量放在栈上 每个进程有自己的栈</li><li>local static variables<br>放在全局区 虚拟内存里面只有一个实例<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/1.png" alt><br>从share的角度<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/2.png" alt></li><li><em>ptr, cnt, and msgs are shared<br>n i and myid are not shared*</em></li></ul><h1 id="3-probelems"><a href="#3-probelems" class="headerlink" title="3. probelems"></a>3. probelems</h1><p>volatile 可以防止变量一直存在寄存器里面 （不写回）<br>交给内核完成上下文交换 只有系统调用和定时器中断 所以数字大的话错误概率就高<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/3.png" alt><br><strong>反汇编</strong> 发现改变cnt需要三个步骤 只有最后一个步骤写回<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/4.png" alt><br>正确顺序<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/5.png" alt><br>可能的顺序<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/6.png" alt><br><img src="/2020/02/14/CSAPP24-synchronization-Basic/7.png" alt></p><h2 id="3-1-进程图分析"><a href="#3-1-进程图分析" class="headerlink" title="3.1. 进程图分析"></a>3.1. 进程图分析</h2><p><img src="/2020/02/14/CSAPP24-synchronization-Basic/8.png" alt></p><h2 id="3-2-信号量（Semaphores）"><a href="#3-2-信号量（Semaphores）" class="headerlink" title="3.2. 信号量（Semaphores）"></a>3.2. 信号量（Semaphores）</h2><p>Monitors (Java)<br>Semaphores 是非负全局<strong><em>同步</em></strong>变量。</p><p>因此可以通过PV加减信号量来保证不会进入危险区域</p><p><img src="/2020/02/14/CSAPP24-synchronization-Basic/9.png" alt></p><ul><li>P 减少 信号量 如果信号量是0 那么就会阻塞等待V增加信号量</li><li>V 不会阻塞 只是在增加后 会随机选择 多个阻塞线程中的一个<br><img src="/2020/02/14/CSAPP24-synchronization-Basic/10.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> synchronization </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP23-concurrent-programming</title>
      <link href="/2020/02/13/CSAPP23-concurrent-programming/"/>
      <url>/2020/02/13/CSAPP23-concurrent-programming/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-probelms">1. Probelms</a></li><li><a href="#2-neccessity">2. Neccessity</a></li><li><a href="#3-approaches-for-writing-a-concurrent-program">3. Approaches for Writing a concurrent program</a><ul><li><a href="#31-progress-based">3.1. Progress-based</a><ul><li><a href="#311-features">3.1.1. Features</a></li><li><a href="#312-pros-and-cons">3.1.2. Pros and Cons</a></li></ul></li><li><a href="#32-event-based">3.2. Event-based</a><ul><li><a href="#321-pros-and-cons">3.2.1. Pros and Cons</a></li></ul></li><li><a href="#33-thread-based">3.3. Thread-based</a><ul><li><a href="#331-differences-and-similarities-between-process-and-thread">3.3.1. differences and similarities between process and thread</a></li><li><a href="#332-thread-mode">3.3.2. thread mode</a></li></ul></li></ul></li><li><a href="#4-summary">4. Summary</a></li></ul><!-- /TOC --><h1 id="1-Probelms"><a href="#1-Probelms" class="headerlink" title="1. Probelms"></a>1. Probelms</h1><ul><li>Races：结果取决于随机的调度(谁得到最后一张票,父进程在子进程加入列表前运行完了)</li><li>Deadlock: 等待着一个永远不发生的信号到来（主程序printf，信号处理程序同时printf；交通谁先谁通过，但是同时到达四个，就不知道怎么走)</li><li>livelock /starvations/ fairness: 两个进程内核总是安排一个</li></ul><h1 id="2-Neccessity"><a href="#2-Neccessity" class="headerlink" title="2. Neccessity"></a>2. Neccessity</h1><p><img src="/2020/02/13/CSAPP23-concurrent-programming/1.png" alt><br>如果不并发 客户端2 connect 就算没建立连接也会return  要等待服务端结束前一个再accept<br>再发</p><h1 id="3-Approaches-for-Writing-a-concurrent-program"><a href="#3-Approaches-for-Writing-a-concurrent-program" class="headerlink" title="3. Approaches for Writing a concurrent program"></a>3. Approaches for Writing a concurrent program</h1><h2 id="3-1-Progress-based"><a href="#3-1-Progress-based" class="headerlink" title="3.1. Progress-based"></a>3.1. Progress-based</h2><h3 id="3-1-1-Features"><a href="#3-1-1-Features" class="headerlink" title="3.1.1. Features"></a>3.1.1. Features</h3><ul><li>内核自动调度</li><li>单独地址空间<br>如图<br><img src="/2020/02/13/CSAPP23-concurrent-programming/2.png" alt></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char **argv)!</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> listenfd, connfd;</span><br><span class="line"><span class="keyword">socklen_t</span> clientlen;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">clientaddr</span>;</span></span><br><span class="line"></span><br><span class="line">Signal(SIGCHLD, sigchld_handler);</span><br><span class="line">listenfd = Open_listenfd(argv[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">clientlen = <span class="keyword">sizeof</span>(struct sockaddr_storage);</span><br><span class="line">connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);</span><br><span class="line"><span class="keyword">if</span> (Fork() == <span class="number">0</span>) &#123;</span><br><span class="line">Close(listenfd); <span class="comment">/* Child closes its listening socket */</span></span><br><span class="line">echo(connfd); <span class="comment">/* Child services client */</span></span><br><span class="line">Close(connfd); <span class="comment">/* Child closes connection with client */</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">/* Child exits */</span></span><br><span class="line">&#125;</span><br><span class="line">Close(connfd); <span class="comment">/* Parent closes connected socket (important!) */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在程序里需要注意</strong>：<br>每个父进程和子进程里面都有listenfd和connfd，refcnt=2 所以需要分别在父进程关闭connfd 子进程关闭listenfd</p><h3 id="3-1-2-Pros-and-Cons"><a href="#3-1-2-Pros-and-Cons" class="headerlink" title="3.1.2. Pros and Cons"></a>3.1.2. Pros and Cons</h3><ul><li>pros：<ul><li>并发</li><li>清晰的共享模式：单独的描述符，共享描述符表已经打开文件表，不共享全局变量地址</li><li>简单</li></ul></li><li>cons<ul><li>额外进程开销</li><li>不共享数据地址<h2 id="3-2-Event-based"><a href="#3-2-Event-based" class="headerlink" title="3.2. Event-based"></a>3.2. Event-based</h2></li></ul></li><li>程序员调度多重的逻辑流</li><li>所有流 同样的地址</li><li>I/O 复用</li><li>可以Debug</li></ul><p>对所有输入都挂起读取</p><p><img src="/2020/02/13/CSAPP23-concurrent-programming/3.png" alt><br>如图现在挂起的三个输入然后又三个listenfd 也就是事件来了我再去读</p><h3 id="3-2-1-Pros-and-Cons"><a href="#3-2-1-Pros-and-Cons" class="headerlink" title="3.2.1. Pros and Cons"></a>3.2.1. Pros and Cons</h3><ul><li>pros：<ul><li>一个逻辑流，一个地址空间，可以Debug</li><li>没有进程线程控制开销，高并发数必要（Node.js, nginx, Tornado）</li></ul></li><li>cons<ul><li>难code</li><li>没利用多核</li></ul></li></ul><h2 id="3-3-Thread-based"><a href="#3-3-Thread-based" class="headerlink" title="3.3. Thread-based"></a>3.3. Thread-based</h2><ul><li>内核自动调度</li><li>每个flow 同样的地址</li><li>混合了Progress-based Event-based</li></ul><p>和进程很像<br><img src="/2020/02/13/CSAPP23-concurrent-programming/4.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/5.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/6.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/7.png" alt><br><img src="/2020/02/13/CSAPP23-concurrent-programming/8.png" alt></p><h3 id="3-3-1-differences-and-similarities-between-process-and-thread"><a href="#3-3-1-differences-and-similarities-between-process-and-thread" class="headerlink" title="3.3.1. differences and similarities between process and thread"></a>3.3.1. differences and similarities between process and thread</h3><ul><li>similarities <ul><li>都有自己的逻辑流</li><li>都是上下文交换</li></ul></li><li>differences<ul><li>thread 共享除了栈的数据 进程是不能共享全局数据</li><li>thread 的开销低 一半</li></ul></li></ul><h3 id="3-3-2-thread-mode"><a href="#3-3-2-thread-mode" class="headerlink" title="3.3.2. thread mode"></a>3.3.2. thread mode</h3><p>detached 不被其他thread打扰 内核回收<br>防止内存泄漏<br>注意分享给主thread的指针</p><h1 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4. Summary"></a>4. Summary</h1><ul><li>process <ul><li>很难共享数据但是也避免了不想要的共享</li><li>建立断开开销大</li></ul></li><li>event<ul><li>难编程</li><li>可调试</li><li>底层</li><li>没利用多核</li></ul></li><li>thread <ul><li>容易共享数据（太容易了）</li><li>开销比 进程小</li><li>很难debug （事件的发生不是可重复的）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> concurrent programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-algorithm-HashMap</title>
      <link href="/2020/02/12/Java-algorithm-HashMap/"/>
      <url>/2020/02/12/Java-algorithm-HashMap/</url>
      
        <content type="html"><![CDATA[<p><strong>推荐链接</strong><br><a href="https://blog.csdn.net/woshimaxiao1/article/details/83661464" target="_blank" rel="noopener">https://blog.csdn.net/woshimaxiao1/article/details/83661464</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Algorithm </category>
          
          <category> HashMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP22-networking-programming-part1</title>
      <link href="/2020/02/12/CSAPP22-networking-programming-part1/"/>
      <url>/2020/02/12/CSAPP22-networking-programming-part1/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-normal-tcp">1. Normal TCP</a><ul><li><a href="#11-key-part">1.1. Key part</a></li></ul></li><li><a href="#2-web-server">2. Web server</a><ul><li><a href="#21-http协议">2.1. http协议</a><ul><li><a href="#211-url">2.1.1. URL</a></li><li><a href="#212-http-requests">2.1.2. http requests</a><ul><li><a href="#2121-proxies">2.1.2.1. Proxies</a></li></ul></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-Normal-TCP"><a href="#1-Normal-TCP" class="headerlink" title="1. Normal TCP"></a>1. Normal TCP</h1><p><img src="/2020/02/12/CSAPP22-networking-programming-part1/1.png" alt></p><h2 id="1-1-Key-part"><a href="#1-1-Key-part" class="headerlink" title="1.1. Key part"></a>1.1. Key part</h2><p>client getaddrinfo （需要目标域名)<br>server getaddrinfo （不需要目标域名)</p><p>socket 返回整形（类似文件表述符，通信就是通过这个描述符来进行)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br></pre></td></tr></table></figure><p>返回的是从socket 转换的listenfd 在服务周期永远存在</p><p><strong>重点来了</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> listenfd, SA *addr, <span class="keyword">int</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure><p>也就是说accept 会产生一个额外的clientfd 多线程就会有多个clientfd<br>如图<br><img src="/2020/02/12/CSAPP22-networking-programming-part1/2.png" alt></p><p>talnet 测试回响服务器（echo）</p><h1 id="2-Web-server"><a href="#2-Web-server" class="headerlink" title="2. Web server"></a>2. Web server</h1><h2 id="2-1-http协议"><a href="#2-1-http协议" class="headerlink" title="2.1. http协议"></a>2.1. http协议</h2><p><img src="/2020/02/12/CSAPP22-networking-programming-part1/3.png" alt></p><p>返回静态，或者动态的东西（需要执行程序)</p><h3 id="2-1-1-URL"><a href="#2-1-1-URL" class="headerlink" title="2.1.1. URL"></a>2.1.1. URL</h3><ul><li>Unique name for a file:URL (Universal Resource Locator)</li><li>client 用前缀prefix导入 例如：<a href="http://www.cmu.edu:80" target="_blank" rel="noopener">http://www.cmu.edu:80</a></li><li>server 用后缀决定静态动态内容 /index.html<br>如果不是特别的 就是/ 默认大多数是index.html</li></ul><h3 id="2-1-2-http-requests"><a href="#2-1-2-http-requests" class="headerlink" title="2.1.2. http requests"></a>2.1.2. http requests</h3><p>Request line: <method> <uri> <version><br>A URL is a type of URI(Uniform Resource Identifier)<br><img src="/2020/02/12/CSAPP22-networking-programming-part1/4.png" alt></version></uri></method></p><p>动态请求<br><img src="/2020/02/12/CSAPP22-networking-programming-part1/5.png" alt></p><h4 id="2-1-2-1-Proxies"><a href="#2-1-2-1-Proxies" class="headerlink" title="2.1.2.1. Proxies"></a>2.1.2.1. Proxies</h4><p><img src="/2020/02/12/CSAPP22-networking-programming-part1/6.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> networking programming </category>
          
          <category> part1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Features-Day0</title>
      <link href="/2020/02/11/Java-Features-day0/"/>
      <url>/2020/02/11/Java-Features-day0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-继承">1. 继承</a><ul><li><a href="#11-extends">1.1. extends</a></li><li><a href="#12-instanceof-关键字">1.2. instanceof 关键字</a></li><li><a href="#13-implements">1.3. implements</a></li></ul></li><li><a href="#2-重写和重载">2. 重写和重载</a><ul><li><a href="#21-override-重写">2.1. Override 重写</a></li><li><a href="#22-overload-重载">2.2. Overload 重载</a></li><li><a href="#23-二者区别">2.3. 二者区别</a></li></ul></li><li><a href="#3-抽象类">3. 抽象类</a><ul><li><a href="#31-抽象方法">3.1. 抽象方法</a></li></ul></li><li><a href="#4-封装">4. 封装</a></li><li><a href="#5-接口">5. 接口</a><ul><li><a href="#51-接口与类相似点">5.1. 接口与类相似点：</a></li><li><a href="#52-接口与类的区别">5.2. 接口与类的区别：</a></li><li><a href="#53-implements">5.3. implements</a></li><li><a href="#54-标记接口">5.4. 标记接口</a></li></ul></li><li><a href="#6-包">6. 包</a><ul><li><a href="#61-作用">6.1. 作用</a></li><li><a href="#62-tips">6.2. tips</a></li></ul></li><li><a href="#7-多态">7. 多态</a></li></ul><!-- /TOC --><h1 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h1><h2 id="1-1-extends"><a href="#1-1-extends" class="headerlink" title="1.1. extends"></a>1.1. extends</h2><p>IS-A关系</p><h2 id="1-2-instanceof-关键字"><a href="#1-2-instanceof-关键字" class="headerlink" title="1.2. instanceof 关键字"></a>1.2. instanceof 关键字</h2><p>可以使用 instanceof 运算符来检验Mammal和dog对象是否是Animal类的一个实例。</p><h2 id="1-3-implements"><a href="#1-3-implements" class="headerlink" title="1.3. implements"></a>1.3. implements</h2><p>Java只支持单继承（继承基本类和抽象类），但是我们可以用接口来实现（多继承接口来实现）,脚本结构如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> <span class="keyword">implements</span> <span class="title">Fruit1</span>, <span class="title">Fruit2</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="2-重写和重载"><a href="#2-重写和重载" class="headerlink" title="2. 重写和重载"></a>2. 重写和重载</h1><h2 id="2-1-Override-重写"><a href="#2-1-Override-重写" class="headerlink" title="2.1. Override 重写"></a>2.1. Override 重写</h2><p>子类重写父类<br>用到的父类被重写方法 super</p><h2 id="2-2-Overload-重载"><a href="#2-2-Overload-重载" class="headerlink" title="2.2. Overload 重载"></a>2.2. Overload 重载</h2><h2 id="2-3-二者区别"><a href="#2-3-二者区别" class="headerlink" title="2.3. 二者区别"></a>2.3. 二者区别</h2><p><img src="/2020/02/11/Java-Features-day0/1.png" alt></p><h1 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3. 抽象类"></a>3. 抽象类</h1><p>类没有足够的信息描绘对象 （抽象类）abstract<br>继承使用</p><h2 id="3-1-抽象方法"><a href="#3-1-抽象方法" class="headerlink" title="3.1. 抽象方法"></a>3.1. 抽象方法</h2><p>继承抽象类的子类必须重写此 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">computePay</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h1 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h1><p>Getter Setter 类的private数据</p><p>这样的好处 这种数据的访问被严格控制 而且可以修改实现而不是调用 </p><h1 id="5-接口"><a href="#5-接口" class="headerlink" title="5. 接口"></a>5. 接口</h1><p>interface<br>与类的异同 </p><h2 id="5-1-接口与类相似点："><a href="#5-1-接口与类相似点：" class="headerlink" title="5.1. 接口与类相似点："></a>5.1. 接口与类相似点：</h2><p>一个接口可以有多个方法。</p><ul><li>接口文件保存在.java结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在.class结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul><h2 id="5-2-接口与类的区别："><a href="#5-2-接口与类的区别：" class="headerlink" title="5.2. 接口与类的区别："></a>5.2. 接口与类的区别：</h2><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法。(隐式抽象不用abstract)</li><li>接口不能包含成员变量，除了static和final变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多重继承。</li></ul><h2 id="5-3-implements"><a href="#5-3-implements" class="headerlink" title="5.3. implements"></a>5.3. implements</h2><p>实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MammalInt</span> <span class="keyword">implements</span> <span class="title">Animal</span></span></span><br></pre></td></tr></table></figure><p>在实现接口的时候，也要注意一些规则：</p><ul><li>一个类可以同时实现多个接口。</li><li>一个类只能继承一个类，但是能实现多个接口。</li><li>一个接口能继承另一个接口，这和类之间的继承比较相似。(而且可以多重继承)</li></ul><h2 id="5-4-标记接口"><a href="#5-4-标记接口" class="headerlink" title="5.4. 标记接口"></a>5.4. 标记接口</h2><p>没有任何方法的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span></span></span><br><span class="line"><span class="class"></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>目的</p><ul><li><p>建立一个公共的父接口：<br>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p></li><li><p>向一个类添加数据类型：<br>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul><h1 id="6-包"><a href="#6-包" class="headerlink" title="6. 包"></a>6. 包</h1><p>如果一个源文件中没有使用包声明，那么其中的类，函数，枚举，注释等将被放在一个无名的包（unnamed package）中。通常小写避免与类冲突。</p><h2 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1. 作用"></a>6.1. 作用</h2><p>包的作用</p><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。<br>java.lang-打包基础的类<br>java.io-包含输入输出功能的函数</li></ul><h2 id="6-2-tips"><a href="#6-2-tips" class="headerlink" title="6.2. tips"></a>6.2. tips</h2><p>一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是apple.com，所有的包名都以com.apple开头。包名中的每一个部分对应一个子目录。</p><p>例如：这个公司有一个com.apple.computers的包，这个包包含一个叫做Dell.java的源文件，那么相应的，应该有如下面的一连串子目录：</p><p>这样，你可以将你的类目录分享给其他的编程人员，而不用透露自己的源码。用这种方法管理源码和类文件可以让编译器和java虚拟机（JVM）可以找到你程序中使用的所有类型。</p><p>类目录的绝对路径叫做class path。设置在系统变量CLASSPATH中。编译器和java虚拟机通过将package名字加到class path后来构造.class文件的路径。</p><p><path- two>\classes是class path，package名字是com.apple.computers,而编译器和JVM会在 <path-two>\classes\com\apple\compters中找.class文件。</path-two></path-></p><p>一个class path可能会包含好几个路径。多路径应该用分隔符分开。默认情况下，编译器和JVM查找当前目录。JAR文件按包含Java平台相关的类，所以他们的目录默认放在了class path中。</p><h1 id="7-多态"><a href="#7-多态" class="headerlink" title="7. 多态"></a>7. 多态</h1><p>在Java中，所有的对象都具有多态性，因为任何对象都能通过IS-A测试的类型和Object类。</p><p>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。</p><p>要想调用父类中被重写的方法，则必须使用关键字super。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Features </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP21-networking-programming-part0</title>
      <link href="/2020/02/10/CSAPP21-networking-programming-part0/"/>
      <url>/2020/02/10/CSAPP21-networking-programming-part0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-cs架构">1. CS架构</a><ul><li><a href="#11-ethernet">1.1. Ethernet</a></li><li><a href="#12-protocol">1.2. protocol</a></li><li><a href="#13-程序员角度的网络">1.3. 程序员角度的网络</a><ul><li><a href="#131-dnsdomain-naming-system">1.3.1. DNS(Domain Naming System)</a></li><li><a href="#132-通过端口连接为了多用户-多服务器访问">1.3.2. 通过端口连接（为了多用户 多服务器访问)</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-CS架构"><a href="#1-CS架构" class="headerlink" title="1. CS架构"></a>1. CS架构</h1><h2 id="1-1-Ethernet"><a href="#1-1-Ethernet" class="headerlink" title="1.1. Ethernet"></a>1.1. Ethernet</h2><ul><li>host链接上hub上，hub上的东西，每个host都看得到mac地址（48bit）</li><li>bridge 选择路线<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/1.png" alt></li></ul><h2 id="1-2-protocol"><a href="#1-2-protocol" class="headerlink" title="1.2. protocol"></a>1.2. protocol</h2><p>怎么样让不同网络 不同地方兼容</p><ul><li><p>IP（Internet Protocol)协议 主机到主机 （不可靠 和基本的命名解析）<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/2.png" alt></p></li><li><p>UDP (Unreliable Datagram Protocol)<br>使用IP 提供process to process 的数据包传输</p></li></ul><ul><li>TCP (Transmisson Control Protocol)<br>使用IP 提供可靠的process to process 数据流 基于连接</li></ul><h2 id="1-3-程序员角度的网络"><a href="#1-3-程序员角度的网络" class="headerlink" title="1.3. 程序员角度的网络"></a>1.3. 程序员角度的网络</h2><ul><li>主机是32bit IP address（IPv4) 128bit(IPV6)</li><li>IP address 映射成域名 （被DNS解析)<h3 id="1-3-1-DNS-Domain-Naming-System"><a href="#1-3-1-DNS-Domain-Naming-System" class="headerlink" title="1.3.1. DNS(Domain Naming System)"></a>1.3.1. DNS(Domain Naming System)</h3></li><li>本地域名localhost</li></ul><p>127.0.0.1</p><ul><li>真正的本地域名hostname</li><li>可以多对一也可以一对多 或者多对多 也可以是动态的（把你分配到哪由DNS服务器决定分配给你一个更近的地址）<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/3.png" alt><br><img src="/2020/02/10/CSAPP21-networking-programming-part0/4.png" alt></li><li>由于存在分级的机制 有些有效的域名没有对应一个host<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/5.png" alt></li></ul><h3 id="1-3-2-通过端口连接（为了多用户-多服务器访问"><a href="#1-3-2-通过端口连接（为了多用户-多服务器访问" class="headerlink" title="1.3.2. 通过端口连接（为了多用户 多服务器访问)"></a>1.3.2. 通过端口连接（为了多用户 多服务器访问)</h3><ul><li>公认提供特殊服务的端口<br><img src="/2020/02/10/CSAPP21-networking-programming-part0/6.png" alt></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> networking programming </category>
          
          <category> part0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP20-shortage-allocation-Advanced</title>
      <link href="/2020/02/09/CSAPP20-shortage-allocation-Advanced/"/>
      <url>/2020/02/09/CSAPP20-shortage-allocation-Advanced/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1free-block-strategy">1.free block strategy</a><ul><li><a href="#11-显示表explicit-free-list">1.1 显示表（explicit free list)</a><ul><li><a href="#111-显示表的两种插入规则在free-list-里面加新块">1.1.1 显示表的两种插入规则（在free list 里面加新块）</a></li></ul></li><li><a href="#12-独立分散表根据大小">1.2 独立分散表（根据大小）</a></li></ul></li><li><a href="#2-垃圾回收策略">2 垃圾回收策略</a></li></ul><!-- /TOC --><h1 id="1-free-block-strategy"><a href="#1-free-block-strategy" class="headerlink" title="1.free block strategy"></a>1.free block strategy</h1><p>除了前一天的隐式表(implicit free list)：最原始的方法需要大量搜索时间(吞吐量)，以及内存利用率也不高(字节对齐)<br>衍生出更现代的方法</p><h2 id="1-1-显示表（explicit-free-list"><a href="#1-1-显示表（explicit-free-list" class="headerlink" title="1.1 显示表（explicit free list)"></a>1.1 显示表（explicit free list)</h2><p>已分配的和隐式表一样 非分配用双向链表链接(不一定地址连续) 空闲的表<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/1.png" alt></p><h3 id="1-1-1-显示表的两种插入规则（在free-list-里面加新块）"><a href="#1-1-1-显示表的两种插入规则（在free-list-里面加新块）" class="headerlink" title="1.1.1 显示表的两种插入规则（在free list 里面加新块）"></a>1.1.1 显示表的两种插入规则（在free list 里面加新块）</h3><ul><li>LIFO （last-in-first-out）<ul><li>把新块加入到free list 首部<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/2.png" alt></li><li>优点: 简单的常数时间</li><li>缺点：研究表示内部碎片比地址顺序多</li></ul></li><li>地址顺序<ul><li>把地址插入到两个地址（大小）之中</li><li>优点：研究表明内部碎片少一点</li><li>缺点：需要搜索</li></ul></li></ul><p><strong>summary</strong> 显示表的搜索时间从隐式表的所有block到现在只是free的block，多了点内部碎片（两个指针)</p><h2 id="1-2-独立分散表（根据大小）"><a href="#1-2-独立分散表（根据大小）" class="headerlink" title="1.2 独立分散表（根据大小）"></a>1.2 独立分散表（根据大小）</h2><p>根据size分配到地方 地方不够就找更大的size<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/3.png" alt></p><p>优点：搜索时间更快 （吞吐量） 内存利用率高（内部碎片少 因为对应大小</p><h1 id="2-垃圾回收策略"><a href="#2-垃圾回收策略" class="headerlink" title="2 垃圾回收策略"></a>2 垃圾回收策略</h1><p>在动态语言差不多相同 （python java等）C++、C也有了 但是由于指针（会把大整数当指针)存在导致很多垃圾回收不了<br><strong>可以确定回收的垃圾，没有被指向或者间接指向</strong></p><p>最基础的 标记清理法（又可以利用字节对齐的3-4位bit）</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Base-day1</title>
      <link href="/2020/02/09/Java-Base-day1/"/>
      <url>/2020/02/09/Java-Base-day1/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-只写模糊的">1. <strong><em>只写模糊的</em></strong></a><ul><li><a href="#11-正则表达式">1.1. 正则表达式</a><ul><li><a href="#111-pattern类">1.1.1. Pattern类</a></li><li><a href="#112-matcher类">1.1.2. Matcher类</a></li></ul></li><li><a href="#12-可变参数-有点像指针">1.2. 可变参数 （有点像指针)</a></li><li><a href="#13-finalize方法">1.3. finalize()方法</a></li><li><a href="#14-stream-file-io">1.4. Stream File IO</a><ul><li><a href="#141-控制台输入-systemin对象">1.4.1. 控制台输入 System.in对象</a></li><li><a href="#142-控制台输入-systemout对象">1.4.2. 控制台输入 System.out对象</a></li></ul></li><li><a href="#15-读写文件">1.5. 读写文件</a><ul><li><a href="#151-fileoutputstream">1.5.1. FileOutputStream</a></li><li><a href="#152-目录">1.5.2. 目录</a></li></ul></li><li><a href="#16-scanner类">1.6. Scanner类</a></li><li><a href="#17-try-catch-异常处理">1.7. try catch 异常处理</a></li></ul></li></ul><!-- /TOC --><h1 id="1-只写模糊的"><a href="#1-只写模糊的" class="headerlink" title="1. 只写模糊的"></a>1. <strong><em>只写模糊的</em></strong></h1><h2 id="1-1-正则表达式"><a href="#1-1-正则表达式" class="headerlink" title="1.1. 正则表达式"></a>1.1. 正则表达式</h2><h3 id="1-1-1-Pattern类"><a href="#1-1-1-Pattern类" class="headerlink" title="1.1.1. Pattern类"></a>1.1.1. Pattern类</h3><p>pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。</p><h3 id="1-1-2-Matcher类"><a href="#1-1-2-Matcher类" class="headerlink" title="1.1.2. Matcher类"></a>1.1.2. Matcher类</h3><p>Matcher类：<br>Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。</p><h2 id="1-2-可变参数-（有点像指针"><a href="#1-2-可变参数-（有点像指针" class="headerlink" title="1.2. 可变参数 （有点像指针)"></a>1.2. 可变参数 （有点像指针)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarargsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 调用可变参数的方法</span></span><br><span class="line">  printMax(<span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">56.5</span>);</span><br><span class="line">      printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">( <span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"No argument passed"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;  numbers.length; i++)       <span class="keyword">if</span> (numbers[i] &gt;  result)</span><br><span class="line">      result = numbers[i];</span><br><span class="line">      System.out.println(<span class="string">"The max value is "</span> + result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-finalize-方法"><a href="#1-3-finalize-方法" class="headerlink" title="1.3. finalize()方法"></a>1.3. finalize()方法</h2><p>Java允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做finalize( )，它用来清除回收对象。</p><h2 id="1-4-Stream-File-IO"><a href="#1-4-Stream-File-IO" class="headerlink" title="1.4. Stream File IO"></a>1.4. Stream File IO</h2><h3 id="1-4-1-控制台输入-System-in对象"><a href="#1-4-1-控制台输入-System-in对象" class="headerlink" title="1.4.1. 控制台输入 System.in对象"></a>1.4.1. 控制台输入 System.in对象</h3><p>read() readline</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 BufferedReader 在控制台读取字符</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BRReadLines</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// 使用 System.in 创建 BufferedReader </span></span><br><span class="line">      BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span></span><br><span class="line">                              InputStreamReader(System.in));</span><br><span class="line">      String str;</span><br><span class="line">      System.out.println(<span class="string">"Enter lines of text."</span>);</span><br><span class="line">      System.out.println(<span class="string">"Enter 'end' to quit."</span>);</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         str = br.readLine();</span><br><span class="line">         System.out.println(str);</span><br><span class="line">      &#125; <span class="keyword">while</span>(!str.equals(<span class="string">"end"</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-控制台输入-System-out对象"><a href="#1-4-2-控制台输入-System-out对象" class="headerlink" title="1.4.2. 控制台输入 System.out对象"></a>1.4.2. 控制台输入 System.out对象</h3><p>write()不常用 因为print() 和println()好用</p><h2 id="1-5-读写文件"><a href="#1-5-读写文件" class="headerlink" title="1.5. 读写文件"></a>1.5. 读写文件</h2><p><img src="/2020/02/09/Java-Base-day1/1.png" alt></p><h3 id="1-5-1-FileOutputStream"><a href="#1-5-1-FileOutputStream" class="headerlink" title="1.5.1. FileOutputStream"></a>1.5.1. FileOutputStream</h3><p>使用字符串类型的文件名来创建一个输出流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">"C:/java/hello"</span>)</span><br></pre></td></tr></table></figure><p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"C:/java/hello"</span>);</span><br><span class="line">OutputStream f = <span class="keyword">new</span> FileOutputStream(f);</span><br></pre></td></tr></table></figure><h3 id="1-5-2-目录"><a href="#1-5-2-目录" class="headerlink" title="1.5.2. 目录"></a>1.5.2. 目录</h3><p>mkdir()</p><h2 id="1-6-Scanner类"><a href="#1-6-Scanner类" class="headerlink" title="1.6. Scanner类"></a>1.6. Scanner类</h2><h2 id="1-7-try-catch-异常处理"><a href="#1-7-try-catch-异常处理" class="headerlink" title="1.7. try catch 异常处理"></a>1.7. try catch 异常处理</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BASE </category>
          
          <category> day1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Base day0</title>
      <link href="/2020/02/08/Java-Base-day0/"/>
      <url>/2020/02/08/Java-Base-day0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-只写模糊的">1. <strong><em>只写模糊的</em></strong></a></li><li><a href="#2-修饰符">2. 修饰符</a><ul><li><a href="#21-访问修饰符">2.1. 访问修饰符</a></li><li><a href="#22-非访问修饰符">2.2. 非访问修饰符</a></li></ul></li><li><a href="#3-运算符">3. 运算符</a></li><li><a href="#4-特殊类">4. 特殊类</a></li><li><a href="#5-数组">5. 数组</a></li><li><a href="#6-arrays-类">6. Arrays 类</a></li><li><a href="#7-data-calendar-gregoriancalendar">7. Data Calendar GregorianCalendar</a></li></ul><!-- /TOC --><h1 id="1-只写模糊的"><a href="#1-只写模糊的" class="headerlink" title="1. 只写模糊的"></a>1. <strong><em>只写模糊的</em></strong></h1><h1 id="2-修饰符"><a href="#2-修饰符" class="headerlink" title="2. 修饰符"></a>2. 修饰符</h1><h2 id="2-1-访问修饰符"><a href="#2-1-访问修饰符" class="headerlink" title="2.1. 访问修饰符"></a>2.1. 访问修饰符</h2><ul><li><p>默认的，也称为default，在同一包内可见，不使用任何修饰符。<br>接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。</p></li><li><p>受保护的，以protected修饰符指定，对同一包内的类和所有子类可见（只为了子类访问）</p><ul><li>Protected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。</li><li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li></ul></li><li><p>私有的，以private修饰符指定，在同一类内可见。</p></li><li><p>共有的，以public修饰符指定，对所有类可见。</p></li></ul><h2 id="2-2-非访问修饰符"><a href="#2-2-非访问修饰符" class="headerlink" title="2.2. 非访问修饰符"></a>2.2. 非访问修饰符</h2><ul><li>static修饰符，用来创建类方法和类变量(静态方法使用静态变量)<ul><li>static 变量 类变量</li><li>static 方法 静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</li></ul></li><li>final修饰符，用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。<ul><li>final变量：final变量能被显式地初始化并且只能初始化一次。但是final对象里的数据可以被改变。也就是说final对象的引用不能改变，但是里面的值可以改变。</li><li>final方法:类中的Final方法可以被子类继承，但是不能被子类修改。声明final方法的主要目的是防止该方法的内容被修改。</li></ul></li></ul><p>final修饰符通常和static修饰符一起使用来创建类常量。</p><ul><li><p>abstract修饰符，用来创建抽象类和抽象方法。</p><ul><li>抽象类：抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充 extend。</li><li>抽象方法： 抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</li></ul></li><li><p>synchronized和volatile修饰符，主要用于线程的编程。</p></li></ul><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h1><ul><li><p>instanceOf 运算符<br>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p></li><li><p>增强for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-特殊类"><a href="#4-特殊类" class="headerlink" title="4. 特殊类"></a>4. 特殊类</h1><ul><li><p>Number类：在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。<br><img src="/2020/02/08/Java-Base-day0/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Integer x = <span class="number">5</span>; <span class="comment">// boxes int to an Integer object</span></span><br><span class="line">      x =  x + <span class="number">10</span>;   <span class="comment">// unboxes the Integer to a int</span></span><br><span class="line">      System.out.println(x); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Math 类:数学操作</p></li><li><p>Character 类:我们经常会遇到需要使用对象，而不是内置数据类型的情况，</p><ul><li>装拆箱：例如，将一个char类型的参数传递给需要一个Character类型参数时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</li></ul></li><li><p>String 类:</p><ul><li><strong>注意</strong>:String类是不可改变的，所以你一旦创建了String对象，那它的值就无法改变了。 如果需要对字符串做很多修改，那么应该选择使用StringBuffer &amp; StringBuilder 类。</li><li>StringBuffer &amp; StringBuilder 类。<br>由于StringBuilder相较于StringBuffer有速度优势，所以多数情况下建议使用StringBuilder类。然而在应用程序要求线程安全(数据加锁)的情况下，则必须使用StringBuffer类。</li></ul></li></ul><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h1><p>dataType[] arrayRefVar;   // 首选的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><h1 id="6-Arrays-类"><a href="#6-Arrays-类" class="headerlink" title="6. Arrays 类"></a>6. Arrays 类</h1><p>java.util.Arrays类能方便地操作数组，它提供的所有方法都是静态的。具有以下功能：</p><ul><li><p>给数组赋值：通过fill方法。</p></li><li><p>对数组排序：通过sort方法,按升序。</p></li><li><p>比较数组：通过equals方法比较数组中元素值是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p></li></ul><h1 id="7-Data-Calendar-GregorianCalendar"><a href="#7-Data-Calendar-GregorianCalendar" class="headerlink" title="7. Data Calendar GregorianCalendar"></a>7. Data Calendar GregorianCalendar</h1>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BASE </category>
          
          <category> day0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP19: shortage allocation:Basic</title>
      <link href="/2020/02/07/CSAPP19-shortage-allocation-Basic/"/>
      <url>/2020/02/07/CSAPP19-shortage-allocation-Basic/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-动态分配内存堆">1. 动态分配内存（堆）</a><ul><li><a href="#11-回收方式">1.1 回收方式</a></li><li><a href="#12-衡量标准">1.2 衡量标准</a></li></ul></li><li><a href="#2-分配中的细节">2. 分配中的细节</a><ul><li><a href="#21-怎么free多少内存只靠指针">2.1 怎么free多少内存只靠指针</a></li><li><a href="#22-怎么跟踪这些没分配的内存">2.2 怎么跟踪这些没分配的内存</a></li><li><a href="#23-怎么应对格外的空间字节对齐造成的浪费">2.3 怎么应对格外的空间（字节对齐造成的浪费）</a></li><li><a href="#24-怎么找空块去分配">2.4 怎么找空块去分配</a></li><li><a href="#25-如何合理释放已经分配的块">2.5 如何合理释放已经分配的块</a></li></ul></li></ul><!-- /TOC --><h1 id="1-动态分配内存（堆）"><a href="#1-动态分配内存（堆）" class="headerlink" title="1. 动态分配内存（堆）"></a>1. 动态分配内存（堆）</h1><h2 id="1-1-回收方式"><a href="#1-1-回收方式" class="headerlink" title="1.1 回收方式"></a>1.1 回收方式</h2><ul><li>c 显示分配 显示回收 </li><li>java等 显示分配 隐式回收</li></ul><h2 id="1-2-衡量标准"><a href="#1-2-衡量标准" class="headerlink" title="1.2 衡量标准"></a>1.2 衡量标准</h2><ul><li>吞吐量：每秒能调用多少次</li><li>内存利用率：就是分配中使用的有效内存<br>  影响因素<ul><li>内部碎片：字节对齐 需要标记等</li><li>外部碎片： 如下图<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/1.png" alt></li></ul></li></ul><h1 id="2-分配中的细节"><a href="#2-分配中的细节" class="headerlink" title="2. 分配中的细节"></a>2. 分配中的细节</h1><h2 id="2-1-怎么free多少内存只靠指针"><a href="#2-1-怎么free多少内存只靠指针" class="headerlink" title="2.1 怎么free多少内存只靠指针"></a>2.1 怎么free多少内存只靠指针</h2><p>通过堆的header标识</p><h2 id="2-2-怎么跟踪这些没分配的内存"><a href="#2-2-怎么跟踪这些没分配的内存" class="headerlink" title="2.2 怎么跟踪这些没分配的内存"></a>2.2 怎么跟踪这些没分配的内存</h2><p>4种方法<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/2.png" alt></p><p><strong><em>以下以第一种方法讲解后续问题</em></strong></p><h2 id="2-3-怎么应对格外的空间（字节对齐造成的浪费）"><a href="#2-3-怎么应对格外的空间（字节对齐造成的浪费）" class="headerlink" title="2.3 怎么应对格外的空间（字节对齐造成的浪费）"></a>2.3 怎么应对格外的空间（字节对齐造成的浪费）</h2><p>如下图<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/3.png" alt><br><strong><em>无可避免，但是可以节省</em></strong></p><p>因为size的大小总是8的倍数或者16的 所以要存一些东西的时候回出现空的</p><p>也因为size的大小总是8的倍数或者16的 所以不需要一个额外的word来存状态 只需存在size的 最后3位bit里面的一位 因为他们一直是0</p><h2 id="2-4-怎么找空块去分配"><a href="#2-4-怎么找空块去分配" class="headerlink" title="2.4 怎么找空块去分配"></a>2.4 怎么找空块去分配</h2><ul><li>first fit：从头开始找（线性时间 terrible)</li><li>Next fit: 从上次找结束的地方开始够放置的就行 （也并不好）</li><li>best fit：找到最好的块放置</li><li>good fit：first fit + best fit 再开始的地方找一些最合适的块存放</li></ul><h2 id="2-5-如何合理释放已经分配的块"><a href="#2-5-如何合理释放已经分配的块" class="headerlink" title="2.5 如何合理释放已经分配的块"></a>2.5 如何合理释放已经分配的块</h2><ul><li><p>直接释放 （置位释放）<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/4.png" alt><br>waste too much  内存会逐渐崩溃</p></li><li><p>连接的下一个释放<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/5.png" alt><br>但是处理不了上面一块</p></li><li><p>通过添加foot 连接的上下释放<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/6.png" alt><br>但是这样有点太浪费了，因为对于分配过的内存是不需要合并的。<br>可以通过利用size那最后3位都是0，拿出一位来标记上面是否是已分配的块，这样不是的话它肯定有foot， 一切一样是的话就不做操作。（tricks)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP18: virtual memory(real system)</title>
      <link href="/2020/02/07/CSAPP18-virtual-memory-real-system/"/>
      <url>/2020/02/07/CSAPP18-virtual-memory-real-system/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-symple-system-memory-address-translastion">1 symple system memory address translastion</a></li><li><a href="#2-i7-linux-memory-system">2 i7 linux memory system</a></li><li><a href="#3-memory-mapping">3 memory mapping</a></li></ul><!-- /TOC --><h1 id="1-symple-system-memory-address-translastion"><a href="#1-symple-system-memory-address-translastion" class="headerlink" title="1 symple system memory address translastion"></a>1 symple system memory address translastion</h1><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/1.png" alt><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>hit 直接得到PPN 然后VPO和PPO是完全相等的</li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/1.png" alt><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>没有hit 得去PTE里面找了 发现在里面 没有page falut </li><li>得到了PPN </li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><h1 id="2-i7-linux-memory-system"><a href="#2-i7-linux-memory-system" class="headerlink" title="2 i7 linux memory system"></a>2 i7 linux memory system</h1><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/3.png" alt><br>Key  Point</p><ul><li>L1:4 cycle L2:10 cycle L3: 40-50 cyclce ps:L3是四核共用</li><li>有d-cache 和i-cache d-TLB 和 i-TLB</li><li>为什么不把L2 L1 合并原因有: d i占比不一定一样 还有就是缓存的限制大小<br>具体流程<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/4.png" alt></li></ul><p>技巧可以VPO=PPO=CI+CO先找到对应的位置在等tag（translation）匹配<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/6.png" alt></p><p>linux 把VM看做一个链表类似<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/8.png" alt></p><h1 id="3-memory-mapping"><a href="#3-memory-mapping" class="headerlink" title="3 memory mapping"></a>3 memory mapping</h1><p>两种分享方式</p><ol><li><p>共享地址<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/9.png" alt></p></li><li><p>私密的共享（such as fork and execve)<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/11.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual memory </category>
          
          <category> real system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP17: virtual memory concept</title>
      <link href="/2020/02/05/CSAPP17-virtual-memory-concept/"/>
      <url>/2020/02/05/CSAPP17-virtual-memory-concept/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1what-is-virtual-memory">1.what is virtual memory</a></li><li><a href="#2why-vm">2.why VM</a><ul><li><a href="#21-for-cache">2.1 for cache</a><ul><li><a href="#211-overview">2.1.1 overview</a></li><li><a href="#212-pte">2.1.2 PTE</a></li></ul></li><li><a href="#22-for-memory-management">2.2 for memory management</a></li><li><a href="#23-for-memory-protection">2.3 for memory protection</a></li></ul></li><li><a href="#3-detail-va-virtual-address">3 detail VA virtual address</a></li><li><a href="#4-summary">4 Summary</a></li></ul><!-- /TOC --><h1 id="1-What-is-virtual-memory"><a href="#1-What-is-virtual-memory" class="headerlink" title="1. What is virtual memory"></a>1. What is virtual memory</h1><p>cpu访问的都是虚拟内存通过MMU</p><h1 id="2-Why-VM"><a href="#2-Why-VM" class="headerlink" title="2.Why VM"></a>2.Why VM</h1><h2 id="2-1-for-cache"><a href="#2-1-for-cache" class="headerlink" title="2.1 for cache"></a>2.1 for cache</h2><h3 id="2-1-1-overview"><a href="#2-1-1-overview" class="headerlink" title="2.1.1 overview"></a>2.1.1 overview</h3><p>如下图<br><img src="https://i.loli.net/2020/02/05/yc96l5gPtokXm7O.png" alt="image.png"><br><strong>注意</strong> ：</p><ul><li>virtual pages代表着磁盘上的地址 </li><li>有些被缓存了 </li><li>有些没有还在磁盘上 </li><li>有些未分配代表连磁盘上都没</li></ul><p>DRAM slower than SRAM 10x</p><p>Disk slower 10000x than DRAM</p><p>so</p><ul><li>page sizes 4KB to 4MB</li><li>全相缓存 （尽管要很久搜索）</li></ul><h3 id="2-1-2-PTE"><a href="#2-1-2-PTE" class="headerlink" title="2.1.2 PTE"></a>2.1.2 PTE</h3><p>使用Page table entries 去map VP 到 PP<br><img src="https://i.loli.net/2020/02/05/qPa5F8gHERhOb61.png" alt="image.png"></p><p>如果CPU给的VP没有page hit 会有page falut 然后和缓存一样替代进去</p><h2 id="2-2-for-memory-management"><a href="#2-2-for-memory-management" class="headerlink" title="2.2 for memory management"></a>2.2 for memory management</h2><p><strong>关键点</strong> 每个进程都有独立的虚拟地址从0开始 似乎都有独立的空间 共享库也得益于此 每个进程似乎<br>单独拥有一个共享库函数代码<br><img src="https://i.loli.net/2020/02/05/1E94grucImyD2YR.png" alt="image.png"></p><h2 id="2-3-for-memory-protection"><a href="#2-3-for-memory-protection" class="headerlink" title="2.3 for memory protection"></a>2.3 for memory protection</h2><p>在PTE上对每个PP 有4个bit位<br>intel 虚拟内存是48位的 剩下的地址有些只能内核去用 高位<br><img src="https://i.loli.net/2020/02/05/IQbFqrRsKTo8mNV.png" alt="image.png"></p><h1 id="3-detail-VA-virtual-address"><a href="#3-detail-VA-virtual-address" class="headerlink" title="3 detail VA virtual address"></a>3 detail VA virtual address</h1><p><img src="https://i.loli.net/2020/02/05/GnjrcmY6t2JWH9L.png" alt="image.png"><br><img src="https://i.loli.net/2020/02/06/qcUxJmFO3vaWLdb.png" alt="2.png"><br><img src="https://i.loli.net/2020/02/06/7f5OK1IrH9FkqTd.png" alt="3.png"></p><h1 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4 Summary"></a>4 Summary</h1><ul><li>程序角度角度 VM<ul><li>每个进程有独立空间 不会被其他进程打乱</li></ul></li><li>系统角度 VM<ul><li>使得内存 更好缓存 （局部性是关键）</li><li>简化了内存管理 </li><li>内存保护</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual memory </category>
          
          <category> concept </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
