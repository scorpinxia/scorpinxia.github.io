<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-blog-upgrade</title>
      <link href="2021/02/01/hexo-blog-upgrade/"/>
      <url>2021/02/01/hexo-blog-upgrade/</url>
      
        <content type="html"><![CDATA[<h1 id="升级hexo"><a href="#升级hexo" class="headerlink" title="升级hexo"></a>升级hexo</h1><p>参考链接</p><blockquote><p><a href="https://my.oschina.net/u/4597914/blog/4708961">https://my.oschina.net/u/4597914/blog/4708961</a></p></blockquote><h1 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h1><p>npm install hexo-cli -g<br>hexo init blog<br>cd blog<br>npm install<br>hexo server</p><h1 id="get-theame-配置-主题config-和-根目录config"><a href="#get-theame-配置-主题config-和-根目录config" class="headerlink" title="get theame 配置 主题config 和 根目录config"></a>get theame 配置 主题config 和 根目录config</h1><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><blockquote><p>搜索 seareach<br>图片 hexo assert<br>等等</p></blockquote><h1 id="拷贝-source"><a href="#拷贝-source" class="headerlink" title="拷贝 source"></a>拷贝 source</h1>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-design-pattern-StructurePattern</title>
      <link href="2021/02/01/java-design-pattern-structurepattern/"/>
      <url>2021/02/01/java-design-pattern-structurepattern/</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式-Adapter-Pattern【学习难度：★★☆☆☆，使用频率：★★★★☆】"><a href="#适配器模式-Adapter-Pattern【学习难度：★★☆☆☆，使用频率：★★★★☆】" class="headerlink" title="适配器模式-Adapter    Pattern【学习难度：★★☆☆☆，使用频率：★★★★☆】"></a>适配器模式-Adapter    Pattern【学习难度：★★☆☆☆，使用频率：★★★★☆】</h1><blockquote><p>如何让20V的笔记本电脑能够在220V的电压下工作？答案是引入一个电源适配器(AC    Adapter)</p></blockquote><ul><li>引入一个称之为适配器的角色来协调这些存在不兼容的结构，这种设计方案即为适配器模式。</li></ul><h2 id="没有源码的算法库"><a href="#没有源码的算法库" class="headerlink" title="没有源码的算法库"></a>没有源码的算法库</h2><blockquote><p>需求</p></blockquote><ul><li>该系统的设计人员已经开发了一个成绩操作接口ScoreOperation，在该接口中声明了排序方法sort(int[])    和查找方法search(int[],    int)，为了提高排序和查找的效率，开发人员决定重用算法库中的快速排序算法类QuickSort和二分查找算法类BinarySearch</li><li>现在Sunny公司开发人员已经找不到该算法库的源代码，无法直接通过复制和粘贴操作来重用其中的代码；部分开发人员已经针对ScoreOperation接口编程，如果再要求对该接口进行修改或要求大家直接使用QuickSort类和BinarySearch类将导致大量代码需要修改。</li></ul><p><img src="/2021/02/01/java-design-pattern-structurepattern/1.png"></p><h2 id="适配器模式概述"><a href="#适配器模式概述" class="headerlink" title="适配器模式概述"></a>适配器模式概述</h2><blockquote><p>适配器模式</p></blockquote><ul><li>将一个接口转换成客户希望的另一个接口，使接口不兼容的那些<br>类可以一起工作，其别名为包装器(Wrapper)。</li><li>在适配器模式定义中所提及的接口是指广义的接口，它可以表示一个方法或者方法的集合。</li></ul><blockquote><p>对象适配器模式结构图<br><img src="/2021/02/01/java-design-pattern-structurepattern/2.png"></p></blockquote><ul><li><p>●    Target（目标抽象类）：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</p></li><li><p>●    Adapter（适配器类）：适配器可以调用另一个接口，作为一个转换器，对Adaptee和Target进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承Target并关联一个Adaptee对象使二者产生联系。</p></li><li><p>●    Adaptee（适配者类）：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</p></li></ul><blockquote><p>对象适配器典型实现</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Adapter</span><span class="token keyword">extends</span><span class="token class-name">Target</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">private</span><span class="token class-name">Adaptee</span>adaptee<span class="token punctuation">;</span><span class="token comment">//维持一个对适配者对象的引用</span><span class="token number">3.</span><span class="token number">4.</span><span class="token keyword">public</span><span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span>adaptee<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token keyword">this</span><span class="token punctuation">.</span>adaptee<span class="token operator">=</span>adaptee<span class="token punctuation">;</span><span class="token number">6.</span><span class="token punctuation">}</span><span class="token number">7.</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">9.</span>adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转发调用</span><span class="token number">10.</span><span class="token punctuation">}</span><span class="token number">11.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整解决方案"><a href="#完整解决方案" class="headerlink" title="完整解决方案"></a>完整解决方案</h2><blockquote><p>对象适配器<br><img src="/2021/02/01/java-design-pattern-structurepattern/3.png"></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">65.</span><span class="token comment">//操作适配器：适配器</span><span class="token number">66.</span><span class="token keyword">class</span><span class="token class-name">OperationAdapter</span><span class="token keyword">implements</span><span class="token class-name">ScoreOperation</span><span class="token punctuation">{</span><span class="token number">67.</span><span class="token keyword">private</span><span class="token class-name">QuickSort</span>sortObj<span class="token punctuation">;</span><span class="token comment">//定义适配者QuickSort对象</span><span class="token number">68.</span><span class="token keyword">private</span><span class="token class-name">BinarySearch</span>searchObj<span class="token punctuation">;</span><span class="token comment">//定义适配者BinarySearch对象</span><span class="token number">69.</span><span class="token number">70.</span><span class="token keyword">public</span><span class="token class-name">OperationAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">71.</span>sortObj<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">QuickSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">72.</span>searchObj<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">73.</span><span class="token punctuation">}</span><span class="token number">74.</span><span class="token number">75.</span><span class="token keyword">public</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span>array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">76.</span><span class="token keyword">return</span>sortObj<span class="token punctuation">.</span><span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用适配者类QuickSort的排序方法</span><span class="token number">77.</span><span class="token punctuation">}</span><span class="token number">78.</span><span class="token number">79.</span><span class="token keyword">public</span><span class="token keyword">int</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span>array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">80.</span><span class="token keyword">return</span>searchObj<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用适配者类BinarySearch的查找方法</span><span class="token number">81.</span><span class="token punctuation">}</span><span class="token number">82.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><blockquote><p>典型的类适配器<br><img src="/2021/02/01/java-design-pattern-structurepattern/4.png"></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Adapter</span><span class="token keyword">extends</span><span class="token class-name">Adaptee</span><span class="token keyword">implements</span><span class="token class-name">Target</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token punctuation">}</span><span class="token number">5.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Java、C#等语言不支持多重类继承(如果目标抽象类<br>Target不是接口，而是一个类，就无法使用类适配器；)</li><li>在Java等面向对象编程语言中，大部分情况下我们使用的是对象适配器，类适配器较少使用。</li></ul><h2 id="双向适配器"><a href="#双向适配器" class="headerlink" title="双向适配器"></a>双向适配器</h2><p><img src="/2021/02/01/java-design-pattern-structurepattern/5.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Adapter</span><span class="token keyword">implements</span><span class="token class-name">Target</span><span class="token punctuation">,</span><span class="token class-name">Adaptee</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token comment">//同时维持对抽象目标类和适配者的引用</span><span class="token number">3.</span><span class="token keyword">private</span><span class="token class-name">Target</span>target<span class="token punctuation">;</span><span class="token number">4.</span><span class="token keyword">private</span><span class="token class-name">Adaptee</span>adaptee<span class="token punctuation">;</span><span class="token number">5.</span><span class="token number">6.</span><span class="token keyword">public</span><span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Target</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span><span class="token number">8.</span><span class="token punctuation">}</span><span class="token number">9.</span><span class="token number">10.</span><span class="token keyword">public</span><span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span>adaptee<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">11.</span><span class="token keyword">this</span><span class="token punctuation">.</span>adaptee<span class="token operator">=</span>adaptee<span class="token punctuation">;</span><span class="token number">12.</span><span class="token punctuation">}</span><span class="token number">13.</span><span class="token number">14.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">15.</span>adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span><span class="token punctuation">}</span><span class="token number">17.</span><span class="token number">18.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">19.</span>target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">20.</span><span class="token punctuation">}</span><span class="token number">21.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在实际开发中，我们很少使用双向适配器。</li></ul><h2 id="缺省适配器"><a href="#缺省适配器" class="headerlink" title="缺省适配器"></a>缺省适配器</h2><blockquote><p>缺省适配器模式(Default    Adapter    Pattern)</p></blockquote><ul><li>当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情<br>况，又称为单接口适配器模式。</li></ul><blockquote><p>缺省适配器模式结构图<br><img src="/2021/02/01/java-design-pattern-structurepattern/6.png"></p></blockquote><h2 id="适配器模式优缺点和使用场景"><a href="#适配器模式优缺点和使用场景" class="headerlink" title="适配器模式优缺点和使用场景"></a>适配器模式优缺点和使用场景</h2><blockquote><p>工厂方法模式是使用频率最高的设计模式之一，是很多开源框架和API类库的核心模式。</p></blockquote><blockquote><p>主要优点</p></blockquote><ul><li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。</li><li>增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用</li><li>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</li><li>类适配器模式还有如下优点：<ul><li>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活<br>性更强。</li></ul></li><li>对象适配器模式还有如下优点：<ul><li>(1)    一个对象适配器可以把多个不同的适配者适配到同一个目标；</li><li>(2)    可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配<br>者的子类也可通过该适配器进行适配。</li></ul></li></ul><blockquote><p>主要缺点</p></blockquote><ul><li>类的个数将成对增加,编译和运行额外的开销<ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li></ul></li><li>抽象性和理解难度,用到DOM、反射等技术，增加了系统的实现难度。<ul><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ul></li></ul><blockquote><p>适用场景</p></blockquote><ul><li>(1)    客户端不知道它所需要的对象的类。<ul><li>在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建，可将具体工厂类的类名存储在配置文件或数据库中。</li></ul></li><li>(2)    抽象工厂类通过其子类来指定创建哪个对象。<ul><li>在工厂方法模式中，对于抽象工厂类只需要提供一<br>个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，<br>在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-design-pattern-CreatorPattern</title>
      <link href="2021/01/29/java-design-pattern-creatorpattern/"/>
      <url>2021/01/29/java-design-pattern-creatorpattern/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%B7%A5%E5%8E%82%E7%9A%84%E4%BD%9C%E7%94%A8">工厂的作用</a><ul><li><a href="#new-%E7%9A%84%E7%81%B5%E6%B4%BB%E6%80%A7%E9%97%AE%E9%A2%98">new 的灵活性问题</a></li></ul></li><li>[简单工厂模式-Simple    Factory    Pattern 【学习难度：★★☆☆☆，使用频率：★★★☆☆】](#简单工厂模式-simple    factory    pattern-学习难度★★☆☆☆使用频率★★★☆☆)<ul><li><a href="#%E5%9B%BE%E8%A1%A8%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1">图表库的设计</a></li><li><a href="#%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0">简单工厂模式概述</a></li><li><a href="#%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">图表解决方案</a></li><li><a href="#%E6%96%B9%E6%A1%88%E6%94%B9%E8%BF%9B">方案改进</a></li><li><a href="#%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8C%96">简单工厂模式的简化</a></li><li><a href="#%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">简单工厂模式优缺点和使用场景</a></li></ul></li><li>[工厂方法模式-Factory    Method    Pattern【学习难度：★★☆☆☆，使用频率：★★★★★】](#工厂方法模式-factory    method    pattern学习难度★★☆☆☆使用频率★★★★★)<ul><li><a href="#%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1">日志记录器的设计</a></li><li><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0">工厂方法模式概述</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">完整解决方案</a></li><li><a href="#%E5%8F%8D%E5%B0%84%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">反射与配置文件</a></li><li><a href="#%E9%87%8D%E8%BD%BD%E7%9A%84%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95">重载的工厂方法</a></li><li><a href="#%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E7%9A%84%E9%9A%90%E8%97%8F">工厂方法的隐藏</a></li><li><a href="#%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">工厂模式优缺点和使用场景</a></li></ul></li><li>[抽象工厂模式-Abstract    Factory    Pattern【学习难度：★★★★☆，使用频率：★★★★★】](#抽象工厂模式-abstract    factory    pattern学习难度★★★★☆使用频率★★★★★)<ul><li><a href="#%E7%95%8C%E9%9D%A2%E7%9A%AE%E8%82%A4%E5%BA%93%E7%9A%84%E5%88%9D%E5%A7%8B%E8%AE%BE%E8%AE%A1">界面皮肤库的初始设计</a></li><li><a href="#%E4%BA%A7%E5%93%81%E7%AD%89%E7%BA%A7%E7%BB%93%E6%9E%84%E4%B8%8E%E4%BA%A7%E5%93%81%E6%97%8F">产品等级结构与产品族</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0">抽象工厂模式概述</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">抽象工厂完整解决方案</a></li><li><a href="#%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99%E7%9A%84%E5%80%BE%E6%96%9C%E6%80%A7">“开闭原则”的倾斜性</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">抽象工厂模式优缺点和使用场景</a></li></ul></li><li>[单例模式-Singleton    Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】](#单例模式-singleton    pattern学习难度★☆☆☆☆使用频率★★★★☆)<ul><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8A%A8%E6%9C%BA">单例模式的动机</a></li><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0">单例模式概述</a></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0">负载均衡器的设计与实现</a></li><li><a href="#%E9%A5%BF%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E4%B8%8E%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E7%9A%84%E8%AE%A8%E8%AE%BA">饿汉式单例与懒汉式单例的讨论</a><ul><li><a href="#%E9%A5%BF%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E7%B1%BB">饿汉式单例类</a></li><li><a href="#%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E7%B1%BB%E4%B8%8E%E7%BA%BF%E7%A8%8B%E9%94%81%E5%AE%9A">懒汉式单例类与线程锁定</a></li><li><a href="#%E9%A5%BF%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E7%B1%BB%E4%B8%8E%E6%87%92%E6%B1%89%E5%BC%8F%E5%8D%95%E4%BE%8B%E7%B1%BB%E6%AF%94%E8%BE%83">饿汉式单例类与懒汉式单例类比较</a></li></ul></li><li>[一种更好的单例实现方法 Initialization on    Demand    Holder    (IoDH)](#一种更好的单例实现方法-initialization-on    demand    holder    iodh)</li><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">单例模式优缺点和使用场景</a></li><li><a href="#%E6%80%9D%E8%80%83%E5%A6%82%E4%BD%95%E5%AF%B9%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%94%B9%E9%80%A0%E4%BD%BF%E5%BE%97%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%9F%90%E4%B8%AA%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E5%AD%98%E5%9C%A8%E6%9C%89%E9%99%90%E5%A4%9A%E4%B8%AA%E4%BE%8B%E5%A6%82%E4%B8%A4%E4%BE%8B%E6%88%96%E4%B8%89%E4%BE%8B%E6%B3%A8%E6%94%B9%E9%80%A0%E4%B9%8B%E5%90%8E%E7%9A%84%E7%B1%BB%E5%8F%AF%E7%A7%B0%E4%B9%8B%E4%B8%BA%E5%A4%9A%E4%BE%8B%E7%B1%BB">思考:如何对单例模式进行改造，使得系统中某个类的对象可以存在有限多个，例如两例或三例？【注：改造之后的类可称之为多例类。】</a></li></ul></li><li>[原型模式-Prototype    Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】](#原型模式-prototype    pattern学习难度★★★☆☆使用频率★★★☆☆)<ul><li><a href="#%E5%A4%A7%E5%90%8C%E5%B0%8F%E5%BC%82%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%91%A8%E6%8A%A5">大同小异的工作周报</a></li><li><a href="#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0">原型模式概述</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-1">完整解决方案</a></li><li><a href="#%E5%B8%A6%E9%99%84%E4%BB%B6%E7%9A%84%E5%91%A8%E6%8A%A5">带附件的周报</a><ul><li><a href="#%E6%B5%85%E5%85%8B%E9%9A%86">浅克隆</a></li><li><a href="#%E6%B7%B1%E5%85%8B%E9%9A%86">深克隆</a></li></ul></li><li><a href="#%E5%8E%9F%E5%9E%8B%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E5%BC%95%E5%85%A5%E5%92%8C%E5%AE%9E%E7%8E%B0">原型管理器的引入和实现</a></li><li><a href="#%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">原型模式优缺点和使用场景</a></li></ul></li><li>[建造者模式-Builder    Pattern【学习难度：★★★★☆，使用频率：★★☆☆☆】](#建造者模式-builder    pattern学习难度★★★★☆使用频率★★☆☆☆)<ul><li><a href="#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0">建造者模式概述</a></li><li><a href="#%E5%AE%8C%E6%95%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-2">完整解决方案</a></li><li><a href="#%E5%85%B3%E4%BA%8Edirector%E7%9A%84%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%AE%A8%E8%AE%BA">关于Director的进一步讨论</a><ul><li><a href="#%E7%9C%81%E7%95%A5director">省略Director</a></li><li><a href="#%E9%92%A9%E5%AD%90%E6%96%B9%E6%B3%95%E7%9A%84%E5%BC%95%E5%85%A5%E6%8E%A7%E5%88%B6%E6%98%AF%E5%90%A6%E5%AF%B9%E6%9F%90%E4%B8%AAbuildpartx%E7%9A%84%E8%B0%83%E7%94%A8">钩子方法的引入（控制是否对某个buildPartX()的调用。）</a></li></ul></li><li><a href="#%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF">建造者模式优缺点和使用场景</a></li></ul></li></ul><!-- /TOC --><h1 id="工厂的作用"><a href="#工厂的作用" class="headerlink" title="工厂的作用"></a>工厂的作用</h1><blockquote><p>对象相关的职责</p></blockquote><ul><li>通常有三类：对象本身所具有的职责、创建对象的职责和使用对象的职责。<ul><li>对象本身的职责:就是对象自身所具有的一些数据和行为，可通过一些公开的方法来实现它的职责。</li></ul></li></ul><blockquote><p>创建对象的方式：</p></blockquote><ul><li><p>(1) 使用new关键字直接创建对象；</p></li><li><p>(2) 通过反射机制创建对象；</p></li><li><p>(3) 通过clone()方法创建对象；</p></li><li><p>(4) 通过工厂类创建对象。</p></li></ul><h2 id="new-的灵活性问题"><a href="#new-的灵活性问题" class="headerlink" title="new 的灵活性问题"></a>new 的灵活性问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LoginAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> udao<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">LoginAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        udao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDBCUserDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建对象</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//其他代码</span>        udao<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用对象</span>        <span class="token comment">//其他代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分析一下LoginAction和UserDAO之间的关系，LoginAction类负责创建了一个UserDAO子类的对象并使用UserDAO的方法来完成相应的业务处理，也就是说LoginAction即负责udao的创建又负责udao的使用，创建对象和使用对象的职责耦合在一起</li><li>如果在LoginAction中希望能够使用UserDAO的另一个子类如HibernateUserDAO类型的对象，必须修改LoginAction类的源代码，违反了“开闭原则”。</li></ul><blockquote><p>解决方法</p></blockquote><ul><li>将udao对象的创建职责从LoginAction类中移除，在LoginAction类之外创建对象</li><li>引入工厂类，客户类（如LoginAction）不涉及对象的创建，对象的创建者也不会涉及对象的使用。<br><img src="/2021/01/29/java-design-pattern-creatorpattern/1.jpg"></li></ul><blockquote><p>工厂模式要点<br><font size="4" font="" color="red">两个类A和B之间的关系应该仅仅是A创建B或是A使用B，而不能两种关系都有。<br></font></p></blockquote><blockquote><p>工厂模式好处</p></blockquote><ul><li>防止用来实例化一个类的数据和代码在多个类中到处都是，可以将有关创建的知识搬移到一个工厂类中</li><li>可以提供一系列名字完全不同的工厂方法，每一个工厂方法对应一个构造函数<br><img src="/2021/01/29/java-design-pattern-creatorpattern/2.jpg"></li></ul><h1 id="简单工厂模式-Simple-Factory-Pattern-【学习难度：★★☆☆☆，使用频率：★★★☆☆】"><a href="#简单工厂模式-Simple-Factory-Pattern-【学习难度：★★☆☆☆，使用频率：★★★☆☆】" class="headerlink" title="简单工厂模式-Simple    Factory    Pattern 【学习难度：★★☆☆☆，使用频率：★★★☆☆】"></a>简单工厂模式-Simple    Factory    Pattern 【学习难度：★★☆☆☆，使用频率：★★★☆☆】</h1><blockquote><p>简单工厂模式</p></blockquote><ul><li>它不属于GoF    23种设计模式，但在软件开发中应用也较为频繁，通常将它作为学习其他工厂模式的入门</li></ul><h2 id="图表库的设计"><a href="#图表库的设计" class="headerlink" title="图表库的设计"></a>图表库的设计</h2><blockquote><p>初始设计</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> <span class="token keyword">class</span><span class="token class-name">Chart</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">private</span><span class="token class-name">String</span>type<span class="token punctuation">;</span><span class="token comment">//图表类型</span><span class="token number">3.</span><span class="token number">4.</span><span class="token keyword">public</span><span class="token class-name">Chart</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>data<span class="token punctuation">,</span><span class="token class-name">String</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span>type<span class="token punctuation">;</span><span class="token number">6.</span><span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"histogram"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token comment">//初始化柱状图</span><span class="token number">8.</span><span class="token punctuation">}</span><span class="token number">9.</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">10.</span><span class="token comment">//初始化饼状图</span><span class="token number">11.</span><span class="token punctuation">}</span><span class="token number">12.</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">13.</span><span class="token comment">//初始化折线图</span><span class="token number">14.</span><span class="token punctuation">}</span><span class="token number">15.</span><span class="token punctuation">}</span><span class="token number">16.</span><span class="token number">17.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">18.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"histogram"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">19.</span><span class="token comment">//显示柱状图</span><span class="token number">20.</span><span class="token punctuation">}</span><span class="token number">21.</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">22.</span><span class="token comment">//显示饼状图</span><span class="token number">23.</span><span class="token punctuation">}</span><span class="token number">24.</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">25.</span><span class="token comment">//显示折线图</span><span class="token number">26.</span><span class="token punctuation">}</span><span class="token number">27.</span><span class="token punctuation">}</span><span class="token number">28.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始设计问题</p></blockquote><ul><li><p>(1)    在Chart类中包含很多“if…else…”代码块。</p><ul><li>阅读难度、维护难度和测试难度大，执行过程中需要做大量的条件判断。</li></ul></li><li><p>(2)    Chart类的职责过重。</p><ul><li>它负责初始化和显示所有的图表对象，将各种图表对象的初始化代码和显示代码集中在一个类中实现，违反了“单一职责原则”，不利于类的重用和维护；</li><li>而且将大量的对象初始化代码都写在构造函数中将导致构造函数非常庞大，对象在创建时需要进行条件判断，降低了对象创建的效率。</li></ul></li><li><p>(3)    当需要增加新类型的图表时，必须修改Chart类的源代码，违反了“开闭原则”。</p></li><li><p>(4)    客户端只能通过new关键字来直接创建Chart对象，Chart类与客户端类耦合度较高，对象的创建和使用无法分离。</p></li><li><p>(5)    客户端在创建Chart对象之前可能还需要进行大量初始化设置。</p><ul><li>例如设置柱状图的颜色、高度<br>等，如果在Chart类的构造函数中没有提供一个默认设置，那就只能由客户端来完成初始设置，这些<br>代码在每次创建Chart对象时都会出现，导致代码的重复。</li></ul></li></ul><h2 id="简单工厂模式概述"><a href="#简单工厂模式概述" class="headerlink" title="简单工厂模式概述"></a>简单工厂模式概述</h2><blockquote><p>定义</p></blockquote><ul><li>定义一个工厂类，它可以根据参数的不同返回不同类<br>的实例，被创建的实例通常都具有共同的父类</li><li>用于创建实例的方法是静态<br>(static)方法，因此简单工厂模式又被称为静态工厂方法(Static    Factory    Method)模式，它属<br>于类创建型模式。</li></ul><blockquote><p>例子<br><img src="/2021/01/29/java-design-pattern-creatorpattern/1.png"></p></blockquote><ul><li>Factory（工厂角色）：工厂角色即工厂类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Factory</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token comment">//静态工厂方法</span><span class="token number">3.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">Product</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4.</span><span class="token class-name">Product</span>product<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token number">5.</span><span class="token keyword">if</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">6.</span>product<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ConcreteProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token comment">//初始化设置product</span><span class="token number">8.</span><span class="token punctuation">}</span><span class="token number">9.</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">10.</span>product<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ConcreteProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11.</span><span class="token comment">//初始化设置product</span><span class="token number">12.</span><span class="token punctuation">}</span><span class="token number">13.</span><span class="token keyword">return</span>product<span class="token punctuation">;</span><span class="token number">14.</span><span class="token punctuation">}</span><span class="token number">15.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Product（抽象产品角色）:使得在工厂类中只需定义一个通用的工厂方法，因为所有创建的具体产品对象都是其子类对象。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">Product</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token comment">//所有产品类的公共业务方法</span><span class="token number">3.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">methodSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4.</span><span class="token comment">//公共方法的实现</span><span class="token number">5.</span><span class="token punctuation">}</span><span class="token number">7.</span><span class="token comment">//声明抽象业务方法</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">methodDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>ConcreteProduct（具体产品角色）：它是简单工厂模式的创建目标，所有被创建的对象都充当这个角色的某个具体类的实例。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">ConcreteProduct</span><span class="token keyword">extends</span><span class="token class-name">Product</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token comment">//实现业务方法</span><span class="token number">3.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">methodDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4.</span><span class="token comment">//业务方法的实现</span><span class="token number">5.</span><span class="token punctuation">}</span><span class="token number">6.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>客户端调用<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token class-name">Product</span>product<span class="token punctuation">;</span><span class="token number">4.</span>product<span class="token operator">=</span><span class="token class-name">Factory</span><span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过工厂类创建产品对象</span><span class="token number">5.</span>product<span class="token punctuation">.</span><span class="token function">methodSame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span>product<span class="token punctuation">.</span><span class="token function">methodDiff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token punctuation">}</span><span class="token number">8.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图表解决方案"><a href="#图表解决方案" class="headerlink" title="图表解决方案"></a>图表解决方案</h2><img src="/2021/01/29/java-design-pattern-creatorpattern/2.png"></li></ul><h2 id="方案改进"><a href="#方案改进" class="headerlink" title="方案改进"></a>方案改进</h2><blockquote><p>之前解决方案的问题</p></blockquote><ul><li>在创建具体Chart对象时，每更换一个Chart对象都需要修改客户端代码中静态工厂方法的参数，客户端代码将要重新编译，这对于客户端而言，违反了“开闭原则”</li></ul><blockquote><p>解决方法 </p></blockquote><ul><li>将静态工厂方法的参数存储在XML或properties格式的配置文件中，如下config.xml所示：<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xmlversion="1.0"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chartType</span><span class="token punctuation">&gt;</span></span>histogram<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chartType</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>通过一个工具类XMLUtil来读取配置文件中的字符串参数<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">import</span><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">2.</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">3.</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span></span><span class="token class-name">SAXException</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">5.</span><span class="token number">6.</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">XMLUtil</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token comment">//该方法用于从XML配置文件中提取图表类型，并返回类型名</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">String</span><span class="token function">getChartType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">9.</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token number">10.</span><span class="token comment">//创建文档对象</span><span class="token number">11.</span><span class="token class-name">DocumentBuilderFactory</span>dFactory<span class="token operator">=</span><span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12.</span><span class="token class-name">DocumentBuilder</span>builder<span class="token operator">=</span>dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">13.</span><span class="token class-name">Document</span>doc<span class="token punctuation">;</span><span class="token number">14.</span>doc<span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">15.</span><span class="token number">16.</span><span class="token comment">//获取包含图表类型的文本节点</span><span class="token number">17.</span><span class="token class-name">NodeList</span>nl<span class="token operator">=</span>doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"chartType"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">18.</span><span class="token class-name">Node</span>classNode<span class="token operator">=</span>nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">19.</span><span class="token class-name">String</span>chartType<span class="token operator">=</span>classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">20.</span><span class="token keyword">return</span>chartType<span class="token punctuation">;</span><span class="token number">21.</span><span class="token punctuation">}</span><span class="token number">22.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">23.</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">24.</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token number">25.</span><span class="token punctuation">}</span><span class="token number">26.</span><span class="token punctuation">}</span><span class="token number">27.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>客户端<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token class-name">Chart</span>chart<span class="token punctuation">;</span><span class="token number">4.</span><span class="token class-name">String</span>type<span class="token operator">=</span><span class="token class-name">XMLUtil</span><span class="token punctuation">.</span><span class="token function">getChartType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取配置文件中的参数</span><span class="token number">5.</span>chart<span class="token operator">=</span><span class="token class-name">ChartFactory</span><span class="token punctuation">.</span><span class="token function">getChart</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建产品对象</span><span class="token number">6.</span>chart<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token punctuation">}</span><span class="token number">8.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="简单工厂模式的简化"><a href="#简单工厂模式的简化" class="headerlink" title="简单工厂模式的简化"></a>简单工厂模式的简化</h2><blockquote><p>为了简化简单工厂模式，我们可以将抽象产品类和工厂类合并，将静态工厂方法移至抽象产品类中<br><img src="/2021/01/29/java-design-pattern-creatorpattern/3.png"></p></blockquote><h2 id="简单工厂模式优缺点和使用场景"><a href="#简单工厂模式优缺点和使用场景" class="headerlink" title="简单工厂模式优缺点和使用场景"></a>简单工厂模式优缺点和使用场景</h2><blockquote><p>   主要优点</p></blockquote><ul><li><p>(1)    工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的职责，而仅仅“消费”产品，简单工厂模式实现了对象创建和使用的分离。</p></li><li><p>(2)    客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以在一定程度减少使用者的记忆量。</p></li><li><p>(3)    通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</p></li></ul><blockquote><p>   主要缺点</p></blockquote><ul><li><p>(1)    由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受到影响。</p></li><li><p>(2)    使用简单工厂模式势必会增加系统中类的个数（引入了新的工厂类），增加了系统的复杂度和理解难度。</p></li><li><p>(3)    系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</p></li><li><p>(4)    简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</p></li></ul><blockquote><p>适用场景</p></blockquote><ul><li>(1)    工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</li><li>(2)    客户端只知道传入工厂类的参数，对于如何创建对象并不关心。</li></ul><h1 id="工厂方法模式-Factory-Method-Pattern【学习难度：★★☆☆☆，使用频率：★★★★★】"><a href="#工厂方法模式-Factory-Method-Pattern【学习难度：★★☆☆☆，使用频率：★★★★★】" class="headerlink" title="工厂方法模式-Factory    Method    Pattern【学习难度：★★☆☆☆，使用频率：★★★★★】"></a>工厂方法模式-Factory    Method    Pattern【学习难度：★★☆☆☆，使用频率：★★★★★】</h1><blockquote><p>简单工厂的问题</p></blockquote><ul><li>当系统中需要引入新产品时，由于静态工厂方法通过所传入参数的不同来创建不同的产品，这必定要修改工厂类的源代码，将违背“开闭原则”</li></ul><blockquote><p>工厂方法模式</p></blockquote><ul><li>实现增加新产品而不影响已有代码</li></ul><h2 id="日志记录器的设计"><a href="#日志记录器的设计" class="headerlink" title="日志记录器的设计"></a>日志记录器的设计</h2><blockquote><p>需求和难点</p></blockquote><ul><li>该记录器可以通过多种途径保存系统的运行日志，如通过文件记录或数据库记录，用户可以通过修改配置文件灵活地更换日志记录方式。</li><li>初始化参数的设置过程较为复杂，而且某些参数的设置有严格的先后次序，否则可能会发生记录失败</li></ul><blockquote><p>设计要点</p></blockquote><ul><li>(1)    需要封装日志记录器的初始化过程，这些初始化工作较为复杂，例如需要初始化其他相关的类，还有可能需要读取配置文件（例如连接数据库或创建文件），导致代码较长，如果将它们都写在构造函数中，会导致构造函数庞大，不利于代码的修改和维护；</li><li>(2)    用户可能需要更换日志记录方式，在客户端代码中需要提供一种灵活的方式来选择日志记录器，尽量在不修改源代码的基础上更换或者增加日志记录方式。</li></ul><blockquote><p>简单工厂模式设计<br><img src="/2021/01/29/java-design-pattern-creatorpattern/4.png"></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token comment">//日志记录器工厂</span><span class="token number">2.</span><span class="token keyword">class</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token comment">//静态工厂方法</span><span class="token number">4.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">Logger</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"db"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">6.</span><span class="token comment">//连接数据库，代码省略</span><span class="token number">7.</span><span class="token comment">//创建数据库日志记录器对象</span><span class="token number">8.</span><span class="token class-name">Logger</span>logger<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">DatabaseLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token comment">//初始化数据库日志记录器，代码省略</span><span class="token number">10.</span><span class="token keyword">return</span>logger<span class="token punctuation">;</span><span class="token number">11.</span><span class="token punctuation">}</span><span class="token number">12.</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">13.</span><span class="token comment">//创建日志文件</span><span class="token number">14.</span><span class="token comment">//创建文件日志记录器对象</span><span class="token number">15.</span><span class="token class-name">Logger</span>logger<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span><span class="token comment">//初始化文件日志记录器，代码省略</span><span class="token number">17.</span><span class="token keyword">return</span>logger<span class="token punctuation">;</span><span class="token number">18.</span><span class="token punctuation">}</span><span class="token number">19.</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token number">20.</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token number">21.</span><span class="token punctuation">}</span><span class="token number">22.</span><span class="token punctuation">}</span><span class="token number">23.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>(1)    工厂类过于庞大，包含了大量的if…else…代码，导致维护和测试难度增大；</li><li>(2)    系统扩展不灵活，如果增加新类型的日志记录器，必须修改静态工厂方法的业务逻辑，违反了“开闭原则”。</li></ul><h2 id="工厂方法模式概述"><a href="#工厂方法模式概述" class="headerlink" title="工厂方法模式概述"></a>工厂方法模式概述</h2><blockquote><p>定义</p></blockquote><ul><li>定义一个用于创建对象的接口，让子类决定将哪一个<br>类实例化。</li><li>工厂方法模式又简称为工厂模式(Factory    Pattern)，又可称作虚拟构造器模式(Virtual    Constructor    Pattern)或多态工厂模式(Polymorphic    Factory    Pattern)。</li></ul><blockquote><p>结构<br><img src="/2021/01/29/java-design-pattern-creatorpattern/5.png"></p></blockquote><ul><li>与简单工厂模式相比，工厂方法模式最重要的区别是引入了抽象工厂角色，抽象工厂可以是接口，也可以是抽象类或者具体类，其典型代码如下所示：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">interface</span><span class="token class-name">Factory</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token class-name">Product</span><span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>具体工厂类实现了工厂方法，不同的具体工厂可以创<br>建不同的具体产品，其典型代码如下所示：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">ConcreteFactory</span><span class="token keyword">implements</span><span class="token class-name">Factory</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token class-name">Product</span><span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">ConcreteProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token punctuation">}</span><span class="token number">5.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>客户端使用</p></blockquote></li><li>在客户端代码中，只需关心工厂类即可，不同的具体工厂可以创建不同的产品，典型的客户端类代码片段如下所示：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>……<span class="token number">2.</span><span class="token class-name">Factory</span>factory<span class="token punctuation">;</span><span class="token number">3.</span>factory<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ConcreteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可通过配置文件实现</span><span class="token number">4.</span><span class="token class-name">Product</span>product<span class="token punctuation">;</span><span class="token number">5.</span>product<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">factoryMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>思考</p></blockquote></li><li>工厂方法模式中的工厂方法能否为静态方法？为什么？</li><li>不能 ，因为factory.factoryMethod()会调用类方法了，而没延迟到子类</li></ul><h2 id="完整解决方案"><a href="#完整解决方案" class="headerlink" title="完整解决方案"></a>完整解决方案</h2><p><img src="/2021/01/29/java-design-pattern-creatorpattern/6.png"></p><blockquote><p>客户端测试代码：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token class-name">LoggerFactory</span>factory<span class="token punctuation">;</span><span class="token number">4.</span><span class="token class-name">Logger</span>logger<span class="token punctuation">;</span><span class="token number">5.</span>factory<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">FileLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可引入配置文件实现</span><span class="token number">6.</span>logger<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span>logger<span class="token punctuation">.</span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span><span class="token punctuation">}</span><span class="token number">9.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射与配置文件"><a href="#反射与配置文件" class="headerlink" title="反射与配置文件"></a>反射与配置文件</h2><blockquote><p>目的</p></blockquote><ul><li>系统具有更好的灵活性和可扩展性，在不修改任何客户端代码的基础上更换或增加新的日志记录方式。  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">5.</span>factory<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">FileLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可引入配置文件实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>无反射时需要得到String 的类型 再  if  else new 对象<blockquote><p>实现方法</p></blockquote></li></ul></li><li>不再使用new关键字来创建工厂对象，而是将具体工厂类的类名存储在配置文件（如XML文件）中，通过读取配置文件获取类名字符串，再使用Java的反射机制，根据类名字符串生<br>成对象。</li></ul><blockquote><p>配置文件</p></blockquote><ul><li>软件系统的配置文件通常为XML文件，我们可以使用DOM    (Document    Object    Model)、SAX    (Simple    API    for<br>XML)、StAX    (Streaming    API    for    XML)等技术来处理XML文件。</li></ul><blockquote><p>日志记录器客户端代码重构</p></blockquote><ul><li>配置文件config.xml<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">1.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!—</span><span class="token attr-name">config.xml</span><span class="token attr-name">--</span><span class="token punctuation">&gt;</span></span>2.<span class="token prolog">&lt;?xmlversion="1.0"?&gt;</span>3.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">&gt;</span></span>4.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">&gt;</span></span>FileLoggerFactory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">&gt;</span></span>5.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>放射工具类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token comment">//工具类XMLUtil.java</span><span class="token number">2.</span><span class="token keyword">import</span><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">3.</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token keyword">import</span><span class="token namespace">org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span></span><span class="token class-name">SAXException</span><span class="token punctuation">;</span><span class="token number">5.</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">6.</span><span class="token number">7.</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">XMLUtil</span><span class="token punctuation">{</span><span class="token number">8.</span><span class="token comment">//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象</span><span class="token number">9.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">Object</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">10.</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token number">11.</span><span class="token comment">//创建DOM文档对象</span><span class="token number">12.</span><span class="token class-name">DocumentBuilderFactory</span>dFactory<span class="token operator">=</span><span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">13.</span><span class="token class-name">DocumentBuilder</span>builder<span class="token operator">=</span>dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14.</span><span class="token class-name">Document</span>doc<span class="token punctuation">;</span><span class="token number">15.</span>doc<span class="token operator">=</span>builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span><span class="token number">17.</span><span class="token comment">//获取包含类名的文本节点</span><span class="token number">18.</span><span class="token class-name">NodeList</span>nl<span class="token operator">=</span>doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">19.</span><span class="token class-name">Node</span>classNode<span class="token operator">=</span>nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">20.</span><span class="token class-name">String</span>cName<span class="token operator">=</span>classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">21.</span><span class="token number">22.</span><span class="token comment">//通过类名生成实例对象并将其返回</span><span class="token number">23.</span><span class="token class-name">Class</span>c<span class="token operator">=</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">24.</span><span class="token class-name">Object</span>obj<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">25.</span><span class="token keyword">return</span>obj<span class="token punctuation">;</span><span class="token number">26.</span><span class="token punctuation">}</span><span class="token number">27.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">28.</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">29.</span><span class="token keyword">return</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token number">30.</span><span class="token punctuation">}</span><span class="token number">31.</span><span class="token punctuation">}</span><span class="token number">32.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>客户端通过XMLUtil类的静态工厂方法getBean()方法进行对象的实例化<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token class-name">LoggerFactory</span>factory<span class="token punctuation">;</span><span class="token number">4.</span><span class="token class-name">Logger</span>logger<span class="token punctuation">;</span><span class="token number">5.</span>factory<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">)</span><span class="token class-name">XMLUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getBean()的返回类型为Object，需要进行强制类型转</span>换<span class="token number">6.</span>logger<span class="token operator">=</span>factory<span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span>logger<span class="token punctuation">.</span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span><span class="token punctuation">}</span><span class="token number">9.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>增加新的日志记录方式的步骤</p></blockquote><ul><li><p>(1)    新的日志记录器需要继承抽象日志记录器Logger；</p></li><li><p>(2)    对应增加一个新的具体日志记录器工厂，继承抽象日志记录器工厂LoggerFactory，并实现其<br>中的工厂方法createLogger()，设置好初始化参数和环境变量，返回具体日志记录器对象；</p></li><li><p>(3)    修改配置文件config.xml，将新增的具体日志记录器工厂类的类名字符串替换原有工厂类类名<br>字符串；</p></li><li><p>(4)    编译新增的具体日志记录器类和具体日志记录器工厂类，运行客户端测试类即可使用新的日志记<br>录方式，而原有类库代码无须做任何修改，完全符合“开闭原则”。</p></li></ul><blockquote><p>思考题</p></blockquote><ul><li><p>可以在客户端代码中直接通过反射机制来生成产品对象，在定义产品对象时使用抽象类型，同样可以确保系统的灵活性和可扩展性，增加新的具体产品类无须修改源代码，只需要将其作为抽象产品类的子类再修改配置文件即可，根本不需要抽象工厂类和具体工厂类。试思考这种做法的可行性？如果可行，这种做法是否存在问题？为什么？</p></li><li><p>既然可以用反射机制来形成具体的对象，为什么还要工厂类呢？、具体工厂类到生成具体对象中间可以处理一些东西。比如说，具体工厂类在实现工厂方法时除了创建具体产品对象之外，还可以负责产品 对象的初始化工作以及一些资源和环境配置工作，例如连接数据库、创建文件等。</p></li></ul><h2 id="重载的工厂方法"><a href="#重载的工厂方法" class="headerlink" title="重载的工厂方法"></a>重载的工厂方法</h2><blockquote><p>新需求</p></blockquote><ul><li>通过多种方式来初始化日志记录器<ul><li>例如可以为各种日志记录器提供默认实现；</li><li>还可以为数据库日志记录器提供数据库连接字符串，为文件日志记录器提供文件路径；</li><li>也可以将参数封装在一个Object类型的对象中，通过Object对象将配置参数传入工厂类。</li></ul></li></ul><blockquote><p>可以提供一组重载的工厂方法，以不同的方式对产品对象进行创建。<br><img src="/2021/01/29/java-design-pattern-creatorpattern/7.png"></p></blockquote><h2 id="工厂方法的隐藏"><a href="#工厂方法的隐藏" class="headerlink" title="工厂方法的隐藏"></a>工厂方法的隐藏</h2><blockquote><p>为了进一步简化客户端的使用，还可以对客户端隐藏工厂方法,直接通过工厂即可使用所创建的对象中的业务方法。<br><img src="/2021/01/29/java-design-pattern-creatorpattern/8.png"></p></blockquote><ul><li>抽象工厂类LoggerFactory的代码修改如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token comment">//改为抽象类</span><span class="token number">2.</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token comment">//在工厂类中直接调用日志记录器类的业务方法writeLog()</span><span class="token number">4.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token class-name">Logger</span>logger<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span>logger<span class="token punctuation">.</span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token punctuation">}</span><span class="token number">8.</span><span class="token number">9.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token class-name">Logger</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>客户端代码修改如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token class-name">LoggerFactory</span>factory<span class="token punctuation">;</span><span class="token number">4.</span>factory<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">)</span><span class="token class-name">XMLUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5.</span>factory<span class="token punctuation">.</span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接使用工厂对象来调用产品对象的业务方法</span><span class="token number">6.</span><span class="token punctuation">}</span><span class="token number">7.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工厂模式优缺点和使用场景"><a href="#工厂模式优缺点和使用场景" class="headerlink" title="工厂模式优缺点和使用场景"></a>工厂模式优缺点和使用场景</h2></li></ul><blockquote><p>工厂方法模式是使用频率最高的设计模式之一，是很多开源框架和API类库的核心模式。</p></blockquote><blockquote><p>主要优点</p></blockquote><ul><li>用户只需要关心所需产品对应的工厂，无须关心创建细节</li><li>基于工厂角色和产品角色的多态性设计是工厂方法模式的关键。因为所有的具体工厂类都具有同一抽象父类。</li><li>在系统中加入新产品时，只要添加一个具体工厂和具体产<br>品就可以了，完全符合“开闭原则”。</li></ul><blockquote><p>主要缺点</p></blockquote><ul><li>类的个数将成对增加,编译和运行额外的开销<ul><li>在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，有更多的类需要编译和运行，会给系统带来一些额外的开销。</li></ul></li><li>抽象性和理解难度,用到DOM、反射等技术，增加了系统的实现难度。<ul><li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li></ul></li></ul><blockquote><p>适用场景</p></blockquote><ul><li>(1)    客户端不知道它所需要的对象的类。<ul><li>在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建，可将具体工厂类的类名存储在配置文件或数据库中。</li></ul></li><li>(2)    抽象工厂类通过其子类来指定创建哪个对象。<ul><li>在工厂方法模式中，对于抽象工厂类只需要提供一<br>个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，<br>在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。</li></ul></li></ul><h1 id="抽象工厂模式-Abstract-Factory-Pattern【学习难度：★★★★☆，使用频率：★★★★★】"><a href="#抽象工厂模式-Abstract-Factory-Pattern【学习难度：★★★★☆，使用频率：★★★★★】" class="headerlink" title="抽象工厂模式-Abstract    Factory    Pattern【学习难度：★★★★☆，使用频率：★★★★★】"></a>抽象工厂模式-Abstract    Factory    Pattern【学习难度：★★★★☆，使用频率：★★★★★】</h1><blockquote><p>基本思想</p></blockquote><ul><li>工厂方法模式中的每个工厂只生产一类产品，系统中存在大量的工厂类，我们可以考虑将一些相关的产品组成一个“产品族”，由同一个工厂来统一生产。</li></ul><h2 id="界面皮肤库的初始设计"><a href="#界面皮肤库的初始设计" class="headerlink" title="界面皮肤库的初始设计"></a>界面皮肤库的初始设计</h2><blockquote><p>开发目的</p></blockquote><ul><li>一套界面皮肤库，可以对Java桌面软件进行界面美化。</li><li>为了保护版权，该皮肤库源代码不打算公开，而只向用户提供已打包为jar文件的class字节码文件。</li><li>不同的皮肤将提供视觉效果不同的按钮、文本框、组合框等界面元素</li><li>该皮肤库需要具备良好的灵活性和可扩展性，用户可以自由选择不同的皮肤，开发人员可以在不修改既有代码的基础上增加新的皮肤</li></ul><blockquote><p>   基于工厂方法模式的界面皮肤库初始结构图<br><img src="/2021/01/29/java-design-pattern-creatorpattern/9.png"></p></blockquote><ul><li>设计方案问题<ul><li>当需要增加新的皮肤时，虽然不要修改现有代码，但是需要增加大量类，针对每一个新增具体组件都需要增加一个具体工厂，类的个数成对增加</li><li>由于同一种风格的具体界面组件通常要一起显示，因此需要为每个组件都选择一个具体工厂，用户在使用时必须逐个进行设置，可以适当增加一些约束语句，但客户端代码和配置文件都较为复杂。</li></ul></li></ul><h2 id="产品等级结构与产品族"><a href="#产品等级结构与产品族" class="headerlink" title="产品等级结构与产品族"></a>产品等级结构与产品族</h2><blockquote><p>为了更好地理解抽象工厂模式，我们先引入两个概<br>念：<br><img src="/2021/01/29/java-design-pattern-creatorpattern/10.png"></p></blockquote><ul><li>(1)产品等级结构：产品等级结构即产品的继承结构。<ul><li>如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。</li></ul></li><li>(2)产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品。<ul><li>如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中，海尔电视机、海尔电冰箱构成了一个产品族。    </li></ul></li></ul><blockquote><p>抽象工厂模式示意图<br><img src="/2021/01/29/java-design-pattern-creatorpattern/11.png"></p></blockquote><h2 id="抽象工厂模式概述"><a href="#抽象工厂模式概述" class="headerlink" title="抽象工厂模式概述"></a>抽象工厂模式概述</h2><p><img src="/2021/01/29/java-design-pattern-creatorpattern/12.png"></p><blockquote><p>思考：抽象工厂模式是否符合“开闭原则”？【从增加新的产品等级结构和增加新的产品族两方面进行 思考。】</p></blockquote><ul><li>从增加新的产品族来考虑的话，是符合“开闭原则”的。（比如绿色 红色）</li><li>增加新的产品等级结构的话，不符合，需要去抽象工厂那边新增一个产品等级结构了（比如新的控件）。</li></ul><h2 id="抽象工厂完整解决方案"><a href="#抽象工厂完整解决方案" class="headerlink" title="抽象工厂完整解决方案"></a>抽象工厂完整解决方案</h2><p><img src="/2021/01/29/java-design-pattern-creatorpattern/13.png"></p><h2 id="“开闭原则”的倾斜性"><a href="#“开闭原则”的倾斜性" class="headerlink" title="“开闭原则”的倾斜性"></a>“开闭原则”的倾斜性</h2><blockquote><p>抽象工厂模式中，增加新的产品族很方便，但是增加新的产品等级结构很麻烦，抽象工厂模式的这种性质称为“开闭<br>原则”的倾斜性。</p></blockquote><h2 id="抽象工厂模式优缺点和使用场景"><a href="#抽象工厂模式优缺点和使用场景" class="headerlink" title="抽象工厂模式优缺点和使用场景"></a>抽象工厂模式优缺点和使用场景</h2><blockquote><p>由于它提供了功能更为强大的工厂类并且具备较好的可<br>扩展性,抽象工厂模式也是在软件开发中最常用的设计模式之<br>一。</p></blockquote><blockquote><p>主要优点</p></blockquote><ul><li>抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。</li><li>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”。</li></ul><blockquote><p>主要缺点</p></blockquote><ul><li>增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了“开闭原则”。</li></ul><blockquote><p>适用场景</p></blockquote><ul><li>(1)一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节<ul><li>(这对于所有类型的工厂模式<br>都是很重要的，用户无须关心对象的创建过程，将对象的创建和使用解耦。)</li></ul></li><li>(2)系统中有多于一个的产品族，而每次只使用其中某一产品族。</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li><li>产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构。</li></ul><h1 id="单例模式-Singleton-Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】"><a href="#单例模式-Singleton-Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】" class="headerlink" title="单例模式-Singleton    Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】"></a>单例模式-Singleton    Pattern【学习难度：★☆☆☆☆，使用频率：★★★★☆】</h1><h2 id="单例模式的动机"><a href="#单例模式的动机" class="headerlink" title="单例模式的动机"></a>单例模式的动机</h2><blockquote><p>一个软件系统的某些类而言，我们无须创建多个实例。举个大家都熟知的例子——Windows任务管理器</p></blockquote><ul><li>为了确保对象的唯一性，我们可以通过单例模式来实现，这就是单例模式的动机所在。</li></ul><h2 id="单例模式概述"><a href="#单例模式概述" class="headerlink" title="单例模式概述"></a>单例模式概述</h2><blockquote><p>需要单例的类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">TaskManager</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">public</span><span class="token class-name">TaskManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span><span class="token comment">//初始化窗口</span><span class="token number">4.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">displayProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span><span class="token comment">//显示进程</span><span class="token number">5.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">displayServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span><span class="token comment">//显示服务</span><span class="token number">6.</span>……<span class="token number">7.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>单例模式重构</p></blockquote><ul><li>禁止类的外部直接使用new来创建对象<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span><span class="token class-name">TaskManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>……<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>内部创建保存唯一实例<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">TaskManager</span>tm<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>公有的静态方法创建<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">TaskManager</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">if</span><span class="token punctuation">(</span>tm<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token number">4.</span><span class="token punctuation">{</span><span class="token number">5.</span>tm<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">TaskManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span><span class="token punctuation">}</span><span class="token number">7.</span><span class="token keyword">return</span>tm<span class="token punctuation">;</span><span class="token number">8.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结构图<br><img src="/2021/01/29/java-design-pattern-creatorpattern/14.png"></p></blockquote></li></ul><h2 id="负载均衡器的设计与实现"><a href="#负载均衡器的设计与实现" class="headerlink" title="负载均衡器的设计与实现"></a>负载均衡器的设计与实现</h2><blockquote><p>目标</p></blockquote><ul><li>该软件运行在一台负载均衡服务器上，可以将并发访问和数据流量分发到服务器集群中的多台设备上进行并发处理，提高系统的整体处理能力，缩短响应时间。由于集群中的服务器需要动态删减，且客户端请求需要统一分发，因此需要确保负载均衡器的唯一性，只能有一个负载均衡器来负责服务器的管理和请求的分发，否则将会带来服务器状态的不一致以及请求分配冲突等问题。</li></ul><blockquote><p>实现<br><img src="/2021/01/29/java-design-pattern-creatorpattern/15.png"></p></blockquote><ul><li>将负载均衡器LoadBalancer设计为单例类，其中包含一个存储服务器信息的集合serverList，每次在serverList中随机选择一台服务器来响应客户端的请求</li></ul><h2 id="饿汉式单例与懒汉式单例的讨论"><a href="#饿汉式单例与懒汉式单例的讨论" class="headerlink" title="饿汉式单例与懒汉式单例的讨论"></a>饿汉式单例与懒汉式单例的讨论</h2><blockquote><p>之前设计的问题</p></blockquote><ul><li>当负载均衡器在启动过程中用户再次启动该负载均衡器时，系统无任何异常，但当客户端提交请求时出现请求分发失败，通过仔细分析发现原来系统中还是存在多个负载均衡器对象，导致分发时目标服务器不一致，从而产生冲突。<ul><li>当第一次调用getLoadBalancer()方法创建并启<br>动负载均衡器时，instance对象为null值，因此系统将执行代码instance=    new LoadBalancer()，在此过程中，由于要对LoadBalancer进行大量初始化工作，需要一段时间来创建LoadBalancer对象。</li><li>而在此时，如果再一次调用getLoadBalancer()方法（通常发生在多线程<br>环境中），由于instance尚未创建成功，仍为null值，判断条件(instance==    null)为真值，因<br>此代码instance=    new    LoadBalancer()将再次执行，导致最终创建了多个instance对象，这违<br>背了单例模式的初衷，也导致系统运行发生错误。</li></ul></li></ul><h3 id="饿汉式单例类"><a href="#饿汉式单例类" class="headerlink" title="饿汉式单例类"></a>饿汉式单例类</h3><p><img src="/2021/01/29/java-design-pattern-creatorpattern/16.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">EagerSingleton</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">EagerSingleton</span>instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span><span class="token keyword">private</span><span class="token class-name">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">4.</span><span class="token number">5.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">EagerSingleton</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">6.</span><span class="token keyword">return</span>instance<span class="token punctuation">;</span><span class="token number">7.</span><span class="token punctuation">}</span><span class="token number">8.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒汉式单例类与线程锁定"><a href="#懒汉式单例类与线程锁定" class="headerlink" title="懒汉式单例类与线程锁定"></a>懒汉式单例类与线程锁定</h3><blockquote><p>懒汉式单例在第一次调用getInstance()方法时实例化，在类加载时并不自行实例化，这种技术又称为延迟加载(Lazy    Load)技术，即需要的时候再加载实例。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">LazySingleton</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">LazySingleton</span>instance<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>确保对象的唯一性——单例模式（三）本文档使用书栈<span class="token punctuation">(</span><span class="token class-name">BookStack</span><span class="token punctuation">.</span>CN<span class="token punctuation">)</span>构建 <span class="token operator">-</span><span class="token number">103</span><span class="token operator">-</span><span class="token number">3.</span><span class="token number">4.</span><span class="token keyword">private</span><span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">5.</span><span class="token number">6.</span><span class="token keyword">synchronized</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">LazySingleton</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">8.</span>instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token punctuation">}</span><span class="token number">10.</span><span class="token keyword">return</span>instance<span class="token punctuation">;</span><span class="token number">11.</span><span class="token punctuation">}</span><span class="token number">12.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在多线程高并发访问环境中，将会导致系统性能大大降低。</li></ul><blockquote><p>细粒化锁</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">LazySingleton</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">LazySingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4.</span>instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5.</span><span class="token punctuation">}</span><span class="token number">6.</span><span class="token punctuation">}</span><span class="token number">7.</span><span class="token keyword">return</span>instance<span class="token punctuation">;</span><span class="token number">8.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>假如在某一瞬间线程A和线程B都在调用getInstance()方法，此时instance对象为null值，均能通过instance    ==    null的判断。</li><li>但当A执行完毕时，线程B并不知道实例已经创建，将继续创建新的实例，导致产生多个单例对象</li></ul><blockquote><p>双重检查锁定(Double-Check Locking)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">LazySingleton</span><span class="token punctuation">{</span><span class="token number">2.</span><span class="token keyword">private</span><span class="token keyword">volatile</span><span class="token keyword">static</span><span class="token class-name">LazySingleton</span>instance<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token number">3.</span><span class="token number">4.</span><span class="token keyword">private</span><span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token number">5.</span><span class="token number">6.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">LazySingleton</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token comment">//第一重判断</span><span class="token number">8.</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">9.</span><span class="token comment">//锁定代码块</span><span class="token number">10.</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">LazySingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">11.</span><span class="token comment">//第二重判断</span><span class="token number">12.</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">13.</span>instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建单例实例</span><span class="token number">14.</span><span class="token punctuation">}</span><span class="token number">15.</span><span class="token punctuation">}</span><span class="token number">16.</span><span class="token punctuation">}</span><span class="token number">17.</span><span class="token keyword">return</span>instance<span class="token punctuation">;</span><span class="token number">18.</span><span class="token punctuation">}</span><span class="token number">19.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>需要在静态成员变量instance之前增加修饰符volatile，被volatile修饰的成员变量可以确保多个线程都能够正确处理(禁止指令重排序优化。)</li></ul><h3 id="饿汉式单例类与懒汉式单例类比较"><a href="#饿汉式单例类与懒汉式单例类比较" class="headerlink" title="饿汉式单例类与懒汉式单例类比较"></a>饿汉式单例类与懒汉式单例类比较</h3><ul><li>饿汉式单例类。<ul><li>优点在于无须考虑多线程访问问题，可以确保实例的唯一性；从调用速度和反应时间角度来讲，由于单例对象一开始就得以创建，因此要优于懒汉式单例。</li><li>但在系统加载时由于需要创建饿汉式单例对象，加载时间可能会比较长</li><li> Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</li></ul></li><li>懒汉式单例类实现了延迟加载，但是必须处理好多个线程同时访问的问题，需要通过双重检查锁定等机制进行控制，这将导致系统性能受到一定影响。</li></ul><h2 id="一种更好的单例实现方法-Initialization-on-Demand-Holder-IoDH"><a href="#一种更好的单例实现方法-Initialization-on-Demand-Holder-IoDH" class="headerlink" title="一种更好的单例实现方法 Initialization on    Demand    Holder    (IoDH)"></a>一种更好的单例实现方法 Initialization on    Demand    Holder    (IoDH)</h2><blockquote><p>单例类中增加一个静态(static)内部类，在该内部类中创建单例对象，再将该单例对象通过getInstance()方法返回给外部使用</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token comment">//InitializationonDemandHolder</span><span class="token number">2.</span><span class="token keyword">class</span><span class="token class-name">Singleton</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">private</span><span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">4.</span><span class="token punctuation">}</span><span class="token number">5.</span><span class="token number">6.</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">class</span><span class="token class-name">HolderClass</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token keyword">private</span><span class="token keyword">final</span><span class="token keyword">static</span><span class="token class-name">Singleton</span>instance<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span><span class="token punctuation">}</span><span class="token number">9.</span><span class="token number">10.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">Singleton</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">11.</span><span class="token keyword">return</span><span class="token class-name">HolderClass</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span><span class="token number">12.</span><span class="token punctuation">}</span><span class="token number">13.</span><span class="token number">14.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">15.</span><span class="token class-name">Singleton</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">;</span><span class="token number">16.</span>s1<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17.</span>s2<span class="token operator">=</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">18.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token operator">==</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">19.</span><span class="token punctuation">}</span><span class="token number">20.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单例模式优缺点和使用场景"><a href="#单例模式优缺点和使用场景" class="headerlink" title="单例模式优缺点和使用场景"></a>单例模式优缺点和使用场景</h2><blockquote><p>一种目标明确、结构简单、理解容易的设计模式，在软件开发中使用频率相当高，在很多应用软件和框架中都得以广泛应用。</p></blockquote><blockquote><p>主要优点</p></blockquote><ul><li>单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。</li><li>允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题。</li></ul><blockquote><p>主要缺点</p></blockquote><ul><li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。<ul><li>因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li></ul></li><li>共享的单例对象状态的丢失<ul><li>面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化</li></ul></li></ul><blockquote><p>适用场景</p></blockquote><ul><li><p>(1)系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗太大而只允许创建一个对象。</p></li><li><p>(2)客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问<br>该实例。</p></li></ul><h2 id="思考-如何对单例模式进行改造，使得系统中某个类的对象可以存在有限多个，例如两例或三例？【注：改造之后的类可称之为多例类。】"><a href="#思考-如何对单例模式进行改造，使得系统中某个类的对象可以存在有限多个，例如两例或三例？【注：改造之后的类可称之为多例类。】" class="headerlink" title="思考:如何对单例模式进行改造，使得系统中某个类的对象可以存在有限多个，例如两例或三例？【注：改造之后的类可称之为多例类。】"></a>思考:如何对单例模式进行改造，使得系统中某个类的对象可以存在有限多个，例如两例或三例？【注：改造之后的类可称之为多例类。】</h2><blockquote><p>例如读取文件时，在应用启动时完成初始化工作，生成多个Reader的实例，这样在需要读取文件时可以快速的响应。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//该容器用来装两个Person实例</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该容器用来装Person的属性name</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成一个0,1之间的随机数</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment">//将两个Person实例装入容器中</span><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>instances<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jack"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//随机取出集合容器中的一个Person实例</span><span class="token keyword">return</span> instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//给Person类添加一个动作</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是:"</span> <span class="token operator">+</span> names<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>使用一个客户端类随机获取多例模式的任一对象，代码：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientDemo1</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//5个客户需要取出两个Person对象中随机一个</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>选取一种数据，打印结果如下：我是<span class="token operator">:</span>jack1我是<span class="token operator">:</span>jack0我是<span class="token operator">:</span>jack0我是<span class="token operator">:</span>jack0我是<span class="token operator">:</span>jack1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="原型模式-Prototype-Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】"><a href="#原型模式-Prototype-Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】" class="headerlink" title="原型模式-Prototype    Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】"></a>原型模式-Prototype    Pattern【学习难度：★★★☆☆，使用频率：★★★☆☆】</h1><blockquote><p>可以通过一个原型对象克隆出多个一模一样的对象，该模式称之为原型模式。</p></blockquote><h2 id="大同小异的工作周报"><a href="#大同小异的工作周报" class="headerlink" title="大同小异的工作周报"></a>大同小异的工作周报</h2><p><img src="/2021/01/29/java-design-pattern-creatorpattern/17.png"></p><blockquote><p>需求</p></blockquote><ul><li>如何快速创建相同或者相似的工作周报</li><li>除了允许用户创建新周报外，还允许用户将创建好的周报保存为模板；</li><li>用户在再次创建周报时，可以创建全新的周报，还可以选择合适的模板复制生成一份相同的周报，然后对新生成的周报根据实际情况进行修改，产生新的周报。</li></ul><h2 id="原型模式概述"><a href="#原型模式概述" class="headerlink" title="原型模式概述"></a>原型模式概述</h2><blockquote><p>结构图<br><img src="/2021/01/29/java-design-pattern-creatorpattern/18.png"></p></blockquote><ul><li>Prototype（抽象原型类）：它是声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽<br>象类也可以是接口，甚至还可以是具体实现类。</li><li>ConcretePrototype（具体原型类）：它实现在抽象原型类中声明的克隆方法，在克隆方法中返<br>回自己的一个克隆对象。</li><li>Client（客户类）：让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。由于客户类针对抽象原型类Prototype编程，因此用户可以根据需要选择具体原型类，系统具有较好的可扩展性，增加或更换具体原型类都很方便。</li></ul><blockquote><p>常用的克隆实现方法：</p></blockquote><ul><li><p>通用的克隆实现方法是在具体原型类的克隆方法中实例化一个与自身类型相同的对象并将其返回，并将相关的参数传入新创建的对象中，保证它们的成员属性相同。</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">ConcretePrototype</span><span class="token keyword">implements</span><span class="token class-name">Prototype</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">private</span><span class="token class-name">String</span>attr<span class="token punctuation">;</span><span class="token comment">//成员属性</span><span class="token number">4.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setAttr</span><span class="token punctuation">(</span><span class="token class-name">String</span>attr<span class="token punctuation">)</span><span class="token number">5.</span><span class="token punctuation">{</span><span class="token number">6.</span><span class="token keyword">this</span><span class="token punctuation">.</span>attr<span class="token operator">=</span>attr<span class="token punctuation">;</span><span class="token number">7.</span><span class="token punctuation">}</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">getAttr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9.</span><span class="token punctuation">{</span><span class="token number">10.</span><span class="token keyword">return</span><span class="token keyword">this</span><span class="token punctuation">.</span>attr<span class="token punctuation">;</span><span class="token number">11.</span><span class="token punctuation">}</span><span class="token number">12.</span><span class="token keyword">public</span><span class="token class-name">Prototype</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//克隆方法</span><span class="token number">13.</span><span class="token punctuation">{</span><span class="token number">14.</span><span class="token class-name">Prototype</span>prototype<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ConcretePrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建新对象</span><span class="token number">15.</span>prototype<span class="token punctuation">.</span><span class="token function">setAttr</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span><span class="token keyword">return</span>prototype<span class="token punctuation">;</span><span class="token number">17.</span><span class="token punctuation">}</span><span class="token number">18.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种方法可作为原型模式的通用实现，它与编程语言特性无关，任何面向对象语言都可以使用这种形式来实现对原型的克隆。</li></ul></li><li><p>Java语言提供的clone()方法</p><ul><li>object类提供一个clone()方法，可以将一个Java对象复制一份。</li><li>能够实现克隆的Java类必须实现一个标识接口Cloneable，表示这个Java类支持被复制。如果一个类没有实现这个接口但是调用了clone()方法，Java编译器将抛出一个CloneNotSupportedException异常<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">ConcretePrototype</span><span class="token keyword">implements</span><span class="token class-name">Cloneable</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span>……<span class="token number">4.</span><span class="token keyword">public</span><span class="token class-name">Prototype</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">5.</span><span class="token punctuation">{</span><span class="token number">6.</span><span class="token class-name">Object</span>object<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token number">8.</span>object<span class="token operator">=</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span>exception<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">10.</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Notsupportcloneable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11.</span><span class="token punctuation">}</span><span class="token number">12.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token class-name">Prototype</span><span class="token punctuation">)</span>object<span class="token punctuation">;</span><span class="token number">13.</span><span class="token punctuation">}</span><span class="token number">14.</span>……<span class="token number">15.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Java语言中的clone()方法 (直接利用Object类的clone()方法)</p><ul><li><p>(1)    对任何对象x，都有x.clone()    !=    x，即克隆对象与原型对象不是同一个对象；</p></li><li><p>(2)    对任何对象x，都有x.clone().getClass()    ==    x.getClass()，即克隆对象与原型对象的<br>类型一样；</p></li><li><p>(3)    如果对象x的equals()方法定义恰当，那么x.clone().equals(x)应该成立。</p></li></ul></li></ul><blockquote><p>思考</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">如果在<span class="token class-name">Client</span>类的<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数中增加如下几条语句：<span class="token number">1.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>log_previous<span class="token operator">==</span>log_new<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>log_previous<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>log_new<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>log_previous<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>log_new<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>log_previous<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>log_new<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>flase、flase、true、true (<strong>clone()方法是浅拷贝</strong> )</li></ul><h2 id="完整解决方案-1"><a href="#完整解决方案-1" class="headerlink" title="完整解决方案"></a>完整解决方案</h2><p><img src="/2021/01/29/java-design-pattern-creatorpattern/19.png"></p><h2 id="带附件的周报"><a href="#带附件的周报" class="headerlink" title="带附件的周报"></a>带附件的周报</h2><blockquote><p>需求</p></blockquote><ul><li>有些工作周报带有附件，例如经理助理“小龙女”的周报通常附有本周项目进展报告汇总表、本周客户反馈信息汇总表等，如果使用上述原型模式来复制周报，周报虽然可以复制，但是周报的附件并不能复制，这是由于什么原因导致的呢？如何才能<br>实现周报和附件的同时复制呢？</li></ul><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><blockquote><p>覆盖Object类的clone()方法可以实现浅克隆。<br><img src="/2021/01/29/java-design-pattern-creatorpattern/20.png"></p></blockquote><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><p><img src="/2021/01/29/java-design-pattern-creatorpattern/21.png"></p><blockquote><p>需要实现深克隆，可以通过序列化(Serialization)等方式来实现,实现Serializable接口</p></blockquote><ul><li>序列化就是将对象写到流的过程，写到流中的对象是原有对象的一个拷贝，而原对象仍然存在于内存中。</li><li> 通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此通过序列化将对象写到一个流中，再从流里将其读出来，可以实现深克隆。</li></ul><blockquote><p>带附件的周报结构图（深克隆）<br><img src="/2021/01/29/java-design-pattern-creatorpattern/22.png"></p></blockquote><blockquote><p>实现</p></blockquote><ul><li>工作周报类<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token number">1.</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token number">2.</span><span class="token comment">//工作周报类</span><span class="token number">3.</span><span class="token keyword">class</span><span class="token class-name">WeeklyLog</span><span class="token keyword">implements</span><span class="token class-name">Serializable</span><span class="token number">4.</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token keyword">private</span><span class="token class-name">Attachment</span>attachment<span class="token punctuation">;</span><span class="token number">6.</span><span class="token keyword">private</span><span class="token class-name">String</span>name<span class="token punctuation">;</span><span class="token number">7.</span><span class="token keyword">private</span><span class="token class-name">String</span>date<span class="token punctuation">;</span><span class="token number">8.</span><span class="token keyword">private</span><span class="token class-name">String</span>content<span class="token punctuation">;</span><span class="token number">9.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token class-name">Attachment</span>attachment<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">10.</span><span class="token keyword">this</span><span class="token punctuation">.</span>attachment<span class="token operator">=</span>attachment<span class="token punctuation">;</span><span class="token number">11.</span><span class="token punctuation">}</span><span class="token number">12.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">13.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token number">14.</span><span class="token punctuation">}</span><span class="token number">15.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token class-name">String</span>date<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">16.</span><span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token operator">=</span>date<span class="token punctuation">;</span><span class="token number">17.</span><span class="token punctuation">}</span><span class="token number">18.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token class-name">String</span>content<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">19.</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token operator">=</span>content<span class="token punctuation">;</span><span class="token number">20.</span><span class="token punctuation">}</span><span class="token number">21.</span><span class="token keyword">public</span><span class="token class-name">Attachment</span><span class="token function">getAttachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">22.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>attachment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">23.</span><span class="token punctuation">}</span><span class="token number">24.</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">25.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">26.</span><span class="token punctuation">}</span><span class="token number">27.</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">28.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">29.</span><span class="token punctuation">}</span><span class="token number">30.</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">31.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">32.</span><span class="token punctuation">}</span><span class="token number">33.</span><span class="token comment">//使用序列化技术实现深克隆</span><span class="token number">34.</span><span class="token keyword">public</span><span class="token class-name">WeeklyLog</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span><span class="token class-name">OptionalDataException</span><span class="token number">35.</span><span class="token punctuation">{</span><span class="token number">36.</span><span class="token comment">//将对象写入流中</span><span class="token number">37.</span><span class="token class-name">ByteArrayOutputStream</span>bao<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">38.</span><span class="token class-name">ObjectOutputStream</span>oos<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">39.</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">40.</span><span class="token number">41.</span><span class="token comment">//将对象从流中取出</span><span class="token number">42.</span><span class="token class-name">ByteArrayInputStream</span>bis<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bao<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">43.</span><span class="token class-name">ObjectInputStream</span>ois<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">44.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token class-name">WeeklyLog</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">45.</span><span class="token punctuation">}</span><span class="token number">46.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>客户端代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">4.</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token class-name">WeeklyLog</span>log_previous<span class="token punctuation">,</span>log_new<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token number">6.</span>log_previous<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">WeeklyLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建原型对象</span><span class="token number">7.</span><span class="token class-name">Attachment</span>attachment<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建附件对象</span><span class="token number">8.</span>log_previous<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span>attachment<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将附件添加到周报中</span><span class="token number">9.</span><span class="token keyword">try</span><span class="token number">10.</span><span class="token punctuation">{</span><span class="token number">11.</span>log_new<span class="token operator">=</span>log_previous<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用深克隆方法创建克隆对象</span><span class="token number">12.</span><span class="token punctuation">}</span><span class="token number">13.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span>e<span class="token punctuation">)</span><span class="token number">14.</span><span class="token punctuation">{</span><span class="token number">15.</span><span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"克隆失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span><span class="token punctuation">}</span><span class="token number">17.</span><span class="token comment">//比较周报</span><span class="token number">18.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"周报是否相同？"</span><span class="token operator">+</span><span class="token punctuation">(</span>log_previous<span class="token operator">==</span>log_new<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">19.</span><span class="token comment">//比较附件</span><span class="token number">20.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"附件是否相同？"</span><span class="token operator">+</span><span class="token punctuation">(</span>log_previous<span class="token punctuation">.</span><span class="token function">getAttachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>log_new<span class="token punctuation">.</span><span class="token function">getAttachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">21.</span><span class="token punctuation">}</span><span class="token number">22.</span><span class="token punctuation">}</span><span class="token number">1.</span>周报是否相同？<span class="token boolean">false</span><span class="token number">2.</span>附件是否相同？<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="原型管理器的引入和实现"><a href="#原型管理器的引入和实现" class="headerlink" title="原型管理器的引入和实现"></a>原型管理器的引入和实现</h2><blockquote><p>定义</p></blockquote><ul><li>是将多个原型对象存储在一个集合中供客户端使用，它是一个专门负责克隆对象的工厂，其中定义了一个集合用于存储原型对象，如果需要某个原型对象的一个克隆，可以通过复制集合中对应的原型对象来获得<br><img src="/2021/01/29/java-design-pattern-creatorpattern/23.png"></li></ul><blockquote><p>需求</p></blockquote><ul><li>在日常办公中有许多公文需要创建、递交和审批，例如《可行性分析报告》、《立项建议书》、《软件需求规格说明书》、《项目进展报告》等，为了提高工作效率，在OA系统中为各类<br>公文均创建了模板，用户可以通过这些模板快速创建新的公文</li></ul><blockquote><p>实现</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//原型管理器（使用饿汉式单例实现）</span><span class="token number">57.</span><span class="token keyword">class</span><span class="token class-name">PrototypeManager</span><span class="token number">58.</span><span class="token punctuation">{</span><span class="token number">59.</span><span class="token comment">//定义一个Hashtable，用于存储原型对象</span><span class="token number">60.</span><span class="token keyword">private</span><span class="token class-name">Hashtable</span>ht<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">61.</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">PrototypeManager</span>pm<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">PrototypeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">62.</span><span class="token number">63.</span><span class="token comment">//为Hashtable增加公文对象</span><span class="token number">64.</span><span class="token keyword">private</span><span class="token class-name">PrototypeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">65.</span><span class="token punctuation">{</span><span class="token number">66.</span>ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"far"</span><span class="token punctuation">,</span><span class="token keyword">new</span><span class="token function">FAR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">67.</span>ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"srs"</span><span class="token punctuation">,</span><span class="token keyword">new</span><span class="token function">SRS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">68.</span><span class="token punctuation">}</span><span class="token number">69.</span><span class="token number">70.</span><span class="token comment">//增加新的公文对象</span><span class="token number">71.</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">addOfficialDocument</span><span class="token punctuation">(</span><span class="token class-name">String</span>key<span class="token punctuation">,</span><span class="token class-name">OfficialDocument</span>doc<span class="token punctuation">)</span><span class="token number">72.</span><span class="token punctuation">{</span><span class="token number">73.</span>ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">74.</span><span class="token punctuation">}</span><span class="token number">76.</span><span class="token comment">//通过浅克隆获取新的公文对象</span><span class="token number">77.</span><span class="token keyword">public</span><span class="token class-name">OfficialDocument</span><span class="token function">getOfficialDocument</span><span class="token punctuation">(</span><span class="token class-name">String</span>key<span class="token punctuation">)</span><span class="token number">78.</span><span class="token punctuation">{</span><span class="token number">79.</span><span class="token keyword">return</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">OfficialDocument</span><span class="token punctuation">)</span>ht<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">80.</span><span class="token punctuation">}</span><span class="token number">81.</span><span class="token number">82.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">PrototypeManager</span><span class="token function">getPrototypeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">83.</span><span class="token punctuation">{</span><span class="token number">84.</span><span class="token keyword">return</span>pm<span class="token punctuation">;</span><span class="token number">85.</span><span class="token punctuation">}</span><span class="token number">86.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">4.</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token comment">//获取原型管理器对象</span><span class="token number">6.</span><span class="token class-name">PrototypeManager</span>pm<span class="token operator">=</span><span class="token class-name">PrototypeManager</span><span class="token punctuation">.</span><span class="token function">getPrototypeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token number">8.</span><span class="token class-name">OfficialDocument</span>doc1<span class="token punctuation">,</span>doc2<span class="token punctuation">,</span>doc3<span class="token punctuation">,</span>doc4<span class="token punctuation">;</span><span class="token number">9.</span><span class="token number">10.</span>doc1<span class="token operator">=</span>pm<span class="token punctuation">.</span><span class="token function">getOfficialDocument</span><span class="token punctuation">(</span><span class="token string">"far"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11.</span>doc1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12.</span>doc2<span class="token operator">=</span>pm<span class="token punctuation">.</span><span class="token function">getOfficialDocument</span><span class="token punctuation">(</span><span class="token string">"far"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">13.</span>doc2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doc1<span class="token operator">==</span>doc2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">15.</span><span class="token number">16.</span>doc3<span class="token operator">=</span>pm<span class="token punctuation">.</span><span class="token function">getOfficialDocument</span><span class="token punctuation">(</span><span class="token string">"srs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17.</span>doc3<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">18.</span>doc4<span class="token operator">=</span>pm<span class="token punctuation">.</span><span class="token function">getOfficialDocument</span><span class="token punctuation">(</span><span class="token string">"srs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">19.</span>doc4<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">20.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doc3<span class="token operator">==</span>doc4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">21.</span><span class="token punctuation">}</span><span class="token number">22.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="原型模式优缺点和使用场景"><a href="#原型模式优缺点和使用场景" class="headerlink" title="原型模式优缺点和使用场景"></a>原型模式优缺点和使用场景</h2><blockquote><p>很多软件提供的复制(Ctrl+    C)和粘贴(Ctrl    +    V)操作就是原型模式的典型应用</p></blockquote><blockquote><p>主要优点</p></blockquote><ul><li><p>(1)    当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，通过复制一个已有实<br>例可以提高新实例的创建效率。</p></li><li><p>(2)    扩展性较好，由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，而<br>将具体原型类写在配置文件中，增加或减少产品类对原有系统都没有任何影响。</p></li><li><p>(3)    原型模式提供了简化的创建结构，工厂方法模式常常需要有一个与产品类等级结构相同的工厂等<br>级结构，而原型模式就不需要这样，原型模式中产品的复制是通过封装在原型类中的克隆方法实现<br>的，无须专门的工厂类来创建产品。</p></li><li><p>(4)    可以使用深克隆的方式保存对象的状态，使用原型模式将对象复制一份并将其状态保存起来，以<br>便在需要的时候使用（如恢复到某一历史状态），可辅助实现撤销操作。</p></li></ul><blockquote><p>主要缺点</p></blockquote><ul><li><p>(1)    需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，当对已有的类进行改造时，需要修改源代码，违背了“开闭原则”。</p></li><li><p>(2)    在实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦。</p></li></ul><blockquote><p>适用场景</p></blockquote><ul><li><p>(1)    创建新对象成本较大（如初始化需要占用较长的时间，占用太多的CPU资源或网络资源），新的<br>对象可以通过原型模式对已有对象进行复制来获得，如果是相似对象，则可以对其成员变量稍作修<br>改。</p></li><li><p>(2)    如果系统要保存对象的状态，而对象的状态变化很小，或者对象本身占用内存较少时，可以使用<br>原型模式配合备忘录模式来实现。</p></li><li><p>(3)    需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组<br>合状态，通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。</p></li></ul><h1 id="建造者模式-Builder-Pattern【学习难度：★★★★☆，使用频率：★★☆☆☆】"><a href="#建造者模式-Builder-Pattern【学习难度：★★★★☆，使用频率：★★☆☆☆】" class="headerlink" title="建造者模式-Builder    Pattern【学习难度：★★★★☆，使用频率：★★☆☆☆】"></a>建造者模式-Builder    Pattern【学习难度：★★★★☆，使用频率：★★☆☆☆】</h1><blockquote><p>建造者模式</p></blockquote><ul><li>大家买的都是一辆包含轮胎、方向盘和发动机等多个部件的<br>完整汽车。如何将这些部件组装成一辆完整的汽车并返回给用户，这是建造者模式需要解决的问题。</li><li>为客户端返回的不是一个简单的产品，而是一个由多个部件组成的复杂产品。</li><li>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</li></ul><blockquote><p>游戏角色设计</p></blockquote><ul><li>不同类型的游戏角色，其性别、脸型、服装、发型等外部特性都有所差异</li></ul><h2 id="建造者模式概述"><a href="#建造者模式概述" class="headerlink" title="建造者模式概述"></a>建造者模式概述</h2><blockquote><p>建造者模式结构图<br><img src="/2021/01/29/java-design-pattern-creatorpattern/24.png"></p></blockquote><ul><li>●    Builder（抽象建造者）：它为创建一个产品Product对象的各个部件指定抽象接口，在该接口中<br>一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是<br>getResult()，它们用于返回复杂对象。Builder既可以是抽象类，也可以是接口。</li><li>●ConcreteBuilder（具体建造者）：它实现了Builder接口，实现各个部件的具体构造和装配方<br>法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。</li><li>●Product（产品角色）：它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内<br>部表示并定义它的装配过程。</li><li>●    Director（指挥者）：指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建<br>造者之间存在关联关系，可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，<br>完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实<br>例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者Setter<br>方法将该对象传入指挥者类中。</li></ul><blockquote><p>与抽象工厂的关系</p></blockquote><ul><li>如果将抽象工厂模式看成一个汽车配件生产厂，生成不同类型的汽车配件，那么建造者模式就是一个汽车组装厂，通过对配件进行组装返回一辆完整的汽车。</li></ul><h2 id="完整解决方案-2"><a href="#完整解决方案-2" class="headerlink" title="完整解决方案"></a>完整解决方案</h2><p><img src="/2021/01/29/java-design-pattern-creatorpattern/25.png"></p><ul><li>指挥类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token comment">//游戏角色创建控制器：指挥者</span><span class="token number">2.</span><span class="token keyword">class</span><span class="token class-name">ActorController</span><span class="token number">3.</span><span class="token punctuation">{</span><span class="token number">4.</span><span class="token comment">//逐步构建复杂产品对象</span><span class="token number">5.</span><span class="token keyword">public</span><span class="token class-name">Actor</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token class-name">ActorBuilder</span>ab<span class="token punctuation">)</span><span class="token number">6.</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token class-name">Actor</span>actor<span class="token punctuation">;</span><span class="token number">8.</span>ab<span class="token punctuation">.</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span>ab<span class="token punctuation">.</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10.</span>ab<span class="token punctuation">.</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">11.</span>ab<span class="token punctuation">.</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12.</span>ab<span class="token punctuation">.</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">13.</span>actor<span class="token operator">=</span>ab<span class="token punctuation">.</span><span class="token function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14.</span><span class="token keyword">return</span>actor<span class="token punctuation">;</span><span class="token number">15.</span><span class="token punctuation">}</span><span class="token number">16.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>客户端<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token operator">&lt;</span><span class="token operator">?</span>xmlversion<span class="token operator">=</span><span class="token string">"1.0"</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token number">2.</span><span class="token generics"><span class="token punctuation">&lt;</span>config<span class="token punctuation">&gt;</span></span><span class="token number">3.</span><span class="token generics"><span class="token punctuation">&lt;</span>className<span class="token punctuation">&gt;</span></span><span class="token class-name">AngelBuilder</span><span class="token operator">&lt;</span><span class="token operator">/</span>className<span class="token operator">&gt;</span><span class="token number">4.</span><span class="token operator">&lt;</span><span class="token operator">/</span>config<span class="token operator">&gt;</span><span class="token number">5.</span>编写如下客户端测试代码：<span class="token number">6.</span><span class="token keyword">class</span><span class="token class-name">Client</span><span class="token number">7.</span><span class="token punctuation">{</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">9.</span><span class="token punctuation">{</span><span class="token number">10.</span><span class="token class-name">ActorBuilder</span>ab<span class="token punctuation">;</span><span class="token comment">//针对抽象建造者编程</span><span class="token number">11.</span>ab<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ActorBuilder</span><span class="token punctuation">)</span><span class="token class-name">XMLUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反射生成具体建造者对象</span><span class="token number">12.</span><span class="token number">13.</span><span class="token class-name">ActorController</span>ac<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">ActorController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14.</span><span class="token class-name">Actor</span>actor<span class="token punctuation">;</span><span class="token number">15.</span>actor<span class="token operator">=</span>ac<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过指挥者创建完整的建造者对象</span><span class="token number">16.</span><span class="token number">17.</span><span class="token class-name">String</span>type<span class="token operator">=</span>actor<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">18.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token operator">+</span><span class="token string">"的外观："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">19.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别："</span><span class="token operator">+</span>actor<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">20.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"面容："</span><span class="token operator">+</span>actor<span class="token punctuation">.</span><span class="token function">getFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">21.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服装："</span><span class="token operator">+</span>actor<span class="token punctuation">.</span><span class="token function">getCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">22.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发型："</span><span class="token operator">+</span>actor<span class="token punctuation">.</span><span class="token function">getHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">23.</span><span class="token punctuation">}</span><span class="token number">24.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="关于Director的进一步讨论"><a href="#关于Director的进一步讨论" class="headerlink" title="关于Director的进一步讨论"></a>关于Director的进一步讨论</h2><h3 id="省略Director"><a href="#省略Director" class="headerlink" title="省略Director"></a>省略Director</h3><blockquote><p>将Director和抽象建造者Builder进行合并</p></blockquote><ul><li>由于Builder类通常为抽象类，因此可以将construct()方法定义为静态(static)方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">ActorBuilder</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">protected</span><span class="token keyword">static</span><span class="token class-name">Actor</span>actor<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token number">5.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10.</span><span class="token number">11.</span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token class-name">Actor</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token class-name">ActorBuilder</span>ab<span class="token punctuation">)</span><span class="token number">12.</span><span class="token punctuation">{</span><span class="token number">13.</span>ab<span class="token punctuation">.</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14.</span>ab<span class="token punctuation">.</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">15.</span>ab<span class="token punctuation">.</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span>ab<span class="token punctuation">.</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17.</span>ab<span class="token punctuation">.</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">18.</span><span class="token keyword">return</span>actor<span class="token punctuation">;</span><span class="token number">19.</span><span class="token punctuation">}</span><span class="token number">20.</span><span class="token punctuation">}</span>客户端<span class="token number">1.</span>……<span class="token number">2.</span><span class="token class-name">ActorBuilder</span>ab<span class="token punctuation">;</span><span class="token number">3.</span>ab<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ActorBuilder</span><span class="token punctuation">)</span><span class="token class-name">XMLUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token number">5.</span><span class="token class-name">Actor</span>actor<span class="token punctuation">;</span><span class="token number">6.</span>actor<span class="token operator">=</span><span class="token class-name">ActorBuilder</span><span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>ab<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>简单的处理方法，可以将construct()方法的参数去掉，直接在construct()方法中调用buildPartX()方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">ActorBuilder</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">protected</span><span class="token class-name">Actor</span>actor<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token number">5.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10.</span><span class="token number">11.</span><span class="token keyword">public</span><span class="token class-name">Actor</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">12.</span><span class="token punctuation">{</span><span class="token number">13.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">15.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">17.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">18.</span><span class="token keyword">return</span>actor<span class="token punctuation">;</span><span class="token number">19.</span><span class="token punctuation">}</span><span class="token number">20.</span><span class="token punctuation">}</span>客户端<span class="token number">1.</span>……<span class="token number">2.</span><span class="token class-name">ActorBuilder</span>ab<span class="token punctuation">;</span><span class="token number">3.</span>ab<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ActorBuilder</span><span class="token punctuation">)</span><span class="token class-name">XMLUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token number">5.</span><span class="token class-name">Actor</span>actor<span class="token punctuation">;</span><span class="token number">6.</span>actor<span class="token operator">=</span>ab<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="钩子方法的引入（控制是否对某个buildPartX-的调用。）"><a href="#钩子方法的引入（控制是否对某个buildPartX-的调用。）" class="headerlink" title="钩子方法的引入（控制是否对某个buildPartX()的调用。）"></a>钩子方法的引入（控制是否对某个buildPartX()的调用。）</h3></li></ul><blockquote><p>ActorBuilder中定义一个方法isBareheaded()，用<br>于判断某个角色是否为“光头(Bareheaded)”，在ActorBuilder为之提供一个默认实现，其返回值为false</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">abstract</span><span class="token keyword">class</span><span class="token class-name">ActorBuilder</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">protected</span><span class="token class-name">Actor</span>actor<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span><span class="token number">5.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">6.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token keyword">public</span><span class="token keyword">abstract</span><span class="token keyword">void</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10.</span><span class="token number">11.</span><span class="token comment">//钩子方法</span><span class="token number">12.</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">isBareheaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">13.</span><span class="token punctuation">{</span><span class="token number">14.</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token number">15.</span><span class="token punctuation">}</span><span class="token number">16.</span><span class="token number">17.</span><span class="token keyword">public</span><span class="token class-name">Actor</span><span class="token function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">18.</span><span class="token punctuation">{</span><span class="token number">19.</span><span class="token keyword">return</span>actor<span class="token punctuation">;</span><span class="token number">20.</span><span class="token punctuation">}</span><span class="token number">21.</span><span class="token punctuation">}</span>具体建造器<span class="token class-name">DevilBuilder</span>覆盖<span class="token keyword">class</span><span class="token class-name">DevilBuilder</span><span class="token keyword">extends</span><span class="token class-name">ActorBuilder</span><span class="token number">2.</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//覆盖钩子方法</span><span class="token number">24.</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">isBareheaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25.</span><span class="token punctuation">{</span><span class="token number">26.</span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token number">27.</span><span class="token punctuation">}</span><span class="token punctuation">}</span>指挥判断<span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">ActorController</span><span class="token number">2.</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token keyword">public</span><span class="token class-name">Actor</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token class-name">ActorBuilder</span>ab<span class="token punctuation">)</span><span class="token number">4.</span><span class="token punctuation">{</span><span class="token number">5.</span><span class="token class-name">Actor</span>actor<span class="token punctuation">;</span><span class="token number">6.</span>ab<span class="token punctuation">.</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">7.</span>ab<span class="token punctuation">.</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span>ab<span class="token punctuation">.</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span>ab<span class="token punctuation">.</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">10.</span><span class="token comment">//通过钩子方法来控制产品的构建</span><span class="token number">11.</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ab<span class="token punctuation">.</span><span class="token function">isBareheaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">12.</span><span class="token punctuation">{</span><span class="token number">13.</span>ab<span class="token punctuation">.</span><span class="token function">buildHairstyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14.</span><span class="token punctuation">}</span><span class="token number">15.</span>actor<span class="token operator">=</span>ab<span class="token punctuation">.</span><span class="token function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">16.</span><span class="token keyword">return</span>actor<span class="token punctuation">;</span><span class="token number">17.</span><span class="token punctuation">}</span><span class="token number">18.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建造者模式优缺点和使用场景"><a href="#建造者模式优缺点和使用场景" class="headerlink" title="建造者模式优缺点和使用场景"></a>建造者模式优缺点和使用场景</h2><blockquote><p>需要创建复杂对象并希望系统具备很好的灵活性和可扩展性可<br>以考虑使用建造者模式。</p></blockquote><blockquote><p>主要优点</p></blockquote><ul><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。</li><li>可以更加精细地控制产品的创建过程。</li></ul><blockquote><p>主要缺点</p></blockquote><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。</li><li>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。</li></ul><blockquote><p>适用场景</p></blockquote><ul><li><p>(1)    需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</p></li><li><p>(2)    需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</p></li><li><p>(3)    对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装<br>在指挥者类中，而不在建造者类和客户类中。</p></li><li><p>(4)    隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-design-pattern-baseKonwledge</title>
      <link href="2021/01/27/java-design-pattern-basekonwledge/"/>
      <url>2021/01/27/java-design-pattern-basekonwledge/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="/2021/01/27/java-design-pattern-basekonwledge/1.png"></p><h2 id="单一职责原则-Single-Responsibility-Principle-SRP"><a href="#单一职责原则-Single-Responsibility-Principle-SRP" class="headerlink" title="单一职责原则(Single    Responsibility    Principle,    SRP)"></a>单一职责原则(Single    Responsibility    Principle,    SRP)</h2><blockquote><p>定义</p></blockquote><ul><li>单一职责原则(Single    Responsibility    Principle,    SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</li><li>需要设计人员发现类的不同职责并将其分离，而发现类的多重职责需要设计人员具有较强的分析设计能力和相关实践<br>经验。</li></ul><blockquote><p>例子<br><img src="/2021/01/27/java-design-pattern-basekonwledge/2.png"></p></blockquote><ul><li><p>方法说明和问题</p><ul><li>getConnection()方法用于连接数据库，<br>findCustomers()用于查询所有的客户信息，createChart()用于创建图表，displayChart()<br>用于显示图表。</li><li>不止一个引起它变化的原因</li></ul></li><li><p>单一职责原则对其进行重构<br>  <img src="/2021/01/27/java-design-pattern-basekonwledge/3.png"></p><ul><li><p>(1)    DBUtil：负责连接数据库，包含数据库连接方法getConnection()；</p></li><li><p>(2)    CustomerDAO：负责操作数据库中的Customer表，包含对Customer表的增删改查等方法，如<br>findCustomers()；</p></li><li><p>(3)    CustomerDataChart：负责图表的生成和显示，包含方法createChart()和<br>displayChart()。</p></li></ul></li></ul><h2 id="开闭原则-Open-Closed-Principle-OCP"><a href="#开闭原则-Open-Closed-Principle-OCP" class="headerlink" title="开闭原则(Open-Closed    Principle,    OCP)"></a>开闭原则(Open-Closed    Principle,    OCP)</h2><blockquote><p>定义</p></blockquote><ul><li>一个软件实体应当对扩展开放，对修改关闭。即软件<br>实体应尽量在不修改原有代码的情况下进行扩展。（软件实体可以指一个软件模块、一个由多个类组成的局部结构或一个独立的类。）</li></ul><blockquote><p>例子<br><img src="/2021/01/27/java-design-pattern-basekonwledge/4.png"></p></blockquote><ul><li>方法说明和问题  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法中存在如下代码片段：<span class="token number">2.</span><span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3.</span><span class="token class-name">PieChart</span>chart<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">PieChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4.</span>chart<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5.</span><span class="token punctuation">}</span><span class="token number">6.</span><span class="token keyword">else</span><span class="token keyword">if</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">7.</span><span class="token class-name">BarChart</span>chart<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">BarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">8.</span>chart<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9.</span><span class="token punctuation">}</span><span class="token number">10.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在该代码中，如果需要增加一个新的图表类，如折线图LineChart，则需要修改ChartDisplay类的display()方法的源代码，增加新的判断逻辑，违反了开闭原则。</li></ul></li><li>开闭原则对其进行重构<br>  <img src="/2021/01/27/java-design-pattern-basekonwledge/5.png"><ul><li>我们引入了抽象图表类AbstractChart，且ChartDisplay针对抽象图表类进行编程，并<br>通过setChart()方法由客户端来设置实例化的具体图表对象<h2 id="里氏代换原则-Liskov-Substitution-Principle-LSP"><a href="#里氏代换原则-Liskov-Substitution-Principle-LSP" class="headerlink" title="里氏代换原则(Liskov    Substitution    Principle,    LSP)"></a>里氏代换原则(Liskov    Substitution    Principle,    LSP)</h2></li></ul></li></ul><blockquote><p>定义</p></blockquote><ul><li>所有引用基类（父类）的地方必须能透明地使用其子类的对象。</li><li>里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。</li></ul><blockquote><p>例子<br><img src="/2021/01/27/java-design-pattern-basekonwledge/6.png"></p></blockquote><ul><li>方法说明和问题<ul><li>客户(Customer)可以分为VIP客户(VIPCustomer)和普通客户(CommonCustomer)两类，系统需要提供一个发送Email的功能</li><li>发送邮件的过程都是相同的，也就是说两个send()方法中的代码重复</li></ul></li><li>里氏代换原则对其进行重构<br>  <img src="/2021/01/27/java-design-pattern-basekonwledge/7.png"><ul><li>里氏代换原则是实现开闭原则的重要方式之一。在本实例中，在传递参数时使用基类对象，除此以<br>外，在定义成员变量、定义局部变量、确定方法返回类型时都可使用里氏代换原则。针对基类编程，<br>在程序运行时再确定具体子类。</li></ul></li></ul><h2 id="依赖倒转原则-Dependency-Inversion-Principle-DIP"><a href="#依赖倒转原则-Dependency-Inversion-Principle-DIP" class="headerlink" title="依赖倒转原则(Dependency    Inversion    Principle,    DIP)"></a>依赖倒转原则(Dependency    Inversion    Principle,    DIP)</h2><blockquote><p>定义</p></blockquote><ul><li>抽象不应该依赖于细节，细节应当依赖于抽象。(要针对接口编程，而不是针对实现编程。)</li><li>大多数情况下，这三个设计原则会同时出现，开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段</li></ul><blockquote><p>具体实现</p></blockquote><ul><li>我们需要针对抽象层编程，而将具体类的对象通过依赖注入(DependencyInjection,    DI)的方式注入到其他对象中。常用注入有：<ul><li>构造注入：通过构造函数来传入具体类的对象</li><li>设值注入：通过Setter方法来传入具体类的对象</li><li>接口注入:通过在接口中声明的业务方法来传入具体类的对象</li><li>参考：<a href="https://martinfowler.com/articles/injection.html">https://martinfowler.com/articles/injection.html</a></li></ul></li></ul><blockquote><p>例子<br><img src="/2021/01/27/java-design-pattern-basekonwledge/8.png"></p></blockquote><ul><li>方法说明和问题<ul><li>该系统经常需要将存储在TXT或Excel文件中的客<br>户信息转存到数据库中，因此需要进行数据格式转换。</li><li>由于每次转换数据时数据来源不一定相同，因此需要更换数据转换类</li><li>而且在引入并使用新的数据转换类时也不得不修改CustomerDAO的源代码（反了开闭原则）</li></ul></li><li>依赖倒转原则对其进行重构（也包括开闭原则、里氏代换原则）<br>  <img src="/2021/01/27/java-design-pattern-basekonwledge/9.png"><ul><li>CustomerDAO针对抽象类DataConvertor编程，而将具体数据转换类名存储在配置文件中，符合依赖倒转原则</li><li>里氏代换原则，程序运行时，具体数据转换类对象将替换DataConvertor类型的对象，程序不会出现任何问题。</li><li>增加新的具体数据转换类，只要将新增数据转换类作为DataConvertor的子类并修改配置文件即可，原有代码无须做任何修改，满足开闭原则。</li></ul></li></ul><h2 id="接口隔离原则-Interface-Segregation-Principle-ISP"><a href="#接口隔离原则-Interface-Segregation-Principle-ISP" class="headerlink" title="接口隔离原则(Interface    Segregation    Principle,    ISP)"></a>接口隔离原则(Interface    Segregation    Principle,    ISP)</h2><blockquote><p>定义</p></blockquote><ul><li>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。“接口”往往有两种不同的含义：<ul><li>一种是指一个类型所具有的方法特征的集合，仅<br>仅是一种逻辑上的抽象；（“角色隔离原则”）</li><li>另外一种是指某种语言具体的“接口”定义，有严格的定义和结构，比如Java语言中的interface。（为不同的客户端提供宽窄不同的接口。）</li></ul></li></ul><blockquote><p>例子<br><img src="/2021/01/27/java-design-pattern-basekonwledge/10.png"></p></blockquote><ul><li>方法说明和问题<ul><li>dataRead()用于从文件中读取数据，方法transformToXML()用于将数据转换成XML格式，方法<br>createChart()用于创建图表，方法displayChart()用于显示图表，方法createReport()用于<br>创建文字报表，方法displayReport()用于显示文字报表。</li><li>系统中产生大量的无用代码，影响代码质量<ul><li>例如如果一个具体的数据显示类无须进行数据转换（源文件<br>本身就是XML格式），但由于实现了该接口，将不得不实现其中声明的transformToXML()方法（至<br>少需要提供一个空实现）；</li><li>如果需要创建和显示图表，除了需实现与图表相关的方法外，还需要实现<br>创建和显示文字报表的方法，否则程序编译时将报错。</li></ul></li><li>客户<br>端针对大接口编程，将在一定程序上破坏程序的封装性，客户端看到了不应该看到的方法，没有为客<br>户端定制接口。</li></ul></li><li>接口隔离原则对其进行重构（含单一职责原则）<br>  <img src="/2021/01/27/java-design-pattern-basekonwledge/11.png"><ul><li>不能太大（违反接口隔离）、太小（接口泛滥、不好维护）</li><li>接口中仅包含为某一类用户定制的方法即可，不应该强迫客户依赖于那些它们不用<br>的方法。</li></ul></li></ul><h2 id="合成复用原则-Composite-Reuse-Principle-CRP"><a href="#合成复用原则-Composite-Reuse-Principle-CRP" class="headerlink" title="合成复用原则(Composite    Reuse    Principle,    CRP)"></a>合成复用原则(Composite    Reuse    Principle,    CRP)</h2><blockquote><p>定义</p></blockquote><ul><li>尽量使用对象组合，而不是继承来达到复用的目的。<ul><li>组合/聚合可以使系统更加灵活，降低类与类之间的耦<br>合度，一个类的变化对其他类造成的影响相对较少</li><li>将已有的对象（也可称为成员对象）纳入到新对象中，使之成为新对象的一<br>部分，因此新对象可以调用已有对象的功能（“黑箱”复用）</li></ul></li><li>通过继承来进行复用的主要问题<ul><li>破坏系统的封装性，继承会将基类的实现细节暴<br>露给子类（这种复用又称“白箱”复用）</li><li>从基类继承而来的实现是静态的，不可能在运行时发<br>生改变，没有足够的灵活性；</li></ul></li><li>如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不<br>同，它表示某一个角色具有某一项责任</li></ul><blockquote><p>例子<br><img src="/2021/01/27/java-design-pattern-basekonwledge/12.png"></p></blockquote><ul><li>方法说明和问题<ul><li>初期的CRM系统设计中，考虑到客户数量不多，系统采用MySQL作为数据<br>库与数据库操作有关的类如CustomerDAO类等都需要连接数据库，连接数据库的方法<br>getConnection()封装在DBUtil类中，由于需要重用DBUtil类的getConnection()方法，设计<br>人员将CustomerDAO作为DBUtil类的子类</li><li>随着客户数量的增加，系统决定升级为Oracle数据库，因此需要增加一个新的OracleDBUtil类来<br>连接Oracle数据库 （更换数<br>据库连接方式时需要修改CustomerDAO类的源代码，将CustomerDAO作为OracleDBUtil的子类）违反开闭</li></ul></li><li>合成复用原则对其进行重构<br>  <img src="/2021/01/27/java-design-pattern-basekonwledge/13.png"><ul><li>CustomerDAO和DBUtil之间的关系由继承关系变为关联关系，采用依赖注入的方式将<br>DBUtil对象注入到CustomerDAO中</li><li>根据里氏代换原则，DBUtil子类的对象可以覆盖DBUtil<br>对象，只需在CustomerDAO中注入子类对象即可使用子类所扩展的方法。</li></ul></li></ul><h2 id="迪米特法则-Law-of-Demeter-LoD-或最少知识原则-LeastKnowledge-Principle-LKP"><a href="#迪米特法则-Law-of-Demeter-LoD-或最少知识原则-LeastKnowledge-Principle-LKP" class="headerlink" title="迪米特法则(Law    of    Demeter,    LoD) 或最少知识原则(LeastKnowledge    Principle,    LKP)"></a>迪米特法则(Law    of    Demeter,    LoD) 或最少知识原则(LeastKnowledge    Principle,    LKP)</h2><blockquote><p>定义</p></blockquote><ul><li><p>一个软件实体应当尽可能少地与其他实体发生相互作用。不要和“陌生人”说话、只与你的直接朋友通信等，在迪米特法则中，对于一个对象，其朋友包括以下几类：</p><ul><li><p>(1)    当前对象本身(this)；</p></li><li><p>(2)    以参数形式传入到当前对象方法中的对象；</p></li><li><p>(3)    当前对象的成员对象；</p></li><li><p>(4)    如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友；</p></li><li><p>(5)    当前对象所创建的对象。</p></li></ul></li><li><p>如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用</p></li><li><p>简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。</p></li><li><p>通过继承来进行复用的主要问题</p><ul><li>破坏系统的封装性，继承会将基类的实现细节暴<br>露给子类（这种复用又称“白箱”复用）</li><li>从基类继承而来的实现是静态的，不可能在运行时发<br>生改变，没有足够的灵活性；</li></ul></li><li><p>如果两个类之间是“Has-A”的关系应使用组合或聚合，如果是“Is-A”关系可使用继承。”Is-A”是严格的分类学意义上的定义，意思是一个类是另一个类的”一种”；而”Has-A”则不<br>同，它表示某一个角色具有某一项责任</p></li></ul><blockquote><p>例子<br><img src="/2021/01/27/java-design-pattern-basekonwledge/14.png"></p></blockquote><ul><li>方法说明和问题<ul><li>当一个按钮(Button)<br>被单击时，对应的列表框(List)、组合框(ComboBox)、文本框(TextBox)、文本标签(Label)等<br>都将发生改变</li><li>由于界面控件之间的交互关系复杂，导致在该窗口中增加新的界面控件时需要修改与之交互<br>的其他控件的源代码，系统扩展性较差，也不便于增加和删除新控件。</li></ul></li><li>迪米特原则对其进行重构<br>  <img src="/2021/01/27/java-design-pattern-basekonwledge/15.png"><ul><li>引入中间类之后，界面控件之间不再发生直接引用，而是将请求先转发给中间类，再由<br>中间类来完成对其他控件的调用</li><li>当需要增加或删除新的控件时，只需修改中间类即可，无须修改新<br>增控件或已有控件的源代码</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part04-Advanced-chap15-AtomicAndNoBlocking</title>
      <link href="2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/"/>
      <url>2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><blockquote><p>非阻塞算法（设计、实现比较复杂）的优势</p></blockquote><ul><li>比 synchronized 机制更高的性能和可伸缩性</li><li>多个线程在竞争相同的数据时不会发生阻塞，因此它能在粒度更细的层次上进行协调</li><li>不存在死锁和其他活跃性问题</li><li>基于锁的算法中，如果一个线程在休眠或自旋的同时持有 一个锁， 那么其他线程都无法执行下去， 而非阻塞算法不会受到单个线程失败的影响。</li></ul><blockquote><p>原子变量类的用途</p></blockquote><ul><li>构建高效的非阻塞算法。</li><li>也可以用做一种“ 更好的 volatile 类型变量”</li></ul><h1 id="锁的劣势"><a href="#锁的劣势" class="headerlink" title="锁的劣势"></a>锁的劣势</h1><blockquote><p>锁的局限</p></blockquote><ul><li>挂起和恢复线程等过程中存在着很大的开销 ， 并且通常存在着 较长时间的中断</li><li>当在锁上存在着激烈的竞争时，调度开销与工作开销的比值会 非常高。</li><li>如果一个线程在持有锁的情况下被延迟执行（例如发生了缺页错误、调度延迟 ， 或者其他类似情况），那么所有需要这个锁的线程都无法执行下去 。</li><li>优先级反转：被阻塞线程的优先级较高， 而持有锁的线程优先级较低（即使高优先级的线程可以抢先执行，但仍然需要等待锁被释放，从而导致它的优先级会降至低优先 级线程的级别。）</li></ul><blockquote><p>volatile的局限</p></blockquote><ul><li>虽然它们提供了相似的可 见性保证，但不能用于构建原子的复合操作。</li><li>当一个变量依赖其他的变量时，或者当变量的新值依赖千旧值时，就不能使用volatile 变量（不能实现 计数器和互斥体mutex)</li></ul><blockquote><p>Atomic的出现</p></blockquote><ul><li>在管理线程之间的竞争时应该有一种粒度更细的技术 ， 类似千 volatile 变量的机制， 同时还要支持原子的更新操作。幸运的是， 在现代的处理器中提供了这种机制 。</li></ul><h1 id="硬件对并发的支持"><a href="#硬件对并发的支持" class="headerlink" title="硬件对并发的支持"></a>硬件对并发的支持</h1><blockquote><p>独占锁和非阻塞的区别</p></blockquote><ul><li>独占锁：假设最坏的情况（如果你不锁门，那么捣蛋鬼就会闯人并搞   得一团糟），并且只有在确保其他线程不会造成干扰（通过获取正确的锁）的情况下才能执行 下去。</li><li>非阻塞：乐观、高效的方法：借助冲突检查机制来判断在更新过程中 是否存在来自其他线程的干扰，如果存在，这个操作将失败，并且可以重试（也可以不重试）。</li></ul><h2 id="比较井交换指令-（CAS）"><a href="#比较井交换指令-（CAS）" class="headerlink" title="比较井交换指令 （CAS）"></a>比较井交换指令 （CAS）</h2><blockquote><p>CAS 的含义 (读写的内存位置 V、进行比较的值 A 和拟写入的新 值 B。)</p></blockquote><ul><li>我认为 V 的值应该为A,  如果是， 那么将 V 的值更新为B,  否则不修改并告诉V 的值实际为多少</li><li>模拟操作<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/1.png"></li></ul><blockquote><p>CAS 的竞争</p></blockquote><ul><li>当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值 ， 而其他线程都将失败。</li><li>失败的线程井不会被挂起（不同于锁），而是被告知在这次竞争中失败，并可以再次尝试（或者恢复等。</li></ul><blockquote><p>CAS的典型使用</p></blockquote><ul><li>首先从V 中读取值A,  并根据A 计算新值 B</li><li>通过 CAS 以原子方式将V中的值由A变成B（只要在这期间没有任何线程将V的值修改为其他值）</li><li>由于 CAS 能检测到来自其他线程的干扰，因此即使不使用锁也能够实现原子的读－ 改－ 写操作序列。</li></ul><h2 id="非阻塞的计数器"><a href="#非阻塞的计数器" class="headerlink" title="非阻塞的计数器"></a>非阻塞的计数器</h2><blockquote><p>CAS计数器<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/2.png"></p></blockquote><ul><li>通常， 反复地重试是一种合理的策略</li><li>竞争很激烈的情况下，更好的方式是在重试之前首先等待一段时间或者回退，从而避免造成活锁问题。<ul><li>理论上， 如果其他线程在每次竞争 CAS时总是获胜， 那么这个线程每次都会重试， 但在实际中， 很少发生这种类型的饥饿问题。</li></ul></li><li>如果在CAS 失败时不执行任何操作，那么是一种明智的做法。（意味着其他线程已经完成了你想要执行的操作，比如链表队列）</li><li>只是计数器、序列生成等可以用AtomicInteger 等原子类（有原子递增方法和其他算术）</li></ul><blockquote><p>CAS计数器对比锁计数器优缺点</p></blockquote><ul><li><p>优点 （远远快于 就算是无竞争）</p><ul><li>CAS 的计数器在性能上远远超过了基千锁的计数器， 而在没有竞争时甚至更高</li><li>在最好的情况下， 在锁定时至少需要一次CAS, 因此虽然在使用锁时没有用到 CAS , 但实际上也无法节约任何执行开销。</li><li>硬件能够正确地预测while循环中的分支，从而把复杂控制逻辑的开销降至最低。</li></ul></li><li><p>缺点</p><ul><li>将使调用者处理竞争问题（通过重试、回退、放弃），而在锁中能自动处理竞争问题（线程在获得 锁之前将一直阻塞）。</li></ul></li></ul><blockquote><p>CAS多处理器性能</p></blockquote><ul><li>CAS 的性能会随着处理器数最 的不同而变化很大</li><li>与架构有个</li><li>经验法则： 在大多数处理器上， <strong>在无竞争的锁</strong>获取和释放的“快速代码路径” 上的开销， 大约是CAS 开销的两倍。</li></ul><h2 id="JVM-对-CAS-的支持-（java5引入底层支持）"><a href="#JVM-对-CAS-的支持-（java5引入底层支持）" class="headerlink" title="JVM 对 CAS 的支持 （java5引入底层支持）"></a>JVM 对 CAS 的支持 （java5引入底层支持）</h2><h1 id="原子变量类"><a href="#原子变量类" class="headerlink" title="原子变量类"></a>原子变量类</h1><blockquote><p>原子变量分类</p></blockquote><ul><li>标量类 ( Scalar )<ul><li>Atomiclnteger 、AtomicLong 、AtomicBoolean 以 及AtomicRe ference。</li><li>要想模拟其他基本类型的原子变量， 可以将 short 或 byte 等类型与 int 类型进行转换 ，以及使用 floatTointBits 或doubleToLongBits 来转换浮点数。）</li></ul></li><li> 更新器类</li><li>数组 类</li><li>复合 变量类。</li></ul><blockquote><p>与包装类的不同</p></blockquote><ul><li>原子的标量类扩展了Number 类， 但并没有扩展一些基本类型的包装类 ， 例如 Integer 或 Long 。</li><li>基本类型 的包装类是不可修改的，</li><li>没有重新定义    hashCode 或 equals 方法， 每个实例都是不同的。与其他可变对象相同，它们也不宜用做基于散列的容器中的键值。</li></ul><h2 id="原子变量是一种“更好的volatile”"><a href="#原子变量是一种“更好的volatile”" class="headerlink" title="原子变量是一种“更好的volatile”"></a>原子变量是一种“更好的volatile”</h2><blockquote><p>OneValueCache 与原子引用结合，指向不变对象引用，进行原子更新 避免竞态条件<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/3.png"></p></blockquote><h2 id="性能比较：锁与原子变量"><a href="#性能比较：锁与原子变量" class="headerlink" title="性能比较：锁与原子变量"></a>性能比较：锁与原子变量</h2><blockquote><p>PRNG 下一个随机数用到上一个数字</p></blockquote><ul><li>使用ReentranLock 实现<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/4.png"><br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/5.png"></li><li>使用 Atomiclnteger<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/6.png"></li></ul><blockquote><p>吞吐量结果<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/7.png"><br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/8.png"></p></blockquote><ul><li>在中低程度的竞争下，原子变量能提供更高的可伸缩性。（更真实的场景 ，因为不会只竞争 其他什么都不做）</li><li>而在高强度的竞争下，锁能够更有效地避免竞争。</li><li>ThreadLocal说明了，如果能够避免使用共享状态，那么开销将会更小。我们可以通过提高处理竞争的效率来提高可伸缩性，但只有完全消除 竞争，才能实现真正的可伸缩性。</li></ul><h1 id="非阻塞算法"><a href="#非阻塞算法" class="headerlink" title="非阻塞算法"></a>非阻塞算法</h1><blockquote><p>难点</p></blockquote><ul><li>找出如何将原子修改的范围缩小到单个变量上，同时还要维护数据的一致性。</li><li>在许多常见的数据结构中都可以使用非阻塞算法，包括栈、队列、优先队列以及散列表等，而要设计一些新的这种数据结   构，最好还是由专家们来完成。</li></ul><h2 id="非阻塞的栈（最简单的链式数据结构）"><a href="#非阻塞的栈（最简单的链式数据结构）" class="headerlink" title="非阻塞的栈（最简单的链式数据结构）"></a>非阻塞的栈（最简单的链式数据结构）</h2><blockquote><p>栈实现<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/9.png"></p></blockquote><ul><li>每个元素仅指向一个元素，井且每个元素也只被一个元素引用。</li><li>因为 compareAndSet 像锁定机制一样，既能提供原子性，又能提供可见性。</li></ul><h2 id="非阻塞的链表"><a href="#非阻塞的链表" class="headerlink" title="非阻塞的链表"></a>非阻塞的链表</h2><blockquote><p>实现的困难</p></blockquote><ul><li>支持头结点 尾结点的快速访问<ul><li>需要单独维护的头指针和尾指针</li><li>有两个指针指向位千尾部的节点 ：当前最后一个元素的 next 指针，以及尾节点。</li><li>当成功地插入一个新元素时 ， 这两个指针都需要采用原子操作来更新</li><li>在更新这两个指针时需 要不同的 CAS 操作， 并且如果第一个 CAS 成功， 但第二个 CAS 失败， 那么队列将处千不一致的状态。</li><li>两个CAS都成功了，那么在执行这两个 CAS 之间，仍可能有另一个线程会访问 这个队列。</li></ul></li></ul><blockquote><p>解决方法</p></blockquote><ul><li>一个包含多个步骤的更新操作中 ，也要确保数据结构总是处千一致的状态。<ul><li>当线程 B 到达时，如 果发现线程A 正在执行更新。B 可以等待（通过反复检查队列的状态）并直到A 完成更新， 从而使两个线程不会相互干扰。</li></ul></li><li>上面办法保证了”轮流”访间数据结构，并且不会造成破坏。但如果一个 线程在更新操作中失败了，那么其他的线程都无法再访问队列。确保当一个线程失败时不会妨碍其他线程继续执行下去。<ul><li>当 B 到达时发现 A 正在修改数据结构， 那么在数据结构中应该有足够多的信息， 使得B 能完成 A 的更新操作。（不用等待，A自己发现B替他完成了）</li></ul></li></ul><blockquote><p>非阻塞链接队列的插入（ConcurrentLinkedQueue的插入)<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/10.png"><br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/11.png"></p></blockquote><ul><li>队列的状态<ul><li>通常队列都有的 空队列的“哑（Dummy）节点”，头尾初始化指向</li><li>尾节点指向Dummy、（空队列）或者倒数第一个节点（稳定状态）， 倒数第二个元素（当有操作正在执行更新时）<br><img src="/2021/01/22/java-concurrency-in-pratice-part04-advanced-chap15-atomicandnoblocking/12.png"></li></ul></li><li>put步骤<ul><li>首先更新当前最后一个元素的next指针， 将新节点链接到列表队尾</li><li>然后更新尾节点，将其指向这个新元素。</li><li>两个操作之间，队列处于一种中间状态</li></ul></li><li>实现细节<ul><li>当队列处千稳定状态时， 尾节点的next  域将为空，如果队 列 处千中间状态， 那么 tail.next 将为非空。</li><li>当队列处于中间状态时，可以通过将尾节点向前移动一个节点，从而结束其他线程正在执行的插入元素操作，并 使得队列恢复为稳定状态。（帮忙推进）</li><li>稳定状态 尝试插入</li></ul></li><li>插入可能遇到的情况<ul><li>步骤    A：首先检查队列是否处千中间状态，是说明有另一个线程正在插入元素（在步骤C 和 D 之间）</li><li>步骤B ：帮忙完成插入 （重复执行这种检查，以免另一个线程已经开始插入新元素。直到它发现队列  处千稳定状态之后， 才会开始执行自己的插入操作）</li><li>步骤 C ：CAS 将把新节点链接到队列尾部 ， 因此如果两个线程同时插入元素 ， 那么这个CAS 将失败。<ul><li>不会发生任何变化， 并且当前的线程只需重新读取尾节点并再次重试。如果步骤 C 成功了， 那么插入操作将生效</li></ul></li><li>步骤 D ：被认为是一个“清理操作“， 因为它既可以由执行插入操作的线程来执行 ， 也可以由其他任何线程来执行。<ul><li>如果步骤 D 失败， 那么执行插入操作的线程将返回 ， 而不是重新执行 CAS , 因为不再需要重试－ 另一个线程巳经在步骤  B 中完成了这个工作。</li></ul></li></ul></li></ul><h2 id="原子的域更新器"><a href="#原子的域更新器" class="headerlink" title="原子的域更新器"></a>原子的域更新器</h2><blockquote><p>真正的API</p></blockquote><ul><li>在 ConcurrentLinkedQueue 中没有使用原子引用来 表示每 个 Node , 而是使用普通的volatile 类型引 用， 并通过基千反射的 AtomicRe ferenceFieldUpdater 来进行更新</li></ul><h2 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2><blockquote><p>需求</p></blockquote><ul><li> 在某些算法中， 如果V 的值首先由A 变成 B ,   再由B 变成 A,那么仍然被认为是发生了变化，并需要重新执行算法中的某些步骤。</li></ul><blockquote><p>解决方法</p></blockquote><ul><li>对简单的解决方案：不是更新某个引用的值，而是更新两个值，包括一个引用和一个版本号。即  使这个值由 A 变为 B , 然后又变为 A, 版本号也将是不同的。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>在JVM 从一个版本升级到下一个版本的过程中 ， 并发性能的主要提升都来自千（在N M 内部以及平台类库中）对非阻塞算法的使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part04-Advanced-chap14-DIYConcurrentTool</title>
      <link href="2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/"/>
      <url>2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>类库有许多状态依赖类，一般可以用他们，如果没有可以用底层机制。</p><h1 id="状态依赖性的管理"><a href="#状态依赖性的管理" class="headerlink" title="状态依赖性的管理"></a>状态依赖性的管理</h1><blockquote><p>单线程、多线程对比</p></blockquote><ul><li>单线程直接状态不满足就失败</li><li>多线程最好是阻塞到继续（因为可能几条之前是空的，现在非空）<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/1.png"></li></ul><h2 id="例子：有界缓存"><a href="#例子：有界缓存" class="headerlink" title="例子：有界缓存"></a>例子：有界缓存</h2><blockquote><p>使用需求</p></blockquote><ul><li>生产者–消费者设计经常使用 ArrayBlockingQueue这样的有界缓存</li><li>不能从空缓存get，也不能满 put</li><li>依赖状态的操作可以抛出一个异常、返回错误、或者保持阻塞到对象正确</li></ul><blockquote><p>有界缓存基类<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/2.png"><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/3.png"></p></blockquote><h3 id="例1：-前提条件失败传递给调用者"><a href="#例1：-前提条件失败传递给调用者" class="headerlink" title="例1： 前提条件失败传递给调用者"></a>例1： 前提条件失败传递给调用者</h3><p><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/4.png"></p><ul><li>实现简单 但是 缓存满不是异常（可能可以改为返回错误值） ，但这会使得调用put很复杂<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/5.png"><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/6.png"></li><li>也可以不进人休眠状态， 而直接重新调用 take  方法（忙等待或自旋等待），消耗大量的 CPU  时间，或者休眠状态（低响应性）</li><li>或者调用Thread.yield , 这相当于给调度器一个提示 ： 现在需要让出一定的时间使另一个线程运行。</li></ul><h3 id="例2：通过轮询与休眠来实现简单的阻塞"><a href="#例2：通过轮询与休眠来实现简单的阻塞" class="headerlink" title="例2：通过轮询与休眠来实现简单的阻塞"></a>例2：通过轮询与休眠来实现简单的阻塞</h3><p><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/7.png"><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/8.png"></p><ul><li>如果缓存为空，那么take 将休眠并直到另一个线程在缓存中放人一些数据；</li><li> 如果缓存是满的， 那么put 将休眠并直到另一个线程从缓存中移除一些数据，以便有空间容纳新的数据。</li><li>调用者角度 不需要处理 重试和异常</li><li>但可能存在不必要的休眠<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/9.png"></li><li>当一个方法等待条件为真时，需要提供取消机制（大多数阻塞库方法一样） SleepBoundBuffer 是通过中断</li></ul><h3 id="例3：条件队列"><a href="#例3：条件队列" class="headerlink" title="例3：条件队列"></a>例3：条件队列</h3><blockquote><p>条件队列关键</p></blockquote><ul><li>每个Java 对象都可以作为一个锁， 每个对象同样可以作为一个条件队列， 并且 Object 中的 wait 、notify 和 notify All 方法就构成了内部条件队列的 API。<ul><li>wait 自动释放锁，请求操作系统挂起当前线程<blockquote><p>实现<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/10.png"><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/11.png"></p></blockquote></li></ul></li><li>还可以加上限时版本的put take</li></ul><h1 id="条件队列"><a href="#条件队列" class="headerlink" title="条件队列"></a>条件队列</h1><blockquote><p>条件队列规则</p></blockquote><ul><li>许多规则不在规范里面（需要写入文档）</li><li>这也是为什么要尽量基与LinkedBlockQueue、Latch、semaphore、futuretask等类来构造程序的原因之一 ， 如果能避免使用条件队列， 那么实现起来将容易许多。</li></ul><h2 id="条件谓语"><a href="#条件谓语" class="headerlink" title="条件谓语"></a>条件谓语</h2><p>如上图</p><ul><li>在条件等待中存在一种重要的三元关系， 包括加锁、wait 方法和一个条件谓词</li></ul><h2 id="过早唤醒"><a href="#过早唤醒" class="headerlink" title="过早唤醒"></a>过早唤醒</h2><blockquote><p>wait 方法的返回并不一定意味着线程正在等待的条件谓词已经变成真了。</p></blockquote><ul><li>内置条件队列可以与多个条件谓词一起使用。 线程由于notifyAll 醒来不知道是哪个 </li><li>发出通知的线程调用notifyAll 时， 条件谓词可能已经变成真，但在重新获取锁时将再次变为假等</li><li><strong>所以 每当线程从 wait 中唤醒时， 都必须再次测试条件谓词</strong><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/12.png"></li></ul><h2 id="丢失的信号"><a href="#丢失的信号" class="headerlink" title="丢失的信号"></a>丢失的信号</h2><blockquote><p>定义</p></blockquote><ul><li>线程必须等待一个已经为真的条件，但在开始等待之前没有检查条件谓 词。现在，线程将等待一个已经发过的事件。<blockquote><p>解决办法</p></blockquote></li><li>向上面图 14-7一样 就不会</li></ul><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><blockquote><p>定义</p></blockquote><ul><li>使 take 解除阻塞， 必须确保在每条使缓存变为非空的代码路径中都发出一个通知。（put）</li><li>同样， take 在移除一个元素后也将调用 notifyAll , 向任何正在等待“ 不为满” 条件的线程发出通知：缓存已经不满了。</li><li>notify ， JVM 会从这个条件队列上等待的多个线程中选择一个来唤醒 ，</li><li>notify All 则会唤醒所有在这个条件队列上等待的线程。</li></ul><blockquote><p>一般是notify All而不是notify</p></blockquote><ul><li>因为单一的通知很容易导致类似于信号丢失的问题。</li></ul><blockquote><p>只有同时满足两个条件，单一的notify 而不是notifyAll</p></blockquote><ul><li>所有等待线程的类型相同：只有一个条件谓语与条件队列相关，且每个线程在从wait返回执行相同操作</li><li>单进单出：条件变量每次通知 最多唤醒一个线程</li></ul><blockquote><p>BoundBuffer满足单进单出 ，不满足所有等待线程相同 （可能非满 或者 非空）</p></blockquote><blockquote><p>优化方法：当且仅当put take影响空到非空 满到非满，才通知<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/13.png"></p></blockquote><h2 id="例子：阀门类"><a href="#例子：阀门类" class="headerlink" title="例子：阀门类"></a>例子：阀门类</h2><blockquote><p>定义 </p></blockquote><ul><li>它只有两种状态，即初始状态和结束状态 （可重新关闭）</li><li>闭锁能阻止线程通过开始阀门， 并直到阀门被打开，此时所有的线程都可以通过该阀门。<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/14.png"></li><li>可能情况：阀门在打开后又非常快速地关闭了，并 且 await 方法只检查 isOpen, 那么所有线程都可能无法释放（当所有线程收到通知时， 将重新请求锁并退出 wait, 而此时的阀门可能已经再次关闭了。）</li><li>只支持等待打开而不是关闭。（只在open通知）当增加一个新的状态依赖操作时，可能需要对多条修改对象的代码路径进行改动，才能正确地执行通知。</li></ul><h2 id="子类的安全问题"><a href="#子类的安全问题" class="headerlink" title="子类的安全问题"></a>子类的安全问题</h2><p>对状态依赖的类，要么将其等待和通知等协议完全向子类公开（并且写入正式文档），  要么完全阻止子类参与到等待和通知等过程中。</p><h2 id="入口协议与出口协议"><a href="#入口协议与出口协议" class="headerlink" title="入口协议与出口协议"></a>入口协议与出口协议</h2><ul><li>入口协议就是该操作的条件谓词</li><li> 出口协议则包括，检查被该操作修改的所有状态变量，井确认它们是否使某个其他的条件谓词变为真，如果 是， 则通知相关的条件队列。</li></ul><h1 id="显示Condition"><a href="#显示Condition" class="headerlink" title="显示Condition"></a>显示Condition</h1><p><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/15.png"></p><blockquote><p>需求</p></blockquote><ul><li>内置条件队列 内置锁只能有一个相关联的条件队列</li><li>一个带有多个条件谓词的并发对象，使用显式的 Lock 和 Condition 而不是内置锁和条件队 列， 这是一种更灵活的选择。</li></ul><blockquote><p>使用注意</p></blockquote><ul><li>wait 、notify、notifyAll对应 await signal signalAll</li><li>是对Obeject的扩充也包含 wait notify ，要确保使用正确</li></ul><blockquote><p>Condition 有界缓存<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/16.png"></p></blockquote><blockquote><p>好处</p></blockquote><ul><li>容易理解</li><li>容易满足单次通知</li></ul><h1 id="Synchronizer-剖析"><a href="#Synchronizer-剖析" class="headerlink" title="Synchronizer 剖析"></a>Synchronizer 剖析</h1><blockquote><p>semaphore ReentrantLock共性</p></blockquote><ul><li>做＂阀门”</li><li>通过（在调用lock   或 acquire  时成功返回</li><li>等待（在调用lock 或 acquire  时阻塞）</li><li>还取消（在调 用 tryLock   或 tryAcquire 时返回“假＂</li><li>支持可中断的、不可中断的以及限时的</li><li>支持等待线程  执行公平或非公平的队列操作。</li></ul><blockquote><p>可以简单互相实现（不是真正实现）<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/17.png"><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/18.png"></p></blockquote><blockquote><p>共同基类  AbstractQueuedSynchronizer（AQS) </p></blockquote><ul><li>用于构建锁和同步器的框架</li><li>许多同步类的基类。<ul><li>ReentrantLock 和 Semaphore ReentrantReadWriteLock</li><li> CountDownLatch </li><li>  SynchronousQueue(java 6 替换了一个非阻塞版本（可伸缩性更高）) 和 FutureTask。</li></ul></li></ul><blockquote><p>AQS的好处</p></blockquote><ul><li>极大地减少实现工作， 而且也不必处理在多个位置上发生的竞争问题</li><li>基千 AQS 构建的同步器中，只可能在一个时刻发生阻塞 ， 从而降低上下文切换的开销， 并提高吞吐量<ul><li>在SemaphoreOnLock 中， 获取许可的操作可能在两个时刻阻塞一 当锁保护信号量状态时 ，以 及当许可不可用时 。</li></ul></li><li>设计 AQS 时充分考虑了可伸缩性， java.utilconcurrent 中所有基千 AQS 构建的同步器都能获得这个优势。</li></ul><h1 id="AbstractQueuedSynchronizer（AQS"><a href="#AbstractQueuedSynchronizer（AQS" class="headerlink" title="AbstractQueuedSynchronizer（AQS)"></a>AbstractQueuedSynchronizer（AQS)</h1><blockquote><p>AQS原理</p></blockquote><ul><li>基本操作 各种形式的获取和释放<ul><li>获取操作依赖状态，通常会阻塞<ul><li>lock semaphore 获取 :锁或者许可</li><li> CountDownLatch 获取: 等待并直到闭锁到达结束状态”</li><li>使用 FutureTask时， 获取:“ 等待并直到任务已经完成</li></ul></li><li>释放不是可阻塞操作，所有在请求时被阻塞的线程都会开始执行。</li></ul></li><li>管理了一个整数状态信息， 可以通过 getState, setState 以及 compareAndSetState 等protected 类型方法来进行操作。<ul><li> ReentrantLock 用它来表示所有者线程已经重复获取该锁的次数 </li><li>Semaphore用它来表示剩余的许可数量</li><li>Future Task 用它来表示任务的状态（尚未开始、正在运行、已完成以及已取消）。</li><li>Tips:<strong>继承类自己也管理额外的状态变量（ReentrantLock 保存了锁的当前所有者的信息 ， 这样就能区分某个获取操作是重入的还是竞争的。）</strong></li></ul></li></ul><blockquote><p>AQS获取 释放标准操作<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/19.png"></p></blockquote><ul><li>获取操作可以是一种独占操作（例如 ReentrantLock )， 也可以是一个非独占操作（例如Semaphore 和CountDownLatch )。</li><li>获取步骤<ul><li> 1.同步器判断当前状态是否允许获得操作    ， 如果是， 则允许线程执行， 否则获取操作将阻塞或失败。</li><li>2.更新同步器的状态，获取同步器的某个线程可能会对其他线程能否也获取该同步器造成影响。</li></ul></li><li>子类需实现获取方法<ul><li>独占 tryAcquire 、tryRelease 和 isHeldExclusively </li><li>共享获取 tryAcquire­ Shared 和tryReleaseShared 等方法</li></ul></li><li>返回状态来得到基类 操作是否成功</li></ul><h2 id="例子：闭锁实现"><a href="#例子：闭锁实现" class="headerlink" title="例子：闭锁实现"></a>例子：闭锁实现</h2><blockquote><p>起始闭锁关闭  任何线程await阻塞 ，signal 打开 所有等待放开，后续也允许<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/20.png"></p></blockquote><ul><li> AQS 状态用来表示闭锁状态————关闭 (0) 或者打开(1)</li><li>await 方法调用 AQS 的acquireSharedlnterruptibly,   然后接 着调用 OneShotLatch 中的tryAcquireShared 方法。<ul><li>成功并允许线程通过</li><li>acquireSharedlnterruptibly 方法在处理失败的 方式， 是把这个线程放入等待线程队列中</li><li>signal 将调用 releaseShared,    接下来又会调 用 tryReleaseShare d。在 tryReleaseShared 中将无条件地把闭锁的状态设置为打开。</li><li>AQS 让所有等待中的线程都尝试重新请求该同步器    </li></ul></li></ul><h1 id="java-util-concurrent-中的AQS"><a href="#java-util-concurrent-中的AQS" class="headerlink" title="java.util.concurrent 中的AQS"></a>java.util.concurrent 中的AQS</h1><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><blockquote><p>具体实现</p></blockquote><ul><li>ReentrantLock 只支持独占 方式的获取操作<ul><li>它实现了 tryAcquire 、tryRelease 和isHeldExclusively</li><li>将同步状态用千保存锁获取操作 的次数</li><li>还维护一个owner 变晕来保存当前所有者线程的标识符（刚刚获取到锁，或者正要释放锁的时候才修改）</li><li>owner 区分重入 竞争</li></ul></li><li>非公平ReentrantLock<br>  <img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/21.png"><br>  <img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/22.png"><ul><li>state表示锁获取操作的次数</li><li>1.线程尝试获取锁</li><li>2.tryAcquire  检查锁的状态</li><li>3.未被持有更新锁的状态以表示锁已经被持有(状态可能 在检查后被立即修改,用 compareAndSetState  来原子地更新状态)</li><li>4.锁状态表明 它已经被持有，并且如果当前线程是锁的拥有者（重入）</li><li>5.当前线程不是锁的拥有者，那么获取操作将失败。（竞争）</li></ul></li><li>ReentrantLock还利用了AQS 对多个条件变量和多个等待线程集的内置支持。Lock.newCondition将返回一个新的ConditionObject实例， 这是AQS的一个内部类。</li></ul><h2 id="Semaphore-CountDownLatch"><a href="#Semaphore-CountDownLatch" class="headerlink" title="Semaphore CountDownLatch"></a>Semaphore CountDownLatch</h2><blockquote><p>Semaphore<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap14-diyconcurrenttool/22.png"></p></blockquote><ul><li>State 表示当前可用许可</li><li>tryAcquireShared<ul><li>1.无剩余许可，返回失败</li><li>2.有剩余的许可，用 compareAndSetState  来原子地更新状态)<ul><li>操作成功（这意味着许可的计数自从上一次读取后就没 有被修改过），返回一个值成功</li><li>操作失败 虽然对 compareAndSetState 的调用可能由于与另一个线程 发生竞争而失败， 并使其重新尝试， 但在经过了一定次数的重试操作以后，在 这两个结束条件中有一个会变为真 。</li></ul></li></ul></li><li>tryRleasedShared 同理</li></ul><blockquote><p>CountDownLatch (14.5上面有)</p></blockquote><ul><li>用 AQS 的方式与 Semaphore 很相似<ul><li>同步状态中保存的是当前的计数值。</li><li>countDown 方法调用 release , 从而导致计数值递减 ， 并且当计数值为零时， 解除所有等待线程的阻塞 。</li><li>await 调用 acquire , 当计数 器为零时 ， acquire 将立即返回 ， 否则将阻塞。</li></ul></li></ul><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><blockquote><p>Future .get与闭锁类似的地方</p></blockquote><ul><li> 如果发生了某个事件（由 FutureTask 表示的任务执行完成或被取消），那么线程就可以恢复执行， 否则这些线程将停留在队列中井直到该事件发生。</li></ul><blockquote><p>具体实现</p></blockquote><ul><li>AQS 同步状态被用来保存任务的状态， 例如， 正在运行、已完成或已取消</li><li>FutureTask 还维护一些额外的状态变量， 用来保存计算结果或者抛出的异常。</li><li>还维护了一个引用， 指向正在执行计算任务的线程（如果它当前处于运行状态，）因而如果任务取消，该线程就会中断。</li></ul><h2 id="ReentrantReadWritelock"><a href="#ReentrantReadWritelock" class="headerlink" title="ReentrantReadWritelock"></a>ReentrantReadWritelock</h2><blockquote><p>具体实现</p></blockquote><ul><li>单个AQS子类将同时管理读取加锁和写入加 锁</li><li>写入锁<ul><li>一个 l6 位的状态来表示写入锁的计数</li><li>使用独占的获取方法与释放方法。</li></ul></li><li>读取锁<ul><li>另一个 l 6 位的状态来表示读取锁的计数</li><li>使用共享的获取方法与释放方法</li></ul></li><li>AQS 在内部维护一个等待线程队列 ， 其中记录了某个线程请求的是独占访问还是共享访问。</li><li>FIFO队列（不允许选择读取线程 写入线程优先）<ul><li>当锁可用时， 如果位千队列头部的线程执行写入操作， 那么线程会得到这个锁，</li><li>如果位千队列头部的线程执行读取访问 ， 那么队列中在第一个写入线程之前的所有线程都将获得这个锁 。</li></ul></li></ul><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><blockquote><p>要实现一个依赖状态的类—一如果没有满足依赖状态的前提条件，那么这个类的方   法必须阻塞， 那么最好的 方式是基千现有的库类来 构建， 例如 Semaphore.BlockingQueue 或 CountDownLatch, 如 第 8 章 的 ValueLatch 所示。 然 而， 有时候 现 有的库类 不 能 提供足够的功能， 在这种情况下， 可以 使用内 置的条件队 列、显式的 Condition 对象 或者AbstractQueuedSynchronizer 来构建自己的同步器。内 置条件队列与内 置锁是 紧密绑定在一 起的，这是因为管理状态依赖性的机制必须与确保状态一致性的机制关联起来。同样，显式的Condition 与显式的Lock 也是紧密地绑定到一起的， 并且与内置条件队列相比， 还提供了一个扩展的功能集，包括每个锁对应千多个等待线程集，可中断或不可中断的条件等待，公平或非 公平的队列操作，以及基千时限的等待。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part04-Advanced-chap13-ExplictLock</title>
      <link href="2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/"/>
      <url>2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/</url>
      
        <content type="html"><![CDATA[<h1 id="Lock-、Reentrantlock"><a href="#Lock-、Reentrantlock" class="headerlink" title="Lock 、Reentrantlock"></a>Lock 、Reentrantlock</h1><blockquote><p>java5  提供的显示锁<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/1.png"></p></blockquote><blockquote><p>ReentranLock</p></blockquote><ul><li>实现Lock接口，提供和synchronized相同的互斥和内存可见</li><li>添加了 所有获取锁模式，提供锁不可用性问题更高的灵活性</li></ul><blockquote><p>添加和synchronized如此像的原因</p></blockquote><ul><li>内置锁无法中断一个正在等待锁的线程</li><li>内置锁无法请求一个锁时无限等待</li><li>内置锁必须在获取该锁的代码块释放，无法实现非租塞结构加锁</li></ul><blockquote><p>显示锁不能完全替代synchronized的原因<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/2.png"></p></blockquote><ul><li>必须在finally释放锁，不然抛出异常，锁永远无法释放</li><li>当程序执行控制离开保护代码块时，不会自动清除锁（每个try都需要，可能忘记在finally释放)</li></ul><h2 id="轮询锁和定时锁"><a href="#轮询锁和定时锁" class="headerlink" title="轮询锁和定时锁"></a>轮询锁和定时锁</h2><blockquote><p>实现机制</p></blockquote><ul><li>tryLock 获取锁，不能同时获得就回退重新尝试</li><li>休眠时间用固定+随机防止活锁。</li><li>指定时间不能获得所有锁  方法返回一个失败状态</li></ul><blockquote><p>轮查锁例子<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/3.png"></p></blockquote><blockquote><p>时间锁例子<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/4.png"></p></blockquote><ul><li>在共享线路发送一条消息，不在指定时间就失败</li></ul><h2 id="可中断的锁获取"><a href="#可中断的锁获取" class="headerlink" title="可中断的锁获取"></a>可中断的锁获取</h2><blockquote><p>实现机制</p></blockquote><ul><li>lockInterruptibly 在获得锁的同时保持对中断的响应（不需要其他类型不可阻塞机制）<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/5.png"><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/6.png"></li></ul><h2 id="非快结构的加锁"><a href="#非快结构的加锁" class="headerlink" title="非快结构的加锁"></a>非快结构的加锁</h2><blockquote><p>例子</p></blockquote><ul><li>链表节点都使用独立的锁，不同线程独立对链表不同部分修改</li><li>遍历的时候持有当前节点锁，直到获取到下一个节点，在释放上一个</li></ul><h1 id="性能考虑因素"><a href="#性能考虑因素" class="headerlink" title="性能考虑因素"></a>性能考虑因素</h1><blockquote><p>java5 上 ReentranLock竞争性能更高，java6 改进了内置锁 使得与ReentranLock算法相似。<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/7.png"></p></blockquote><ul><li>性能几乎一样</li></ul><h1 id="公平性（优先级）"><a href="#公平性（优先级）" class="headerlink" title="公平性（优先级）"></a>公平性（优先级）</h1><blockquote><p>公平性定义 </p></blockquote><ul><li>ReentranLock构造函数选择。<ul><li>公平锁，按照发出顺序获得锁</li><li>非公平锁，当线程请求非公平锁，如果发出请求的同时该锁可用，就可以跳过队列中所有等待线程获得锁</li></ul></li><li>Semaphore同样也有</li></ul><blockquote><p>非公平性可能带来的性能提升（不必要时不要以公平性为代价）<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/8.png"></p></blockquote><h1 id="什么时候选择ReentranLock"><a href="#什么时候选择ReentranLock" class="headerlink" title="什么时候选择ReentranLock"></a>什么时候选择ReentranLock</h1><ul><li>当内置锁无法满足要求</li><li>synchronized 是JVM内置，可以执行优化。</li></ul><h1 id="读-写锁"><a href="#读-写锁" class="headerlink" title="读-写锁"></a>读-写锁</h1><p><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/9.png"></p><blockquote><p>作用</p></blockquote><ul><li>互斥锁 过于强硬</li><li>支持多读取 单写</li></ul><blockquote><p>实现细节</p></blockquote><ul><li>释放优先级： 写入释放后，读线程和写线程哪个优先</li><li>读线程插队：锁在读线程持有，写线程在等待，新到达的读线程是否立即获得访问权</li><li>重入性：<ul><li>wait()：阻塞当前线程,notify()：唤起被wait()阻塞的线程,<strong>需要在同步块里面用，否则异常</strong></li><li>所谓不可重入锁，即若当前线程执行某个方法已经获取了该锁，那么在方法中尝试再次获取锁时，就会<strong>获取不到被阻塞</strong>。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lock</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isLocked<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isLocked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        isLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>使用该锁：<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Count</span><span class="token punctuation">{</span>    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//do something</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>当前线程执行<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法首先获取lock，接下来执行<span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法就无法执行<span class="token function">doAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>中的逻辑，必须先释放锁。这个例子很好的说明了不可重入锁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>可重入锁<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lock</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> isLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span>  lockedBy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lockedCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>isLocked <span class="token operator">&amp;&amp;</span> lockedBy <span class="token operator">!=</span> thread<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isLocked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        lockedCount<span class="token operator">++</span><span class="token punctuation">;</span>        lockedBy <span class="token operator">=</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lockedBy<span class="token punctuation">)</span><span class="token punctuation">{</span>            lockedCount<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lockedCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                isLocked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>所谓可重入，意味着线程可以进入它已经拥有的锁的同步代码块儿<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>降级：线程持有写入锁，不释放情况下是否可以获取读取锁</li><li>升级： 读取锁 能否优先于其他正在等待的读写线程。</li></ul><blockquote><p>ReentranReadWriteLock实现</p></blockquote><ul><li>可重入</li><li>可降级</li></ul><blockquote><p>ReentranReadWriteLock使用时机</p></blockquote><ul><li>ConcurrentHashMap性能很好 ，需要并发基于散列就可以用它</li><li>如果 另一种Map实现 LinkedHashMap  可以用ReentranReadWriteLock<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/10.png"><br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/11.png"></li></ul><blockquote><p>ArrayList 封装对比ReentranLock  ReadWriteLock<br><img src="/2021/01/17/java-concurrency-in-pratice-part04-advanced-chap13-explictlock/12.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part03-Active、efficiency、Test-chap11-EfficiencyAndFlexibility</title>
      <link href="2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/"/>
      <url>2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/</url>
      
        <content type="html"><![CDATA[<h1 id="性能和可伸缩性"><a href="#性能和可伸缩性" class="headerlink" title="性能和可伸缩性"></a>性能和可伸缩性</h1><blockquote><p>性能定义</p></blockquote><ul><li>可以用多个指标衡量：服务时间、延迟时间、吞吐量、效率、可伸缩性、容量。 <ul><li>运行速度：服务时间、延迟时间 （<strong>多快</strong>完成）</li><li>处理能力：吞吐量 （一定计算资源，完成<strong>多少</strong>工作）</li></ul></li></ul><blockquote><p>可伸缩性定义</p></blockquote><ul><li>增加 计算资源（CPU、内存、存储 、IO带宽 ),程序吞吐量、处理能力相应增加</li></ul><blockquote><p>性能调优 对比 可伸缩调优</p></blockquote><ul><li>性能调优：目的更小代价完成相同工作<ul><li>多少、多快 完全独立或者矛盾</li></ul></li><li>可伸缩调优：问题计算并行化，利用更多计算资源完成更多工作<ul><li>增加每个任务的总处理量（分为多个流水线子任务）</li></ul></li><li>大多数提高单线程程序性能技术，会破坏可伸缩性</li><li>服务器往往多少重要（除了交互应用）</li></ul><h1 id="Amadahl"><a href="#Amadahl" class="headerlink" title="Amadahl"></a>Amadahl</h1><p><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/1.png"></p><ul><li>N无穷大 加速比趋近与1/F  串行10% 最高10 50% 最高2</li></ul><h2 id="找出框架隐藏的串行"><a href="#找出框架隐藏的串行" class="headerlink" title="找出框架隐藏的串行"></a>找出框架隐藏的串行</h2><blockquote><p>不同队列的吞吐量<br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/2.png"></p></blockquote><ul><li>差异由于两个队列不同比例的串行，同步是用单个锁保持整个队列状态。（offer，remove都持有）</li><li>ConcurrentLinkedQueue使用复杂的非阻塞队列（chap15)</li></ul><h1 id="线程开销"><a href="#线程开销" class="headerlink" title="线程开销"></a>线程开销</h1><ul><li>开销一定要小于性能提升</li></ul><h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><blockquote><p>时间和命令</p></blockquote><ul><li>几us Unix:vmstat  Winodows:perfmon</li></ul><blockquote><p>可能导致原因(超过10%代表频繁)</p></blockquote><ul><li>I、O  竞争锁 导致阻塞</li></ul><h2 id="内存同步"><a href="#内存同步" class="headerlink" title="内存同步"></a>内存同步</h2><ul><li>Memory Barrier：synchronized volatile 刷新缓存（会抑制编译器优化）</li><li>逸出分析（Escape Analysis）：找出不发布到堆的本地对象（去掉锁）<br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/3.png"></li><li>锁粒度粗化（Lock Coarsening）(合并锁）)</li></ul><h2 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h2><ul><li>非竞争同步可在JVM处理，竞争同步需要操作系统接入。</li><li>竞争锁失败的线程，需要被挂起或者 （spin-Waiting），需要两次上下文切换（执行时间片没用完被切换出去，当获取的锁或者其他资源可以在切换回来）</li></ul><h1 id="减少锁竞争"><a href="#减少锁竞争" class="headerlink" title="减少锁竞争"></a>减少锁竞争</h1><blockquote><p>锁竞争的影响</p></blockquote><ul><li>串行 影响可伸缩性</li><li>上下文切换影响性能</li><li><strong>并发程序，对可伸缩最主要威胁就是独占方式资源锁</strong></li></ul><blockquote><p>降低锁的竞争程度</p></blockquote><ul><li>减少锁持有时间</li><li>降低锁请求频率</li><li>使用带有协调机制的独占锁</li></ul><h2 id="减少锁范围"><a href="#减少锁范围" class="headerlink" title="减少锁范围"></a>减少锁范围</h2><blockquote><p>锁过长例子<br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/4.png"></p></blockquote><ul><li>只有Map.get需要<br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/5.png"></li><li>只有一个状态变量 ，可以把线程安全委托其他类提升性能。（Hashtable,synchronizedMap ConcurrentHashMap)，就可以<strong>不再AttributeStore用显示同步</strong>，将来维护代码也好。</li></ul><h2 id="减少锁粒度-多锁"><a href="#减少锁粒度-多锁" class="headerlink" title="减少锁粒度(多锁)"></a>减少锁粒度(多锁)</h2><blockquote><p>锁请求分布更多的锁</p></blockquote><ul><li>一个锁保护多个相互独立状态，可以分解多个锁<br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/6.png"></li><li>分解后<br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/7.png"><br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/8.png"></li></ul><h2 id="锁分段"><a href="#锁分段" class="headerlink" title="锁分段"></a>锁分段</h2><blockquote><p>定义</p></blockquote><ul><li>扩展对一组独立对象上的锁进行分解</li><li>ConcurrentHashMap 用16个锁的数组，每个锁保护所有散列桶的1/16  N mod 16(把锁请求减少到1/16)</li></ul><blockquote><p>锁分段技术 例子<br><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/9.png"></p></blockquote><ul><li>S个锁 每个保护一个子集</li><li>get 只要一个锁 clear 需要所有锁但是不需要同时获得</li></ul><h2 id="避免热点域"><a href="#避免热点域" class="headerlink" title="避免热点域"></a>避免热点域</h2><blockquote><p>定义</p></blockquote><ul><li>每个操作请求多个变量，常见优化 缓存反复计算结果，引入“热点域”</li></ul><blockquote><p>热点域问题</p></blockquote><ul><li>在put remove 更新size，降低了size方法开销，但是导致了难以提升实现的可伸缩</li><li>size变成热点域 每个导致元素数量变化都需要访问它</li><li>ConcurrentHashMap size 对每个分段枚举数量相加</li></ul><h2 id="一些替代独占锁的方法"><a href="#一些替代独占锁的方法" class="headerlink" title="一些替代独占锁的方法"></a>一些替代独占锁的方法</h2><blockquote><p>例子 </p></blockquote><ul><li>使用并发容器，读写锁（显示锁 多读取单写入）、不可变对象和原子变量</li></ul><h2 id="监测-CPU利用率"><a href="#监测-CPU利用率" class="headerlink" title="监测 CPU利用率"></a>监测 CPU利用率</h2><blockquote><p>CPU无充分利用原因</p></blockquote><ul><li>负载不充足，产生足够的负载</li><li>I/O密集。iostat</li><li>外部限制。 如果依赖外部服务 ：数据库 Web服务等</li><li>锁竞争</li></ul><blockquote><p>CPU忙碌 检测是否能通过增加额外CPU提升性能</p></blockquote><h2 id="向对象池说不"><a href="#向对象池说不" class="headerlink" title="向对象池说不"></a>向对象池说不</h2><blockquote><p>早期 对象分配 回收操作缓慢的产物</p></blockquote><h1 id="例子：比较Map的性能"><a href="#例子：比较Map的性能" class="headerlink" title="例子：比较Map的性能"></a>例子：比较Map的性能</h1><p><img src="/2021/01/16/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-efficiencyandflexibility/10.png"></p><ul><li>对同步容器 负载变成竞争</li></ul><h1 id="减少上下文切换开销"><a href="#减少上下文切换开销" class="headerlink" title="减少上下文切换开销"></a>减少上下文切换开销</h1><blockquote><p>被阻塞的操作 会在运行和阻塞切换</p></blockquote><ul><li>比如日志记录 写入日志文件（用专门后台线程，而不是当前线程 ，因为日志和I/O有关</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part03-Active、efficiency、Test-chap10-ActiveDanger</title>
      <link href="2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/"/>
      <url>2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/</url>
      
        <content type="html"><![CDATA[<h1 id="DeadLock"><a href="#DeadLock" class="headerlink" title="DeadLock"></a>DeadLock</h1><blockquote><p>JVM不像数据库 ，无法自己解决死锁</p></blockquote><ul><li>并不是一定发生，死锁往往发生在高负载</li></ul><h2 id="简单顺序死锁"><a href="#简单顺序死锁" class="headerlink" title="简单顺序死锁"></a>简单顺序死锁</h2><blockquote><p>例子<br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/1.png"></p></blockquote><blockquote><p>解决方法</p></blockquote><ul><li>如果所有线程以固定的顺序获得锁，程序中就不会出现锁顺序死锁。</li></ul><h2 id="动态的锁顺序死锁"><a href="#动态的锁顺序死锁" class="headerlink" title="动态的锁顺序死锁"></a>动态的锁顺序死锁</h2><blockquote><p>例子1 锁住账户原子转账<br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/2.png"></p></blockquote><ul><li>当X向Y Y向X可能死锁</li></ul><blockquote><p>解决办法 System.identityHashCode 定义顺序<br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/3.png"><br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/4.png"></p></blockquote><ul><li>可能Hashcode 相等，但是如果Account有唯一不可变键值</li></ul><blockquote><p>死锁的问题 (几十亿操作一次，也会出大问题)</p></blockquote><ul><li>短时间持有锁，看似降低竞争难度，增加了测试中找出潜在死锁的风险</li></ul><blockquote><p>例子2 相互协作对象<br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/5.png"><br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/6.png"></p></blockquote><ul><li>setLocation 和getImage都会尝试获得2个锁<ul><li>GPS接收器线程调用set 更新位置，判断是否到达，通知Dispatcher需要新的目的地 先尝试taxi的锁，在Dispatcher锁</li><li>getImage 先Dispatcher锁，在获取每个Taxi锁</li></ul></li><li>持有锁调用某个外部方法，可能会获取其他锁</li></ul><h2 id="开放调用-（Open-Call）"><a href="#开放调用-（Open-Call）" class="headerlink" title="开放调用 （Open Call）"></a>开放调用 （Open Call）</h2><blockquote><p>定义</p></blockquote><ul><li>调用某个方法不需要持有锁（类似封装提供线程安全）</li><li>同步代码块仅用于保护涉及共享状态的操作</li></ul><blockquote><p>公开调用避免死锁<br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/7.png"></p></blockquote><ul><li>丢失了一点原子性。（位置快照）</li><li>更新出租车位置和通知调度程序这辆出租车去新地方（可以不是原子操作，）</li></ul><h2 id="资源死锁"><a href="#资源死锁" class="headerlink" title="资源死锁"></a>资源死锁</h2><blockquote><p>定义例子</p></blockquote><ul><li>两个不同数据库连接池，资源池通常用信号量实现，请求两个资源不会遵循相同顺序，线程A D1数据库 线程B D2数据库</li><li>线程饥饿死锁：一个任务提交另一个任务，等待另一个人任务完成，（任务等待其他任务结果）</li></ul><h1 id="死锁避免和诊断"><a href="#死锁避免和诊断" class="headerlink" title="死锁避免和诊断"></a>死锁避免和诊断</h1><blockquote><p>程序编写总体策略</p></blockquote><ul><li>一个程序每次至多一个锁（就无锁顺序死锁）（不太现实）</li><li>减少潜在加锁交互，获取锁需要遵循 的协议写入正式文档</li><li>尽可能用开放调用</li></ul><blockquote><p>程序检查总体策略</p></blockquote><ul><li>找出什么地方多个锁（代码块）</li><li>确保他们整个程序获取锁顺序一致</li><li>开放调用情况下（可以自动化分析）</li></ul><h2 id="支持定时的锁"><a href="#支持定时的锁" class="headerlink" title="支持定时的锁"></a>支持定时的锁</h2><blockquote><p>显示Lock类</p></blockquote><ul><li>可以设置Timeout 等待超过就返回失败</li></ul><h2 id="线程转储信息分析死锁（Thread-Dump"><a href="#线程转储信息分析死锁（Thread-Dump" class="headerlink" title="线程转储信息分析死锁（Thread Dump)"></a>线程转储信息分析死锁（Thread Dump)</h2><blockquote><p>JVM 功能（许多IDE支持）<br><img src="/2020/12/30/java-concurrency-in-pratice-part03-active-efficiency-test-chap10-activedanger/8.png"></p></blockquote><ul><li>三个组件 只有交互才会显现出来 </li><li>例子：不同调用链通过JDBC驱动以不同顺序获取多个锁，第二个问题：多个线程试图使用同一个JDBC连接。（因为JDBC规范并无要求Connection 线程安全，以及Connection是封闭在单个线程）</li></ul><h1 id="其他活跃性危险"><a href="#其他活跃性危险" class="headerlink" title="其他活跃性危险"></a>其他活跃性危险</h1><h2 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h2><blockquote><p>定义</p></blockquote><ul><li>线程无法访问它需要的资源（优先级不当，或者无法结束）<br>（CPU时钟之类的）<blockquote><p>建议</p></blockquote></li><li>大多数并发程序，尽量不用改变优先级（这依赖平台）</li></ul><h2 id="糟糕的响应性"><a href="#糟糕的响应性" class="headerlink" title="糟糕的响应性"></a>糟糕的响应性</h2><blockquote><p>例子</p></blockquote><ul><li>GUI程序使用了后台线程，CPU密集型 和事件线程一起竞争CPU </li><li>某线程长时间占用锁</li></ul><h2 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h2><blockquote><p>定义</p></blockquote><ul><li>不阻塞线程，但不断重复执行相同操作，且总会失败</li></ul><blockquote><p>例子</p></blockquote><ul><li>处理过渡的错误代码，错误的将不可修复的错误作为可修复的错误。</li><li>两台机器同样的载波发数据报冲突，稍后再发，又冲突，不断冲突(因为用相同的载波改变机制)</li></ul><blockquote><p>解决办法</p></blockquote><ul><li>重试机制引入随机性。</li><li>以太网协议 定义在重复发生冲突采用指数回退机制</li><li>并发应用 等待随机长度时间 回退避免死锁</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-part05-HEconcurrency-chap12-JavaMemoryModel</title>
      <link href="2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/"/>
      <url>2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E7%A1%AC%E4%BB%B6%E7%9A%84%E6%95%88%E7%8E%87%E4%B8%8E%E4%B8%80%E8%87%B4%E6%80%A7">硬件的效率与一致性</a></li><li><a href="#java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-jmm">Java内存模型 （JMM）</a><ul><li><a href="#%E4%B8%BB%E5%86%85%E5%AD%98%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98">主内存与工作内存</a></li></ul></li><li><a href="#%E5%86%85%E5%AD%98%E9%97%B4%E4%BA%A4%E4%BA%92%E6%93%8D%E4%BD%9C">内存间交互操作</a><ul><li><a href="#%E5%AF%B9%E4%BA%8Evolatile%E5%9E%8B%E5%8F%98%E9%87%8F%E7%9A%84%E7%89%B9%E6%AE%8A%E8%A7%84%E5%88%99">对于volatile型变量的特殊规则</a></li><li><a href="#%E9%92%88%E5%AF%B9long%E5%92%8Cdouble%E5%9E%8B%E5%8F%98%E9%87%8F%E7%9A%84%E7%89%B9%E6%AE%8A%E8%A7%84%E5%88%99">针对long和double型变量的特殊规则</a></li><li><a href="#%E5%8E%9F%E5%AD%90%E6%80%A7%E5%8F%AF%E8%A7%81%E6%80%A7%E4%B8%8E%E6%9C%89%E5%BA%8F%E6%80%A7">原子性、可见性与有序性</a></li><li><a href="#%E5%85%88%E8%A1%8C%E5%8F%91%E7%94%9F%E5%8E%9F%E5%88%99%E9%87%8D%E7%82%B9">先行发生原则（重点）</a></li></ul></li><li><a href="#java%E4%B8%8E%E7%BA%BF%E7%A8%8B%E8%99%9A%E6%8B%9F%E6%9C%BA">Java与线程（虚拟机）</a><ul><li><a href="#%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0">线程的实现</a></li><li><a href="#java%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6">Java线程调度</a></li><li><a href="#%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2">状态转换</a></li></ul></li><li><a href="#java%E4%B8%8E%E5%8D%8F%E7%A8%8B">Java与协程</a><ul><li><a href="#%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%B1%80%E9%99%90">内核线程的局限</a></li><li><a href="#%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%A4%8D%E8%8B%8F">协程的复苏</a></li><li><a href="#java%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E7%BA%A4%E7%A8%8Bfiber">Java的解决方案 （纤程（Fiber））</a></li></ul></li></ul><!-- /TOC --><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>并发处理的广泛应用</p></blockquote><ul><li>Amdahl定律代替摩尔定律成为计算机性能发展源动力的根本原因</li><li>Amdahl定律通过系统中并行化与串行化的比重来描述多处理器系统能获得的运算加速能力，摩尔定律则用于描述处理器晶体管数量与运行效率之间的发展关系。这两个定律的更替代表了近年来硬件发展从追求处理器频率到追求多核心并行处理的发展过程。</li></ul><blockquote><p>TPS</p></blockquote><ul><li>每秒事务处理数（Transactions Per Second，TPS）,衡量一个服务性能的高低好坏重要的指标之一</li></ul><h1 id="硬件的效率与一致性"><a href="#硬件的效率与一致性" class="headerlink" title="硬件的效率与一致性"></a>硬件的效率与一致性</h1><blockquote><p>处理器处理的复杂性与缓存的引入</p></blockquote><ul><li>绝大多数的运算任务都不可能只靠处理器，至少要与内存交互，如读取运算数据、<br>存储运算结果等，这个I/O操作就是很难消除的（无法仅靠寄存器来完成所有运算任务）。</li><li>现代计算机系统都不得不加入一层或多层读写速度尽可能接近处理器运算速度的高速缓存（Cache）来作为内存与处理器之间的缓冲</li></ul><blockquote><p>高速缓存带来的缓存一致性（Cache Coherence）</p></blockquote><ul><li>在多路处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存（Main Memory），这种系统称为共享内存多核系统（Shared Memory Multiprocessors System）</li><li>各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（Illinois Protocol）、MOSI、Synapse、Firefly及Dragon Protocol等。<br><img src="/2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/1.png"></li></ul><blockquote><p>内存模型</p></blockquote><ul><li>在特定的操作协议下，对特定的内存或高速缓存进行读写访问的过程抽象。</li></ul><blockquote><p>输入代码乱序执行优化</p></blockquote><ul><li>处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的</li><li>因此如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证。</li><li>虚拟机的即时编译器中也有指令重排序（Instruction Reorder）优化。</li></ul><h1 id="Java内存模型-（JMM）"><a href="#Java内存模型-（JMM）" class="headerlink" title="Java内存模型 （JMM）"></a>Java内存模型 （JMM）</h1><h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h2><blockquote><p>JMM 主要目的</p></blockquote><ul><li>定义程序中各种变量的访问规则，即关注在虚拟机中把变量值存储到内存和从内存中取出变量值这样的底层细节。<ul><li>此处的变量（Variables）与Java编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，因为后<br>者是线程私有的，不会被共享</li></ul></li></ul><blockquote><p>变量存储 读写</p></blockquote><ul><li>JMM规定所有的变量都存储在主内存（Main Memory）中</li><li>线程的工作内存中保存了被该线程使用的变量的主内存副本</li><li>线程对变量的所有操作（读取、赋值等）都必须在工作内<br>存中进行，而不能直接读写主内存中的数据</li><li>不同的线程之间也无法直接访问对方工作内存中的变<br>量<br><img src="/2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/2.png"></li></ul><blockquote><p>主内存、工作内存与 Java内存区 堆、栈方法区概念</p></blockquote><ul><li>这两者基本上是没有任何关系的</li><li>如果两者一定要勉强对应起来，那么从变量、主内存、工作内存的定义来看，主内存主要对应于Java堆中的对象实例数据部分。<ul><li>除了实例数据，Java堆还保存了对象的其他信息，对于HotSpot虚拟机来讲，有Mark Word（存储对<br>象哈希码、GC标志、GC年龄、同步锁等信息）、Klass Point（指向存储类型元数据的指针）及一些用<br>于字节对齐补白的填充数据（如果实例数据刚好满足8字节对齐，则可以不存在补白）。</li><li>工作内存则对应于虚拟机栈中的部分区域。</li></ul></li><li>主内存直接对应于物理硬件的内存，而为了<br>获取更好的运行速度，虚拟机（或者是硬件、操作系统本身的优化措施）可能会让工作内存优先存储于寄存器和高速缓存中，因为程序运行时主要访问的是工作内存。</li></ul><h1 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h1><blockquote><p>如何从主内存拷贝到工作内存、如何从工作内存同步回主内存等?</p></blockquote><ul><li>8种原子操作 （对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许有例外）<ul><li>·lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>·unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量<br>才可以被其他线程锁定。</li><li>·read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以<br>便随后的load动作使用。</li><li>·load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的<br>变量副本中。</li><li>·use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚<br>拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>·assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收的值赋给工作内存的变量，<br>每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>·store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随<br>后的write操作使用。</li><li>·write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的<br>变量中。</li><li>从主内存拷贝到工作内存 ，顺序read load，工作内存同步回主内存store和write (可以不连续)</li></ul></li><li>在8种基本操作的基本原则<ul><li>·不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内<br>存不接受，或者工作内存发起回写了但主内存不接受的情况出现。</li><li>·不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回<br>主内存。</li><li>·不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存<br>中。</li><li>·一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或<br>assign）的变量，换句话说就是对一个变量实施use、store操作之前，必须先执行assign和load操作。</li><li>·一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执<br>行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>·如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量<br>前，需要重新执行load或assign操作以初始化变量的值。</li><li>·如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个<br>被其他线程锁定的变量。</li><li>·对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。</li></ul></li><li>上述规则比较严谨，只需了解定义就行</li><li>用等效判断原则–先行发生原则，来确定是否安全</li></ul><h2 id="对于volatile型变量的特殊规则"><a href="#对于volatile型变量的特殊规则" class="headerlink" title="对于volatile型变量的特殊规则"></a>对于volatile型变量的特殊规则</h2><blockquote><p>volatile的特性</p></blockquote><ul><li>第一项是保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。（普通变量需要在主内存完成  A修改 回写 B在回写完 读取）<ul><li>volatile变量运算不一定安全 ，运算符 非原子</li><li>race++ javap反编译<pre class="line-numbers language-none"><code class="language-none">public static void increase();    Code:        Stack=2, Locals=0, Args_size=0        0:   getstatic       #13; //Field race:I        3:   iconst_1        4:   iadd        5:   putstatic       #13; //Field race:I        8:   return    LineNumberTable:        line 14: 0        line 15: 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>getstatic指令把race的值取到操作栈顶时，volatile关键字保证了race的值在此时是正确的</li><li><font size="4,font" color="red">字节码来分析并发问题仍然是不严谨的，因为即使编译出来只有一条字节码指令，也并不意味执行这条指令就是一个原子操作</font>。 解释执行可能需要若干机器码，用-XX：+PrintAssembly参数反汇编分析严密。</li><li>运算应用场景（只需可见性）<ul><li>·运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。</li><li>·变量不需要与其他的状态变量共同参与不变约束。</li><li>例子：当shutdown()方法被调用时，能保证所有线程中执行的doWork()方法都立即停下来。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> shutdownRequested<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    shutdownRequested <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>shutdownRequested<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 代码的业务逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li>第二个语义是禁止指令重排序优化（通的变量仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。）<ul><li>指令重排的问题<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> configOptions<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configText<span class="token punctuation">;</span><span class="token comment">// 此变量必须定义为volatile</span><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 假设以下代码在线程A中执行</span><span class="token comment">// 模拟读取配置信息，当读取完成后</span><span class="token comment">// 将initialized设置为true,通知其他线程配置可用</span>configOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>configText <span class="token operator">=</span> <span class="token function">readConfigFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processConfigOptions</span><span class="token punctuation">(</span>configText<span class="token punctuation">,</span> configOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 假设以下代码在线程B中执行</span><span class="token comment">// 等待initialized为true，代表线程A已经把配置信息初始化完成</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 使用线程A中初始化好的配置信息</span><span class="token function">doSomethingWithConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>描述的场景是开发中常见配置读取过程，只是我们在处理配置文件时一般不会出现并发。</li><li>如果定义initialized变量时没有使用volatile修饰，就可能会由于指令重排序的优化，导致位于线程A中最后一条代码“initialized=true”被提前执行（虽然是Java伪代码重排序优化是机器级的优化操作）</li></ul></li></ul><blockquote><p>volatile 变量的机器码操作</p></blockquote><ul><li>双锁检测（Double Check Lock，DCL）单例代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>汇编码<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0x01a3de0f</span><span class="token operator">:</span> mov    $<span class="token number">0x3375cdb0</span><span class="token punctuation">,</span><span class="token operator">%</span>esi     <span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>beb0cd75 <span class="token number">33</span>                                        <span class="token punctuation">;</span>   <span class="token punctuation">{</span><span class="token function">oop</span><span class="token punctuation">(</span><span class="token string">'Singleton'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token number">0x01a3de14</span><span class="token operator">:</span> mov    <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token number">0</span><span class="token function">x150</span><span class="token punctuation">(</span><span class="token operator">%</span>esi<span class="token punctuation">)</span>     <span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.89865001</span> <span class="token number">0000</span><span class="token number">0x01a3de1a</span><span class="token operator">:</span> shr    $<span class="token number">0x9</span><span class="token punctuation">,</span><span class="token operator">%</span>esi            <span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>c1ee09<span class="token number">0x01a3de1d</span><span class="token operator">:</span> movb   $<span class="token number">0x0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token function">x1104800</span><span class="token punctuation">(</span><span class="token operator">%</span>esi<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>c6860048 <span class="token number">100100</span><span class="token number">0x01a3de24</span><span class="token operator">:</span> lock addl $<span class="token number">0x0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">%</span>esp<span class="token punctuation">)</span>       <span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>f0830424 <span class="token number">00</span>                                        <span class="token punctuation">;</span><span class="token operator">*</span>putstatic instance                                        <span class="token punctuation">;</span> <span class="token operator">-</span> Singleton<span class="token operator">::</span>getInstance@<span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>关键在于赋值后（前面mov%eax，0x150(%esi)这句便<br>是赋值操作）多执行了一个“lock addl$0x0，(%esp)”操作，这个操作的作用相当于一个内存屏障<br>（Memory Barrier或Memory Fence，指重排序时不能把后面的指令重排序到内存屏障之前的位置</li><li>lock前缀，查询IA32手册可知，它的作用是将本处理器的缓存写入了内存，该写入动作也会引起别的处理器或者别的内核无效化（Invalidate）其缓存，这种操作相当于对缓存中的变量做了一次前面介绍Java内存模式中所说的“store和write”操作。</li></ul><blockquote><p>volatile变量对比synchronized关键字或java.util.concurrent包里面的锁 和普通变量</p></blockquote><ul><li> 在某些情况下，volatile的同步机制的性能确实要优于锁，但是由于虚拟机对锁实行的许多消除和优化，使得我们很难确切地说volatile就会比synchronized快上多少。</li><li>：volatile变量读操作的性能消耗与普通变量几乎没有什么差别，但是写操作则可能会慢上一些（内存屏障）</li></ul><blockquote><p>volatile变量的规则</p></blockquote><ul><li>要求在工作内存中，每次使用V前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所做的修改。</li><li>要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改。</li><li>要求volatile修饰的变量不会被指令重排序优化，从而保证代码的执行顺序与程序的顺序相同。</li></ul><h2 id="针对long和double型变量的特殊规则"><a href="#针对long和double型变量的特殊规则" class="headerlink" title="针对long和double型变量的特殊规则"></a>针对long和double型变量的特殊规则</h2><blockquote><p>允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的“long和double的非原子性协定”（Non-Atomic Treatment of double and long Variables）。</p></blockquote><ul><li>在实际开发中，除非该数据有明确可知的线程竞争，否则我们在编写代码时一般不需要因为这个原因刻意把用到的long和double变量专门声明为volatile。</li></ul><h2 id="原子性、可见性与有序性"><a href="#原子性、可见性与有序性" class="headerlink" title="原子性、可见性与有序性"></a>原子性、可见性与有序性</h2><blockquote><p>1.原子性（Atomicity）</p></blockquote><ul><li>由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write这六个,基本数据类型的访问、读写都是具备原子性的。</li><li>更大原子性 lock unlock ,字节码指令monitorenter和monitorexitm,Java代码中就是同步块——synchronized关键字</li></ul><blockquote><p>2.可见性（Visibility）</p></blockquote><ul><li>可见性:当一个线程修改了共享变量的值时，其他线程能够立即得知这个修改</li><li>不管是普通变量还是volatile变量,都是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的。<ul><li>区别是，volatile的特殊规则保证了新值<br>能立即同步到主内存，以及每次使用前立即从主内存刷新。因此我们可以说volatile保证了多线程操作<br>时变量的可见性，而普通变量则不能保证这一点。</li></ul></li><li>synchronized和final 实现可见性<ul><li>同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）”这条规则获得的。</li><li>final关键字的可见性是指：被final修饰的字段在构造器中一旦被初始化完<br>成，并且构造器没有把“this”的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通<br>过这个引用访问到“初始化了一半”的对象），那么在其他线程中就能看见final字段的值<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 省略后续动作</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token comment">// 也可以选择在构造函数中初始化</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 省略后续动作</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>变量i与j都具备可见性，它们无须同步就能被其他线程正确访问。</li></ul></li></ul><blockquote><p>3.有序性（Ordering）</p></blockquote><ul><li>如果在本线程内观察，所有的操作都是有序的；（Within-Thread As-If-Serial<br>Semantics）</li><li>如果在一个线程中观察另一个线程，所有的操作都是无序的。（指“指令重排序”现象和“工作内存与主内存同步延迟”现象。）</li></ul><blockquote><p>synchronized的滥用</p></blockquote><ul><li>“万能”的并发控制，通常会伴随着越大的性能影响</li></ul><h2 id="先行发生原则（重点）"><a href="#先行发生原则（重点）" class="headerlink" title="先行发生原则（重点）"></a>先行发生原则（重点）</h2><blockquote><p>定义</p></blockquote><ul><li>先行发生是Java内存模型中定义的两项操作之间的偏<br>序关系，比如说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到</li></ul><blockquote><p>先行发生原则示例1<br>    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 以下操作在线程A中执行</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 以下操作在线程B中执行</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 以下操作在线程C中执行</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><ul><li>假设线程A中的操作“i=1”先行发生于线程B的操作“j=i”，那我们就可以确定在线程B的操作执行<br>后，变量j的值一定是等于1</li><li>一是根据先行发生原则，“i=1”的结果可以<br>被观察到；二是线程C还没登场，线程A操作结束之后没有其他线程会修改变量i的值。</li></ul><blockquote><p>JMM的“天然先行发生关系”</p></blockquote><ul><li>·程序次序规则（Program Order Rule）：在一个线程内，<strong>按照控制流顺序</strong>，书写在前面的操作先行<br>发生于书写在后面的操作。注意，这里说的是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</li><li>·管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是“同一个锁”，而“后面”是指时间上的先后。</li><li>·volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后。</li><li>·线程启动规则（Thread Start Rule）：Thread对象的start()方法先行发生于此线程的每一个动作。</li><li>·线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread::join()方法是否结束、Thread::isAlive()的返回值等手段检测线程是否已经终止执行。</li><li>·线程中断规则（Thread Interruption Rule）：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通Thread::interrupted()方法检测到是否有中断发生。</li><li>·对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。</li><li>·传递性（Transitivity）：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</li><li>先行发生规则有且只有上面这些</li></ul><blockquote><p>“时间上的先后顺序”与“先行发生”之间有什么不同？</p></blockquote><ul><li>先行发生原则示例2<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>pubilc <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>假设存在线程<span class="token class-name">A</span>和<span class="token class-name">B</span>，线程<span class="token class-name">A</span>先（时间上的先后）调用了<span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>，然后线程<span class="token class-name">B</span>调用了同一个对象的<span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，那么线程<span class="token class-name">B</span>收到的返回值是什么？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>分析<ul><li>由于两个方法分别由线程A和B调用，不在一个线<br>程中，所以程序次序规则在这里不适用；</li><li>由于没有同步块，自然就不会发生lock和unlock操作，所以管程锁定规则不适用；</li><li>由于value变量没有被volatile关键字修饰，所以volatile变量规则不适用；</li><li>后面的线程启动、终止、中断规则和对象终结规则也和这里完全没有关系。</li><li>为没有一个适用的先行发生规则，所以最后一条传递性也无从谈起</li><li>所以尽管线程A在操作时间上先于线程B，但是无法确定线程B中getValue()方法的返回结果（不是线程安全的。）</li></ul></li><li>解决办法（简单）<ul><li>要么把getter/setter方法都定义为synchronized方法，这样就可以套用管程锁定规则</li><li>要么把value定义为volatile变量，由于setter方法对value的修改不依赖value的原值，满足volatile关键字使用场景</li></ul></li><li>结论<ul><li>一个操作“时间上的先发生”不代表这个操作会是“先行发生”。</li></ul></li></ul><blockquote><p>一个操作“先行发生”，是否就能推导出这个操作必定是“时间上的先发生”呢？</p></blockquote><ul><li>先行发生原则示例3 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 以下操作在同一个线程中执行</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>两条赋值语句在同一个线程之中，根据程序次序规则，“int i=1”的操作先行发生于“int j=2”。</li><li>不成立，因为“指令重排序”。“int j=2”的代码完全可能先被处理器执行，这并不影响先行发生原则的正确性，因为我们在这条线程之中没有办法感知到这一点。</li><li>结论<ul><li>时间先后顺序与先行发生原则之间基本没有因果关系，所以我们衡量并发安全问题的时候不要受时间顺序的干扰，一切必须以先行发生原则为准。</li></ul></li></ul><h1 id="Java与线程（虚拟机）"><a href="#Java与线程（虚拟机）" class="headerlink" title="Java与线程（虚拟机）"></a>Java与线程（虚拟机）</h1><h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><blockquote><p>“线程的实现”而不是“Java线程的实现”</p></blockquote><ul><li>注意到Thread类与大部分的Java类库API有着显著差别，它的所有关键方法都被声明为Native。在Java类库API中，一个Native方法往往就意味着这个方法没有使用或无法使用平台无关的手段来实现</li></ul><blockquote><p>实现线程主要有三种方式(通用)</p></blockquote><ul><li>使用内核线程实现的方式也被称为1：1实现。<ul><li>内核线程（Kernel-Level Thread，KLT），这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。</li><li>程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——轻量级进程（Light Weight Process，LWP）通常意义上所讲的线程。每个轻量级进程都由一个内核线程支持。也就是一对一的线程模型<br><img src="/2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/3.png"></li><li>好处<ul><li>每个轻量级进程都成为一个独立的调度单元，即使其中某一个轻量级进程在系统调用中被阻塞了，也不会影响整个进程继续工作。</li></ul></li><li>局限性<ul><li>首先，由于是基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。</li><li>其次，每个轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持轻量级进程的数量是有限的。</li></ul></li></ul></li><li>用户线程实现（使用用户线程实现的方式被称为1：N实现。）<ul><li>广义上来讲，一个线程只要不是内核线程，都可以认为是用户线程（User Thread，UT）的一种。</li><li>狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知到用户线程的存在及如何实现的。</li><li>用户线程的建立、同步、销毁和调度完全在用户态中完成</li><li>好处<ul><li>不需要系统内核支援开销小</li></ul></li><li>劣势<ul><li>没有系统内核的支援，所有的线程操作都需要由用户程序自己去处理。</li><li>诸如“阻塞如何处理”“多处理器系统中如何将线程映射到其他处理器上”这类问题解决起来将会异常困难，甚至有些是不可能实现的。</li></ul></li><li>Golang Erlang使用 （高并发卖点）</li><li>Java、Ruby放弃<br><img src="/2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/4.png"></li></ul></li><li>混合实现<ul><li>用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。</li><li>而操作系统支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级进程来完成，这大大降低了整个进程被完全阻塞的风险。</li><li>Unix操作系统实现（Solaris HP-UX)<br><img src="/2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/5.png"></li></ul></li></ul><blockquote><p>Java线程的实现（JDK3开始主流都是1:1）</p></blockquote><h2 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h2><blockquote><p>线程调度</p></blockquote><ul><li>系统为线程分配处理器使用权的过程<blockquote><p>线程调度的方式</p></blockquote></li><li>协同式（Cooperative Threads-Scheduling）线程调度<ul><li>线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上去。</li><li>好处<ul><li>实现简单，而且由<br>于线程要把自己的事情干完后才会进行线程切换，切换操作对线程自己是可知的，所以一般没有什么<br>线程同步的问题。</li></ul></li><li>坏处<ul><li>线程执行时间不可控<br>制，甚至如果一个线程的代码编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在<br>那里。（很容易崩溃）</li></ul></li></ul></li><li>抢占式（Preemptive Threads-Scheduling）线程调度<ul><li>每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定</li><li>可以让出时间（譬如在Java中，有Thread::yield()方法可以主动让出执行时间），但是不能主动要。</li><li>可以“建议”OS多分少分时间—通过设置线程优先级来完成的（Java 10个级别），在两个线程同时处于Ready状态时，优先级越高的线程越容易被系统选择执行。（不稳定）</li></ul></li></ul><h2 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h2><blockquote><p>Java的6种线程状态 （一个线程只能有且只有其中的一种状态）</p></blockquote><ul><li>·新建（New）：创建后尚未启动的线程处于这种状态。</li><li>·运行（Runnable）：包括操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可<br>能正在执行，也有可能正在等待着操作系统为它分配执行时间。</li><li>·无限期等待（Waiting）：处于这种状态的线程不会被分配处理器执行时间，它们要等待被其他线程显式唤醒。以下方法会让线程陷入无限期的等待状态：<ul><li>■没有设置Timeout参数的Object::wait()方法；</li><li>■没有设置Timeout参数的Thread::join()方法；</li><li>■LockSupport::park()方法。</li></ul></li><li>·限期等待（Timed Waiting）：处于这种状态的线程也不会被分配处理器执行时间，不过无须等待被其他线程显式唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态：<ul><li>■Thread::sleep()方法；</li><li>■设置了Timeout参数的Object::wait()方法；</li><li>■设置了Timeout参数的Thread::join()方法；</li><li>■LockSupport::parkNanos()方法；</li><li>■LockSupport::parkUntil()方法。</li></ul></li><li>·阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是“阻塞状态”在等待着获取到<br>一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时<br>间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。</li><li>·结束（Terminated）：已终止线程的线程状态，线程已经结束执行。</li></ul><blockquote><p>线程状态转换关系<br><img src="/2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/6.png"></p></blockquote><h1 id="Java与协程"><a href="#Java与协程" class="headerlink" title="Java与协程"></a>Java与协程</h1><h2 id="内核线程的局限"><a href="#内核线程的局限" class="headerlink" title="内核线程的局限"></a>内核线程的局限</h2><ul><li>传统的Java Web服务器的线程池的容量通常在几十个到两百之间，当程序员把数以百万计的请求往线程池里面灌时，系统即使能处理得过来，但其中的切换损耗也是相当可观的。</li></ul><h2 id="协程的复苏"><a href="#协程的复苏" class="headerlink" title="协程的复苏"></a>协程的复苏</h2><blockquote><p>有栈协程、无栈协程</p></blockquote><ul><li>有栈协程<ul><li>由于最初多数的用户线程是被设计成协同式调度（Cooperative Scheduling）的，所以它有了一个别名——“协程”（Coroutine）。</li><li>又由于这时候的协程会完整地做调用栈的保护、恢复工作，所以今天也被称为“有栈协程”（Stackfull Coroutine）</li></ul></li><li>无栈协程<ul><li>本质上<br>是一种有限状态机，状态保存在闭包里，自然比有栈协程恢复调用栈要轻量得多，但功能也相对更有<br>限。</li></ul></li></ul><blockquote><p>线程 协程容量对比</p></blockquote><ul><li>64位Linux上HotSpot的线程栈容量默认是1MB，此外内核数据结构（Kernel Data Structures）还会额外消耗16KB内存。与之相对的，一个协程的栈通常在几百个字节到几KB之间</li><li>所以Java虚拟机里线程池容量达到两百就已经不算<br>小了，而很多支持协程的应用中，同时并存的协程数量可数以十万计。</li></ul><blockquote><p>协程的缺点</p></blockquote><ul><li>需要在应用层面实现的内容（调用栈、调度器这些）特别多</li><li>很多语言和框架中会被设计成协同式调度</li></ul><h2 id="Java的解决方案-（纤程（Fiber））"><a href="#Java的解决方案-（纤程（Fiber））" class="headerlink" title="Java的解决方案 （纤程（Fiber））"></a>Java的解决方案 （纤程（Fiber））</h2><blockquote><p>一种典型的有栈协程</p></blockquote><blockquote><p>目的</p></blockquote><ul><li>Loom项目背后的意图是重新提供对用户线程的支持，但与过去的绿色线程不同，这些新功能不是为了取代当前基于操作系统的线程实现，而是会有两个并发编程模型在Java虚拟机中并存，可以在程序中同时使用。<br><img src="/2020/12/29/deepinjvm-part05-heconcurrency-chap12-javamemorymodel/7.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part04-AdvancedTopic-chap16-JavaMemoryModel</title>
      <link href="2020/12/29/java-concurrency-in-pratice-part04-advancedtopic-chap16-javamemorymodel/"/>
      <url>2020/12/29/java-concurrency-in-pratice-part04-advancedtopic-chap16-javamemorymodel/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是内存模型"><a href="#什么是内存模型" class="headerlink" title="什么是内存模型"></a>什么是内存模型</h1>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-part04-CodeComplieOpt-chap11-backEndCompileOpt</title>
      <link href="2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/"/>
      <url>2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><blockquote><p>编译后端的概念</p></blockquote><ul><li>字节码看作是程序语言的一种中间表示形式（Intermediate Representation，IR）的话，<br>那编译器无论在何时、在何种状态下把Class文件转换成与本地基础设施（硬件指令集、操作系统）相关的二进制机器码，它都可以视为整个编译过程的后端</li></ul><blockquote><p>后端编译器的作用</p></blockquote><ul><li>虽然提前编译器抑或即时编译器，都不是Java虚拟机必需的组成部分</li><li>但是，后端编译器编译性能的好坏、代码优化质量的高低却是衡量一款商用虚拟机优秀与否的关键指标<br>之一，它们也是商业Java虚拟机中的核心，是最能体现技术水平与价值的功能。</li></ul><blockquote><p>HotSpot虚拟机 （之后的讨论）</p></blockquote><ul><li>但主流Java虚拟机中后端编译器的行为会有很多相似相通之处，因此对其他虚拟机来说也具备一定的类比参考价值。</li></ul><h1 id="即时编译器（Just-In-Time，JIT）"><a href="#即时编译器（Just-In-Time，JIT）" class="headerlink" title="即时编译器（Just In Time，JIT）"></a>即时编译器（Just In Time，JIT）</h1><blockquote><p>虚拟机执行程序的方法</p></blockquote><ul><li>目前主流的两款商用Java虚拟机（HotSpot、OpenJ9）里，Java程序最初都是通过解释器（Interpreter）进行解释执行的</li></ul><blockquote><p>即时编译器的作用</p></blockquote><ul><li>当虚拟机发现某个方法或代码块的运行特别频繁，就会把这些代码认定为“热点代码”（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成本地机器码，并以各种手段尽可能地进行代码优化</li><li>运行时完成这个任务的后端编译器被称为即时编译器。</li></ul><h2 id="解释器与编译器"><a href="#解释器与编译器" class="headerlink" title="解释器与编译器"></a>解释器与编译器</h2><blockquote><p>同时共存</p></blockquote><ul><li>目前主流的商用Java虚拟机，譬如HotSpot、OpenJ9等，内部都同时包含解释器与编译器</li></ul><blockquote><p>解释器与编译器的优缺点</p></blockquote><ul><li>当程序需要迅速启动和执行的时候，解释器可以首先发挥作用，省去编译的时间，立即运行。</li><li>当程序启动后，随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地代码，这样可以减少解释器的中间损耗，获得更高的执行效率。</li><li>当程序运行环境中内存资源限制较大，可以使用解释执行<br>节约内存（如部分嵌入式系统中和大部分的JavaCard应用中就只有解释器的存在），反之可以使用编译执行来提升效率。</li></ul><blockquote><p>解释器还可以作为编译器激进优化时后备的“逃生门”</p></blockquote><ul><li>（如果情况允许，HotSpot虚拟机中也会采用不进行激进优化的客户端编译器充当“逃生门”的角色）<br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/1.png"></li><li>当激进优化的假设不成立，如加载了新类以后，类型继承结构出现变化、出现“罕见陷阱”（Uncommon Trap）时可以通<br>过逆优化（Deoptimization）退回到解释状态继续执行</li></ul><blockquote><p>HotSpot虚拟机内置的即时编译器</p></blockquote><ul><li>“客户端编译器”（Client Compiler）或者简称为C1编译器</li><li>和“服务端编译器”（Server Compiler），C2编译器</li><li>JDK10加入 长期目标是代替C2的Graal编译器。（Graal编译器目前还处于实验状态）</li></ul><blockquote><p>分层编译工作模式之前，选择编译器</p></blockquote><ul><li>HotSpot虚拟机会根据自身版本与宿主机器的硬件性能自动选择运行模式，用户也可以使用“-client”或“-server”参数去强制指定虚拟机运行在客户端模式还是服务端模式。</li></ul><blockquote><p>解释器与编译器搭配的执行模式</p></blockquote><ul><li>“混合模式”（Mixed Mode）： 默认</li><li>“解释模式”（Interpreted Mode）：“-Xint”强制</li><li>“编译模式”（Compiled Mode）：“-Xcomp”，优先采用编译方式执行程序，但是解释器仍然要在编译无法进行的情况下介入执行过程。<br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/2.png"></li></ul><h3 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h3><blockquote><p>分层编译的原因</p></blockquote><ul><li>在程序启动响应速度与运行效率之间达到最佳平衡</li></ul><blockquote><p>分层编译的层次（JDK7，虚拟机可调整）</p></blockquote><ul><li>·第0层。程序纯解释执行，并且解释器不开启性能监控功能（Profiling）。</li><li>·第1层。使用客户端编译器将字节码编译为本地代码来运行，进行简单可靠的稳定优化，不开启<br>性能监控功能。</li><li>·第2层。仍然使用客户端编译器执行，仅开启方法及回边次数统计等有限的性能监控功能。</li><li>·第3层。仍然使用客户端编译器执行，开启全部性能监控，除了第2层的统计信息外，还会收集如<br>分支跳转、虚方法调用版本等全部的统计信息。</li><li>·第4层。使用服务端编译器将字节码编译为本地代码，相比起客户端编译器，服务端编译器会启<br>用更多编译耗时更长的优化，还会根据性能监控信息进行一些不可靠的激进优化。</li></ul><blockquote><p>分层编译的的工作方式和好处</p></blockquote><ul><li>解释器、客户端编译器和服务端编译器就会同时工作</li><li>热点代码都可能会被多次编译，用客户端编译器获取更高的编译速度，用服务端编译器来获取更好的编译质量</li><li>解释执行的时候也无须额外承担收集性能监控信息的任务</li><li>而在服务端编译器采用高复杂度的优化算法时，客户端编译器可先采用简单优化来为它争取更多的编译时间。<br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/3.png"></li></ul><h2 id="编译对象与触发条件"><a href="#编译对象与触发条件" class="headerlink" title="编译对象与触发条件"></a>编译对象与触发条件</h2><blockquote><p>编译对象</p></blockquote><ul><li>热点代码主要有两类，包括：<ul><li>·被多次调用的方法。</li><li>·被多次执行的循环体。</li></ul></li><li>.编译的目标对象都是整个方法体</li></ul><blockquote><p>触发条件</p></blockquote><ul><li>目前主流的热点探测判定方式有两种<ul><li>J9·基于采样的热点探测（Sample Based Hot Spot Code Detection）。周期性地检查各个线程的调用栈顶，如果发现某个（或某些）方法经常出现在栈顶，那这个方法就是“热点方法”。<ul><li>好处是实现简单高效，还可以很容易地获取方法调用关系（将调用堆栈展开即可）</li><li>缺点是很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</li></ul></li><li>HotSpot·基于计数器的热点探测（Counter Based Hot Spot Code Detection）。为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阈值就认为它是“热点方法”。<ul><li>好处是它的统计结果相对来说更加精确严谨。</li><li>缺点是实现起来要麻烦一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系</li></ul></li></ul></li></ul><blockquote><p>HotSpot的计数器实现</p></blockquote><ul><li>方法调用计数器（Invocation Counter）：方法被调用的次数<ul><li>它的默认阈值在客户端模式下是1500次，在服务端模式下是10000次，可参数设定</li><li>是一个相对的执行频<br>率，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让<br>它提交给即时编译器编译，那该方法的调用计数器就会被减少一半（半衰周期）<br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/4.png"></li></ul></li><li>回边计数器（Back Edge Counter）：统计一个方法中循环体代码执行的次数 （遇到控制流向后跳转的指令就称为“回边（Back Edge）”） （应当是回边的次数而不是循环次数，因为并非所有的循环都是回边，如空循环实际上就可以视为自己跳转到自己的过程，因此并不算作控制流向后跳转，也不会被回边计数器统计。）<ul><li>它的默认阈值在客户端模式下是9。33×1500=13995次，在服务端模式下是(140-33)×0.01×10000=10700次，可参数设定</li><li>无计数热度衰减<br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/5.png"></li></ul></li></ul><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><blockquote><p>未完成编译之前，都仍然将按照解释方式继续执行代码</p></blockquote><blockquote><p>客户端编译器:相对简单快速的三段式编译器</p></blockquote><ul><li>在第一个阶段，一个平台独立的前端将字节码构造成一种高级中间代码表示（High-LevelIntermediate Representation，HIR，即与目标机器指令集无关的中间表示）</li><li>在第二个阶段，一个平台相关的后端从HIR中产生低级中间代码表示（Low-Level IntermediateRepresentation，LIR，即与目标机器指令集相关的中间表示）</li><li>最后的阶段是在平台相关的后端使用线性扫描算法（Linear Scan Register Allocation）在LIR上分配<br>寄存器，并在LIR上做窥孔（Peephole）优化，然后产生机器代码。<br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/6.png"></li></ul><blockquote><p>服务端编译器:专门面向服务端的典型应用场景，几乎能达到GNU C++编译器使用-O2参数时的优化强度。</p></blockquote><ul><li>它会执行大部分经典的优化动作，如：无用代码消除（Dead Code Elimination）、循环展开<br>（Loop Unrolling）、循环表达式外提（Loop Expression Hoisting）、消除公共子表达式（Common<br>Subexpression Elimination）、常量传播（Constant Propagation）、基本块重排序（Basic Block<br>Reordering）等，还会实施一些与Java语言特性密切相关的优化技术，如范围检查消除（Range Check<br>Elimination）、空值检查消除（Null Check Elimination，不过并非所有的空值检查消除都是依赖编译器<br>优化的，有一些是代码运行过程中自动优化了）等。</li><li>服务端编译采用的寄存器分配器是一个全局图着色分配器，它可以充分利用某些处理器架构（如<br>RISC）上的大寄存器集合。以即时编译的标准来看，服务端编译器无疑是比较缓慢的，但它的编译速<br>度依然远远超过传统的静态优化编译器</li></ul><h2 id="实战：查看及分析即时编译结果"><a href="#实战：查看及分析即时编译结果" class="headerlink" title="实战：查看及分析即时编译结果"></a>实战：查看及分析即时编译结果</h2><blockquote><p>目的：通过实战说明如何从外部观察Java虚拟机的即时编译行为。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> NUM <span class="token operator">=</span> <span class="token number">15000</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这个空循环用于后面演示JIT代码优化过程</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">calcSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">calcSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>-XX：+PrintCompilation要求虚拟机在即时编译时将被编译成本地代码的方法名称打印出来(“%”的输出说明是由回边计数器触发的栈上替换编译)<pre class="line-numbers language-java" data-language="java"><code class="language-java">VM option <span class="token string">'+PrintCompilation'</span>    <span class="token number">310</span>   <span class="token number">1</span>       <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token operator">::</span><span class="token function">charAt</span> <span class="token punctuation">(</span><span class="token number">33</span> bytes<span class="token punctuation">)</span>    <span class="token number">329</span>   <span class="token number">2</span>       <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">calcSum</span> <span class="token punctuation">(</span><span class="token number">26</span> bytes<span class="token punctuation">)</span>    <span class="token number">329</span>   <span class="token number">3</span>       <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">doubleValue</span> <span class="token punctuation">(</span><span class="token number">4</span> bytes<span class="token punctuation">)</span>    <span class="token number">332</span>   <span class="token number">1</span><span class="token operator">%</span>      <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">main</span> @ <span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">20</span> bytes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>加上参数-XX：+PrintInlining要求虚拟机输出方法内联信息<pre class="line-numbers language-java" data-language="java"><code class="language-java">VM option <span class="token string">'+PrintCompilation'</span>VM option <span class="token string">'+PrintInlining'</span>    <span class="token number">273</span>   <span class="token number">1</span>       <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token operator">::</span><span class="token function">charAt</span> <span class="token punctuation">(</span><span class="token number">33</span> bytes<span class="token punctuation">)</span>    <span class="token number">291</span>   <span class="token number">2</span>       <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">calcSum</span> <span class="token punctuation">(</span><span class="token number">26</span> bytes<span class="token punctuation">)</span>      @   <span class="token number">9</span>       <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">doubleValue</span>  inline <span class="token punctuation">(</span>hot<span class="token punctuation">)</span>    <span class="token number">294</span>   <span class="token number">3</span>       <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">doubleValue</span> <span class="token punctuation">(</span><span class="token number">4</span> bytes<span class="token punctuation">)</span>    <span class="token number">295</span>   <span class="token number">1</span><span class="token operator">%</span>      <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">main</span> @ <span class="token number">5</span> <span class="token punctuation">(</span><span class="token number">20</span> bytes<span class="token punctuation">)</span>      @   <span class="token number">5</span>       <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">calcSum</span>  inline <span class="token punctuation">(</span>hot<span class="token punctuation">)</span>      @   <span class="token number">9</span>       <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>jit<span class="token punctuation">.</span></span>Test</span><span class="token operator">::</span><span class="token function">doubleValue</span>  inline <span class="token punctuation">(</span>hot<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>内联的意义：再次执行main()方法的时候（举例而已，<br>main()方法当然不会运行两次），calcSum()和doubleValue()方法是不会再被实际调用的，没有任何方法分派的开销，它们的代码逻辑都被直接内联到main()方法里</li></ul><blockquote><p>反汇编生成的机器码</p></blockquote><ul><li>可以下载或自己编译出与自己机器相符合的反汇编适配器，之后将其放置在JAVA_HOME/lib/amd64/server下 。XX：+PrintAssembly<ul><li>需要FastDebug或SlowDebug优化级别的HotSpot虚拟机才能直接支持，如果使用Product版的虚拟机，则需要加入参数-XX：+UnlockDiagnosticVMOptions打开虚拟机诊断模式。</li></ul></li><li>如果没有HSDIS插件支持，也可以使用-XX：+PrintOptoAssembly（用于服务端模式的虚拟机）或-XX：+PrintLIR（用于客户端模式的虚拟机）来输出比较接近最终结果的中间代码表示</li></ul><blockquote><p>本地代码的生成过程</p></blockquote><ul><li>-XX：+PrintCFGToFile（用于客户端编译器）或-XX：PrintIdealGraphFile（用于服务端编译器）要求<br>Java虚拟机将编译过程中各个阶段的数据（譬如对客户端编译器来说包括字节码、HIR生成、LIR生成、寄存器分配过程、本地代码生成等数据）输出到文件中。</li></ul><blockquote><p>分析工具</p></blockquote><ul><li>Java HotSpot Client Compiler<br>Visualizer[4]（用于分析客户端编译器）或Ideal Graph Visualizer[5]（用于分析服务端编译器）</li></ul><blockquote><p>观察空循环是否优化掉</p></blockquote><ul><li>用分析工具展开方法块</li></ul><h1 id="提前编译器（Ahead-Of-Time，AOT）"><a href="#提前编译器（Ahead-Of-Time，AOT）" class="headerlink" title="提前编译器（Ahead Of Time，AOT）"></a>提前编译器（Ahead Of Time，AOT）</h1><blockquote><p>目的</p></blockquote><ul><li>只要能获得更好的执行性能，什么平台中立性、字节膨胀、动态扩展，一切皆可舍弃<ul><li>字节膨胀：提前编译的本地二进制码的体积会明显大于字节码的体积。</li><li>动态扩展：提前编译通常要求程序是封闭的，不能在外部动态加载新的字节码。</li></ul></li></ul><blockquote><p>提取编译的两种分支</p></blockquote><ul><li>一条分支是做与传统C、C++编译器类似的，在程序运行之前把程序代码编译成机器码的静态翻译工作；<ul><li>针对即时编译的缺点：消耗的时间都是原本可用于程序运行的时间，消耗的运算资源都是原本可用于程序运行的资源</li><li>在编译过程中最耗时的优化措施之一是通过“过程间分析”（Inter-Procedural Analysis，IPA),但如果是<br>在程序运行之前进行的静态编译，这些耗时的优化就可以放心大胆地进行了</li></ul></li><li>另外一条分支是把原本即时编译器在运行时要做的编译工作提前做好并保存下来，下次运行到这些代码（譬如公共库代码在被同一台机器其他Java进程使用）时直接把它加载进来使用<ul><li>本质是给即时编译器做缓存加速，去改善Java程序的启动时间 （商用支持 JDK6开始）</li><li>JDK9 Jaotc提前编译器：基于Graal编译<br>器实现的新工具，目的是让用户可以针对目标机器，为应用程序进行提前编译。</li></ul></li></ul><blockquote><p>即时编译器(JIT)相对于提前编译器(AOT)的天然优势。</p></blockquote><ul><li>首先，是性能分析制导优化（Profile-Guided Optimization，PGO）。<ul><li>在动态运行时却能看出它们具有非常明显的偏好性。<br>如果一个条件分支的某一条路径执行特别频繁，而其他路径鲜有问津，那就可以把热的代码集中放到<br>一起，集中优化和分配更好的资源（分支预测、寄存器、缓存等）给它。</li></ul></li><li>其次，是激进预测性优化（Aggressive Speculative Optimization），这也已经成为很多即时编译优化措施的基础。<ul><li>静态优化无论如何都必须保证优化后所有的程序外部可见影响（不仅仅是执行结果）与优化前是等效的</li><li>性能监控信息<br>能够支持它做出一些正确的可能性很大但无法保证绝对正确的预测判断，就已经可以大胆地按照高概<br>率的假设进行优化，万一真的走到罕见分支上，大不了退回到低级编译器甚至解释器上去执行，并不<br>会出现无法挽救的后果。</li></ul></li><li>最后，是链接时优化（Link-Time Optimization，LTO），Java语言天生就是动态链接的，一个个Class文件在运行期被加载到虚拟机内存当中，然后在即时编译器里产生优化后的本地代码<ul><li>C、C++的程序要调用某个动态链接库的某个方法，就会出现很明显的边界隔阂，还难以优化。</li><li>是因为主程序与动态链接库的代码在它们编译时是完全独立的，两者各自编译、优化自己的代码。</li></ul></li></ul><h2 id="实战：Jaotc的提前编译"><a href="#实战：Jaotc的提前编译" class="headerlink" title="实战：Jaotc的提前编译"></a>实战：Jaotc的提前编译</h2><blockquote><p>HelloWorld 静态链接库</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ javac <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span>java$ java <span class="token class-name">HelloWorld</span><span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span>$ jaotc <span class="token operator">--</span>output libHelloWorld<span class="token punctuation">.</span>so <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span>通过以上命令，就生成了一个名为libHelloWorld<span class="token punctuation">.</span>so的库，我们可以使用<span class="token class-name">Linux</span>的ldd命令来确认这是否是一个静态链接库，使用mn命令来确认其中是否包含了<span class="token class-name">HelloWorld</span>的构造函数和<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法的入口信息，操作如下：$ ldd libHelloWorld<span class="token punctuation">.</span>sostatically linked$ nm libHelloWorld<span class="token punctuation">.</span>so……<span class="token number">0000000000002</span>a20 t <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token number">0000000000002</span>b20 t <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>……现在我们就可以使用这个静态链接库而不是<span class="token class-name">Class</span>文件来输出<span class="token class-name">HelloWorld</span>了：java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">AOTLibrary</span><span class="token operator">=</span><span class="token punctuation">.</span>/libHelloWorld<span class="token punctuation">.</span>so <span class="token class-name">HelloWorld</span><span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>编译java.base模块成类似的静态链接库</p></blockquote><ul><li>排除不支持提取编译的方法<pre class="line-numbers language-java" data-language="java"><code class="language-java"># jaotc<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StackOverflowError</span>exclude <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span></span>LocaleNames</span><span class="token punctuation">.</span><span class="token function">getContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>exclude <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span></span>TimeZoneNames</span><span class="token punctuation">.</span><span class="token function">getContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>exclude <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>cldr<span class="token punctuation">.</span></span>LocaleNames</span><span class="token punctuation">.</span><span class="token function">getContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>exclude sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>LocaleNames_<span class="token punctuation">.</span>*<span class="token punctuation">.</span>getContents\<span class="token punctuation">(</span>\<span class="token punctuation">)</span>\<span class="token punctuation">[</span>\<span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>exclude sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>LocaleNames_<span class="token punctuation">.</span>*_<span class="token punctuation">.</span>*<span class="token punctuation">.</span>getContents\<span class="token punctuation">(</span>\<span class="token punctuation">)</span>\<span class="token punctuation">[</span>\<span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>exclude sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>TimeZoneNames_<span class="token punctuation">.</span>*<span class="token punctuation">.</span>getContents\<span class="token punctuation">(</span>\<span class="token punctuation">)</span>\<span class="token punctuation">[</span>\<span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span>exclude sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>TimeZoneNames_<span class="token punctuation">.</span>*_<span class="token punctuation">.</span>*<span class="token punctuation">.</span>getContents\<span class="token punctuation">(</span>\<span class="token punctuation">)</span>\<span class="token punctuation">[</span>\<span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span># <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Error</span><span class="token operator">:</span> <span class="token class-name">Trampoline</span> must not be defined by the bootstrap classloaderexclude <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Trampoline</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>exclude <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>Trampoline</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span>reflect<span class="token operator">/</span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span><span class="token punctuation">;</span># JVM assertsexclude <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span></span>AESWrapCipher</span><span class="token punctuation">.</span><span class="token function">engineUnwrap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">BLjava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">Ljava</span><span class="token operator">/</span>security<span class="token operator">/</span><span class="token class-name">Key</span><span class="token punctuation">;</span>exclude sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>*exclude <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>RegisteredDomain</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span># <span class="token class-name">Huge</span> methodsexclude <span class="token class-name"><span class="token namespace">jdk<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>module<span class="token punctuation">.</span></span>SystemModules</span><span class="token punctuation">.</span><span class="token function">descriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token keyword">module</span><span class="token operator">/</span><span class="token class-name">ModuleDescriptor</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>开始进行提前编译，使用的命令如下所示：<pre class="line-numbers language-java" data-language="java"><code class="language-java">jaotc <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedOops</span> <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseG1GC</span> <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span><span class="token class-name">Xmx4g</span><span class="token operator">--</span>compile<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">-</span>tiered <span class="token operator">--</span>info <span class="token operator">--</span>compile<span class="token operator">-</span>commands java<span class="token punctuation">.</span>base<span class="token operator">-</span>list<span class="token punctuation">.</span>txt<span class="token operator">--</span>output libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so <span class="token operator">--</span><span class="token keyword">module</span> <span class="token namespace">java<span class="token punctuation">.</span>base</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>由于Jaotc是基于Graal编译器开发的，所以现在ZGC和<br>Shenandoah收集器还不支持Graal编译器，自然它们在Jaotc上也是无法使用的。目前Jaotc只支持G1和Parallel（PS+PS Old）两种垃圾收集器。结果：<pre class="line-numbers language-java" data-language="java"><code class="language-java">$ jaotc <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedOops</span> <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseG1GC</span> <span class="token operator">-</span><span class="token class-name">J</span><span class="token operator">-</span><span class="token class-name">Xmx4g</span> <span class="token operator">--</span>compile<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">-</span>tiered <span class="token operator">--</span>info <span class="token operator">--</span>compile<span class="token operator">-</span>commands java<span class="token punctuation">.</span>base<span class="token operator">-</span>list<span class="token punctuation">.</span>txt <span class="token operator">--</span>output libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so <span class="token operator">--</span><span class="token keyword">module</span> <span class="token namespace">java<span class="token punctuation">.</span>base</span><span class="token class-name">Compiling</span> libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">6177</span> classes found <span class="token punctuation">(</span><span class="token number">335</span> ms<span class="token punctuation">)</span><span class="token number">55845</span> methods total<span class="token punctuation">,</span> <span class="token number">49575</span> methods <span class="token keyword">to</span> <span class="token namespace">compile</span> <span class="token punctuation">(</span><span class="token number">1037</span> ms<span class="token punctuation">)</span><span class="token class-name">Compiling</span> <span class="token keyword">with</span> <span class="token number">4</span> threads……<span class="token number">49575</span> methods compiled<span class="token punctuation">,</span> <span class="token number">0</span> methods failed <span class="token punctuation">(</span><span class="token number">138821</span> ms<span class="token punctuation">)</span><span class="token class-name">Parsing</span> compiled code <span class="token punctuation">(</span><span class="token number">906</span> ms<span class="token punctuation">)</span><span class="token class-name">Processing</span> metadata <span class="token punctuation">(</span><span class="token number">10867</span> ms<span class="token punctuation">)</span><span class="token class-name">Preparing</span> stubs binary <span class="token punctuation">(</span><span class="token number">0</span> ms<span class="token punctuation">)</span><span class="token class-name">Preparing</span> compiled binary <span class="token punctuation">(</span><span class="token number">103</span> ms<span class="token punctuation">)</span><span class="token class-name">Creating</span> binary<span class="token operator">:</span> libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>o <span class="token punctuation">(</span><span class="token number">2719</span> ms<span class="token punctuation">)</span><span class="token class-name">Creating</span> shared library<span class="token operator">:</span> libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so <span class="token punctuation">(</span><span class="token number">5812</span> ms<span class="token punctuation">)</span><span class="token class-name">Total</span> time<span class="token operator">:</span> <span class="token number">163609</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用提前编译版本的java.base模块来运行Java程序<pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">AOTLibrary</span><span class="token operator">=</span>java_base<span class="token operator">/</span>libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so<span class="token punctuation">,</span><span class="token punctuation">.</span>/libHelloWorld<span class="token punctuation">.</span>so <span class="token class-name">HelloWorld</span><span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>查看那些方法使用提取编译 -XX：+PrintAOT<ul><li>不使用提前编译版本的java.base模块只有HelloWord的构造函数和main()方法是提前编译版本的：<pre class="line-numbers language-java" data-language="java"><code class="language-java">$ java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintAOT</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">AOTLibrary</span><span class="token operator">=</span><span class="token punctuation">.</span>/libHelloWorld<span class="token punctuation">.</span>so <span class="token class-name">HelloWorld</span> <span class="token number">11</span>    <span class="token number">1</span>     loaded    <span class="token punctuation">.</span>/libHelloWorld<span class="token punctuation">.</span>so  aot library<span class="token number">105</span>    <span class="token number">1</span>     aot<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span>   <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token number">105</span>    <span class="token number">2</span>     aot<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span>   <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span><span class="token class-name">Hello</span> <span class="token class-name">World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>加入libjava.base-coop.so，那使用到的几乎所有的标准Java SE API都是被提前编译好的，输出如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token class-name">AOTLibrary</span><span class="token operator">=</span>java_base<span class="token operator">/</span>libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so<span class="token punctuation">,</span><span class="token punctuation">.</span>/libHelloWorld<span class="token punctuation">.</span>so <span class="token class-name">HelloWorld</span><span class="token class-name">Hello</span> <span class="token class-name">World</span><span class="token operator">!</span>    <span class="token number">13</span>    <span class="token number">1</span>     loaded    java_base<span class="token operator">/</span>libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so  aot library    <span class="token number">13</span>    <span class="token number">2</span>     loaded    <span class="token punctuation">.</span>/libHelloWorld<span class="token punctuation">.</span>so  aot library<span class="token punctuation">[</span><span class="token class-name">Found</span>  <span class="token punctuation">[</span><span class="token class-name">Z</span>  in  java_base<span class="token operator">/</span>libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so<span class="token punctuation">]</span>…… <span class="token comment">// 省略其他输出</span><span class="token punctuation">[</span><span class="token class-name">Found</span>  <span class="token punctuation">[</span><span class="token class-name">J</span>  in  java_base<span class="token operator">/</span>libjava<span class="token punctuation">.</span>base<span class="token operator">-</span>coop<span class="token punctuation">.</span>so<span class="token punctuation">]</span>    <span class="token number">31</span>    <span class="token number">1</span>     aot<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span>   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>    <span class="token number">31</span>    <span class="token number">2</span>     aot<span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">]</span>   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span>…… <span class="token comment">// 省略其他输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>jaotc的不足</p></blockquote></li></ul></li><li>仍难以直接编译SpringBoot、MyBatis这些常见的第三<br>方工具库，甚至在众多Java标准模块中，能比较顺利编译的也只有java.base模块而已。</li></ul><blockquote><p>其他的提前编译器</p></blockquote><ul><li>Jaotc做的提前编译属于本节开头所说的“第二条分支”，即做即时编译的缓存；而Substrate VM则是选择的“第<br>一条分支”，做的是传统的静态提前编译</li></ul><h1 id="编译器优化技术"><a href="#编译器优化技术" class="headerlink" title="编译器优化技术"></a>编译器优化技术</h1><h2 id="优化技术概览"><a href="#优化技术概览" class="headerlink" title="优化技术概览"></a>优化技术概览</h2><blockquote><p>参考连接<a href="https://wiki.openjdk.java.net/display/HotSpot/PerformanceTacticIndex%E3%80%82">https://wiki.openjdk.java.net/display/HotSpot/PerformanceTacticIndex。</a><br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/7.png"><br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/8.png"><br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/9.png"><br><img src="/2020/12/26/deepinjvm-part04-codecomplieopt-chap11-backendcompileopt/10.png"></p></blockquote><blockquote><p>优化的例子</p></blockquote><ul><li>优化前的原始代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    y <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ...do stuff...</span>    z <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>优化的地方<ul><li>首先，第一个要进行的优化是方法内联，主要目的有两个：<ul><li>一是去除方法调用的成本（如查找方法版本、建立栈帧等）；</li><li>二是为其他优化建立良好的基础。方法内联膨胀之后可以便于在更大范围上进行后续的优化手段，可<br>以获取更好的优化效果。（各种编译器一般都会把内联优化放在优化序列最靠前的位置）</li><li>内联后的代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    y <span class="token operator">=</span> b<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment">// ...do stuff...</span>    z <span class="token operator">=</span> b<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    sum <span class="token operator">=</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>第二步进行冗余访问消除（Redundant Loads Elimination） <ul><li>假设中间操作不会改变b.value的值，就可以把“z=b.value”替换为“z=y”，不再去访问对象b的局部变量</li><li>把b.value看作一个表达式，那么也可以把这项优化看作一种公共子表达式消除（Common Subexpression Elimination）</li><li>冗余存储消除的代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    y <span class="token operator">=</span> b<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment">// ...do stuff...</span>    z <span class="token operator">=</span> y<span class="token punctuation">;</span>    sum <span class="token operator">=</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>第三步进行复写传播（Copy Propagation）<ul><li>因为这段程序的逻辑之中没有必要使用一个额外的变量z，它与变量y是完全相等的，因此我们可以使用y来代替z。</li><li>冗余存储消除的代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    y <span class="token operator">=</span> b<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment">// ...do stuff...</span>    y <span class="token operator">=</span> y<span class="token punctuation">;</span>    sum <span class="token operator">=</span> y <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>第四步进行无用代码消除（Dead Code Elimination）<ul><li>无用代码可能是永远不会被执行的代码，也<br>可能是完全没有意义的代码。因此它又被很形象地称为“Dead Code”</li><li>冗余存储消除的代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    y <span class="token operator">=</span> b<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment">// ...do stuff...</span>    sum <span class="token operator">=</span> y <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>四项有代表性的优化技术</p></blockquote></li></ul></li></ul></li><li>·最重要的优化技术之一：方法内联。</li><li>·最前沿的优化技术之一：逃逸分析。</li><li>·语言无关的经典优化技术之一：公共子表达式消除。</li><li>·语言相关的经典优化技术之一：数组边界检查消除。</li></ul><h2 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h2><blockquote><p>重要性</p></blockquote><ul><li>编译器最重要的优化手段</li><li>例子：分开来看，foo()和testInline()两个方法里面的操作都有可能是有意义的。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do something"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testInline</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>内联的难点</p></blockquote></li><li>只有使用invokespecial指令调用的私有方法、实例构造器、父类方法和使用invokestatic指令调用的静态方法才会<br>在编译期进行解析。</li></ul><blockquote><p>解决虚方法的内联问题</p></blockquote><ul><li>Java虚拟机首先引入了一种名为类型继承关系分析（Class Hierarchy Analysis，CHA）的技术<ul><li>整个应用程序范围内的类型分析技术，用于确定在目前已加载的类中，某个接口是否有多于一种的实现、某个类是否存在子类、某个子类是否覆盖了父类的某个虚方法等信息。</li><li>如果是非虚方法，那么直接进行内联就可以了，这种的内联是有百分百安全保障的；</li><li>如果遇到虚方法，则会向CHA查询此方法在当前程序状态下是否真的有多个目标版本可供选择。<ul><li>只有一个版本，那就可以假设“应用程序的全貌就是现在运行的这个样子”来进行内联，这种内联被称为守护内联（Guarded Inlining）。</li><li>由于Java程序是动态连接的，可能会加载到新的类型从而改变CHA结论，这种内联属于激进预测性优化</li><li>多个版本的目标方法可供选择，那即时编译器还将进行最后一次努力，使用内联缓存（Inline Cache）的方式来缩减开销。（缓存记录方法调用接收者版本）</li></ul></li></ul></li></ul><h2 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h2><blockquote><p>定义</p></blockquote><ul><li>目前Java虚拟机中比较前沿的优化技术，它与类型继承关系分析一样，并不是直接优化代码的手段，而是为其他优化措施提供依据的分析技术。</li></ul><blockquote><p>原理</p></blockquote><ul><li>方法逃逸：当一个对象在方法里面被定义后，它可能被外部<br>方法所引用，例如作为调用参数传递到其他方法中</li><li>线程逃逸：有可能被外部线程访问到，譬如赋值给可以在其他线程中访问的实例变量</li><li>不同的逃逸程度：从不逃逸、方法逃逸到线程逃逸，对象由低到高的不同逃逸程度。</li></ul><blockquote><p>逃逸程度低的优化</p></blockquote><ul><li>栈上分配（Stack Allocations）：那大量的对象就会随着方法的结束而自动销毁了，垃圾收集子系统的压力将会下降很多。<strong>栈上分配可以支持方法逃逸，但不能支持线程逃逸。</strong> （HotSpot 未开启）</li><li>标量替换（Scalar Replacement）：假设逃逸分析，证明一个对象不会被方法外部访问，并且这个对象可以被拆散，那么程序真正执行的时候将可能不去创建这个对象，而改为直接创建它的若干个被这个方法使用的成员变量来代替。<strong>但对逃逸程度的要求更高，它不允许对象逃逸出方法范围内。</strong></li><li>·同步消除（Synchronization Elimination）：线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以安全地消除掉。</li></ul><blockquote><p>模拟逃逸分析的例子</p></blockquote><ul><li>完全未优化的代码</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> xx <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">Point</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一步，将Point的构造函数和getX()方法进行内联优化：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 步骤1：构造函数内联后的样子</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> xx <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">Point</span> p <span class="token operator">=</span> <span class="token function">point_memory_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 在堆中分配P对象的示意方法</span>    p<span class="token punctuation">.</span>x <span class="token operator">=</span> xx<span class="token punctuation">;</span>                         <span class="token comment">// Point构造函数被内联后的样子</span>    p<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">42</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                       <span class="token comment">// Point::getX()被内联后的样子</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第二步，经过逃逸分析，发现在整个test()方法的范围内Point对象实例不会发生任何程度的逃逸，这样可以对它进行标量替换优化。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 步骤2：标量替换后的样子</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> xx <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> px <span class="token operator">=</span> xx<span class="token punctuation">;</span>    <span class="token keyword">int</span> py <span class="token operator">=</span> <span class="token number">42</span>    <span class="token keyword">return</span> px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第三步，通过数据流分析，发现py的值其实对方法不会造成任何影响，那就可以放心地去做无效代码消除得到最终优化结果.<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 步骤3：做无效代码消除后的样子</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>JDK7 服务端默认开启<ul><li>用户也可以使用参数-XX：+DoEscapeAnalysis来手动开启逃逸分析，<br>开启之后可以通过参数-XX：+PrintEscapeAnalysis来查看分析结果。有了逃逸分析支持之后，用户可<br>以使用参数-XX：+EliminateAllocations来开启标量替换，使用+XX：+EliminateLocks来开启同步消<br>除，使用参数-XX：+PrintEliminateAllocations查看标量的替换情况。</li></ul></li></ul><h2 id="公共子表达式消除"><a href="#公共子表达式消除" class="headerlink" title="公共子表达式消除"></a>公共子表达式消除</h2><blockquote><p>公共子表达式的定义</p></blockquote><ul><li>如果一个表达式E之前已经被计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化，那么E<br>的这次出现就称为公共子表达式。</li></ul><blockquote><p>例子</p></blockquote><ul><li>原始代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">*</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>javac 编译字节码<pre class="line-numbers language-java" data-language="java"><code class="language-java">未作任何优化的字节码iload_2       <span class="token comment">// b</span>imul          <span class="token comment">// 计算b*c</span>bipush <span class="token number">12</span>     <span class="token comment">// 推入12</span>imul          <span class="token comment">// 计算(c * b) * 12</span>iload_1       <span class="token comment">// a</span>iadd          <span class="token comment">// 计算(c * b) * 12 + a</span>iload_1       <span class="token comment">// a</span>iload_2       <span class="token comment">// b</span>iload_3       <span class="token comment">// c</span>imul          <span class="token comment">// 计算b * c</span>iadd          <span class="token comment">// 计算a + b * c</span>iadd          <span class="token comment">// 计算(c * b) * 12 + a + a + b * c</span>istore <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>进入虚拟机即时编译器后，它将进行如下优化：编译器检测到c<em>b与b</em>c是一样的表达式，而且在计算期间b与c的值是不变的。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token class-name">E</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>编译器还可能（取决于哪种虚拟机的编译器以及具体的上下文而定）进行另外一种优化——代数化简（Algebraic Simplification）<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token class-name">E</span> <span class="token operator">*</span> <span class="token number">13</span> <span class="token operator">+</span> a <span class="token operator">+</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数组边界检查消除"><a href="#数组边界检查消除" class="headerlink" title="数组边界检查消除"></a>数组边界检查消除</h2></li></ul><blockquote><p>定义</p></blockquote><ul><li>数组边界检查消除（Array Bounds Checking Elimination）是即时编译器中的一项语言相关的经典优<br>化技术。</li><li>Java语言是一门动态安全的语言，访问数组元素foo[i]的时候系统将会自动进行上下界的范围检查，即i必须满足“i&gt;=0&amp;&amp;i小于foo.length”的访问条件。（带来性能开销）</li><li>数组边界检查需要做，但是可以 做的少，比如foo[3]确定不超过边界、在循环里面 循环变量在数组长度里面等</li></ul><blockquote><p>隐式异常优化</p></blockquote><ul><li>一种避开的处理思路——隐式异常处理，Java中空指针检查和算术运算中除数为零的检查都采用了这种方案。</li><li>例子<ul><li>Java伪代码来表示虚拟机访问foo.value的过程为：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>隐式异常优化之后伪代码：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> foo<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>segment_fault<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">uncommon_trap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>不空无任何开销，空的化就会有个进程层面异常处理器（不是真的try-catch ），开销很大，如果foo极少为空的时候，隐式异常优化是值得的。（HotSpot虚拟<br>机足够聪明，它会根据运行期收集到的性能监控信息自动选择最合适的方案。）</li></ul></li></ul><blockquote><p>其他消除操作</p></blockquote><ul><li>如自动装箱消除（Autobox Elimination）、安全点消除<br>（Safepoint Elimination）、消除反射（Dereflection）等</li></ul><h1 id="实战：深入理解Graal编译器"><a href="#实战：深入理解Graal编译器" class="headerlink" title="实战：深入理解Graal编译器"></a>实战：深入理解Graal编译器</h1><h2 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h2><blockquote><p>HotSpot编译器接口的出现。</p></blockquote><ul><li>Java虚拟机编译器接口（Java-Level JVM Compiler<br>Interface，JVMCI）</li><li>三种功能：<ul><li>·响应HotSpot的编译请求，并将该请求分发给Java实现的即时编译器。</li><li>·允许编译器访问HotSpot中与即时编译相关的数据结构，包括类、字段、方法及其性能监控数据<br>等，并提供了一组这些数据结构在Java语言层面的抽象表示。</li><li>·提供HotSpot代码缓存（Code Cache）的Java端抽象表示，允许编译器部署编译完成的二进制机器<br>码。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fpga-designEasy</title>
      <link href="2020/12/23/fpga-designeasy/"/>
      <url>2020/12/23/fpga-designeasy/</url>
      
        <content type="html"><![CDATA[<h1 id="计数器架构"><a href="#计数器架构" class="headerlink" title="计数器架构"></a>计数器架构</h1><h2 id="架构八步法"><a href="#架构八步法" class="headerlink" title="架构八步法"></a>架构八步法</h2><h3 id="计数器规则"><a href="#计数器规则" class="headerlink" title="计数器规则"></a>计数器规则</h3><ul><li>1.初值、加一、结束值</li><li>2.计数初值必须为0</li><li>3.使用某计数值需要同时满足加1条件<ul><li>+1 条件add_cnt&amp;&amp;cnt==4 表示计数到5个，而add_cnt==0&amp;&amp;cnt==4不表示技术到5个</li></ul></li><li>4.结束条件必须同时满足加1条件</li><li>5.取某个数，assign 需要为(add_cnt&amp;&amp;cnt==num-1)</li><li>6.结束时必须回到0</li><li>7.限定范围 &gt;= 和 &lt;<ul><li>前8个 cnt&gt;=0 &amp;&amp; cnt&lt;8</li></ul></li><li>8.设计步骤：先写计数器always,条件用名字替代，用assign写出加一条件 ,assign 写结束<ul><li>always<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">always @(posedge clk or posedge rst_n)begin  //状态寄存器在一个单独的always结构中if (rst_n==1'b0)        cnt &lt;= 3'b0;else if(add_cnt) begin        if(end_cnt)            cnt&lt;=0;        else        cnt&lt;=cnt+1;endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>assign +1 条件<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">assign add_cnt= a==2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>assign 结束条件<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">assign end_cnt=add_cnt&amp;&amp;cnt==10-1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li>9.加1条件必须与计数器严格对齐，其他信号一律向计数器对齐<ul><li>比如 有的到6拉高  有的到7拉高 不用6的来拉高7</li></ul></li><li>10.命名规范 add_ end_</li></ul><h2 id="例子问题"><a href="#例子问题" class="headerlink" title="例子问题"></a>例子问题</h2><p><img src="/2020/12/23/fpga-designeasy/3.png"></p><h3 id="计数结构"><a href="#计数结构" class="headerlink" title="计数结构"></a>计数结构</h3><p><img src="/2020/12/23/fpga-designeasy/2.png"></p><ul><li>第二个结构：cnt_c判断在哪个阶段</li></ul><h3 id="加1-结束条件"><a href="#加1-结束条件" class="headerlink" title="加1 结束条件"></a>加1 结束条件</h3><p><img src="/2020/12/23/fpga-designeasy/4.png"></p><ul><li>cnt<ul><li>+1  ~ flag==1  </li><li>结束 x 代表dout 低时间 y 代表dout 高时间  x+y-1</li></ul></li><li>cnt_c<ul><li>+1  ~ cnt==x+y-1</li><li>结束 cnt==4-1</li></ul></li></ul><h3 id="特殊点"><a href="#特殊点" class="headerlink" title="特殊点"></a>特殊点</h3><h3 id="完整性检查"><a href="#完整性检查" class="headerlink" title="完整性检查"></a>完整性检查</h3><p><img src="/2020/12/23/fpga-designeasy/5.png"></p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">reg [2:0] cnt;assign add_cnt= flag==1;assign  end_cnt= x+y-1;always @(posedge clk or posedge rst_n)begin  //状态寄存器在一个单独的always结构中  if (rst_n==1'b0)    cnt &lt;= 3'b0;  else if(add_cnt) begin        if(end_cnt)            cnt&lt;=0;        else        cnt&lt;=cnt+1;  endendassign add_cnt_c= end_cnt;assign end_cnt_c= cnt_c==4-1;reg [1:0] cnt_c;always @(posedge clk or posedge rst_n)begin  //状态寄存器在一个单独的always结构中  if (rst_n==1'b0)    cnt_c &lt;= 3'b0;  else if(add_cnt_c) begin        if(end_cnt_c)            cnt&lt;=0;        else        cnt&lt;=cnt+1;  endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="功能代码（完整性-计数器之外）"><a href="#功能代码（完整性-计数器之外）" class="headerlink" title="功能代码（完整性  计数器之外）"></a>功能代码（完整性  计数器之外）</h3><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//out assign out_l2h=add_cnt&amp;&amp;cnt==x-1;always @(posedge clk or posedge rst_n)begin  //状态寄存器在一个单独的always结构中  if (rst_n==1'b0)begin    out &lt;= 1'b0;  end  else if(out_l2h)                   out&lt;=1'b1;  else if(end_cnt_c)            out&lt;=1'b0; end//flag reg flag;always @(posedge clk or posedge rst_n)begin  //状态寄存器在一个单独的always结构中  if (rst_n==1'b0)    flag &lt;= 0;  else if(en) begin        if(end_cnt_c)            flag&lt;=0;        else            flag&lt;=1;  endend//x yreg x,y;always @(*)begin  //状态寄存器在一个单独的always结构中  case(cnt_c)      2'd0:      begin            x&lt;=1;            y&lt;=1;      end      2'd1:       begin             x&lt;=1;             y&lt;=2;       end       2'd2:        begin              x&lt;=1;              y&lt;=3;        end       2'd3:         begin               x&lt;=1;               y&lt;=4;         end    endcase    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="状态机架构"><a href="#状态机架构" class="headerlink" title="状态机架构"></a>状态机架构</h1><h2 id="状态机八步"><a href="#状态机八步" class="headerlink" title="状态机八步"></a>状态机八步</h2><h3 id="状态机规则"><a href="#状态机规则" class="headerlink" title="状态机规则"></a>状态机规则</h3><ul><li>1.四段写法<ul><li>同步时序 always 格式化 次态迁移到现态<pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">always@(posedge clk or negedge rst_n)begin    if(!rst_n)        state_cur &lt;= IDLE;    else begin        state_cur &lt;= state_next;    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第二段 组合逻辑 always  描述状态转移条件 <pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">always@(*)begin        case(state_cur)        IDLE:begin            if(idle2s1_start)begin                    state_next =S1;                end            else begin                state_next = state_cur;            end        end                S1:begin            if(s12s2_start)begin                    state_next =S2;                end            else begin                state_next = state_cur;            end        end                S2:begin            if(s22idle_start)begin                    state_next =IDLE;                end            else begin                state_next = state_cur;            end        end                default: begin            state_next = IDLE;        end        endcase    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>第三段 assign 定义转移条件。条件加上现态<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">assign  idle2s1_start = state_cur==IDLE &amp;&amp; assign  s12s2_start = state_cur==S1 &amp;&amp; assign  s22idle_start = state_cur==S2 &amp;&amp; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>第四段 一个always设计一个信号 有多少个输出就有多少个always</li></ul></li><li>2.第一段写法不变</li><li>3.第二代状态转移条件用信号 而不是具体</li><li>4.assign xx2xx_start</li><li>5.assign 加上当前状态</li><li>6.状态不变 state_next=state_cur</li></ul><h1 id="状态机项目实践"><a href="#状态机项目实践" class="headerlink" title="状态机项目实践"></a>状态机项目实践</h1><h2 id="简易报文类型识别器项目"><a href="#简易报文类型识别器项目" class="headerlink" title="简易报文类型识别器项目"></a>简易报文类型识别器项目</h2><blockquote><p>传输图<br><img src="/2020/12/23/fpga-designeasy/6.png"></p></blockquote><blockquote><p>报文格式<br><img src="/2020/12/23/fpga-designeasy/7.png"><br>步骤</p></blockquote><ul><li>复位后，检查输入信号的din 如果连续收到 1个16’h55d5表示检测到报文头</li><li>pkt_type报文类型 0 控制 !=0数据<blockquote><p>信号图<br><img src="/2020/12/23/fpga-designeasy/8.png"></p></blockquote></li></ul><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p><img src="/2020/12/23/fpga-designeasy/9.png"><br><img src="/2020/12/23/fpga-designeasy/10.png"></p><h3 id="输出分析"><a href="#输出分析" class="headerlink" title="输出分析"></a>输出分析</h3><ul><li>dout 和din 一拍输出 （为了简化）</li><li>dout——sop 报文头 指示信号<ul><li>dout 类型状态时高</li><li>其他状态 低</li></ul></li><li>dout_eop<ul><li>FCS最后一字节 高</li><li>其他 低</li></ul></li><li>dout_vld <ul><li>dout 状态类型 ~ FCS最后一字节 高</li><li>其他 低</li></ul></li><li>其他因素<ul><li>数据报文比控制报文多了一个长度字段，数据报文要进入长度状态</li><li>要计数采集数据 数据状态</li></ul></li></ul><h3 id="状态合并"><a href="#状态合并" class="headerlink" title="状态合并"></a>状态合并</h3><p><img src="/2020/12/23/fpga-designeasy/11.png"></p><h3 id="状态转移"><a href="#状态转移" class="headerlink" title="状态转移"></a>状态转移</h3><h1 id="FIFO架构"><a href="#FIFO架构" class="headerlink" title="FIFO架构"></a>FIFO架构</h1><h2 id="FIFO架构八步法"><a href="#FIFO架构八步法" class="headerlink" title="FIFO架构八步法"></a>FIFO架构八步法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="FIFO规则"><a href="#FIFO规则" class="headerlink" title="FIFO规则"></a>FIFO规则</h4><ul><li>1.Show-ahead 读模式： 一般两种 Show-ahead Normal </li><li>2.读写隔离：读控制和写控制是独立的 （不能根据 读状态 读数据 决定写 ）<br>  <img src="/2020/12/23/fpga-designeasy/12.png"><ul><li>例子：输入的报文保存FIFO，保存完整报文后，读出传送</li><li>din_eop收到完整报文，是用作读报文的开始吗？<br><img src="/2020/12/23/fpga-designeasy/13.png"></li><li>由于对第一个报文还没有处理，不能处理第二个报文   </li><li>数据要缓存后输出 ，din_eop也要缓存</li><li>双FIFO架构<br><img src="/2020/12/23/fpga-designeasy/14.png"></li></ul></li><li>3.读使能必须要判断空状态，并用组合逻辑产生 如上<ul><li>Show-ahead模式 ,电路存在一定延时，a时刻FIFO以及是空的</li><li>组合逻辑empty空 立马拉低</li></ul></li><li>4.处理报文，把指示信号和数据一起存入FIFO<ul><li>例子<br><img src="/2020/12/23/fpga-designeasy/15.png"></li><li>报文缓存格式<br><img src="/2020/12/23/fpga-designeasy/16.png"></li><li>读 最低位 次低位 </li></ul></li><li>读写时钟不一样时必须用异步FIFO</li></ul><h4 id="生成FIFO的IP"><a href="#生成FIFO的IP" class="headerlink" title="生成FIFO的IP"></a>生成FIFO的IP</h4><blockquote><p>同步FIFO<br><img src="/2020/12/23/fpga-designeasy/17.png"></p></blockquote><blockquote><p>异步FIFO<br><img src="/2020/12/23/fpga-designeasy/18.png"></p></blockquote><ul><li>FIFO宽度 Data</li><li>FIFO 深度 分析最恶劣的情况<ul><li>时钟频率和速率<ul><li>如果写时钟 100Mhz 读时钟 80Mhz</li><li>FIFO 16bit 宽度 每四个写时钟 一个写使能 2个读时钟 一个读使能</li><li>写速率：  100Mhz*16bit/4=400Mbit/s  </li><li>读速率：  80Mhz*16bit/2=640Mbit/s </li><li>平均速率： </li><li>突发速率：</li><li>算出 最多连续多少写数据有效的<br><img src="/2020/12/23/fpga-designeasy/19.png"></li></ul></li></ul></li></ul><blockquote><p>Show-ahead 和Normal模式</p></blockquote><ul><li>Normal模式<ul><li>先有读使能，之后FIFO输出到数据总线，数据在下一个周期才有效<br><img src="/2020/12/23/fpga-designeasy/20.png"></li><li>rdreq有效时 q还无效</li></ul></li><li>show-ahead 模式 <ul><li>先输出数据在总线上，没有rdreq 就一直输出D0<br><img src="/2020/12/23/fpga-designeasy/21.png"></li></ul></li></ul><blockquote><p>例子</p></blockquote><ul><li><p>目标<br><img src="/2020/12/23/fpga-designeasy/22.png"></p></li><li><p>第一步 FIFO架构</p><ul><li>读写FIFO 都与输入的Din_eop有关，并且读出的数据与输入的报文长度n有关 ，<strong>不能让读和写有任何交互 长度也不行</strong></li><li>信息FIFO  <ul><li>保存斜侧产生的，并由读测使用的数据</li><li>信息FIFO的空标志 和保存个数统计 指示FIFO的报文个数</li></ul></li><li>数据FIFO <ul><li>保存输入数据 ，写数据din,din_eop  写使能 din_vld</li></ul></li></ul></li><li><p>第二 读状态</p><ul><li>有些可以一直为1 </li><li>有些需要启动条件  rdl_flag  (本次需要 存入一个完整报文才能开始读)</li></ul></li><li><p>第三 读状态启动和结束条件</p><ul><li>启动条件<ul><li>一般有 FIFO存够指定个数 （FIFO 保存够指定个数 、一个完整报文）</li><li>保存完 完整报文</li><li>其他特殊</li></ul></li><li>结束条件<ul><li>什么时候结束读FIFO 数据 </li><li>一种方法是计算读出来的长度，当读出来的长度等于写进长度，就代表结束点</li><li>另一种读FIFO数据中的eop为1 表示到达结束点</li></ul></li></ul></li><li><p>第四 信息FIFO读清条件</p><ul><li><p>信息FIFO作用</p></li><li><p>保存写侧产生，并由读测使用的数据</p></li><li><p>信息FIFO的空标志 和保存个数统计 ，指示数据FIFO报文的个数</p></li><li><p>如果统一处理完整个报文读走 ，就无需考虑这个因素9shiy</p></li><li><p>指示当前报文信息的 </p></li><li><p>读清条件就是eop_flag </p></li></ul></li><li><p>第五 生成FIFO IP核</p><ul><li>同读写时钟 同步FIFO</li><li>DFIFO 9bit 8bit din +1 bit 报文尾指示</li><li>MFIFO 宽度 8bit </li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-part04-CodeComplieOpt-chap10-FrontCompileOpt</title>
      <link href="2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/"/>
      <url>2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/</url>
      
        <content type="html"><![CDATA[<h1 id="OverView"><a href="#OverView" class="headerlink" title="OverView"></a>OverView</h1><blockquote><p>编译期的概念</p></blockquote><ul><li>前端编译器（叫“编译器的前端”更准确一些）把*.java文件转变成*.class文件的过程；<ul><li>JDK的Javac、Eclipse JDT中的增量式编译器（ECJ）[1]。</li></ul></li><li>Java虚拟机的即时编译器（常称JIT编译器，Just In Time Compiler）运行期把字节码转变成本地机器码的过程；<ul><li>HotSpot虚拟机的C1、C2编译器，Graal编译器。</li></ul></li><li>静态的提前编译器（常称AOT编译器，Ahead Of Time Compiler）直接把程序编译成与目标机器指令集相关的二进制代码的过程<ul><li>JDK的Jaotc、GNU Compiler for the Java（GCJ）[2]、Excelsior JET[3]。</li></ul></li></ul><blockquote><p>把第一类作为前端编译器</p></blockquote><ul><li>前端编译器在编译期的优化过程，则是支撑着程序员的<br>编码效率和语言使用者的幸福感的提高。<blockquote><p>第二类作为后端编译器</p></blockquote></li><li>Java中即时编译器在运行期的优化过程，支撑了程序执行效率的不断提升</li></ul><h1 id="javac编译器"><a href="#javac编译器" class="headerlink" title="javac编译器"></a>javac编译器</h1><blockquote><p>javac的来源</p></blockquote><ul><li>不像HotSpot虚拟机那样使用C++语言（包含少量C语言）实现，它本身就是一个由Java语言编写的程序</li></ul><h2 id="javac的源码和调试"><a href="#javac的源码和调试" class="headerlink" title="javac的源码和调试"></a>javac的源码和调试</h2><blockquote><p>编译1个准备过程和3个处理过程 </p></blockquote><ul><li>1）准备过程：初始化插入式注解处理器。</li><li>2）解析与填充符号表过程，包括：<ul><li>·词法、语法分析。将源代码的字符流转变为标记集合，构造出抽象语法树。</li><li>·填充符号表。产生符号地址和符号信息。</li></ul></li></ul><ul><li>3）插入式注解处理器的注解处理过程：插入式注解处理器的执行阶段，本章的实战部分会设计一<br>个插入式注解处理器来影响Javac的编译行为。</li><li>4）分析与字节码生成过程，包括：<ul><li>·标注检查。对语法的静态信息进行检查。</li><li>·数据流及控制流分析。对程序动态运行过程进行检查。</li><li>·解语法糖。将简化代码编写的语法糖还原为原有的形式。</li><li>·字节码生成。将前面各个步骤所生成的信息转化成字节码。<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/1.png"></li></ul></li></ul><blockquote><p>Javac编译主体代码<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/3.png"></p></blockquote><h2 id="解析与填充符号表"><a href="#解析与填充符号表" class="headerlink" title="解析与填充符号表"></a>解析与填充符号表</h2><h3 id="词法、语法分析"><a href="#词法、语法分析" class="headerlink" title="词法、语法分析"></a>词法、语法分析</h3><p>parseFiles()方法</p><blockquote><p>词法分析概念</p></blockquote><ul><li>词法分析是将源代码的字符流转变为标记（Token）集合的过程，单个字符是程序编写时的最小元素，但标记才是编译时的最小元素。关键字、变量名、字面量、运算符都可以作为标记</li></ul><blockquote><p>语法分析概念</p></blockquote><ul><li>根据标记序列构造抽象语法树的过程。</li><li>抽象语法树（Abstract Syntax Tree，AST）是一<br>种用来描述程序代码语法结构的树形表示方式，抽象语法树的每一个节点都代表着程序代码中的一个<br>语法结构（Syntax Construct）</li></ul><blockquote><p>抽象树图例<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/4.png"></p></blockquote><ul><li>经过词法和语法分析生成语法树以后，编译器就不会再对源码字符流进行操作了，后续的操作都建立在抽象语法树之上。</li></ul><h3 id="填充符号表"><a href="#填充符号表" class="headerlink" title="填充符号表"></a>填充符号表</h3><p>enterTrees()方法</p><ul><li>符号表（Symbol Table）是由一组符号地址和<br>符号信息构成的数据结构，类比想象成哈希表中键值对的存储形式（实际上符号表不一定是哈希表实现，可以是有序符号表、树状符号表、栈结构符号表等各种形式）。</li></ul><h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><blockquote><p>“插入式注解处理器”的标准API</p></blockquote><ul><li>JDK6提出 可以提前至编译期对代码中的特定注解进行处理，从而影响到前端编译器的工作过程。</li><li>Java著名的编码效率工具Lombok[2]，它可以通过注解来实现自动产生getter/setter方法、进行空置检查、生成受查异常表、产生equals()和hashCode()方法</li></ul><h2 id="语义分析与字节码生成"><a href="#语义分析与字节码生成" class="headerlink" title="语义分析与字节码生成"></a>语义分析与字节码生成</h2><blockquote><p>语义分析目的</p></blockquote><ul><li>抽象语法树只能表示一个结构正确的源程序</li><li>语义分析是对结构上正确的源程序进行上下文相关性质的检查，譬如进行类型检查、控制流检查、数据流检查</li><li>对比如下 <ul><li>定义<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>后续可能出现的赋值运算：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> d <span class="token operator">=</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span><span class="token keyword">char</span> d <span class="token operator">=</span> a <span class="token operator">+</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>都能构成结构正确的抽象语法树,但是只有<br>第一种的写法在语义上是没有错误的，能够通过检查和编译。(IDE红线大部分都是来源于语义分析阶段的检查结果)</li></ul></li></ul><h3 id="标注检查"><a href="#标注检查" class="headerlink" title="标注检查"></a>标注检查</h3><p>attribute()方法</p><blockquote><p>概念</p></blockquote><ul><li>变量使用前是否已被声明、变量与赋值之间的数据类型是否<br>能够匹配，等等</li><li>还会顺便进行一个称为常量折叠（Constant Folding）的代码优化，这是Javac编译器会对源代码做的极少量优化措施之一（代码优化几乎都在即时编译器中进行）<ul><li>常量折叠<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/5.png"></li></ul></li></ul><h3 id="数据及控制流分析"><a href="#数据及控制流分析" class="headerlink" title="数据及控制流分析"></a>数据及控制流分析</h3><p>flow()方法</p><blockquote><p>概念</p></blockquote><ul><li>对程序上下文逻辑更进一步的验证，它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了</li><li>编译时期的数据及控制流分析与类加载时的数据及控制流分析的目的基本上可以看作是一致的，但校验范围会有所区别，有一些校验项只有在编译期或运行期才能进行<ul><li>final语义校验<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法一带有final修饰</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// do something</span><span class="token punctuation">}</span><span class="token comment">// 方法二没有final修饰</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// do something</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>这两段代码编译出来的字节码，会发现它们是没有任何一点区别的</li><li>局部变量在常量池中并没有CONSTANT_Fieldref_info的符号引用，自然就不可能存储有访问标志（access_flags）的信息</li><li>自然在Class文件中就不可能知道一个局部变量是不是被声明为final了</li><li>这是一个只能在编译期而不能在运行期中检查的例子<h3 id="解语法糖"><a href="#解语法糖" class="headerlink" title="解语法糖"></a>解语法糖</h3></li></ul></li></ul><p>desugar()方法</p><blockquote><p>语法糖目的</p></blockquote><ul><li>这种语法对语言的编译结果和功能并没有实际影响，但是却能更方便程序员使用该语言。</li></ul><blockquote><p>Java常见的语法糖</p></blockquote><ul><li>最常见的语法糖包括了前面提到过的泛型，变长参数、自动装箱拆箱，等等，Java虚拟机运行时并不直接支<br>持这些语法，它们在编译阶段被还原回原始的基础语法结构，这个过程就称为解语法糖</li></ul><h3 id="字节码生成"><a href="#字节码生成" class="headerlink" title="字节码生成"></a>字节码生成</h3><blockquote><p>概念</p></blockquote><ul><li>字节码生成阶段不仅仅是把前面各个步骤所生成的信息（语法树、符号表）转化成字节码指令写到磁盘中，编译器还进行了少量的代码添加和转换工作。<ul><li>例如前文多次登场的实例构造器<init>()方法和类构造器<clinit>()方法就是在这个阶段被添加到语法树之中的。（实例构造器并不等同于默认构造函数（ 用户代码中没有提供任何构造函数添加的，在填充符号表阶段中就已经完成））</clinit></init></li><li>保证无论源码中出现的顺序如何，都一定是按先执行父类的实例构造器，然后初始化变量，最后执行语句块的顺序进</li></ul></li></ul><h1 id="Java语法糖"><a href="#Java语法糖" class="headerlink" title="Java语法糖"></a>Java语法糖</h1><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li>Java 5.0和C#2.0同一年发布，其结论是Java的泛型直到今天依然作为Java语言不如C#语言好用的“铁证”被众人嘲讽。</li><li>Java选择这样的泛型实现，是出于当时语言现状的权衡，而不是语言先进性或者设计者水平不如C#之类的原因。</li></ul><h3 id="Java与C-的泛型"><a href="#Java与C-的泛型" class="headerlink" title="Java与C#的泛型"></a>Java与C#的泛型</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>Java选择的泛型实现方式叫作“类型擦除式泛型”（Type Erasure Generics），而C#选择的泛型实现方式是“具现化式泛型”（Reified Generics）。<ul><li>C#里面泛型无论在程序源码里面、编译后的中间语言表示（Intermediate<br>Language，这时候泛型是一个占位符）里面，抑或是运行期的CLR里面都是切实存在的，List<int>与<br>List<string>就是两个不同的类型，它们由系统在运行期生成，有着自己独立的虚方法表和类型数据。</string></int></li><li>只在程序源码中存在，在编译后的字节码文件中，全部泛型都被替换为原来的裸类型（Raw Type，稍后我们会讲解裸类型具体是什么）了，并且在相应的地方插入了强制转型代码</li><li>Java不支持的泛型用法<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeErasureGenerics</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token class-name">Object</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 不合法，无法对泛型进行实例判断</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token class-name">E</span> newItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 不合法，无法使用泛型创建对象</span>    <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> itemArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 不合法，无法使用泛型创建数组</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>性能的差距</p></blockquote></li></ul></li><li>C#2.0引入了泛型之后，带来的显著优势之一便是对比起Java在执行性能上的提高，因为在使用平台提供的容器类型（如List<t>，Dictionary&lt;TKey，TValue&gt;）时，无须像Java里那样不厌其烦地拆箱和装箱</t></li><li>如果在Java中要避免这种损失，就必须构造一个与数据类型相关的容器类（譬如IntFloatHashMap这样的<br>容器）。</li></ul><h4 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h4><blockquote><p>Java选择类型擦除式泛型的原因</p></blockquote><ul><li>擦除式泛型的实现几乎只需要在Javac编译器上做出改进即可，不需要改动字节码、不需要改动Java虚拟机，也保证了以前没有使用泛型的库可以直接运行在Java 5.0之上。（二进制向后兼容性是明确写入《Java语言规范》中的对Java使用者的严肃承诺）<ul><li>数组协变例子（无泛型时代 ，不提倡），但 可编译运行<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>                     <span class="token comment">// 编译期不会有问题，运行时会报错</span><span class="token class-name">ArrayList</span> things <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>things<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//编译、运行时都不会报错</span>things<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Class文件可以在Java 5.0引入泛型之后继续运行的选择</p></blockquote></li></ul></li><li>1）需要泛型化的类型（主要是容器类型），以前有的就保持不变，然后平行地加一套泛型化版本的新类型。<ul><li>C#走了第一条路，添加了一组System.Collections.Generic的新容器，以前的System.Collections以及System.Collections.Specialized容器类型继续存在。</li><li>唯一的不适大概是许多.NET自身的标准库已经把老容器类型当作方法的返回值或者参数使用，这些方法至今还保持着原来的老样子。</li></ul></li><li>2）直接把已有的类型泛型化，即让所有需要泛型化的已有类型都原地泛型化，不添加任何平行于已有类型的泛型版。<ul><li>Java尝试过第一类 JDK1.2遗留代码规模尚小，Java就引入过新的集合类，并且保留了旧集合类不动。这导致了直到现在标准类库中还有Vector（老）和ArrayList（新）、有Hashtable（老）和HashMap（新）等两套容器代码并存，如果当时再摆弄出像Vector（老）、ArrayList（新）、Vector<t>（老但有泛型）、ArrayList<t>（新且有泛型）这样的容器集合，可能叫骂声会比今天听到的更响更大。</t></t></li></ul></li></ul><blockquote><p>第二条路也并不意味着一定只能使用类型擦除来实现，如果当时有足够的时间好好设计和实现，是完全有可能做出更好<br>的泛型系统的，否则也不会有今天的Valhalla项目来还以前泛型偷懒留下的技术债了。</p></blockquote><h4 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h4><blockquote><p>ArrayList 类型擦除</p></blockquote><ul><li>Java选择了第二条道路，ArrayList，原地泛型化后变成<br>了ArrayList<t>，而且保证以前直接用ArrayList的代码在泛型新版本里必须还能继续用这同一个容器</t></li><li>必须让所有泛型化的实例类型，譬如ArrayList<integer>、ArrayList<string>这些全部自动成为ArrayList的子类型才能可以</string></integer></li><li>由此就引出了“裸类型”（Raw Type）的概念，裸类型应被视为所有该类型泛型化实例的共同父类型（Super Type）<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ilist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> slist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list<span class="token punctuation">;</span> <span class="token comment">// 裸类型</span>list <span class="token operator">=</span> ilist<span class="token punctuation">;</span>list <span class="token operator">=</span> slist<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>裸类型 两种选择</p></blockquote></li><li>一种是在运行期由Java虚拟机来自动<br>地、真实地构造出ArrayList<integer>这样的类型，并且自动实现从ArrayList<integer>派生自ArrayList<br>的继承关系来满足裸类型的定义；</integer></integer></li><li>另外一种是索性简单粗暴地直接在编译时把ArrayList<integer>还原回ArrayList，只在元素访问、修改时自动插入一些强制类型转换和检查指令 （Java)<ul><li>泛型擦除前的例子<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"how are you?"</span><span class="token punctuation">,</span> <span class="token string">"吃了没？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"how are you?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>编译成class 再反编译  泛型类型都变回了裸类型，只在元素访问时插入了从<br>Object到String的强制转型代码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"how are you?"</span><span class="token punctuation">,</span> <span class="token string">"吃了没？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"how are you?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>类型擦除的缺陷</p></blockquote></li></ul></integer></li><li>原始类型的泛型（目前的Java不支持）  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> ilist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span> llist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list<span class="token punctuation">;</span>list <span class="token operator">=</span> ilist<span class="token punctuation">;</span>list <span class="token operator">=</span> llist<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决方案一如既往的简单粗暴：既然没法转换那就索性别支持原生类型的泛型了吧，你们都用ArrayList<integer>、ArrayList<long>，反正都做了自动的强制类型转换，遇到原生类型时把装箱、拆箱也自动做了得了。</long></integer></li><li>这个决定后面导致了无数构造包<br>装类和装箱、拆箱的开销，成为Java泛型慢的重要原因，也成为今天Valhalla项目要重点解决的问题之<br>一。</li></ul></li><li>第二，运行期无法取到泛型类型信息，会让一些代码变得相当啰嗦<ul><li>不得不加入的类型参数 ，去写一个泛型版本的从List到数组的转换方法，由于不能从List中取得参数化类型T<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> componentType<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>componentType<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>第三 丧失了一些面向对象思想应有的优雅，带来了一些模棱两可的模糊状况<ul><li>当泛型遇见重载1(变成了同一种的裸类型List，<br>类型擦除导致这两个方法的特征签名变得一模一样。)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTypes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invoke method(List&lt;String&gt; list)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invoke method(List&lt;Integer&gt; list)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>当泛型遇见重载2(疑惑情况)  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTypes</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invoke method(List&lt;String&gt; list)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invoke method(List&lt;Integer&gt; list)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>执行结果：invoke <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span>invoke <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由于这两个返回值的加入，方法重载居然成功了，即这段代码可以被编译和执行[7]了。这是我们对Java语言中返回值不参与重载选择的基本认知的挑战吗？</li><li>上述的重载当然不是根据返回值来确定的之所以这次能编译和执行成功，是因为两<br>个method()方法加入了不同的返回值后才能共存在一个Class文件之中。</li><li>第6章介绍Class文件方法表<br>（method_info）的数据结构时曾经提到过，方法重载要求方法具备不同的特征签名，返回值并不包含<br>在方法的特征签名中，所以返回值不参与重载选择，但是在Class文件格式之中，只要描述符不是完全<br>一致的两个方法就可以共存。也就是说两个方法如果有相同的名称和特征签名，但返回值不同，那它<br>们也是可以合法地共存于一个Class文件中的。</li></ul></li></ul></li></ul><blockquote><p>泛型的优化</p></blockquote><ul><li>引入了诸如Signature、LocalVariableTypeTable等新的属性用于解决伴随泛型而来的参数类型的识别问题，Signature是其中最重要的一项属性，它的作用就是存储一个方法在字节码层面的特征签名[8]<ul><li>在Java代码中的方法特征签名只包括了方法名称、参数顺序及参数类型，而在字节码中的特征签名还包括方法返回值及受查异常表</li><li>擦除法所谓的擦除，仅仅是对方法的Code属<br>性中的字节码进行擦除，实际上元数据中还是保留了泛型信息，这也是我们在编码时能通过反射手段<br>取得参数化类型的根本依据。</li></ul></li></ul><h4 id="值类型与未来的泛型"><a href="#值类型与未来的泛型" class="headerlink" title="值类型与未来的泛型"></a>值类型与未来的泛型</h4><blockquote><p>未来的泛型</p></blockquote><ul><li>在2014年，Oracle建立了一个名为Valhalla的语言改进项目[10]，希望改进Java语言留下的各种缺陷（解决泛型的缺陷就是项目主要目标其中之一，还没实现2020/12/25） </li><li>在Valhalla项目中规划了几种不同的新泛型实现方案，被称为Model 1到Model 3 （泛型类型有可能被具现化，也有可能继续维持类型擦除以保持兼容）</li></ul><blockquote><p>值类型</p></blockquote><ul><li>值类型，这点也是C#用户攻讦Java语言的常用武器之一<ul><li>C#并没有Java意义上的原生数据类<br>型，在C#中使用的int、bool、double关键字其实是对应了一系列在.NET框架中预定义好的结构体<br>（Struct），如Int32、Boolean、Double等</li><li>在C#中开发人员也可以定义自己值类型，只要继承于<br>ValueType类型即可，而ValueType也是统一基类Object的子类，所以并不会遇到Java那样int不自动装箱<br>就无法转型为Object的尴尬。</li></ul></li><li>目前比较明确的是未来的Java应该会提供“值类型”（Value Type）的语言层面的支持。</li></ul><blockquote><p>值类型的好处</p></blockquote><ul><li>值类型可以与引用类型一样，具有构造函数、方法或是属性字段</li><li>而它与引用类型的区别在于它在赋值的时候通常是整体复制，而不是像引用类型那样传递引用的。</li><li>值类型的实例很容易实现分配在方法的调用栈上的，这意味着值类型会随着当前方法的退出而自动释放，不会<br>给垃圾收集子系统带来任何压力。</li></ul><blockquote><p>在Valhalla项目中值类型的解决方案<br>Java的值类型方案被称为“内联类型”，计划通过一个新的关键字inline来定义，字节码层面也有专门与原生类型对应的以Q开头的新的操作码（譬如iload对应qload）来支撑。</p></blockquote><h2 id="自动装箱、拆箱与遍历循环"><a href="#自动装箱、拆箱与遍历循环" class="headerlink" title="自动装箱、拆箱与遍历循环"></a>自动装箱、拆箱与遍历循环</h2><blockquote><p>这些是Java语言里面被使用最多的语法糖(但也简单)</p></blockquote><ul><li>自动装箱、拆箱与遍历循环 之前<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>自动装箱、拆箱与遍历循环编译之后<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span> localIterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> localIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>localIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>实验中需要避免的情况</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">自动装箱的陷阱<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> e <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> f <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>    <span class="token class-name">Long</span> g <span class="token operator">=</span> <span class="token number">3L</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e <span class="token operator">==</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>结果<span class="token boolean">true</span> （<span class="token operator">-</span><span class="token number">128</span><span class="token operator">~</span><span class="token number">127</span> 会缓存 下次相同值对象使用）<span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>包装类的“==”运算在不遇到算术运算的情况下不会自动拆箱</li><li>它们equals()方法不处理数据转型的关系，笔者建议在实际编码中尽量避免这样使用自动装箱与拆箱。</li></ul><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><blockquote><p>条件编译的目的</p></blockquote><ul><li>C、C++中使用预处理器指示符（#ifdef）来完成<br>条件编译。C、C++的预处理器最初的任务是解决编译时的代码依赖关系（如极为常用的#include预处<br>理命令）</li></ul><blockquote><p>Java 没有预处理器的原因</p></blockquote><ul><li>Java语言天然的编译方式（编译器并非一个个<br>地编译Java文件，而是将所有编译单元的语法树顶级节点输入到待处理列表后再进行编译，因此各个文件之间能够互相提供符号信息</li></ul><blockquote><p>Java的条件编译</p></blockquote><ul><li>Java语言的条件编译<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"block 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"block 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>该代码编译后<span class="token class-name">Class</span>文件的反编译结果：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"block 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>只能使用条件为常量的if语句才能达到上述效果，如果使用常量与其他带有条件判断能力的语句搭配，则可能在控制流分析中提示错误，被拒绝编译</li></ul><blockquote><p><strong>语法糖可以根据跟踪Javac源码、反编译Class文件等方式了解它们的本质实现。</strong></p></blockquote><h2 id="try-with-resource"><a href="#try-with-resource" class="headerlink" title="try-with-resource"></a>try-with-resource</h2><p>一般关闭资源在finally<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/6.png"></p><ul><li><p>try with resource<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/7.png"></p></li><li><p>反汇编<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/8.png"><br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/9.png"></p></li></ul><h2 id="lamuda表达式"><a href="#lamuda表达式" class="headerlink" title="lamuda表达式"></a>lamuda表达式</h2><blockquote><p>Labmda表达式不是匿名内部类的语法糖，但是他也是一个语法糖。实现方式其实是依赖了几个JVM底层提供的lambda相关api。</p></blockquote><blockquote><p>遍历list<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/10.png"></p></blockquote><ul><li>反汇编<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/11.png"></li><li>其实是调用了java.lang.invoke.LambdaMetafactory#metafactory方法，该方法的第四个参数implMethod指定了方法实现。可以看到这里其实是调用了一个lambda$main$0方法进行了输出。</li></ul><blockquote><p>先过滤再输出<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/12.png"></p></blockquote><ul><li>反汇编<br><img src="/2020/12/22/deepinjvm-part04-codecomplieopt-chap10-frontcompileopt/13.png"></li><li>两个lambda表达式分别调用了lambda$main$1和lambda$main$0两个方法。</li></ul><h1 id="实战：插入式注解处理器"><a href="#实战：插入式注解处理器" class="headerlink" title="实战：插入式注解处理器"></a>实战：插入式注解处理器</h1><blockquote><p>前端编译器做的</p></blockquote><ul><li>javac 前端编译器在把Java程序源码编译为字节码的时候，会对Java程序源码做各方面的检查校验。这些校验主要是以程序“写得对不对”为出发点。</li></ul><blockquote><p>写的好不好 的程序</p></blockquote><ul><li>业界出现了许多针对程序“写得好不好”的辅助校验工具，如CheckStyle、FindBug、Klocwork等。这些代码校验工具有<br>一些是基于Java的源码进行校验，有一些是通过扫描字节码来完成</li></ul><h2 id="目标-校验工具：NameCheckProcessor。"><a href="#目标-校验工具：NameCheckProcessor。" class="headerlink" title="目标 校验工具：NameCheckProcessor。"></a>目标 校验工具：NameCheckProcessor。</h2><ul><li>通过插入式注解处理器API来对Java编译子系统的行为施加影响。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-part03-JVMsubSystem-chap09-ExampleOfClassLoadAndExecuteSystem</title>
      <link href="2020/12/22/deepinjvm-part03-jvmsubsystem-chap09-exampleofclassloadandexecutesystem/"/>
      <url>2020/12/22/deepinjvm-part03-jvmsubsystem-chap09-exampleofclassloadandexecutesystem/</url>
      
        <content type="html"><![CDATA[<h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><blockquote><p>无法改变的地方</p></blockquote><ul><li>在Class文件格式与执行引擎这部分里，用户的程序能直接参与的内容并不太多，Class文件以何种格式存储，类型何时加载、如何连接，以及虚拟机如何执行字节码指令等都是由虚拟机直接控制的行为，用户程序无法对其进行改变。</li></ul><blockquote><p>可改变的</p></blockquote><ul><li>主要是字节码生成与类加载器这两部分的功能</li></ul><h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><h2 id="Tomcat：正统的类加载器架构"><a href="#Tomcat：正统的类加载器架构" class="headerlink" title="Tomcat：正统的类加载器架构"></a>Tomcat：正统的类加载器架构</h2><blockquote><p>现状</p></blockquote><ul><li>主流的Java Web服务器，如Tomcat、Jetty、WebLogic、WebSphere或其他笔者没有列举的服务器，都实现了自己定义的类加载器</li></ul><blockquote><p>功能健全的Web服务器，都要解决如下的这些问题</p></blockquote><ul><li>·部署在同一个服务器上的两个Web应用程序所使用的Java类库可以实现相互隔离。<ul><li>两个不同的应用程序可能会依赖同一个第三方类库的不同版本，不能要求每个类库在一个服务<br>器中只能有一份，服务器应当能够保证两个独立应用程序的类库可以互相独立使用。</li></ul></li><li>部署在同一个服务器上的两个Web应用程序所使用的Java类库可以互相共享。<ul><li>这个需求与前面一<br>点正好相反，但是也很常见，例如用户可能有10个使用Spring组织的应用程序部署在同一台服务器<br>上，如果把10份Spring分别存放在各个应用程序的隔离目录中，将会是很大的资源浪费——这主要倒<br>不是浪费磁盘空间的问题，而是指类库在使用时都要被加载到服务器内存，如果类库不能共享，虚拟<br>机的方法区就会很容易出现过度膨胀的风险。</li></ul></li><li>·服务器需要尽可能地保证自身的安全不受部署的Web应用程序影响。<ul><li>目前，有许多主流的Java<br>Web服务器自身也是使用Java语言来实现的。因此服务器本身也有类库依赖的问题，一般来说，基于安<br>全考虑，服务器所使用的类库应该与应用程序的类库互相独立。</li></ul></li><li>·支持JSP应用的Web服务器，十有八九都需要支持HotSwap功能。<ul><li>我们知道JSP文件最终要被编译<br>成Java的Class文件才能被虚拟机执行，但JSP文件由于其纯文本存储的特性，被运行时修改的概率远大<br>于第三方类库或程序自己的Class文件。而且ASP、PHP和JSP这些网页应用也把修改后无须重启作为一<br>个很大的“优势”来看待，因此“主流”的Web服务器都会支持JSP生成类的热替换</li></ul></li></ul><blockquote><p>Tomcat具体目录结构</p></blockquote><ul><li>可以设置3组目录（/common/…、/server/…和/shared/…，但默认不一定是开放的，可能只有/lib/…目录存在）用于存放Java类库</li><li>另外还应该加上Web应用程序自身的“/WEB-INF/*”目录，一共4组。把Java类库放置在这4组目录中，每一组都有独立的含义，分别是：<ul><li>·放置在/common目录中。类库可被Tomcat和所有的Web应用程序共同使用。</li><li>·放置在/server目录中。类库可被Tomcat使用，对所有的Web应用程序都不可见。</li><li>·放置在/shared目录中。类库可被所有的Web应用程序共同使用，但对Tomcat自己不可见。</li><li>·放置在/WebApp/WEB-INF目录中。类库仅仅可以被该Web应用程序使用，对Tomcat和其他Web应<br>用程序都不可见。</li></ul></li></ul><blockquote><p>Tomcat 类加载结构<br><img src="/2020/12/22/deepinjvm-part03-jvmsubsystem-chap09-exampleofclassloadandexecutesystem/1.png"></p></blockquote><ul><li>而Common类加载器加载/common/</li><li>Catalina类加载器（也称为Server类加载器）加载/server/</li><li>Shared类加载器加载/shared/</li><li>Webapp类加载器WebApp/WEB-INF/中的Java类库</li></ul><blockquote><p>类加载结构实现的功能</p></blockquote><ul><li>Common类加载器能加载的类都可以被Catalina类加载器和Shared类加载器使用</li><li>而Catalina类加载器和Shared类加载器自己能加载的类则与对方相互隔离。</li><li>WebApp类<br>加载器可以使用Shared类加载器加载到的类，但各个WebApp类加载器实例之间相互隔离。</li><li>JasperLoader的加载范围仅仅是这个JSP文件所编译出来的那一个Class文件，它存在的目的就是为了被<br>丢弃：当服务器检测到JSP文件被修改时，会替换掉目前的JasperLoader的实例，并通过再建立一个新<br>的JSP类加载器来实现JSP文件的HotSwap功能。</li></ul><blockquote><p>Tomcat 6及之后的版本</p></blockquote><ul><li>简化了默<br>认的目录结构，只有指定了tomcat/conf/catalina.properties配置文件的server.loader和share.loader项后才会<br>真正建立Catalina类加载器和Shared类加载器的实例，否则会用到这两个类加载器的地方都会用<br>Common类加载器的实例代替，而默认的配置文件中并没有设置这两个loader项，所以Tomcat 6之后也<br>顺理成章地把/common、/server和/shared这3个目录默认合并到一起变成1个/lib目录，相当于以前/common目录中类库的作用</li></ul><blockquote><p>Spring要对用户程序的类进行管理，自然要能访问到用户程序的类，然而，用户程序是放在/webApp/WEB-INF目录下的，那么问题来了，Spring如何访问并不在其加载范围内的用户程序呢？</p></blockquote><ul><li>发现JNDI对资源进行集中管理和查找的例子正是与Spring遇到的困境相同。解决办法是，java设计团队开发了线程上下文类加载器（Thread Context ClassLoader），通过setContextClassLoader()方法可以实现父类加载器请求子类加载器完成类加载动作。</li><li>spring加载类所用的classloader都是通过Thread.currentThread().getContextClassLoader()来获取的，而当线程创建时会默认 setContextClassLoader(AppClassLoader)，即spring中始终可以获取到这个AppClassLoader(在tomcat里就是WebAppClassLoader)子类加载器来加载bean。</li></ul><h2 id="OSGI-灵活的类加载器"><a href="#OSGI-灵活的类加载器" class="headerlink" title="OSGI:灵活的类加载器"></a>OSGI:灵活的类加载器</h2><blockquote><p>概念</p></blockquote><ul><li>（Open Service Gateway Initiative）是OSGi联盟（OSGi Alliance）制订的一个基于Java语言的动态模块化规范（在JDK 9引入的JPMS是静态的模块系统）</li></ul><blockquote><p>OSGI的静态模块化特点</p></blockquote><ul><li>OSGi中的每个模块（称为Bundle）与普通的Java类库区别并不太大，两者一般都以JAR格式进行封装[2]，并且内部存储的都是Java的Package和Class。</li><li>但是一个Bundle可以声明它所依赖的Package（通<br>过Import-Package描述），也可以声明它允许导出发布的Package（通过Export-Package描述）。</li><li>在OSGi里面，Bundle之间的依赖关系从传统的上层模块依赖底层模块转变为平级模块之间的依赖，而且类库<br>的可见性能得到非常精确的控制，一个模块里只有被Export过的Package才可能被外界访问，其他的<br>Package和Class将会被隐藏起来。</li></ul><blockquote><p>OSGI的动态化模块化系统（模块化被JDK引入了）</p></blockquote><ul><li>如今，通常引入OSGi的主要理由是基于OSGi架构的程序很可能（只是很可能，并不是一定会，需要考虑热插拔后的内存管理、上下文状态维护问题等复杂因素）会实现模块级的热插拔功能</li></ul><blockquote><p>OSGI灵活的类加载器</p></blockquote><ul><li>之间只有规则，没有固定的委派关系。</li></ul><blockquote><p>例子</p></blockquote><ul><li>假设存在Bundle A、Bundle B、BundleC3个模块，并且这3个Bundle定义的依赖关系如下所示。<ul><li>·Bundle A：声明发布了packageA，依赖了java.*的包；</li><li>·Bundle B：声明依赖了packageA和packageC，同时也依赖了java.*的包；</li><li>·Bundle C：声明发布了packageC，依赖了packageA。<br><img src="/2020/12/22/deepinjvm-part03-jvmsubsystem-chap09-exampleofclassloadandexecutesystem/2.png"></li></ul></li></ul><blockquote><p>类加载具体查找规则</p></blockquote><ul><li>.以java.*开头的类，委派给父类加载器加载。</li><li>·否则，委派列表名单内的类，委派给父类加载器加载。</li><li>·否则，Import列表中的类，委派给Export这个类的Bundle的类加载器加载。</li><li>·否则，查找当前Bundle的Classpath，使用自己的类加载器加载。</li><li>·否则，查找是否在自己的Fragment Bundle中，如果是则委派给Fragment Bundle的类加载器加载。</li><li>·否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。</li><li>·否则，类查找失败。</li></ul><h2 id="字节码生成技术-动态代理"><a href="#字节码生成技术-动态代理" class="headerlink" title="字节码生成技术 动态代理"></a>字节码生成技术 动态代理</h2><blockquote><p>字节码生成范围</p></blockquote><ul><li>如Web服务器中的JSP编译器，编译时织入的AOP框<br>架，</li><li>很常用的动态代理技术，</li><li>使用反射的时候虚拟机都有可能会在运行时生成字节码来提<br>高执行速度。</li></ul><blockquote><p>简单动态代理示例</p></blockquote><ul><li>原始的代码逻辑是打印一句“hello world”，代<br>理类的逻辑是在原始类方法执行前打印一句“welcome”。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">IHello</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">implements</span> <span class="token class-name">IHello</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> originalObj<span class="token punctuation">;</span>        <span class="token class-name">Object</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span> originalObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>originalObj <span class="token operator">=</span> originalObj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>originalObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> originalObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>originalObj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">IHello</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IHello</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果如下：welcomehello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在上述代码里，唯一的“黑匣子”就是Proxy::newProxyInstance()方法，除此之外再没有任何特殊之处。<ul><li>这个方法返回一个实现了IHello的接口，并且代理了new Hello()实例行为的对象。</li><li>跟踪这个方法的<br>源码，可以看到程序进行过验证、优化、缓存、同步、生成字节码、显式类加载等操作</li><li>前面的步骤<br>并不是我们关注的重点，这里只分析它最后调用sun.misc.ProxyGenerator::generateProxyClass()方法来完<br>成生成字节码的动作</li><li>这个方法会在运行时产生一个描述代理类的字节码byte[]数组。如果想看一看这<br>个在运行时产生的代理类中写了些什么，可以在main()方法中加入下面这句：<pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>反汇编的动态代理类</p></blockquote></li></ul></li><li>磁盘中将会产生一个名为“$Proxy0.class”的代理类Class文件，反编译<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>bytecode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $<span class="token class-name">Proxy0</span> <span class="token keyword">extends</span> <span class="token class-name">Proxy</span>    <span class="token keyword">implements</span> <span class="token class-name">DynamicProxyTest<span class="token punctuation">.</span>IHello</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m3<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m1<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m0<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Method</span> m2<span class="token punctuation">;</span>    <span class="token keyword">public</span> $<span class="token class-name">Proxy0</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> paramInvocationHandler<span class="token punctuation">)</span>        <span class="token keyword">throws</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>paramInvocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throws</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> localRuntimeException<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> localRuntimeException<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> localThrowable<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>localThrowable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 此处由于版面原因，省略equals()、hashCode()、toString()3个方法的代码</span>    <span class="token comment">// 这3个方法的内容与sayHello()非常相似。</span>    <span class="token keyword">static</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            m3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.fenixsoft.bytecode.DynamicProxyTest$IHello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m0 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> localNoSuchMethodException<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>localNoSuchMethodException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> localClassNotFoundException<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>localClassNotFoundException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>这个代理类的实现代码也很简单，它为传入接口中的每一个方法，以及从java.lang.Object中继承来<br>的equals()、hashCode()、toString()方法都生成了对应的实现，并且统一调用了InvocationHandler对象的<br>invoke()方法（代码中的“this.h”就是父类Proxy中保存的InvocationHandler实例变量）来实现这些方法的<br>内容，各个方法的区别不过是传入的参数和Method对象有所不同而已，所以无论调用动态代理的哪一<br>个方法，实际上都是在执行InvocationHandler::invoke()中的代理逻辑。</li></ul><h2 id="Backport工具：Java的时光机器"><a href="#Backport工具：Java的时光机器" class="headerlink" title="Backport工具：Java的时光机器"></a>Backport工具：Java的时光机器</h2><blockquote><p>Backport的需求</p></blockquote><ul><li>高版本JDK中编写的代码放到低版本JDK环境中去部署使用<blockquote><p>“Java逆向移植”的工具（Java Backporting Tools）应<br>运而生</p></blockquote></li><li>Retrotranslator:将JDK 5编译出来的Class文件转变为可以在JDK 1.4或1.3上部署的版本，<ul><li>它能很好地支持自动装箱、泛型、动态注解、枚举、变长参数、遍历循环、静态导入这些语法特性，</li><li>甚至还可以支持JDK 5中新增的集合改进、并发包及对泛型、注解等的反射操作。</li></ul></li><li>Retrolambda：将JDK 8的Lambda表达式和try-resources语法转变为可以在JDK5、JDK 6、JDK 7中使用的形式，同时也对接口默认方法提供了有限度的支持。</li></ul><blockquote><p>JDK版本升级新增功能的划分</p></blockquote><ul><li>1）对Java类库API的代码增强。譬如JDK 1.2时代引入的java.util.Collections等一系列集合类，在JDK 5时代引入的java.util.concurrent并发包、在JDK 7时引入的java.lang.invoke包，等等。</li><li>2）在前端编译器层面做的改进。这种改进被称作<strong>语法糖</strong>，如自动装箱拆箱，实际上就是Javac编<br>译器在程序中使用到包装对象的地方自动插入了很多Integer.valueOf()、Float.valueOf()之类的代码；变<br>长参数在编译之后就被自动转化成了一个数组来完成参数传递；泛型的信息则在编译阶段就已经被擦除掉了（但是在元数据中还保留着），相应的地方被编译器自动插入了类型转换代码[3]。</li><li>3）需要在字节码中进行支持的改动。如JDK 7里面新加入的语法特性——动态语言支持，就需要<br>在虚拟机中新增一条invokedynamic字节码指令来实现相关的调用功能。不过字节码指令集一直处于相<br>对稳定的状态，这种要在字节码层面直接进行的改动是比较少见的。</li><li>4）需要在JDK整体结构层面进行支持的改进，典型的如JDK 9时引入的Java模块化系统，它就涉<br>及了JDK结构、Java语法、类加载和连接过程、Java虚拟机等多个层面。</li><li>5）集中在虚拟机内部的改进。如JDK 5中实现的JSR-133[4]规范重新定义的Java内存模型（Java<br>Memory Model，JMM），以及在JDK 7、JDK 11、JDK 12中新增的G1、ZGC和Shenandoah收集器之<br>类的改动，这种改动对于程序员编写代码基本是透明的，只会在程序运行时产生影响。</li></ul><blockquote><p>逆向移植主要针对的JDK功能升级</p></blockquote><ul><li>第一类：以独立类库的方式便可实现。Retrotranslator中就附带了一个名叫“backport-util-concurrent.jar”的类库</li><li>第二类:JDK在编译阶段进行处理的那些改进，Retrotranslator则是使用ASM框架直接对字节码进行处理。<ul><li>以枚举为例，尽管在JDK 5中增加了enum关键字，但是Class文件常量池的CONSTANT_Class_info<br>类型常量并没有发生任何语义变化</li><li>枚举仅仅是一个继承于java.lang.Enum、自动生<br>成了values()和valueOf()方法的普通Java类而已。</li></ul></li><li>第三类：Java为支持Lambda会用到新的invokedynamic字节码指令，不使用invokedynamic，除了牺牲一点效率外，可行性方面并没有太大的障碍。<ul><li>Retrolambda的Backport过程实质上就是生成一组匿名内部类来代替Lambda，里面会做一些优化措施，譬如采用单例来保证无状态的Lambda表达式不会重复创建匿名类的对象。</li></ul></li></ul><h1 id="实战：动手实现远程执行功能"><a href="#实战：动手实现远程执行功能" class="headerlink" title="实战：动手实现远程执行功能"></a>实战：动手实现远程执行功能</h1><blockquote><p>服务器执行（一小段临时代码）的需求</p></blockquote><ul><li>排查问题的过程中，想查看内存中的一些参数值，却苦于没有方法把这些值输出到界面或日志中。</li><li>定位到某个缓存数据有问题，由于缺<br>少缓存的统一管理界面，不得不重启服务才能清理掉这个缓存。</li></ul><blockquote><p>解决办法（动态执行）</p></blockquote><ul><li>1）可以使用BTrace[1]这类JVMTI工具去动态修改程序中某一部分的运行代码，第4章有<br>简要的介绍，类似的JVMTI工具还有阿里巴巴的Arthas[2]等。</li><li>2）使用JDK 6之后提供了Compiler API，可以动态地编译Java程序，这样虽然达不到动态语言的<br>灵活度，但让服务器执行临时代码的需求是可以得到解决的。</li><li>3）也可以通过“曲线救国”的方式来做到，譬如写一个JSP文件上传到服务器，然后在浏览器中运<br>行它，或者在服务端程序中加入一个BeanShell Script、JavaScript等的执行引擎（如Mozilla Rhino[3]）<br>去执行动态脚本。</li><li>4）在应用程序中内置动态执行的功能。</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>不依赖某个JDK版本才加入的特性（包括JVMTI），能在目前还被普遍使用的JDK中部署，只要是使用JDK 1.4以上的JDK都可以运行。</li><li>·不改变原有服务端程序的部署，不依赖任何第三方类库。</li><li>·不侵入原有程序，即无须改动原程序的任何代码。也不会对原有程序的运行带来任何影响。</li><li>·考虑到BeanShell Script或JavaScript等脚本与Java对象交互起来不太方便，“临时代码”应该直接支<br>持Java语言。</li><li>·“临时代码”应当具备足够的自由度，不需要依赖特定的类或实现特定的接口。</li><li>·“临时代码”的执行结果能返回到客户端，执行结果可以包括程序中输出的信息及抛出的异常等。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>需解决的问题</p></blockquote><ul><li>.如何编译提交到服务器的Java代码？<ul><li>一种在服务器上编译，在JDK 6以后可以使用<br>Compiler API，在JDK 6以前可以使用tools.jar包（在JAVA_HOME/lib目录下）中的<br>com.sun.tools.Javac.Main类来编译Java文件，它们其实和直接使用Javac命令来编译是一样的。但引入了额外的依赖，而且把程序绑死在特定的JDK上了</li><li>另外一<br>种思路是直接在客户端编译好，把字节码而不是Java代码传到服务端(一般客户端都有一定的编译代码能力)</li></ul></li><li>·如何执行编译之后的Java代码？<ul><li>要执行编译后的Java代码，让类加载器加载这个类生成一个Class对象，然后反<br>射调用一下某个方法就可以了（因为不实现任何接口，我们可以借用一下Java中约定俗成的“main()”方<br>法）。</li><li>一段程序往往不是编写、运行一次就能达到效果，可能同一个类可能要被反复地修改、提交、执行。</li><li>提交上去的类要能访问到服务端的其他类库才行。</li><li>提交的是临时代码，那提交的Java类在执行完后就应当能被卸载和回收掉。</li></ul></li><li>·如何收集Java代码的执行结果？<ul><li>我们想把程序往标准输出（System.out）和标准错误输出（System.err）中打印的信息收集起来。</li><li>但标准输出设备是整个虚拟机进程全局共享的资源，如果使用<br>System.setOut()/System.setErr()方法把输出流重定向到自己定义的PrintStream对象上固然可以收集到输<br>出信息，但也会对原有程序产生影响：会把其他线程向标准输出中打印的信息也收集了。</li><li>直接在<br>执行的类中把对System.out的符号引用替换为我们准备的PrintStream的符号引用，依赖前面学习到的知<br>识，做到这一点并不困难。</li></ul></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="实现“同一个类的代码可以被多次加载”"><a href="#实现“同一个类的代码可以被多次加载”" class="headerlink" title="实现“同一个类的代码可以被多次加载”"></a>实现“同一个类的代码可以被多次加载”</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 为了多次载入执行类而加入的加载器 * 把defineClass方法开放出来，只有外部显式调用的时候才会使用到loadByte方法 * 由虚拟机调用时，仍然按照原有的双亲委派规则使用loadClass方法进行类加载 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HotSwapClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">HotSwapClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">HotSwapClassLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span> <span class="token function">loadByte</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> classByte<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> classByte<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>HotSwapClassLoader所做的事情仅仅是公开父类（即java.lang.ClassLoader）中的protected方法<br>defineClass()</li><li>HotSwapClassLoader中并没有重写loadClass()或findClass()方法，因此如果不算外部手工调用loadByte()<br>方法的话，这个类加载器的类查找范围与它的父类加载器是完全一致的，在被虚拟机调用时，它会按<br>照双亲委派模型交给父类加载。</li><li>构造函数中指定为加载HotSwapClassLoader类的类加载器作为父类加载器，这一步是实现提交的执行代码可以访问服务端引用类库的关键</li></ul><h3 id="实现java-lang-System替换为我们自己定义的HackSystem类"><a href="#实现java-lang-System替换为我们自己定义的HackSystem类" class="headerlink" title="实现java.lang.System替换为我们自己定义的HackSystem类"></a>实现java.lang.System替换为我们自己定义的HackSystem类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 修改Class文件，暂时只提供修改常量池常量的功能 * @author zzm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassModifier</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * Class文件中常量池的起始偏移     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONSTANT_POOL_COUNT_INDEX <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">/**     * CONSTANT_Utf8_info常量的tag标志     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">CONSTANT_Utf8_info</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 常量池中11种常量所占的长度，CONSTANT_Utf8_info型常量除外，因为它不是定长的     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> CONSTANT_ITEM_LENGTH <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> u1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> u2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classByte<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ClassModifier</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>classByte <span class="token operator">=</span> classByte<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 修改常量池中CONSTANT_Utf8_info常量的内容     * @param oldStr 修改前的字符串     * @param newStr 修改后的字符串     * @return 修改结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">modifyUTF8Constant</span><span class="token punctuation">(</span><span class="token class-name">String</span> oldStr<span class="token punctuation">,</span> <span class="token class-name">String</span> newStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cpc <span class="token operator">=</span> <span class="token function">getConstantPoolCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> offset <span class="token operator">=</span> CONSTANT_POOL_COUNT_INDEX <span class="token operator">+</span> u2<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tag <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">bytes2Int</span><span class="token punctuation">(</span>classByte<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> u1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token class-name">CONSTANT_Utf8_info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">bytes2Int</span><span class="token punctuation">(</span>classByte<span class="token punctuation">,</span> offset <span class="token operator">+</span> u1<span class="token punctuation">,</span> u2<span class="token punctuation">)</span><span class="token punctuation">;</span>                offset <span class="token operator">+=</span> <span class="token punctuation">(</span>u1 <span class="token operator">+</span> u2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">bytes2String</span><span class="token punctuation">(</span>classByte<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>oldStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strBytes <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">string2Bytes</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strLen <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">int2Bytes</span><span class="token punctuation">(</span>newStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    classByte <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">bytesReplace</span><span class="token punctuation">(</span>classByte<span class="token punctuation">,</span> offset <span class="token operator">-</span> u2<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> strLen<span class="token punctuation">)</span><span class="token punctuation">;</span>                    classByte <span class="token operator">=</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">bytesReplace</span><span class="token punctuation">(</span>classByte<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> len<span class="token punctuation">,</span> strBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> classByte<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    offset <span class="token operator">+=</span> len<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                offset <span class="token operator">+=</span> CONSTANT_ITEM_LENGTH<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> classByte<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取常量池中常量的数量     * @return 常量池数量     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getConstantPoolCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">ByteUtils</span><span class="token punctuation">.</span><span class="token function">bytes2Int</span><span class="token punctuation">(</span>classByte<span class="token punctuation">,</span> CONSTANT_POOL_COUNT_INDEX<span class="token punctuation">,</span> u2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Bytes数组处理工具 * @author */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ByteUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytes2Int</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> start <span class="token operator">+</span> len<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>            n <span class="token operator">&lt;&lt;=</span> <span class="token punctuation">(</span><span class="token operator">--</span>len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> n <span class="token operator">+</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">int2Bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">&gt;&gt;</span> <span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">bytes2String</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">string2Bytes</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bytesReplace</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> originalBytes<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> replaceBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>originalBytes<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token punctuation">(</span>replaceBytes<span class="token punctuation">.</span>length <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>originalBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>replaceBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newBytes<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> replaceBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>originalBytes<span class="token punctuation">,</span> offset <span class="token operator">+</span> len<span class="token punctuation">,</span> newBytes<span class="token punctuation">,</span> offset <span class="token operator">+</span> replaceBytes<span class="token punctuation">.</span>length<span class="token punctuation">,</span> originalBytes<span class="token punctuation">.</span>length <span class="token operator">-</span> offset <span class="token operator">-</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newBytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接修改符合Class文件格式的byte[]数组中的常量池部分，将常量池中指定内容的CONSTANT_Utf8_info常量替换<br>为新的字符串</li><li>经过ClassModifier处理后的byte[]数组才会传给HotSwapClassLoader.loadByte()方法进行类加载，<br>byte[]数组在这里替换符号引用之后，与客户端直接在Java代码中引用HackSystem类再编译生成的Class<br>是完全一样的。</li></ul><h3 id="代替的java-lang-System的HackSystem"><a href="#代替的java-lang-System的HackSystem" class="headerlink" title="代替的java.lang.System的HackSystem"></a>代替的java.lang.System的HackSystem</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 为Javaclass劫持java.lang.System提供支持 * 除了out和err外，其余的都直接转发给System处理 * * @author zzm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HackSystem</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ByteArrayOutputStream</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PrintStream</span> err <span class="token operator">=</span> out<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getBufferString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buffer<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setSecurityManager</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SecurityManager</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecurityManager</span> <span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcPos<span class="token punctuation">,</span> <span class="token class-name">Object</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> srcPos<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> destPos<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">identityHashCode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 下面所有的方法都与java.lang.System的名称一样</span>    <span class="token comment">// 实现都是字节转调System的对应方法</span>    <span class="token comment">// 因版面原因，省略了其他方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这个类中的方法看起来不<br>少，但其实除了把out和err两个静态变量改成使用ByteArrayOutputStream作为打印目标的同一个<br>PrintStream对象，以及增加了读取、清理ByteArrayOutputStream中内容的getBufferString()和<br>clearBuffer()方法外，就再没有其他新鲜的内容了。</li><li>其余的方法全部都来自于System类的public方法，<br>方法名字、参数、返回值都完全一样，并且实现也是直接转调了System类的对应方法而已。保留这些<br>方法的目的，是为了在Sytem被替换成HackSystem之后，保证执行代码中调用的System的其余方法仍<br>然可以继续使用</li></ul><h3 id="JavaclassExecuter的实现"><a href="#JavaclassExecuter的实现" class="headerlink" title="JavaclassExecuter的实现"></a>JavaclassExecuter的实现</h3><ul><li>是提供给外部调用的入口，调用前面几个支持类组装逻辑，完成类加载工作</li><li>用输入的符合Class文件格式的byte[]数组替换掉java.lang.System的符号引用后</li><li>使用HotSwapClassLoader加载生成一个Class对象，由于每次执行execute()方法都会生成一个新的类加载器实例，因此同一个类可以实现重复加载。</li><li>然后反射调用这个Class对象的main()方法，如果期间出现任何异常，将异常信息打印到HackSystem.out中，最后把缓冲区中的信息作为方法的结果来返回。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Javaclass执行工具 * * @author zzm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaclassExecuter</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 执行外部传过来的代表一个Java类的Byte数组&lt;br&gt;     * 将输入类的byte数组中代表java.lang.System的CONSTANT_Utf8_info常量修改为劫持后的HackSystem类     * 执行方法为该类的static main(String[] args)方法，输出结果为该类向System.out/err输出的信息     * @param classByte 代表一个Java类的Byte数组     * @return 执行结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classByte<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HackSystem</span><span class="token punctuation">.</span><span class="token function">clearBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassModifier</span> cm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassModifier</span><span class="token punctuation">(</span>classByte<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> modiBytes <span class="token operator">=</span> cm<span class="token punctuation">.</span><span class="token function">modifyUTF8Constant</span><span class="token punctuation">(</span><span class="token string">"java/lang/System"</span><span class="token punctuation">,</span> <span class="token string">"org/fenixsoft/classloading/execute/HackSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HotSwapClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HotSwapClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">loadByte</span><span class="token punctuation">(</span>modiBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token class-name">HackSystem</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">HackSystem</span><span class="token punctuation">.</span><span class="token function">getBufferString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证后续做"><a href="#验证后续做" class="headerlink" title="验证后续做"></a>验证后续做</h2></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-part03-JVMsubSystem-chap08-ByteCode-Execute</title>
      <link href="2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/"/>
      <url>2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#overview">Overview</a></li><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84">运行时栈帧结构</a><ul><li><a href="#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E8%A1%A8">局部变量表</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88">操作数栈</a></li><li><a href="#%E5%8A%A8%E6%80%81%E8%BF%9E%E6%8E%A5">动态连接</a></li><li><a href="#%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E5%9C%B0%E5%9D%80">方法返回地址</a></li><li><a href="#%E9%99%84%E5%8A%A0%E4%BF%A1%E6%81%AF">附加信息</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8">方法调用</a><ul><li><a href="#%E8%A7%A3%E6%9E%90">解析</a></li><li><a href="#%E5%88%86%E6%B4%BE%E8%B0%83%E7%94%A8">分派调用</a><ul><li><a href="#%E9%9D%99%E6%80%81%E5%88%86%E6%B4%BE">静态分派</a></li><li><a href="#%E5%8A%A8%E6%80%81%E5%88%86%E6%B4%BE">动态分派</a></li><li><a href="#%E5%8D%95%E5%88%86%E6%B4%BE%E5%92%8C%E5%A4%9A%E5%88%86%E6%B4%BE">单分派和多分派</a></li><li><a href="#%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0">动态分配方法的实现</a></li></ul></li></ul></li><li><a href="#%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81">动态类型语言支持</a><ul><li><a href="#overview-1">Overview</a></li><li><a href="#java-%E4%B8%8E%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B">Java 与动态类型</a></li><li><a href="#javalanginvoke-%E5%8C%85">Java.lang.invoke 包</a></li><li><a href="#invokedynamic%E6%8C%87%E4%BB%A4">invokedynamic指令</a></li><li><a href="#%E5%AE%9E%E6%88%98%E6%96%B9%E6%B3%95%E5%88%86%E6%B4%BE%E8%A7%84%E5%88%99">实战：方法分派规则</a></li></ul></li><li><a href="#%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E">基于栈的字节码解释执行引擎</a><ul><li><a href="#%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C">解释执行</a></li><li><a href="#%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E6%8C%87%E4%BB%A4%E9%9B%86%E4%B8%8E%E5%9F%BA%E4%BA%8E%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E6%8C%87%E4%BB%A4%E9%9B%86">基于栈的指令集与基于寄存器的指令集</a></li><li><a href="#%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E8%A7%A3%E9%87%8A%E5%99%A8%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B">基于栈的解释器执行过程</a></li></ul></li></ul><!-- /TOC --><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><blockquote><p>虚拟机和物理机的区别</p></blockquote><ul><li>物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层<br>面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执<br>行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。</li></ul><blockquote><p>虚拟机的接受执行和编译执行</p></blockquote><ul><li>解释执行（通过解释器执行）</li><li>编译执行（通过即时编译器产生本地代码执行）</li><li>二者都有</li></ul><blockquote><p>外观上 ：输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果</p></blockquote><h1 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h1><blockquote><p>包含内容</p></blockquote><ul><li>每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。</li><li>编译源码时分析计算到方法表的Code属性</li></ul><blockquote><p>“当前栈帧”（Current Stack Frame）</p></blockquote><ul><li>在活动线程中，只有位于栈顶的方<br>法才是在运行的，只有位于栈顶的栈帧才是生效的</li></ul><h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><blockquote><p>容量以变量槽（Variable Slot）为最小单位（ 不是对应32bit内存）</p></blockquote><ul><li>每个变量槽都能存放一个boolean、<br>byte、char、short、int、float、reference或returnAddress类型的数据 ，LONG double 两个</li><li>它允许变量槽的长度可以随着处理器、操作系统或虚拟机实现的不同而发生变化</li></ul><blockquote><p>栈帧图<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/1.png"></p></blockquote><blockquote><p>栈帧局部变量表 特点</p></blockquote><ul><li>索引值的范围是从0开始至局部变量表最大的变<br>量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位<br>数据类型的变量，则说明会同时使用第N和N+1两个变量槽。（绝不会单独访问一个）</li><li>如果执行的是实例方法（没有被static修饰的方法），那局部变量表中第0位索引的变量槽默认是用于传递方法所属对象实例的引用</li><li>为了尽可能节省栈帧耗用的内存空间，局部变量表中的变量槽是可以重用的<ul><li>当前字节码PC计数器的值已经超出了某个变量的作用<br>域，那这个变量对应的变量槽就可以交给其他变量来重用</li><li>可能影响 gc</li><li>正常情况 不回收 （在作用域之内）<pre class="line-numbers language-java" data-language="java"><code class="language-java">代码清单<span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span>　局部变量表槽复用对垃圾收集的影响之一<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>。我们在虚拟机运行参数中加上“<span class="token operator">-</span>verbose：gc”来看看垃圾收集的过程，发现在<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>运行后并没有回收掉这<span class="token number">64</span>MB的内存，下面是运行的结果：<span class="token punctuation">[</span>GC <span class="token number">66846</span>K<span class="token operator">-&gt;</span><span class="token function">65824K</span><span class="token punctuation">(</span><span class="token number">125632</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0032678</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Full</span> GC <span class="token number">65824</span>K<span class="token operator">-&gt;</span><span class="token function">65746K</span><span class="token punctuation">(</span><span class="token number">125632</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0064131</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>异常情况：无回收 上个作用域的<pre class="line-numbers language-java" data-language="java"><code class="language-java">代码清单<span class="token number">8</span><span class="token operator">-</span><span class="token number">2</span>　局部变量表<span class="token class-name">Slot</span>复用对垃圾收集的影响之二<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>从代码逻辑上讲，在执行<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的时候，placeholder已经不可能再被访问了，但执行这段程序，会发现运行结果如下，还是有<span class="token number">64</span>MB的内存没有被回收掉，这又是为什么呢？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>加入int a=0 被回收了<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> placeholder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>这个修改看起来很莫名其妙，但运行一下程序，却发现这次内存真的被正确回收了：<span class="token punctuation">[</span>GC <span class="token number">66401</span>K<span class="token operator">-&gt;</span><span class="token function">65778K</span><span class="token punctuation">(</span><span class="token number">125632</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0035471</span> secs<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Full</span> GC <span class="token number">65778</span>K<span class="token operator">-&gt;</span><span class="token function">218K</span><span class="token punctuation">(</span><span class="token number">125632</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0140596</span> secs<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>回收根本原因：局部变量表中的变量槽是否还存有<br>关于placeholder数组对象的引用。第一次修改中，代码虽然已经离开了placeholder的作用域，placeholder原本所占用的变量槽还没有被其他变量<br>所复用，所以作为GC Roots一部分的局部变量表仍然保持着对它的关联 （有时候给不用对象赋值null 的原因，但是即时编译会优化）</li></ul></li><li>类变量有准备阶段（一开始的系统初始值）和初始化，局部变量无 不能定义了（不赋值）</li></ul><h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><blockquote><p>最大深度</p></blockquote><ul><li>操作数栈的最大深度也在编译的时候被写入到Code属性的max_stacks数据项之中。</li><li>32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。</li></ul><blockquote><p>操作数栈的特点</p></blockquote><ul><li>各种字节码指令往操作数栈中写入和提取内容，也就是出栈和入栈操作。<ul><li>在做算术运算的时候是通过将运算涉及的操作数栈压入栈顶后调用运算指令来进行的（iadd把栈顶的两个元素出栈并相加，然后将相加的结果重新入栈。）</li><li>在调用其他方法的时候是通过操作<br>数栈来进行方法参数的传递。</li></ul></li></ul><blockquote><p>Java虚拟机的解释执行引擎被称为“基于栈的执行引擎”，里面的“栈”就是操作数栈。</p></blockquote><blockquote><p>概念上 栈帧无重叠 （但可能优化到）<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/2.png"></p></blockquote><h2 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h2><blockquote><p>概念</p></blockquote><ul><li>每个栈帧都包含一个指向运行时常量池[1]中该栈帧所属方法的引用，持有这个引用是为了支持方<br>法调用过程中的动态连接（Dynamic Linking）。</li></ul><blockquote><p>静态连接和动态连接</p></blockquote><ul><li>Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就以常量池里指向方法的符号引用作为参数。<ul><li>这些符号引用一部分会在类加载阶段或者第一次使用的时候就被转化为直接引用，这种转化被称为静态解析。</li><li>另外一部分将在每一次运行期间都转化为直接引用，这部分就称为动态连接</li></ul></li></ul><h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><blockquote><p>退出方式</p></blockquote><ul><li>第一种方式是执行引擎遇到任意一个方法<br>返回的字节码指令，这时候可能会有返回值传递给上层的方法调用者</li><li>另外一种退出方式是在方法执行的过程中遇到了异常，并且这个异常没有在方法体内得到妥善处<br>理。</li></ul><blockquote><p>退出过程 (概念上)</p></blockquote><ul><li>恢复上层方法的局部变量表和操作数栈</li><li>把返回值（如果有的话）压入调用者栈帧的操作数栈中</li><li>调整PC计数器的值以指向方法调用指令后面的一条指令等。</li></ul><h2 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h2><blockquote><p>《Java虚拟机规范》允许虚拟机实现增加一些规范里没有描述的信息到栈帧之中，例如与调试、<br>性能收集相关的信息</p></blockquote><h1 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h1><blockquote><p>与传统语言的区别</p></blockquote><ul><li>一切方法调用在Class文件里面存储的都只是符号引用，而不是方法在实际运行时内存布局中的入口地址（也就是之前说的直接引用）</li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><blockquote><p>概念</p></blockquote><ul><li>调用目标在程序代码写好、编译器进行编译那一刻就已经确定下来。这类方法<br>的调用被称为解析（Resolution）</li></ul><blockquote><p>类加载阶段可解析的方法</p></blockquote><ul><li>Java语言中符合“编译期可知，运行期不可变”这个要求的方法，主要有静态方法和私有方法两大类<ul><li>静态方法与类型直接关联</li><li>私有方法在外部不可被访问</li><li>决定了它们都不可能通过继承或别的方式重写出其他版本</li></ul></li></ul><blockquote><p>不同方法的字节码指令</p></blockquote><ul><li>·invokestatic。用于调用静态方法。</li><li>·invokespecial。用于调用实例构造器”&lt;”init”&gt;”()方法、私有方法和父类中的方法。</li><li>·invokevirtual。用于调用所有的虚方法。</li><li>·invokeinterface。用于调用接口方法，会在运行时再确定一个实现该接口的对象。</li><li>·invokedynamic。先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法。前面4条调用指令，分派逻辑都固化在Java虚拟机内部，而invokedynamic指令的分派逻辑是由用户设定的引导方法来决定的。</li></ul><blockquote><p>虚方法和非虚方法</p></blockquote><ul><li>“非虚方法”<ul><li>只要能被invokestatic和invokespecial指令调用的方法，都可以在解析阶段中确定唯一的调用版本，<br>Java语言里符合这个条件的方法共有静态方法、私有方法、实例构造器、父类方法4种，再加上被final<br>修饰的方法（尽管它使用invokevirtual指令调用）</li></ul></li><li>其他方法就被称为“虚方法”（Virtual Method）。</li></ul><h2 id="分派调用"><a href="#分派调用" class="headerlink" title="分派调用"></a>分派调用</h2><blockquote><p>定义</p></blockquote><ul><li>分派调用过程将会揭示多态性特征的一些最基本的体现，如“重载”和“重写”在Java虚拟机之中是如何实现的</li></ul><h3 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h3><blockquote><p>静态静分派和重载 例子</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">kage org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>polymorphic<span class="token punctuation">;</span><span class="token comment">/** * 方法静态分派演示 * @author zzm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDispatch</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Human</span> guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,guy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Man</span> guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,gentleman!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> guy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,lady!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Human</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StaticDispatch</span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>        sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>woman<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：hello<span class="token punctuation">,</span>guy<span class="token operator">!</span>hello<span class="token punctuation">,</span>guy<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>变量的两种类型 </p></blockquote><ul><li><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>Human :“静态类型”（Static Type），“外观类型”（Apparent Type）</li><li>Man：“实际类型” “运行时类型”（Runtime Type）</li></ul><blockquote><p>变量类型变换的共同点和区别</p></blockquote><ul><li>共同点：静态类型和实际类型在程序中都可能会发生变化</li><li>区别：<ul><li>静态类型的变化仅仅在使用时发生，变量本身的静态类型不会被改变，并且最终的静态类型是在编译期可知的</li><li>而实际类型变化的结果在运行期才可确定，编译器在编译程序的时候并不知道一个对象的实际类型是什么。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实际类型变化</span><span class="token class-name">Human</span> human <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 静态类型变化</span>sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span> human<span class="token punctuation">)</span>sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span> human<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>对象human的实际类型是可变的，编译期间它完全是个“薛定谔的人”，到底是Man还是Woman，必须等到程序运行到这行的时候才能确定。而human的静态类型是Human也可以在使用时（如<br>sayHello()方法中的强制转型）临时改变这个类型，但这个改变仍是在编译期是可知的，两次sayHello()<br>方法的调用，在编译期完全可以明确转型的是Man还是Woman。</li></ul></li></ul><blockquote><p>静态分派</p></blockquote><ul><li>所有依赖静态类型来决定方法执行版本的分派动作，都称为静态分派。</li><li>静态分派的<strong>最典型应用表现就是方法重载</strong>。</li><li> 静态分派发生在编译阶段，因此确定静态分派的动作实际上不是由虚拟机来执行的(有些把它归入解析)</li></ul><blockquote><p>重载方法匹配优先级 例子</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>polymorphic</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overload</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">long</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Character</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Character"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">char</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello char"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello char ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello Serializable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>上面的代码运行后会输出：hello <span class="token keyword">char</span>这很好理解，<span class="token string">'a'</span>是一个<span class="token keyword">char</span>类型的数据，自然会寻找参数类型为<span class="token keyword">char</span>的重载方法。如果注释掉<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">char</span> arg<span class="token punctuation">)</span>方法，那输出会变为：hello <span class="token keyword">int</span>这时发生了一次自动类型转换，<span class="token string">'a'</span>除了可以代表一个字符串，还可以代表数字<span class="token number">97</span>（字符<span class="token string">'a'</span>的<span class="token class-name">Unicode</span>数值为十进制数字<span class="token number">97</span>），因此参数类型为<span class="token keyword">int</span>的重载也是合适的。我们继续注释掉<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>方法，那输出会变为hello <span class="token keyword">long</span>这时发生了两次自动类型转换，<span class="token string">'a'</span>转型为整数<span class="token number">97</span>之后，进一步转型为长整数<span class="token number">97L</span>，匹配了参数类型为<span class="token keyword">long</span>的重载。笔者在代码中没有写其他的类型如<span class="token keyword">float</span>、<span class="token keyword">double</span>等的重载，不过实际上自动转型还能继续发生多次，按照 <span class="token keyword">char</span><span class="token operator">&gt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span><span class="token keyword">double</span> 的顺序转型进行匹配，但不会匹配到<span class="token keyword">byte</span>和<span class="token keyword">short</span>类型的重载，因为<span class="token keyword">char</span>到<span class="token keyword">byte</span>或<span class="token keyword">short</span>的转型是不安全的。我们继续注释掉<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token keyword">long</span> arg<span class="token punctuation">)</span>方法，那输出会变为：hello <span class="token class-name">Character</span>这时发生了一次自动装箱，<span class="token string">'a'</span>被包装为它的封装类型<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span>，所以匹配到了参数类型为<span class="token class-name">Character</span>的重载，继续注释掉<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Character</span> arg<span class="token punctuation">)</span>方法，那输出会变为：hello <span class="token class-name">Serializable</span>因为<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Serializable</span>是<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Character</span>类实现的一个接口，当自动装箱之后发现还是找不到装箱类，但是找到了装箱类所实现的接口类型，所以紧接着又发生一次自动转型。<span class="token class-name">Character</span>还实现了另外一个接口 <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>，如果同时出现两个参数分别为<span class="token class-name">Serializable</span>和<span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>的重载方法，那它们在此时的优先级是一样的。 编译器会提示“类型模糊”（<span class="token class-name">Type</span> <span class="token class-name">Ambiguous</span>），并拒绝编译下面继续注释掉<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> arg<span class="token punctuation">)</span>方法，输出会变为：hello <span class="token class-name">Object</span>这时是<span class="token keyword">char</span>装箱后转型为父类了，如果有多个父类，那将在继承关系中从下往上开始搜索，越接上层的优先级越低。即使方法调用传入的参数值为<span class="token keyword">null</span>时，这个规则仍然适用。我们把<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Object</span> arg<span class="token punctuation">)</span>也注释掉，输出将会变为：hello <span class="token keyword">char</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">7</span>个重载方法已经被注释得只剩<span class="token number">1</span>个了，可见变长参数的重载优先级是最低的，这时候字符<span class="token string">'a'</span>被当作了一个<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>数组的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>无论对重载的认识有多么深刻，一个合格的程序员都不应该在实际应用中写这种晦涩的重载代码。</p></blockquote><h3 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h3><blockquote><p>概念<br>它与Java语言多态性的另外一个重要体现[3]——重写（Override）有着很密切的关联。</p></blockquote><blockquote><p>例子</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>polymorphic</span><span class="token punctuation">;</span><span class="token comment">/** * 方法动态分派演示 * @author zzm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDispatch</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man say hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman say hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Human</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        woman<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：man say hellowoman say hellowoman say hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Java虚拟机是如何根据实际类型来分派方法执行版本的呢？</p></blockquote><ul><li>main()方法的字节码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>        <span class="token class-name">Stack</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Locals</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Args_size</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span>   <span class="token keyword">new</span>     #<span class="token number">16</span><span class="token punctuation">;</span> <span class="token comment">//class org/fenixsoft/polymorphic/DynamicDispatch$Man</span>         <span class="token number">3</span><span class="token operator">:</span>   dup         <span class="token number">4</span><span class="token operator">:</span>   invokespecial   #<span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment">//Method org/fenixsoft/polymorphic/Dynamic Dispatch$Man."&lt;init&gt;":()V</span>         <span class="token number">7</span><span class="token operator">:</span>   astore_1         <span class="token number">8</span><span class="token operator">:</span>   <span class="token keyword">new</span>     #<span class="token number">19</span><span class="token punctuation">;</span> <span class="token comment">//class org/fenixsoft/polymorphic/DynamicDispatch$Woman</span>        <span class="token number">11</span><span class="token operator">:</span>  dup        <span class="token number">12</span><span class="token operator">:</span>  invokespecial   #<span class="token number">21</span><span class="token punctuation">;</span> <span class="token comment">//Method org/fenixsoft/polymorphic/DynamicDispatch$Woman."&lt;init&gt;":()V</span>        <span class="token number">15</span><span class="token operator">:</span>  astore_2        <span class="token number">16</span><span class="token operator">:</span>  aload_1        <span class="token number">17</span><span class="token operator">:</span>  invokevirtual   #<span class="token number">22</span><span class="token punctuation">;</span> <span class="token comment">//Method org/fenixsoft/polymorphic/Dynamic Dispatch$Human.sayHello:()V</span>        <span class="token number">20</span><span class="token operator">:</span>  aload_2        <span class="token number">21</span><span class="token operator">:</span>  invokevirtual   #<span class="token number">22</span><span class="token punctuation">;</span> <span class="token comment">//Method org/fenixsoft/polymorphic/Dynamic Dispatch$Human.sayHello:()V</span>        <span class="token number">24</span><span class="token operator">:</span>  <span class="token keyword">new</span>     #<span class="token number">19</span><span class="token punctuation">;</span> <span class="token comment">//class org/fenixsoft/polymorphic/DynamicDispatch$Woman</span>        <span class="token number">27</span><span class="token operator">:</span>  dup        <span class="token number">28</span><span class="token operator">:</span>  invokespecial   #<span class="token number">21</span><span class="token punctuation">;</span> <span class="token comment">//Method org/fenixsoft/polymorphic/DynamicDispatch$Woman."&lt;init&gt;":()V</span>        <span class="token number">31</span><span class="token operator">:</span>  astore_1        <span class="token number">32</span><span class="token operator">:</span>  aload_1        <span class="token number">33</span><span class="token operator">:</span>  invokevirtual   #<span class="token number">22</span><span class="token punctuation">;</span> <span class="token comment">//Method org/fenixsoft/polymorphic/Dynamic Dispatch$Human.sayHello:()V</span>        <span class="token number">36</span><span class="token operator">:</span>  <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>0～15行的字节码是准备动作，作用是建立man和woman的内存空间、调用Man和Woman类型的实例构造器，将这两个实例的引用存放在第1、2个局部变量表的变量槽中，这些动作实际对应了Java源码中的这两行：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Human</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>接下来的16～21行是关键部分，16和20行的aload指令分别把刚刚创建的两个对象的引用压到栈顶，这两个对象是将要执行的sayHello()方法的所有者，称为接收者（Receiver）；17和21行是方法调用指令invokevirtual指令</p></li><li><p>invokevirtual指令 的本质</p><ul><li>1）找到操作数栈顶的第一个元素所指向的对象的实际类型，记作C。</li><li>2）如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果<br>通过则返回这个方法的直接引用，查找过程结束；不通过则返回java.lang.IllegalAccessError异常。</li><li>3）否则，按照继承关系从下往上依次对C的各个父类进行第二步的搜索和验证过程。</li><li>4）如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</li></ul></li></ul><blockquote><p>字段不多态的原因</p></blockquote><ul><li>既然这种多态性的根源在于虚方法调用指令invokevirtual的执行逻辑，那自然我们得出的结论就只会对方法有效，对字段是无效的，因为字段不使用这条指令。<pre class="line-numbers language-java" data-language="java"><code class="language-java">代码清单<span class="token number">8</span><span class="token operator">-</span><span class="token number">10</span>　字段没有多态性<span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>polymorphic</span><span class="token punctuation">;</span><span class="token comment">/** * 字段不参与多态 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldHasNoPolymorphic</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            money <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Father, i have $"</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            money <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showMeTheMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I am Son,  i have $"</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Father</span> gay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This gay has $"</span> <span class="token operator">+</span> gay<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行后输出结果为：<span class="token class-name">I</span> am <span class="token class-name">Son</span><span class="token punctuation">,</span> i have $<span class="token number">0</span><span class="token class-name">I</span> am <span class="token class-name">Son</span><span class="token punctuation">,</span> i have $<span class="token number">4</span><span class="token class-name">This</span> gay has $<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><font size="4,font" color="red">输出两句都是“I am Son”，这是因为Son类在创建的时候，首先隐式调用了Father的构造函数，而Father构造函数中对showMeTheMoney()的调用是一次虚方法调用，实际执行的版本是Son::showMeTheMoney()方法，所以输出的是“I am Son”，这点经过前面的分析相信读者是没有疑问的了。而这时候虽然父类的money字段已经被初始化成2了，但Son::showMeTheMoney()方法中访问的却是子类的money字段，这时候结果自然还是0，因为它要到子类的构造函数执行时才会被初始化。main()的最后一句通过静态类型访问到了父类中的money，输出了2。</font></li></ul><h3 id="单分派和多分派"><a href="#单分派和多分派" class="headerlink" title="单分派和多分派"></a>单分派和多分派</h3><blockquote><p>概念</p></blockquote><ul><li>方法的接收者与方法的参数统称为方法的宗量。</li><li>单分派是根据一个宗量对目标方法进行选择，多分派则是根据多于一个宗量对目标方法进行选择。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 单分派、多分派演示 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatch</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> QQ <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> _360 <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token class-name">QQ</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father choose qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>_360 arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father choose 360"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token class-name">QQ</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son choose qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>_360 arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son choose 360"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Father</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Father</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        father<span class="token punctuation">.</span><span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">_360</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">QQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：father choose <span class="token number">360</span>son choose qq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>静态分派选择目标方法的依据有两点：一是静态类型是Father还是Son，二是方法参数是QQ还是360。这次选择结果的最终产物是产生了两条invokevirtual指令，两条指令的参数分别为常量池中指向Father::hardChoice(360)及Father::hardChoice(QQ)方法的符号引用。<ul><li>因为是根据两个宗量进行选择，所以Java语言的静态分派属于多分派类型。</li></ul></li><li>运行阶段中虚拟机的选择，也就是动态分派的过程<ul><li>唯一可以影响虚拟机选择的因素只有该方法的接受者的实际类型是Father还是Son。因为只有一个宗量作为选择依据，所以Java语言的动态分派属于单分派类型。</li></ul></li></ul><h3 id="动态分配方法的实现"><a href="#动态分配方法的实现" class="headerlink" title="动态分配方法的实现"></a>动态分配方法的实现</h3><blockquote><p>方法区中建立一个虚方法表（Virtual Method Table，也称为vtable，与此对应的，在invokeinterface执行时也<br>会用到接口方法表——Interface Method Table，简称itable），使用虚方法表索引来代替元数据查找以<br>提高性能。<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/3.png"></p></blockquote><ul><li>方法在子类中没有被重写，那子类的虚方法表中的地址入口和父类相同方法的地址入口是一致的。</li><li>类中重写了这个方法，子类虚方法表中的地址也会被替换为指向子类实现版本的入口地址。</li><li>Son和Father都没有重写来自Object的方法，所以它们的方法表中所有从Object继承来的方法都指向了Object的数据类型。</li></ul><blockquote><p>可能还有其他优化方式</p></blockquote><ul><li>由于Java对象里面的方法默认（即不使用final修饰）就是虚方法，虚拟机除了使用虚方法表之外，为了进一步提高性能，还会使用类型继承关系分析（Class Hierarchy Analysis，CHA）、守护内联（Guarded Inlining）、内联缓存（InlineCache）等多种非稳定的激进优化来争取更大的性能空间</li></ul><h1 id="动态类型语言支持"><a href="#动态类型语言支持" class="headerlink" title="动态类型语言支持"></a>动态类型语言支持</h1><blockquote><p>动态类型语言支持的出现</p></blockquote><ul><li>二十余年间只新增过一条指令，它就是随着JDK 7的发布的字节码首位新成员——invokedynamic指令</li></ul><h2 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h2><blockquote><p>动态类型语言的特征</p></blockquote><ul><li>它的类型检查的主体过程是在运行期而不是编<br>译期进行的，满足这个特征的语言有很多，常用的包括：APL、Clojure、Erlang、Groovy、JavaScript、Lisp、Lua、PHP、Prolog、Python、Ruby、Smalltalk、Tcl</li><li>那相对地，在编译期就进行类型检查过程的语言，譬如C++和Java等就是最常用的静态类型语言。</li></ul><blockquote><p>静态类型语言 动态类型语言 类型检查实例</p></blockquote><ul><li>连接时 运行时<ul><li>例子<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>上面这段<span class="token class-name">Java</span>代码能够正常编译，但运行的时候会出现<span class="token class-name">NegativeArraySizeException</span>异常<span class="token punctuation">(</span>运行时异常（<span class="token class-name">Runtime</span> <span class="token class-name">Exception</span>）<span class="token punctuation">)</span>。与运行时异常相对应的概念是连接时异常，例如很常见的<span class="token class-name">NoClassDefFoundError</span>便属于连接时异常，即使导致连接时异常的代码放在一条根本无法被执行到的路径分支上不过，在<span class="token class-name">C</span>语言里，语义相同的代码就会在编译期就直接报错，而不是等到运行时才出现异常：<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// GCC拒绝编译，报“size of array is negative”</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>一门语言的哪一种检查行为要在运行期进行，哪一种检查要在编译期进行并没有什么<br>必然的因果逻辑关系，关键是在语言规范中人为设立的约定</li></ul></li><li>类型检查<ul><li>例子<pre class="line-numbers language-java" data-language="java"><code class="language-java">obj<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>假设这行代码是在Java语言中，并且变量obj的静态类型为java.io.PrintStream，那变量obj的<br>实际类型就必须是PrintStream的子类（实现了PrintStream接口的类）才是合法的</li><li>哪怕obj属于<br>一个确实包含有println(String)方法相同签名方法的类型，但只要它与PrintStream接口没有继承关系，代<br>码依然不可能运行——因为类型检查不合法。</li><li>但是相同的代码在ECMAScript（JavaScript）中情况则不一样，无论obj具体是何种类型，无论其<br>继承关系如何，只要这种类型的方法定义中确实包含有println(String)方法，能够找到相同签名的方<br>法，调用便可成功</li><li>产生这种差别产生的根本原因是Java语言在编译期间却已将println(String)方法完整的符号引用（本<br>例中为一项CONSTANT_InterfaceMethodref_info常量）生成出来，并作为方法调用指令的参数存储到<br>Class文件中，例如下面这个样子：<pre class="line-numbers language-java" data-language="java"><code class="language-java">invokevirtual #<span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">//Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>核心差别</p></blockquote></li></ul></li><li>变量obj本身并没有类型，变量obj的值才具有类型</li><li>所以编译器在编译时最多只能确定方法名称、参数、返回值这些信息，而不会去确定方法所在的具体类型（即方法接收者不固定）。</li></ul><h2 id="Java-与动态类型"><a href="#Java-与动态类型" class="headerlink" title="Java 与动态类型"></a>Java 与动态类型</h2><blockquote><p>JDK7之前的字节码指令支持</p></blockquote><ul><li>JDK 7以前的字节码指令集中，4条方法调用指令（invokevirtual、invokespecial、invokestatic、<br>invokeinterface）的第一个参数都是被调用的方法的符号引用（CONSTANT_Methodref_info或者CONSTANT_InterfaceMethodref_info常量）</li><li>使用“曲线救国”的方式（如编译时留个占位符类型，运行时动态生成字节码实现具体类型到占位符类型的适配）来实现</li></ul><blockquote><p>不能动态类型支持欠缺</p></blockquote><pre class="line-numbers language-none"><code class="language-none">var arrays = {"abc", new ObjectX(), 123, Dog, Cat, Car..}for(item in arrays){    item.sayHello();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在动态类型语言下这样的代码是没有问题</li><li>编译器只能不停编译它所遇见的每一个sayHello()方法，并缓存起来供执行时选择、调用和内联，如果<br>arrays数组中不同类型的对象很多，就势必会对内联缓存产生很大的压力，缓存的大小总是有限的，类<br>型信息的不确定性导致了缓存内容不断被失效和更新，先前优化过的方法也可能被不断替换而无法重<br>复使用。<h2 id="Java-lang-invoke-包"><a href="#Java-lang-invoke-包" class="headerlink" title="Java.lang.invoke 包"></a>Java.lang.invoke 包</h2></li></ul><blockquote><p>作用</p></blockquote><ul><li>这个包的主要目的是在之前<br>单纯依靠符号引用来确定调用的目标方法这条路之外，提供一种新的动态确定目标方法的机制，称为“方法句柄”（Method Handle）</li></ul><blockquote><p>作用例子</p></blockquote><ul><li>在C/C++中的常用做法是把谓词定义为函数，用函数指针来把谓词传递到排序方法<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void sort(int list[], const int size, int (*compare)(int, int))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在Java 没办法把函数作为参数传递，通常通过接口对象<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Java</span>类库中的<span class="token class-name">Collections</span><span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法就是这样定义的：<span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">,</span> <span class="token class-name">Comparator</span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>拥有方法句柄后，无论obj是何种类型（临时定义的ClassA抑或是实现PrintStream接口的实现类System.out），都可以正确调用到println()方法。  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodHandles</span><span class="token punctuation">.</span>lookup<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodHandle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodType</span><span class="token punctuation">;</span><span class="token comment">/*** JSR 292 MethodHandle基础用法演示*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodHandleTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ClassA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 无论obj最终是哪个实现类，下面这句都能正确调用到println方法。</span>        <span class="token function">getPrintlnMH</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invokeExact</span><span class="token punctuation">(</span><span class="token string">"icyfenix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MethodHandle</span> <span class="token function">getPrintlnMH</span><span class="token punctuation">(</span><span class="token class-name">Object</span> reveiver<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token comment">// MethodType：代表“方法类型”，包含了方法的返回值（methodType()的第一个参数）和</span>        具体参数（<span class="token function">methodType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>第二个及以后的参数）。        <span class="token class-name">MethodType</span> mt <span class="token operator">=</span> <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// lookup()方法来自于MethodHandles.lookup，这句的作用是在指定类中查找符合给定的方法</span>        名称、方法类型，并且符合调用权限的方法句柄。        <span class="token comment">// 因为这里调用的是一个虚方法，按照Java语言的规则，方法第一个参数是隐式的，代表该方法的接</span>            收者，也即<span class="token keyword">this</span>指向的对象，这个参数以前是放在参数列表中进行传递，现在提供了<span class="token function">bindTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        方法来完成这件事情。        <span class="token keyword">return</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findVirtual</span><span class="token punctuation">(</span>reveiver<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"println"</span><span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bindTo</span><span class="token punctuation">(</span>reveiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模拟invokevirtual指令的执行过程，分派逻辑并非固<br>化在Class文件的字节码上，而是通过一个由用户设计的Java方法来实现。</li><li>有了MethodHandle就<br>可以写出类似于C/C++那样的函数声明了：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">,</span> <span class="token class-name">MethodHandle</span> compare<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>对比 Reflection MethodHandle</p></blockquote></li></ul></li><li>·Reflection和MethodHandle机制本质上都是在模拟方法调用，但是Reflection是在模拟Java代码层次的方法调用，而MethodHandle是在模拟字节码层次的方法调用。<ul><li>在MethodHandles.Lookup上的3个方法<br>findStatic()、findVirtual()、findSpecial()正是为了对应于invokestatic、invokevirtual（以及<br>invokeinterface）和invokespecial这几条字节码指令的执行权限校验行为，</li><li>底层细节在使用Reflection API时是不需要关心的。</li></ul></li><li>·Reflection中的java.lang.reflect.Method对象远比MethodHandle机制中的java.lang.invoke.MethodHandle对象所包含的信息来得多。<ul><li>前者是方法在Java端的全面映像，包含了方法<br>的签名、描述符以及方法属性表中各种属性的Java端表示方式，还包含执行权限等的运行期信息。</li><li>而后者仅包含执行该方法的相关信息。</li><li>用开发人员通俗的话来讲，Reflection是重量级，而MethodHandle是轻量级。</li></ul></li><li>MethodHandle是对字节码的方法指令调用的模拟,拟机在这方面做的各种优化（如方法内联）可能支持，反射调用则无。</li><li>Reflection API的设计目标是只为Java语言服务的，而MethodHandle则设计为可服务于所有Java虚拟机之上的语言，其中也包括了Java语言而已，而且Java在这里并不是主<br>角。</li></ul><h2 id="invokedynamic指令"><a href="#invokedynamic指令" class="headerlink" title="invokedynamic指令"></a>invokedynamic指令</h2><blockquote><p>概念</p></blockquote><ul><li>每一处含有invokedynamic指令的位置都被称作“动态调用点（Dynamically-Computed Call Site）”，这条指令的第一个参数不再是代表方法符号引用的CONSTANT_Methodref_info常量，而是变为JDK 7时新加入的CONSTANT_InvokeDynamic_info常量</li><li>引导方法（Bootstrap Method，该方法存放在新增的BootstrapMethods属性中）、方法类型（MethodType）和<br>名称。</li><li>根据CONSTANT_InvokeDynamic_info常量中提供的信息，虚拟机可以找到并且执行引导方法，从而获得一个CallSite对象，最终调用到要执行的目标方法上。</li></ul><blockquote><p>invokedynamic 程序（为了生成invokedynamic，需配合INDY工具）</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodHandles</span><span class="token punctuation">.</span>lookup<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">CallSite</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">ConstantCallSite</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodHandle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodHandles</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodType</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokeDynamicTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">INDY_BootstrapMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invokeExact</span><span class="token punctuation">(</span><span class="token string">"icyfenix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello String:"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CallSite</span> <span class="token class-name">BootstrapMethod</span><span class="token punctuation">(</span><span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span> lookup<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">MethodType</span> mt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConstantCallSite</span><span class="token punctuation">(</span>lookup<span class="token punctuation">.</span><span class="token function">findStatic</span><span class="token punctuation">(</span><span class="token class-name">InvokeDynamicTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> mt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MethodType</span> <span class="token class-name">MT_BootstrapMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">MethodType</span>                <span class="token punctuation">.</span><span class="token function">fromMethodDescriptorString</span><span class="token punctuation">(</span>                        <span class="token string">"(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String; Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MethodHandle</span> <span class="token class-name">MH_BootstrapMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findStatic</span><span class="token punctuation">(</span><span class="token class-name">InvokeDynamicTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"BootstrapMethod"</span><span class="token punctuation">,</span> <span class="token class-name">MT_BootstrapMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">MethodHandle</span> <span class="token class-name">INDY_BootstrapMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">CallSite</span> cs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CallSite</span><span class="token punctuation">)</span> <span class="token class-name">MH_BootstrapMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invokeWithArguments</span><span class="token punctuation">(</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"testMethod"</span><span class="token punctuation">,</span>                <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">fromMethodDescriptorString</span><span class="token punctuation">(</span><span class="token string">"(Ljava/lang/String;)V"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">dynamicInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>javap简略字节码如下<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Constant</span> pool<span class="token operator">:</span>    #<span class="token number">121</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>    #<span class="token number">33</span><span class="token operator">:</span>#<span class="token number">30</span>    <span class="token comment">//  testMethod:(Ljava/lang/String;)V</span>    #<span class="token number">123</span> <span class="token operator">=</span> <span class="token class-name">InvokeDynamic</span>  #<span class="token number">0</span><span class="token operator">:</span>#<span class="token number">121</span>    <span class="token comment">//  #0:testMethod:(Ljava/lang/String;)V</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">23</span>        <span class="token comment">// String abc</span>         <span class="token number">2</span><span class="token operator">:</span> invokedynamic #<span class="token number">123</span><span class="token punctuation">,</span>  <span class="token number">0</span>   <span class="token comment">// InvokeDynamic #0:testMethod: (Ljava/lang/String;)V</span>         <span class="token number">7</span><span class="token operator">:</span> nop         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span>CallSite</span> <span class="token class-name">BootstrapMethod</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span>Method</span> <span class="token class-name">Handles</span>$<span class="token class-name">Lookup</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span>MethodType</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Throwable</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">3</span>         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">63</span>        <span class="token comment">// class java/lang/invoke/ConstantCallSite</span>         <span class="token number">3</span><span class="token operator">:</span> dup         <span class="token number">4</span><span class="token operator">:</span> aload_0         <span class="token number">5</span><span class="token operator">:</span> ldc           #<span class="token number">1</span>         <span class="token comment">// class org/fenixsoft/InvokeDynamicTest</span>         <span class="token number">7</span><span class="token operator">:</span> aload_1         <span class="token number">8</span><span class="token operator">:</span> aload_2         <span class="token number">9</span><span class="token operator">:</span> invokevirtual #<span class="token number">65</span>        <span class="token comment">// Method java/lang/invoke/MethodHandles$ Lookup.findStatic:(Ljava/lang/Class;Ljava/ lang/String;Ljava/lang/invoke/Method Type;)Ljava/lang/invoke/MethodHandle;</span>        <span class="token number">12</span><span class="token operator">:</span> invokespecial #<span class="token number">71</span>        <span class="token comment">// Method java/lang/invoke/ConstantCallSite. "&lt;init&gt;":(Ljava/lang/invoke/MethodHandle;)V</span>        <span class="token number">15</span><span class="token operator">:</span> areturn<span class="token number">2</span><span class="token operator">:</span> invokedynamic #<span class="token number">123</span><span class="token punctuation">,</span>  <span class="token number">0</span> <span class="token comment">// InvokeDynamic #0:testMethod:(Ljava/lang/String;)V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实战：方法分派规则"><a href="#实战：方法分派规则" class="headerlink" title="实战：方法分派规则"></a>实战：方法分派规则</h2></li></ul><blockquote><p>invokedynamic指令的分派逻辑</p></blockquote><ul><li>invokedynamic指令与此前4条传统的“invoke*”指令的最大区别就是它的分派逻辑不是由虚拟机决定的，而是由程序员决定。</li></ul><blockquote><p>例子问题 :如何访问祖父类的方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GrandFather</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am grandfather"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">GrandFather</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 请读者在这里填入适当的代码（不能修改其他地方的代码）</span>       <span class="token comment">// 实现调用祖父类的thinking()方法，打印"i am grandfather"</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>如果是JDK 7 Update 9之前</strong>,使用MethodHandle来直接解决问题  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodHandles</span><span class="token punctuation">.</span>lookup<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodHandle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>invoke<span class="token punctuation">.</span></span><span class="token class-name">MethodType</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">class</span> <span class="token class-name">GrandFather</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am grandfather"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token keyword">extends</span> <span class="token class-name">GrandFather</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">MethodType</span> mt <span class="token operator">=</span> <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">MethodHandle</span> mh <span class="token operator">=</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findSpecial</span><span class="token punctuation">(</span><span class="token class-name">GrandFather</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"thinking"</span><span class="token punctuation">,</span> mt<span class="token punctuation">,</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mh<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>被潜在的安全性缺陷修正了，原因是必须保证<br>findSpecial()查找方法版本时受到的访问约束（譬如对访问控制的限制、对参数类型的限制）应与使用<br>invokespecial指令一样，两者必须保持精确对等，包括在上面的场景中它只能访问到其直接父类中的方<br>法版本。</li><li>新版本方法：通过反射 绕过修改Java类库的设置<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">void</span> <span class="token function">thinking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">MethodType</span> mt <span class="token operator">=</span> <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> lookupImpl <span class="token operator">=</span> <span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"IMPL_LOOKUP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lookupImpl<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodHandle</span> mh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodHandles<span class="token punctuation">.</span>Lookup</span><span class="token punctuation">)</span> lookupImpl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findSpecial</span><span class="token punctuation">(</span><span class="token class-name">GrandFather</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"thinking"</span><span class="token punctuation">,</span> mt<span class="token punctuation">,</span> <span class="token class-name">GrandFather</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mh<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行以上代码，在目前所有JDK版本中均可获得如下结果：i am grandfather<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h1></li></ul></li></ul><blockquote><p>概念模型 下的解释执行字节码</p></blockquote><ul><li>因为实际的虚拟机实现，譬如HotSpot的模板解<br>释器工作的时候，并不是按照下文中的动作一板一眼地进行机械式计算，而是动态产生每条字节码对应的汇编代码来运行，这与概念模型中执行过程的差异很大，但是结果却能保证是一致的。</li></ul><h2 id="解释执行"><a href="#解释执行" class="headerlink" title="解释执行"></a>解释执行</h2><blockquote><p>解释执行与编译执行</p></blockquote><ul><li>但当主流的虚拟机中都包含了即时编译器后，Class文件中的代码到底会被解释执行还是编译执行，就成了只有虚拟机自己才能准确判断的事</li></ul><blockquote><p>解释执行与编译执行 图示<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/4.png"></p></blockquote><ul><li>下面的那条分支，就是传统编译原理中程序代码到目标机器代码的生成过程；</li><li>而中间的那条分支，就是解释执行的过程。</li></ul><blockquote><p>Java程序的编译过程</p></blockquote><ul><li>在Java语言中，Javac编译器完成了程序代码经过词法分析、语法分析到抽象语法树，再遍历语法树生成线性的字节码指令流的过程。</li><li>因为这一部分动作是在Java虚拟机之外进行的，而解释器在虚拟机的内部，所以Java程序的编译就是半独立的实现。</li></ul><h2 id="基于栈的指令集与基于寄存器的指令集"><a href="#基于栈的指令集与基于寄存器的指令集" class="headerlink" title="基于栈的指令集与基于寄存器的指令集"></a>基于栈的指令集与基于寄存器的指令集</h2><blockquote><p>概念</p></blockquote><ul><li>基于栈的指令集架构（Instruction Set Architecture，ISA）：字节码指令流里面的指令大部分都是零地址指令，它们依赖操作数栈进行工作。</li><li>基于寄存器的指令集：最典型的就是x86的二地址指令<br>集。</li></ul><blockquote><p>例子对比 计算1+1</p></blockquote><ul><li>基于栈的指令集：  <pre class="line-numbers language-none"><code class="language-none">iconst_1iconst_1iaddistore_0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>两条iconst_1指令连续把两个常量1压入栈后，iadd指令把栈顶的两个值出栈、相加，然后把结果<br>放回栈顶，最后istore_0把栈顶的值放到局部变量表的第0个变量槽中</li><li>通常都是<br>不带参数的，使用操作数栈中的数据作为指令的运算输入，指令的运算结果也存储在操作数栈之中。</li></ul></li><li>基于寄存器的指令集  <pre class="line-numbers language-none"><code class="language-none">mov  eax, 1add  eax, 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>mov指令把EAX寄存器的值设为1，然后add指令再把这个值加1，结果就保存在EAX寄存器里面。</li></ul></li></ul><blockquote><p>优缺点对比</p></blockquote><ul><li>基于栈的指令集<ul><li>优点<ul><li>可移植</li><li>不受寄存器的约束（硬件）</li><li>可以由虚拟机实现来自行决定把一些访问最频繁的数据（程序计数器、栈顶缓存等）放到寄存器中以获取尽量好的性能，这样实现起来也更简单一些。</li><li>编<br>译器实现更加简单（不需要考虑空间分配的问题，所需空间都在栈上操作）</li></ul></li><li>缺点<ul><li>是理论上执行速度相对来说会稍慢一些（局限在解释执行的状态下）</li><li>完成相同功能所需的指令数量一般会比寄存<br>器架构来得更多，因为出栈、入栈操作本身就产生了相当大量的指令。</li><li>栈实现在内存中，频繁的栈访问也就意味着频繁的内存访问，相对于处理器来说，内存始终是执行速度的瓶颈。（虚拟机可以栈顶缓存，把最常用的操作映射到寄存器中避免直接内存访问，但这也只是<br>优化措施而不是解决本质问题的方法）</li></ul></li></ul></li></ul><h2 id="基于栈的解释器执行过程"><a href="#基于栈的解释器执行过程" class="headerlink" title="基于栈的解释器执行过程"></a>基于栈的解释器执行过程</h2><blockquote><p>例子</p></blockquote><ul><li>算术源码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>字节码<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>        <span class="token class-name">Stack</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Locals</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">Args_size</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span>   bipush  <span class="token number">100</span>         <span class="token number">2</span><span class="token operator">:</span>   istore_1         <span class="token number">3</span><span class="token operator">:</span>   sipush  <span class="token number">200</span>         <span class="token number">6</span><span class="token operator">:</span>   istore_2         <span class="token number">7</span><span class="token operator">:</span>   sipush  <span class="token number">300</span>        <span class="token number">10</span><span class="token operator">:</span>  istore_3        <span class="token number">11</span><span class="token operator">:</span>  iload_1        <span class="token number">12</span><span class="token operator">:</span>  iload_2        <span class="token number">13</span><span class="token operator">:</span>  iadd        <span class="token number">14</span><span class="token operator">:</span>  iload_3        <span class="token number">15</span><span class="token operator">:</span>  imul        <span class="token number">16</span><span class="token operator">:</span>  ireturn<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>执行流程图<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/5.png"></p></blockquote></li><li>Bipush指令的作用是将单字节的整型常量值（-128～127）推入操作数栈顶，跟随有一个参数，指明推送的常量值，这里是100。<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/6.png"></li><li>istore_1指令的作用是将操作数栈顶的整型值出栈并存放到第1个局部变量槽中。 后四个类似<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/7.png"></li><li>执行偏移地址为11的指令，iload_1指令的作用是将局部变量表第1个变量槽中的整型值复制到操作数栈顶。<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/8.png"></li><li>执行偏移地址为12的指令，iload_2指令的作用是将局部变量表第2个变量槽中的整型值复制到操作数栈顶。<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/9.png"></li><li>执行偏移地址为13的指令，iadd指令的作用是将操作数栈中头两个栈顶元素出栈，做整型加法，然后把结果重新入栈。<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/10.png"></li><li>执行偏移地址为14的指令，iload_3指令把存放在第3个局部变量槽中的300入栈到操作数栈中。这时操作数栈为两个整数300。下一条指令imul是将操作数栈中头两个栈顶元素出栈，做整型乘法，然后把结果重新入栈。<br><img src="/2020/12/19/deepinjvm-part03-jvmsubsystem-chap08-bytecode-execute/11.png"></li><li>执行偏移地址为16的指令，ireturn指令是方法返回指令之一，它将结束方法执行并将操作数栈顶的整型值返回给该方法的调用者。到此为止，这段方法执行结束。</li></ul><blockquote><p>以上都是概念上的运行过程，实际上可能诸多优化</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-part03-JVMsubSystem-chap07-ClassLoad</title>
      <link href="2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/"/>
      <url>2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#overview">Overview</a></li><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA">类加载时机</a><ul><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F-%E7%89%B9%E5%88%AB%E7%9A%84%E8%A7%A3%E6%9E%90%E9%98%B6%E6%AE%B5-">类加载顺序 （特别的解析阶段 ）</a></li><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA">类加载的加载“时机”</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD">接口的类加载</a></li></ul></li><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B">类加载的过程</a><ul><li><a href="#%E5%8A%A0%E8%BD%BD-%E7%AC%AC%E4%B8%80%E6%AD%A5">加载 （第一步）</a></li><li><a href="#%E9%AA%8C%E8%AF%81">验证</a><ul><li><a href="#%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E9%AA%8C%E8%AF%81">文件格式验证</a></li><li><a href="#%E5%85%83%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81">元数据验证</a></li><li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E9%AA%8C%E8%AF%81">字节码验证</a></li><li><a href="#%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8%E9%AA%8C%E8%AF%81">符号引用验证</a></li><li><a href="#%E9%AA%8C%E8%AF%81%E6%80%BB%E7%BB%93">验证总结</a></li></ul></li><li><a href="#%E5%87%86%E5%A4%87">准备</a></li><li><a href="#%E8%A7%A3%E6%9E%90">解析</a><ul><li><a href="#%E8%A7%A3%E6%9E%90%E5%8A%A8%E4%BD%9C">解析动作</a></li></ul></li><li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a></li></ul></li><li><a href="#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%A4%96%E9%83%A8">类加载器 （虚拟机外部）</a><ul><li><a href="#%E7%B1%BB%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">类与类加载器</a></li><li><a href="#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B">双亲委派模型</a></li><li><a href="#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%A0%B4%E5%9D%8F%E7%AA%81%E7%A0%B4">双亲委派模型的破坏（突破）</a></li></ul></li><li><a href="#java%E6%A8%A1%E5%9D%97%E5%8C%96%E7%B3%BB%E7%BB%9F">Java模块化系统</a><ul><li><a href="#%E6%A8%A1%E5%9D%97%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7">模块的兼容性</a></li><li><a href="#%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8">模块化的类加载器</a></li></ul></li></ul><!-- /TOC --><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>如何加载CLASS中各类信息到虚拟机</p><blockquote><p>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。</p></blockquote><blockquote><p>优点、缺点</p></blockquote><ul><li>优点：<ul><li>Java应用提供了极高的扩展性和灵活性，Java天生可以动态扩展的语言特性就是依赖运行期动态加载和动态连接这个特点实现的。</li><li>通过Java预置的或自定义类加载器，让某个本地的应用程序在运行时从网络或其他地方上加载一个二进制流作为其程序代码的一部分。这种动态组装应用的方式目前已广泛应用于Java程序之中，从最基础的Applet、JSP到相对复杂的OSGi技术</li></ul></li><li>缺点：这种策略让Java语言进行提前编译会面临额外的困难，也会让类加载时稍微增加一些性能开销，</li></ul><blockquote><p>规定<br>所提到的“Class文件”也并非特指某个存在于具体磁盘中的文件，而应当是一串二进制字节流，无论其以何种形式存在，包括但不限于磁盘文件、网络、数据库、内存或者动态产生等。</p></blockquote><h1 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h1><p><img src="/2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/1.png"></p><h2 id="类加载顺序-（特别的解析阶段-）"><a href="#类加载顺序-（特别的解析阶段-）" class="headerlink" title="类加载顺序 （特别的解析阶段 ）"></a>类加载顺序 （特别的解析阶段 ）</h2><blockquote><p>加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定.它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）</p></blockquote><h2 id="类加载的加载“时机”"><a href="#类加载的加载“时机”" class="headerlink" title="类加载的加载“时机”"></a>类加载的加载“时机”</h2><blockquote><p><font size="4,font" color="red">有且只有以下情况会触发 ，也叫主动引用</font></p></blockquote><ul><li><p>1）遇到new、getstatic、putstatic或invokestatic这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。能够生成这四条指令的典型Java代码场景有：</p><ul><li>使用new关键字实例化对象的时候。</li><li>读取或设置一个类型的静态字段（被final修饰、已在编译期把结果放入常量池的静态字段除外）的时候。</li><li>调用一个类型的静态方法的时候。</li></ul></li><li><p>2）使用java.lang.reflect包的方法对类型进行反射调用的时候，如果类型没有进行过初始化，则需<br>要先触发其初始化。</p></li><li><p>3）当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</p></li><li><p>4）当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先<br>初始化这个主类。</p></li><li><p>5）当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解<br>析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句<br>柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。<br>6）当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有<br>这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p><blockquote><p>被动引用 </p></blockquote></li><li><p>例子1 《Java虚拟机规范》中并未明确规定  有的实现做了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span><span class="token comment">/** * 被动使用类字段演示一： * 通过子类引用父类的静态字段，不会导致子类初始化 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 非主动使用类字段演示 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SubClass</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例子2 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span><span class="token comment">/** * 被动使用类字段演示二： * 通过数组定义来引用类，不会触发此类的初始化 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sca <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>没有触发类<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading<span class="token punctuation">.</span></span>SuperClass</span>的初始化阶段。但触发了另一个名为“<span class="token punctuation">[</span><span class="token class-name">Lorg</span><span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading<span class="token punctuation">.</span>SuperClass”的类的初始化阶段，它是一个由虚拟机自动生成的、直接继承于<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span>的子类，创建动作由字节码指令newarray触发。这个类代表了一个元素类型为<span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading<span class="token punctuation">.</span></span>SuperClass</span>的一维数组，数组中应有的属性和方法（用户可直接使用的只有被修饰为<span class="token keyword">public</span>的length属性和<span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法）都实现在这个类里。<span class="token class-name">Java</span>语言中对数组的访问要比<span class="token class-name">C</span><span class="token operator">/</span><span class="token class-name">C</span><span class="token operator">++</span>相对安全，很大程度上就是因为这个类包装了数组元素的访问<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>，而<span class="token class-name">C</span><span class="token operator">/</span><span class="token class-name">C</span><span class="token operator">++</span>中则是直接翻译为对数组指针的移动。当检查到发生数组越界时会抛出<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArrayIndexOutOfBoundsException</span>异常，避免了直接造成非法内存访问。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>例子三</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span><span class="token comment">/** * 被动使用类字段演示三： * 常量在编译阶段会存入调用类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的   类的初始化 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConstClass init!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> HELLOWORLD <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 非主动使用类字段演示 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotInitialization</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ConstClass</span><span class="token punctuation">.</span>HELLOWORLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="接口的类加载"><a href="#接口的类加载" class="headerlink" title="接口的类加载"></a>接口的类加载</h2><blockquote><p>与类稍有不同，而接口中不能使用“static{}”语句块，但编译器仍然会为接口生成“<clinit>()”类构造器[2]，用于初始化接口中所定义的成员变量。</clinit></p></blockquote><blockquote><p>接口与类真正有所区别的地方</p></blockquote><ul><li>前面讲述的六种“有且仅有”需要触发初始化场景中的第三种：当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有在真正使用到父接口的时候（如引用接口中定义的常量）才会初始化。</li></ul><h1 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h1><h2 id="加载-（第一步）"><a href="#加载-（第一步）" class="headerlink" title="加载 （第一步）"></a>加载 （第一步）</h2><blockquote><p>普通类 类加载</p></blockquote><ul><li>1）通过一个类的全限定名来获取定义此类的二进制字节流。<ul><li>·从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。</li><li>·从网络中获取，这种场景最典型的应用就是Web Applet。</li><li>·运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。</li><li>·由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。</li><li>·从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择<br>把程序安装到数据库中来完成程序代码在集群间的分发。</li><li>·可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。</li></ul></li><li>2）将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li><li>3）在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入<br>口。</li></ul><blockquote><p>数组类 类加载<br>本身不通过类加载器创建，由Java虚拟机直接在内存中动态构造出来的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型（Element Type，指的是数组去掉所有维度的类型）最终还是要靠类加载器来完成加载，一个数组类（下面简称为C）创建过程遵循以下规则：</p></blockquote><ul><li>·如果数组的组件类型（Component Type，指的是数组去掉一个维度的类型，注意和前面的元素类<br>型区分开来）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组C将被标<br>识在加载该组件类型的类加载器的类名称空间上（这点很重要，在7.4节会介绍，一个类型必须与类加<br>载器一起确定唯一性）。</li><li>·如果数组的组件类型不是引用类型（例如int[]数组的组件类型为int），Java虚拟机将会把数组C<br>标记为与引导类加载器关联。</li><li>·数组类的可访问性与它的组件类型的可访问性一致，如果组件类型不是引用类型，它的数组类的<br>可访问性将默认为public，可被所有的类和接口访问到。</li></ul><blockquote><p>加载与连接的交叉<br>加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始，但这两个阶段的开始时间仍然保持着固定的先后顺序。</p></blockquote><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><blockquote><p>验证的目的</p></blockquote><ul><li>是连接阶段的第一步，这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。</li></ul><blockquote><p>验证的耗时<br>从代码量和耗费的执行性能的角度上讲，验证阶段的工作量在虚拟机的类加载过程中占了相当大的比重。</p></blockquote><h3 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h3><blockquote><p>可能包括下面这些验证点：</p></blockquote><ul><li><p>·是否以魔数0xCAFEBABE开头。</p></li><li><p>·主、次版本号是否在当前Java虚拟机接受范围之内。</p></li><li><p>.常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。</p></li><li><p>·指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</p></li><li><p>·CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。</p></li><li><p>·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。</p></li><li><p>·……</p></li></ul><blockquote><p>文件格式验证的目的</p></blockquote><ul><li>只有通过了这个阶段的验证之后，这段字节流才被允许进入Java虚拟机内存的方法区中进行存储，所以后面的三个验证阶段，全部是基于方法区的存储结构上进行的，不会再直接读取、操作字节流了。</li></ul><h3 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h3><blockquote><p>第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java语言规范》的要求，这个阶段可能包括的验证点如下：</p></blockquote><ul><li>·这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。</li><li>·这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</li><li>·如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</li><li>·类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方<br>法重载，例如方法参数都一致，但返回值类型却不同等）。</li></ul><h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h3><blockquote><p>第三阶段是整个验证过程中最复杂的一个阶段，主要目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。</p></blockquote><ul><li><p>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作<br>栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。</p></li><li><p>·保证任何跳转指令都不会跳转到方法体以外的字节码指令上。</p></li><li><p>·保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。</p></li><li><p>没通过==一定有问题 ，通过！=没问题 通过程序去校验程序逻辑是无法做到绝对准确的，不可能用程序来准确判定一段程序是否存在Bug。 </p></li></ul><blockquote><p>JDK 6之后的优化检查StackMapTable属性中的记录是否合法</p></blockquote><h3 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h3><blockquote><p>最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用[3]的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。</p></blockquote><ul><li>符号引用中通过字符串描述的全限定名是否能找到对应的类。</li><li>.在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。</li><li>·符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当<br>前类访问。</package></li></ul><h3 id="验证总结"><a href="#验证总结" class="headerlink" title="验证总结"></a>验证总结</h3><blockquote><p>验证阶段对于虚拟机的类加载机制来说，是一个非常重要的、但却不是必须要执行的阶段，因为验证阶段只有通过或者不通过的差别，只要通过了验证，其后就对程序运行期没有任何影响了</p></blockquote><blockquote><p>如果果程序运行的全部代码（包括自己编写的、第三方包中的、从外部加载的、动态生成的等所有代码）都已经被反复使用和验证过，在生产环境的实施阶段就可以考虑使用-Xverify：none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置<strong>类变量</strong>初始值的阶段，从概念上讲,这些变量所使用的内存都应当在方法区中进行分配。（其实只是个区域）</li></ul><ul><li>其次是这里所说的初始值“通常情况”下是数据类型的零值，假设一个类变量的定义为：<pre class="line-numbers language-none"><code class="language-none">public static int value = 123;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>那变量value在准备阶段过后的初始值为0而不是123，因为这时尚未开始执行任何Java方法，而把value赋值为123的putstatic指令是程序被编译后，存放于类构造器<clinit>()方法之中，所以把value赋值为123的动作要到类的初始化阶段才会被执行。表7-1列出了Java中所有基本数据类型的零值。</clinit></li></ul><p><img src="/2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/2.png"></p><blockquote><p>初始化为ConstantValue属性所指定的初始值，假设上面类变量value的定义修改为：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">public static final int value = 123;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在准备阶段虚拟机就会根据Con-stantValue的设置<br>将value赋值为123。</li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><blockquote><p>解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程</p></blockquote><ul><li>·符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。</li><li>直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。</li></ul><blockquote><p>没规定具体时间，在使用之前。invokedynamic指令，这里“动态”的含义是指必须等到程序实际运行到这条指令时，解析动作才能进行。</p></blockquote><blockquote><p>多次解析很常见，除了invokedynamic，其他可以会缓存</p></blockquote><h3 id="解析动作"><a href="#解析动作" class="headerlink" title="解析动作"></a>解析动作</h3><blockquote><p>先只讨论静态 （Java语言本身是一门静态类型语言）</p></blockquote><ul><li>类或接口的解析<ul><li>假设当前代码所处的类为D，如果要把一个从未解析过的符号引用N解析为一个类或接口C的直接引用，那虚拟机完成整个解析的过程需要包括以下3个步骤：</li><li>1）如果C不是一个数组类型，那虚拟机将会把代表N的全限定名传递给D的类加载器去加载这个<br>类C。在加载过程中，由于元数据验证、字节码验证的需要，又可能触发其他相关类的加载动作，例如加载这个类的父类或实现的接口。一旦这个加载过程出现了任何异常，解析过程就将宣告失败。</li><li>2）如果C是一个数组类型，并且数组的元素类型为对象，也就是N的描述符会是类似“[Ljava/lang/Integer”的形式，那将会按照第一点的规则加载数组元素类型。如果N的描述符如前面所假设的形式，需要加载的元素类型就是“java.lang.Integer”，接着由虚拟机生成一个代表该数组维度和元素的数组对象。</li><li>3）如果上面两步没有出现任何异常，那么C在虚拟机中实际上已经成为一个有效的类或接口了，但在解析完成前还要进行符号引用验证，确认D是否具备对C的访问权限。如果发现不具备访问权限，将抛出java.lang.IllegalAccessError异常。</li><li>JDK9 模块化的影响：一个public类型也不再意味着程序任何位置都有它的访问权限，我们还必须检查模块间的访问权限。</li></ul></li><li>字段解析，如果解析成功完成，那把这个字段所属的类或接口用C表示，对C进行后续字段搜索<ul><li>1）如果C本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引<br>用，查找结束。</li><li>2）否则，如果在C中实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，<br>如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找<br>结束。</li><li>3）否则，如果C不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父类，如果在父<br>类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。</li><li>4）否则，查找失败，抛出java.lang.NoSuchFieldError异常。</li><li>以上解析规则能够确保Java虚拟机获得字段唯一的解析结果，实际上可能更严格，直接编译错误<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldResolution</span> <span class="token punctuation">{</span>    <span class="token keyword">interface</span> <span class="token class-name">Interface0</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">Interface1</span> <span class="token keyword">extends</span> <span class="token class-name">Interface0</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">Interface2</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">implements</span> <span class="token class-name">Interface1</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token operator">*</span>如果注释了<span class="token class-name">Sub</span>类中    的“<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">A</span><span class="token operator">=</span><span class="token number">4</span>；”，接口与父类同时存在字段<span class="token class-name">A</span>，那<span class="token class-name">Oracle</span>公司实现的<span class="token class-name">Javac</span>编译器将提示“<span class="token class-name">The</span>    field <span class="token class-name">Sub<span class="token punctuation">.</span>A</span> is ambiguous”，并且会拒绝编译这段代码。<span class="token operator">*</span><span class="token operator">*</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token keyword">implements</span> <span class="token class-name">Interface2</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Sub<span class="token punctuation">.</span>A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>方法解析<ul><li>我们依然用C表示这个类，接下来虚拟机将会按<br>照如下步骤进行后续的方法搜索：</li><li>1）由于Class文件格式中类的方法和接口的方法符号引用的常量类型定义是分开的，如果在类的方法表中发现class_index中索引的C是个接口的话，那就直接抛出java.lang.IncompatibleClassChangeError异常。</li><li>2）如果通过了第一步，在类C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li><li>3）否则，在类C的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。</li><li>4）否则，在类C实现的接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明类C是一个抽象类，这时候查找结束，抛出java.lang.AbstractMethodError异常。</li><li>5）否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError。</li></ul></li><li>接口方法解析<ul><li>用C表示这个接口，接下来虚拟机将会按照如下步骤进行后续的接口方法搜<br>索：</li><li>1）与类的方法解析相反，如果在接口方法表中发现class_index中的索引C是个类而不是接口，那<br>么就直接抛出java.lang.IncompatibleClassChangeError异常。</li><li>2）否则，在接口C中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方<br>法的直接引用，查找结束。</li><li>3）否则，在接口C的父接口中递归查找，直到java.lang.Object类（接口方法的查找范围也会包括<br>Object类中的方法）为止，看是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方<br>法的直接引用，查找结束。</li><li>4）对于规则3，由于Java的接口允许多重继承，如果C的不同父接口中存有多个简单名称和描述符<br>都与目标相匹配的方法，那将会从这多个方法中返回其中一个并结束查找，《Java虚拟机规范》中并<br>没有进一步规则约束应该返回哪一个接口方法。但与之前字段查找类似地，不同发行商实现的Javac编译器有可能会按照更严格的约束拒绝编译这种代码来避免不确定性。</li><li>5）否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError异常。</li></ul></li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote><p>直到初始化阶段，Java虚拟机才真正开始执行类中编写的Java程序代码，将主导权移交给应用程序。</p></blockquote><ul><li>进行准备阶段时，变量已经赋过一次系统要求的初始零值，而在初始化阶段，则会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源。</li><li>初始化阶段就是执行类构造器<clinit>()方法的过程</clinit></li></ul><blockquote><p><clinit>()方法 的操作</clinit></p></blockquote><ul><li>收集为类变量复制 （顺序按照源文件顺序）静态语句可以赋值之前的变量但不可以访问<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//  给变量复制可以正常编译通过</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这句编译器会提示“非法向前引用”</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><clinit>()方法 的注意点</clinit></p></blockquote></li><li>·<clinit>()方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成<clinit>()方法。</clinit></clinit></li><li>·接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，因此接口与类一样都会生成<clinit>()方法。<ul><li>接口与类不同的是，执行接口的<clinit>()方法不需要先执行父接口的<clinit>()方法，因为只有当父接口中定义的变量被使用时，父接口才会被初始化。</clinit></clinit></li><li>接口的实现类在初始化时也一样不会执行接口的<clinit>()方法。</clinit></li></ul></clinit></li><li>java虚拟机必须保证一个类的<clinit>()方法在多线程环境中被正确地加锁同步，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行完毕<clinit>()方法。<ul><li>如果在一个类的<clinit>()方法中有耗时很长的操作，那就可能造成多个进程阻塞[2]，在实际应用中这种阻塞往往是很隐蔽的。<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DeadLoopClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果不加上这个if语句，编译器将提示“Initializer does not complete normally”</span>        并拒绝编译        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"init DeadLoopClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Runnable</span> script <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">DeadLoopClass</span> dlc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLoopClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" run over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></clinit></li><li>需要注意，其他线程虽然会被阻塞，但如果执行＜clinit＞()方法的那条线程退出＜clinit＞()方法后，其他线程唤醒后则不会再次进入＜clinit＞()方法。同一个类加载器下，一个类型只会被初始化一次。</li></ul></clinit></clinit></clinit></li></ul><h1 id="类加载器-（虚拟机外部）"><a href="#类加载器-（虚拟机外部）" class="headerlink" title="类加载器 （虚拟机外部）"></a>类加载器 （虚拟机外部）</h1><blockquote><p>定义</p></blockquote><ul><li>Java虚拟机设计团队有意把类加载阶段中的“通过一个类的全限定名来获取描述该类的二进制字节流”这个动作放到Java虚拟机外部去实现</li></ul><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><blockquote><p>类和类加载器确定唯一性</p></blockquote><ul><li>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义。<ul><li>包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括了使用instanceof关键字做对象所属关系判定等各种情况。</li><li>例子<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 类加载器与instanceof关键字演示***/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ClassLoader</span> myLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> fileName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".class"</span><span class="token punctuation">;</span>                    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> myLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"org.fenixsoft.classloading.ClassLoaderTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading<span class="token punctuation">.</span></span>ClassLoaderTest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：<span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading<span class="token punctuation">.</span></span>ClassLoaderTest</span><span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>因为Java虚拟机中同时存在了两个ClassLoaderTest类，一个是由虚拟机的应用程序类加载器所加载的，另外一个是由我们自定义的类加载器加载的，虽然它们都来自同一个Class文件，但在Java虚拟机中仍然是两个互相独立的类</li></ul></li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><blockquote><p>虚拟机角度：两种类加载器</p></blockquote><ul><li>一种是启动类加载器（Bootstrap<br>ClassLoader），这个类加载器使用C++语言实现[1]，是虚拟机自身的一部分；</li><li>另外一种就是其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类<br>java.lang.ClassLoader。</li></ul><blockquote><p>程序角度</p></blockquote><ul><li>启动器加载器<br>·启动类加载器（Bootstrap Class Loader）：前面已经介绍过，这个类加载器负责加载存放在<java_home>\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，（文件名识别 rt.jar。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**Returns the class loader for the class.  Some implementations may use null to represent the bootstrap class loader. This method will return  null in such implementations if this class was loaded by the bootstrap class loader.*/</span><span class="token keyword">public</span> <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token function">getClassLoader0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">SecurityManager</span> sm <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ClassLoader</span> ccl <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getCallerClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ccl <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ccl <span class="token operator">!=</span> cl <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cl<span class="token punctuation">.</span><span class="token function">isAncestor</span><span class="token punctuation">(</span>ccl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sm<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span>GET_CLASSLOADER_PERMISSION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></java_home></li><li>·扩展类加载器（Extension Class Loader）：这个类加载器是在类sun.misc.Launcher$ExtClassLoader<br>中以Java代码的形式实现的。它负责加载<java_home>\lib\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。</java_home></li><li>·应用程序类加载器（Application Class Loader）：这个类加载器由<br>sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystem-<br>ClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径（ClassPath）上所有的类库(默认的类加载器。)</li></ul><blockquote><p>JDK9之前类加载器双亲委派模型<br><img src="/2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/3.png"></p></blockquote><blockquote><p>双亲委派模型 协作关系</p></blockquote><ul><li>类加载器之间的父子关系一般不是以继承（Inheritance）的关系来实现的，而是通常使用组合（Composition）关系来复用父加载器的代码。</li></ul><blockquote><p>双亲委派模型工作工程</p></blockquote><ul><li>收到了类加载的请求，它首先不会自己去尝试加<br>载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</li></ul><blockquote><p>双亲委派模型的作用</p></blockquote><ul><li>Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系</li><li>类java.lang.Object，它存放在rt.jar之中，无论哪一<br>个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都能够保证是同一个类。</li><li>去写一个与rt.jar类库中已有类重名的Java类，将会发现它可以正常编译，但永远无法被加载运行</li></ul><blockquote><p>双亲委派模型的代码实现</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">synchronized</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">{</span>    <span class="token comment">// 首先，检查请求的类是否已经被加载过了</span>    <span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果父类加载器抛出ClassNotFoundException</span>            <span class="token comment">// 说明父类加载器无法完成加载请求</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 在父类加载器无法加载时</span>            <span class="token comment">// 再调用本身的findClass方法来进行类加载</span>            c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先检查请求加载的类型是否已经被加载过，若没有则调用父加载器的loadClass()方法，若父加载器为空则默认使用启动类加载器作为父加载器。假如父类加载器加载失败，抛出ClassNotFoundException异常的话，才调用自己的findClass()方法尝试进行加载。</li></ul><h2 id="双亲委派模型的破坏（突破）"><a href="#双亲委派模型的破坏（突破）" class="headerlink" title="双亲委派模型的破坏（突破）"></a>双亲委派模型的破坏（突破）</h2><ul><li><p>第一次 JDK1.2，面对已经存在的用户自定义类加载器的代<br>码，为了兼容这些已有代码，无法再以技术手段避免loadClass()被子类覆盖的可能性，如果父类加载失败，会自动调用自己的findClass()方法来完成加载，这样既不影响用户按照自己的意愿去加载类，又可以保证新写出来的类加载器是符合双亲委派规则的。</p></li><li><p>第二次如果有基础类型又要调用回用户的代码，那该怎么办呢？</p><ul><li>JNDI的代码由启动类加载器来完成加载，JNDI存在的目的就是对资源进行查找和集中管理，它需要调用由其他厂商实现并部署在应用程序的ClassPath下的JNDI服务提供者接口（Service Provider Interface，SPI）的代码，现在问题来了，启动类加载器是绝不可能认识、加载这些代码的，那该怎么办？</li><li>JNDI服务使用这个线程上下文类<br>加载器去加载所需的SPI服务代码，这是一种父类加载器去请求子类加载器完成类加载的行为，这种行<br>为实际上是打通了双亲委派模型的层次结构来逆向使用类加载器，已经违背了双亲委派模型的一般性<br>原则，但也是无可奈何的事情。</li></ul></li><li><p>第三次 “动态性” 需求 也就是代码热替换（Hot Swap）、模块热部署（Hot Deployment）等。说白了就是希望Java应用程序能像我们的电脑外设那样，接上鼠标、U盘，不用重启机器就能立即使用，</p><ul><li>OSGi实现模块化热部署</li><li>每一个程序模块（OSGi中称为<br>Bundle）都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实<br>现代码的热替换。</li><li>1）将以java.*开头的类，委派给父类加载器加载。</li><li>2）否则，将委派列表名单内的类，委派给父类加载器加载。</li><li>3）否则，将Import列表中的类，委派给Export这个类的Bundle的类加载器加载。</li><li>4）否则，查找当前Bundle的ClassPath，使用自己的类加载器加载。</li><li>5）否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器<br>加载。</li><li>6）否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。</li><li>7）否则，类查找失败。</li></ul></li></ul><h1 id="Java模块化系统"><a href="#Java模块化系统" class="headerlink" title="Java模块化系统"></a>Java模块化系统</h1><blockquote><p>JDK9 :引入的Java模块化系统（Java Platform Module System，JPMS）是对Java技术的一次重要升级，为了能够实现模块化的关键目标——可配置的封装隔离机制</p></blockquote><blockquote><p>模块的特性：JDK 9的模块不仅仅像之前的JAR包那样只是<br>简单地充当代码的容器，除了代码外，Java的模块定义还包含以下内容：</p></blockquote><ul><li>·依赖其他模块的列表。</li><li>·导出的包列表，即其他模块可以使用的列表。</li><li>·开放的包列表，即其他模块可反射访问模块的列表。</li><li>·使用的服务列表。</li><li>·提供服务的实现列表。</li></ul><blockquote><p>模块针对的问题</p></blockquote><ul><li>可配置的封装隔离机制首先要解决JDK 9之前基于类路径（ClassPath）来查找依赖的可靠性问题。</li><li>此前，如果类路径中缺失了运行时依赖的类型，那就只能等程序运行到发生该类型的加载、链接<br>时才会报出运行的异常。</li><li>在JDK 9以后，如果启用了模块化进行封装，模块就可以声明对其他模块<br>的显式依赖，这样Java虚拟机就能够在启动时验证应用程序开发阶段设定好的依赖关系在运行期是否<br>完备，如有缺失那就直接启动失败，从而避免了很大一部分[1]由于类型依赖而引发的运行时异常。</li><li>并不是说模块化下就不可能出现ClassNotFoundExcepiton这类异常了，假如将某个模块中的、原本<br>公开的包中把某些类型移除，但不修改模块的导出信息，这样程序能够顺利启动，但仍然会在运行期<br>出现类加载异常。</li></ul><h2 id="模块的兼容性"><a href="#模块的兼容性" class="headerlink" title="模块的兼容性"></a>模块的兼容性</h2><blockquote><p>如何区分类库是模块还是传统的JAR包</p></blockquote><ul><li>JDK 9提出了与“类路<br>径”（ClassPath）相对应的“模块路径”（ModulePath）的概念。简单来说，就是某个类库到底是模块还<br>是传统的JAR包，只取决于它存放在哪种路径上。只要是放在类路径上的JAR文件，无论其中是否包<br>含模块化信息（是否包含了module-info.class文件），它都会被当作传统的JAR包来对待；相应地，只<br>要放在模块路径上的JAR文件，即使没有使用JMOD后缀，甚至说其中并不包含module-info.class文<br>件，它也仍然会被当作一个模块来对待。</li></ul><blockquote><p>模块化规则 （兼容性：计算JDK9以后标准库模块封装了）</p></blockquote><ul><li>·JAR文件在类路径的访问规则：所有类路径下的JAR文件及其他资源文件，都被视为自动打包在<br>一个匿名模块（Unnamed Module）里，这个匿名模块几乎是没有任何隔离的</li><li>·模块在模块路径的访问规则：模块路径下的具名模块（Named Module）只能访问到它依赖定义<br>中列明依赖的模块和包，匿名模块里所有的内容对具名模块来说都是不可见的，即具名模块看不见传<br>统JAR包的内容。</li><li>·JAR文件在模块路径的访问规则：如果把一个传统的、不包含模块定义的JAR文件放置到模块路<br>径中，它就会变成一个自动模块（Automatic Module）。尽管不包含module-info.class，但自动模块将<br>默认依赖于整个模块路径中的所有模块，因此可以访问到所有模块导出的包，自动模块也默认导出自<br>己所有的包。</li></ul><blockquote><p>模块管理的问题,同一个模块发行了多个不同的版本，那只能由开发者在编译打包时人工选择好正确版本的模块来保证依赖的正确性。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">譬如输入“java--list-modules”，会得到明确带着版本号的模块列表：java.base@12.0.1java.compiler@12.0.1java.datatransfer@12.0.1java.desktop@12.0.1java.instrument@12.0.1java.logging@12.0.1java.management@12.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模块化的类加载器"><a href="#模块化的类加载器" class="headerlink" title="模块化的类加载器"></a>模块化的类加载器</h2><blockquote><p>模块化下的类加载器的改变</p></blockquote><ul><li>首先，是扩展类加载器（Extension Class Loader）被平台类加载器（Platform Class Loader）取代。<ul><li>既然整个JDK都基于模块化进行构建（原来的rt.jar和tools.jar被拆分<br>成数十个JMOD文件），其中的Java类库就已天然地满足了可扩展的需求</li><li>在新版<br>的JDK中也取消了<java_home>\jre目录，因为随时可以组合构建出程序运行所需的JRE来，譬如假<br>设我们只使用java.base模块中的类型，那么随时可以通过以下命令打包出一个“JRE”：<pre class="line-numbers language-none"><code class="language-none">jlink -p $JAVA_HOME/jmods --add-modules java.base --output jre<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></java_home></li></ul></li><li>其次，平台类加载器和应用程序类加载器都不再派生自java.net.URLClassLoader<ul><li>现在启动类加载器、平台类加载器、应用程序类加载器全都继承于<br>jdk.internal.loader.BuiltinClassLoader<br><img src="/2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/4.png"><br><img src="/2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/5.png"></li></ul></li><li>最后，JDK 9中虽然仍然维持着三层类加载器和双亲委派的架构，但类加载的委派关系也发生了变动。<ul><li>当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能<br>够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器<br>完成加载，也许这可以算是对双亲委派的第四次破坏。<br><img src="/2020/12/18/deepinjvm-part03-jvmsubsystem-chap07-classload/6.png"></li></ul></li></ul><blockquote><p>明确三个类加载器负责各自加载的模块，即前面所说的归属关系</p></blockquote><ul><li>·启动类加载器负责加载的模块：<pre class="line-numbers language-none"><code class="language-none">java.base                        java.security.sasljava.datatransfer                java.xmljava.desktop                     jdk.httpserverjava.instrument                  jdk.internal.vm.cijava.logging                     jdk.managementjava.management                  jdk.management.agentjava.management.rmi              jdk.naming.rmijava.naming                      jdk.netjava.prefs                       jdk.sctpjava.rmi                         jdk.unsupported<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>·平台类加载器负责加载的模块：<pre class="line-numbers language-none"><code class="language-none">java.activation*                jdk.accessibilityjava.compiler*                  jdk.charsetsjava.corba*                     jdk.crypto.cryptokijava.scripting                  jdk.crypto.ecjava.se                         jdk.dynalinkjava.se.ee                      jdk.incubator.httpclientjava.security.jgss              jdk.internal.vm.compiler*java.smartcardio                jdk.jsobjectjava.sql                        jdk.localedatajava.sql.rowset                 jdk.naming.dnsjava.transaction*               jdk.scripting.nashornjava.xml.bind*                  jdk.security.authjava.xml.crypto                 jdk.security.jgssjava.xml.ws*                    jdk.xml.domjava.xml.ws.annotation*         jdk.zipfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>·应用程序类加载器负责加载的模块：<pre class="line-numbers language-none"><code class="language-none">jdk.aot                         jdk.jdepsjdk.attach                      jdk.jdijdk.compiler                    jdk.jdwp.agentjdk.editpad                     jdk.jlinkjdk.hotspot.agent               jdk.jshelljdk.internal.ed                 jdk.jstatdjdk.internal.jvmstat            jdk.packjdk.internal.le                 jdk.policytooljdk.internal.opt                jdk.rmicjdk.jartool                     jdk.scripting.nashorn.shelljdk.javadoc                     jdk.xml.bind*jdk.jcmd                        jdk.xml.ws*jdk.jconsole* <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCODE-operate</title>
      <link href="2020/12/16/vscode-operate/"/>
      <url>2020/12/16/vscode-operate/</url>
      
        <content type="html"><![CDATA[<blockquote><p>重命名变量</p></blockquote><p>1、首先看看自己需要同时修改多处的代码是不是要bai重命名一个变量，如果是的话，有现成的快捷键f2。选中一个变量，按f2，弹出一个小窗口，在里面输入内容后按回车，所有该变量都会被重命名。<br><img src="/2020/12/16/vscode-operate/1.png"><br>2、但是要注意，在js文件中，如果这个变量没有用var或者const或者let声明，会无法重命名。</p><p>二、多光标</p><p>1、按住alt，用鼠标左键点击，可以出现多个光标，输入的代码可以在光标处同时增加。<br><img src="/2020/12/16/vscode-operate/2.png"></p><p>2、按住Ctrl + Alt，再按键盘上向上或者向下的键，可以使一列上出现多个光标。<br><img src="/2020/12/16/vscode-operate/3.png"></p><p>3、选中一段文字，按shift+alt+i，可以在每行末尾出现光标<br><img src="/2020/12/16/vscode-operate/4.png"></p><p><img src="/2020/12/16/vscode-operate/5.png"></p><p>4、光标放在一个地方，按ctrl+shift+L或者ctrl+f2，可以在页面中出现这个词的不同地方都出现光标。有时候这个快捷键的作用和f2重命名变量类似，但是它更加广泛，因为还可以对比如字符串相同的非同一变量或函数类的东西修改。</p><p><img src="/2020/12/16/vscode-operate/6.png"><br><img src="/2020/12/16/vscode-operate/7.png"></p><p>5、按shift+alt，再使用鼠标拖动，也可以出现竖直的列光标，同时可以选中多列。</p>]]></content>
      
      
      <categories>
          
          <category> VSCODE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-part03-JVMsubSystem-chap06-ClassStructure</title>
      <link href="2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/"/>
      <url>2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#overview">overview</a></li><li><a href="#%E5%8F%91%E5%B1%95%E7%94%B1%E6%9D%A5%E5%B9%B3%E5%8F%B0%E6%97%A0%E5%85%B3%E7%B3%BB%E8%AF%AD%E8%A8%80%E6%97%A0%E5%85%B3%E7%B3%BB%E4%B9%9F%E6%AD%A3%E5%9C%A8%E5%8F%91%E5%B1%95">发展由来（平台无关系、语言无关系也正在发展）</a></li><li><a href="#%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84">类文件结构</a><ul><li><a href="#class%E6%96%87%E4%BB%B6%E5%9F%BA%E7%A1%80">Class文件基础</a></li><li><a href="#%E9%AD%94%E6%95%B0%E4%B8%8Eclass%E6%96%87%E4%BB%B6%E7%89%88%E6%9C%AC">魔数与Class文件版本</a></li><li><a href="#%E5%B8%B8%E9%87%8F%E6%B1%A0">常量池</a><ul><li><a href="#%E5%91%BD%E4%BB%A4%E8%AE%A1%E7%AE%97%E5%88%86%E6%9E%90-%E5%85%B6%E4%BD%9919%E4%B8%AA%E5%B8%B8%E9%87%8F">命令计算分析 其余19个常量</a></li><li><a href="#%E5%B8%B8%E9%87%8F%E6%B1%A017%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%BB%93%E6%9E%84%E6%80%BB%E8%A1%A8">常量池17中数据类型的结构总表</a></li></ul></li><li><a href="#%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97">访问标志</a></li><li><a href="#%E7%B1%BB%E7%B4%A2%E5%BC%95%E7%88%B6%E7%B1%BB%E7%B4%A2%E5%BC%95%E6%8E%A5%E5%8F%A3%E7%B4%A2%E5%BC%95%E9%9B%86%E5%90%88">类索引、父类索引、接口索引集合</a></li><li><a href="#%E5%AD%97%E6%AE%B5%E8%A1%A8%E9%9B%86%E5%90%88">字段表集合</a></li><li><a href="#%E6%96%B9%E6%B3%95%E8%A1%A8%E9%9B%86%E5%90%88">方法表集合</a></li><li><a href="#%E5%B1%9E%E6%80%A7%E8%A1%A8%E9%9B%86%E5%90%88">属性表集合</a><ul><li><a href="#code">CODE</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E8%A1%A8">异常表</a></li><li><a href="#exceptions-%E5%B1%9E%E6%80%A7">Exceptions 属性</a></li><li><a href="#linenumbertable%E5%B1%9E%E6%80%A7">LineNumberTable属性</a></li><li><a href="#localvariabletable%E5%8F%8Alocalvariabletypetable%E5%B1%9E%E6%80%A7">LocalVariableTable及LocalVariableTypeTable属性</a></li><li><a href="#sourcefile%E5%8F%8Asourcedebugextension%E5%B1%9E%E6%80%A7">SourceFile及SourceDebugExtension属性</a></li><li><a href="#constantvalue%E5%B1%9E%E6%80%A7">ConstantValue属性</a></li><li><a href="#innerclasses%E5%B1%9E%E6%80%A7">InnerClasses属性</a></li><li><a href="#deprecated%E5%8F%8Asynthetic%E5%B1%9E%E6%80%A7">Deprecated及Synthetic属性</a></li><li><a href="#stackmaptable%E5%B1%9E%E6%80%A7">StackMapTable属性</a></li><li><a href="#signature%E5%B1%9E%E6%80%A7">Signature属性</a></li><li><a href="#bootstrapmethods%E5%B1%9E%E6%80%A7">BootstrapMethods属性</a></li><li><a href="#methodparameters%E5%B1%9E%E6%80%A7">MethodParameters属性</a></li><li><a href="#%E6%A8%A1%E5%9D%97%E5%8C%96%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7">模块化相关属性</a></li></ul></li></ul></li><li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E7%AE%80%E4%BB%8B">字节码指令简介</a><ul><li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">字节码和数据类型</a></li><li><a href="#%E5%8A%A0%E8%BD%BD%E5%92%8C%E5%AD%98%E5%82%A8%E6%8C%87%E4%BB%A4">加载和存储指令</a></li><li><a href="#%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4">运算指令</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%8C%87%E4%BB%A4">类型转换指令</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%AE%BF%E9%97%AE%E6%8C%87%E4%BB%A4">对象创建访问指令</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E6%95%B0%E6%A0%88%E7%AE%A1%E7%90%86%E6%8C%87%E4%BB%A4">操作数栈管理指令</a></li><li><a href="#%E8%BD%AC%E7%A7%BB%E6%8E%A7%E5%88%B6%E6%8C%87%E4%BB%A4">转移控制指令</a></li><li><a href="#%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%92%8C%E8%BF%94%E5%9B%9E%E6%8C%87%E4%BB%A4">方法调用和返回指令</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4">异常处理指令</a></li><li><a href="#%E5%90%8C%E6%AD%A5%E6%8C%87%E4%BB%A4">同步指令</a></li></ul></li><li><a href="#%E5%85%AC%E6%9C%89%E8%AE%BE%E8%AE%A1-%E7%A7%81%E6%9C%89%E5%AE%9E%E7%8E%B0">公有设计 私有实现</a></li><li><a href="#class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%8F%91%E5%B1%95">CLASS文件结构发展</a></li></ul><!-- /TOC --><blockquote><p>代码编译结果从本地机器码到字节码</p></blockquote><h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><blockquote><p>近十年虚拟机的出现，程序编译成二进制本地机器码不再是唯一选择。大多程序选择了指令无关、平台中立的格式来作为编译后的存储格式</p></blockquote><h1 id="发展由来（平台无关系、语言无关系也正在发展）"><a href="#发展由来（平台无关系、语言无关系也正在发展）" class="headerlink" title="发展由来（平台无关系、语言无关系也正在发展）"></a>发展由来（平台无关系、语言无关系也正在发展）</h1><blockquote><p>如果指令集只有x86 OS 只有windows也看就没有Java了。<br>利用与平台无关的字节码 Write Once,Run Anywhere<br>语言无关系的发展<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/1.png"></p></blockquote><h1 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h1><blockquote><p>Java 良好向后兼容的原因 Class文件结构稳定（升级版本后 旧版本编译产品的可运行性）</p></blockquote><ul><li><strong>任何一个Class对应着唯一一个类或者接口的定义信息，但是类或接口不一定定义在文件里（动态生成送入类加载器）</strong></li></ul><h2 id="Class文件基础"><a href="#Class文件基础" class="headerlink" title="Class文件基础"></a>Class文件基础</h2><ul><li>8个字节一个基础单位的二进制流，中间没有分隔符，占用8个字节以上的数据项，高位在前的方式分割</li><li>C语言结构体的伪接口存储数据，只有两种数据类型(无符号数、表)<ul><li>无符号数：u1 u2 u4 u8 代表1~8字节的无符号数。用来描述数组、索引、数值量、UTF-8编码构造字符串值</li><li>表：由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表命名习惯以“_info”结尾</li></ul></li><li>整个Class文件本质上可以看成一个表 按严格顺序排列<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/2.png"></li><li>由于Class 没有任何分隔符，表中的数据项、顺序、数量、数据存储的字节序（Class 是Big-Endian 我们的阅读方式存储9437 指数据的高字节，保存在内存的低地址中)</li></ul><h2 id="魔数与Class文件版本"><a href="#魔数与Class文件版本" class="headerlink" title="魔数与Class文件版本"></a>魔数与Class文件版本</h2><ul><li><p>Class的头四个字节 magic number,确定是否可以被虚拟机接受的Class （很多格式都有 因为文件扩展名可任意改动）</p></li><li><p>Class的魔数 0xCAFEBABE(咖啡宝贝) </p></li><li><p>之后的四个字节 Class文件夹版本 （第五第六 次版本号、第七第八 主版本号） 从45开始 JDK1.0<del>1.1 就是45.0</del>45.3 </p></li><li><p>该版本兼容 低版本</p></li></ul><blockquote><p>例子 JDK6<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/3.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/4.png"></p></blockquote><blockquote><p>版本表<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/5.png"></p></blockquote><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><blockquote><p>存放位置</p></blockquote><ul><li>常量池数量不确定，常量池入口放入u2类型数据代表常量池容量计数</li><li>计数（从1开始 22代表21个常量），索引1~21 0空出来可表示不引用任何一个常量池项目含义</li></ul><blockquote><p>存放东西</p></blockquote><ul><li>字面量<ul><li>接近于java语言常量、文本字符串、final 常量</li></ul></li><li>符号引用：类似编译原理的东西<ul><li>被模块导出的或开发的包</li><li>类接口和全限定名</li><li>字段的名称和描述符</li><li>方法句柄和和方法类型</li><li>动态调用点和动态常量</li></ul></li></ul><blockquote><p>javac编译的时候，不像C C++那样连接，而且虚拟机加载Class文件的时候动态连接。Ckass未捕获不会保存各个方法字段最终在内存的布局信息（需要虚拟机运行期转换得到真正的内存入口）</p></blockquote><blockquote><p>常量类型<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/6.png"></p></blockquote><blockquote><p>不同常量类型有不同的数据结构</p></blockquote><ul><li>第一项常量 （A地址 ） 0x07也就是CONSTANT——CLASS——info  类和接口的符号引用<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/7.png"></li><li>Tag 区分常量类型  </li><li>name_index 是常量池的索引值 指向一个CONSTANT_UTF8_info类型常量，代表这个类的全限定名 0x0002执行常量池第二个项常量 </li><li>标志位 0x01 就是 CONSTANT_UTF8_info<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/9.png"></li><li>length值代表字符串长度 使用UTF-8缩略编码表示字符串</li><li>UTF-8缩略编码和UTF-8普通编码的区别<ul><li>从\u0001<del>007f （1</del>127的ASCII编码）的字符用一个字节表示  \u0080~07ff 的所有缩略码用两个字节表示 </li><li>\u0800~ffff 的所有字符的缩略码就和普通UTF-8编码一样用三个自己表示</li></ul></li></ul><blockquote><p>Class 文件 的方法字段都引用CONSTANT_UTF8_info型常量描述 最大长度就length 的u2  <strong>定义了超过64KB的英文字符或者方法名，就算全部合法，也无法编译</strong></p></blockquote><h3 id="命令计算分析-其余19个常量"><a href="#命令计算分析-其余19个常量" class="headerlink" title="命令计算分析 其余19个常量"></a>命令计算分析 其余19个常量</h3><blockquote><p>javap  -verbose<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/10.png"></p></blockquote><h3 id="常量池17中数据类型的结构总表"><a href="#常量池17中数据类型的结构总表" class="headerlink" title="常量池17中数据类型的结构总表"></a>常量池17中数据类型的结构总表</h3><p><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/11.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/12.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/13.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/14.png"></p><h2 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h2><blockquote><p>常量池结束后就是2个字节的访问标志</p></blockquote><ul><li>一个16个现在用到了9个 （没用到都是0）<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/15.png"></li></ul><blockquote><p>public super  0x0001|0x0020<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/16.png"></p></blockquote><h2 id="类索引、父类索引、接口索引集合"><a href="#类索引、父类索引、接口索引集合" class="headerlink" title="类索引、父类索引、接口索引集合"></a>类索引、父类索引、接口索引集合</h2><blockquote><p>类所有和父类索引都是一个u2类型,接口索引集合是一组u2类型数据集合 </p></blockquote><blockquote><p>类索引、父类索引、接口索引集合顺序在访问标志之后，查找全限定名过程<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/17.png"></p></blockquote><blockquote><p>例子<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/18.png"></p></blockquote><ul><li>0x0001 0x0003 0x0000 类索引 1 父类索引 3 接口索引结合大小 0<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/19.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/20.png"></li></ul><h2 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h2><blockquote><p>描述接口和类中声明的变量 类级变量和实例型<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/21.png"></p></blockquote><ul><li>访问标志<br>  <img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/22.png"><ul><li>name_index descriptor_index 对应常量池的引用，字段的简单名称和字段描述符</li></ul></li></ul><ul><li>三种特殊字符串 “简单名称” “描述符” “全限定名”<ul><li>全限定名 org/fenixsoft/clazz/TestClass;</li><li>简单名称 没有类型和参数修饰的方法或者字段 inc() 就是inc </li><li>方法字段描述符<ul><li>基本数据类型<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/23.png"></li><li>对象类型 比如String 二维数组 [[Ljava/lang/String  整形数组[I</li><li>描述方法  先参数列表后返回。void inc() == ()V  int indexOf(char[] source,int sourcecon) == ([CI)I</li></ul></li></ul></li></ul><blockquote><p>描述字段例子<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/24.png"></p></blockquote><ul><li>fields_count=1代表 字段只有一个</li><li>acceess_flags 代表 private </li><li>name_index 代表常量表5 （CONSTANT_Utf8_info类型的字符串 值为“m” </li><li>descriptor_index 0x0006 指向常量池字符串”I” </li><li>所以源代码是private int m</li></ul><blockquote><p>字段表集合不会列出从父类或者父接口继承的字段，但可能出现原本Java代码中不存在的字段 </p></blockquote><ul><li>内部类为保存对外部类访问，编译器就会自动添加指向外部类实例的字段。</li><li>另外，在Java语言中字段是无法重载的，两个字段的数据类型、修饰符不管是否相同，都必须使用不一样的名称，但是对于Class文件格式来讲，只要两个字段的描述符不是完全相同，那字段重名就是合法的。</li></ul><h2 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h2><blockquote><p>与字段差不多<br>方法表结构<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/25.png"></p></blockquote><ul><li>访问标志<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/26.png"></li></ul><blockquote><p>例子<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/27.png"></p></blockquote><ul><li>方法表<br>  <img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/28.png"><ul><li>如果没有override 就不会出现父类信息</li><li>可能出现编译器自动添加方法 类构造器<clinit>()<br>和实例构造器 <init>()</init></clinit></li><li>java里重载 必须有一个不同的特征签名（返回值不包含在特征签名里面），但是在Class文件格式里，特征签名包含返回值</li></ul></li></ul><h2 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h2><p>attribute_info</p><blockquote><p>JDK12 总共29属性  开始9属性<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/29.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/30.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/31.png"></p></blockquote><ul><li>每个属性，它的名称都要从常量池引用一个CONSTANT_Utf8_info类型 属性值的结构完全自定义 需要u4长度说明属性值所占用的位数<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/32.png"></li></ul><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><ul><li>CODE 属性<ul><li>java方法体里的代码经过编译器处理，变成字节码指令放在COde属性（接口和抽象类的方法 不存在Code属性）<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/33.png"></li><li>atrribute_name_index 执行CONSTANT_Utf8_info,此常量值固定“Code” 代表属性名称 </li><li>attribute_length指示了属性值长度</li><li>max_stack 代表操作数栈深度的最大值 （任意时刻都不会超过这个深度，虚拟机根据这个值分配栈帧操作栈深度</li><li>max_locals 代表局部变量表的所需存储，单位是Slot，对于不超过32位的分配一个槽，超过double Long就两个槽（<strong>注意是变量槽数，不是变量数</strong></li><li>code_length和code用来存储Java源程序编译后生成的字节码指令。code_length代表字节码长度（规范规定最长u2(虽然是u4类型）,超过拒绝编译。code是用于存储字节码指令的一系列字节流。 U1 一共可以表达256条指令。</li></ul></li></ul><blockquote><p>Code 例子<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/35.png"></p></blockquote><ul><li>1）读入2A，查表得0x2A对应的指令为aload_0，这个指令的含义是将第0个变量槽中为reference类型的本地变量推送到操作数栈顶。</li><li>2）读入B7，查表得0xB7对应的指令为invokespecial，这条指令的作用是以栈顶的reference类型的数据所指向的对象作为方法接收者，调用此对象的实例构造器方法、private方法或者它的父类的方法。这个方法有一个u2类型的参数说明具体调用哪一个方法，它指向常量池中的一个CONSTANT_Methodref_info类型常量，即此方法的符号引用。</li><li>3）读入000A，这是invokespecial指令的参数，代表一个符号引用，查常量池得0x000A对应的常量<br>为实例构造器“<init>()”方法的符号引用。</init></li><li>4）读入B1，查表得0xB1对应的指令为return，含义是从方法的返回，并且返回值为void。这条指<br>令执行后，当前方法正常结束。</li></ul><blockquote><p>Class 解析中的CODE例子<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/36.png"><br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/37.png"></p></blockquote><ul><li>注意到 两个方法实例构造器<init>()和inc() Args_size=1,但是他们都没参数，而且也没有任何局部变量Locals也等于1  <strong>（Java语言里面的潜规则：任何实例方法都可以通过“this访问此方法对象” 静态的话Args_size=0了）</strong></init></li></ul><h3 id="异常表"><a href="#异常表" class="headerlink" title="异常表"></a>异常表</h3><blockquote><p>显示异常表：JAVA语言 通过异常表来实现异常 和finally<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/38.png"></p></blockquote><h3 id="Exceptions-属性"><a href="#Exceptions-属性" class="headerlink" title="Exceptions 属性"></a>Exceptions 属性</h3><blockquote><p>Exceptions属性的作用是列举出方法中可能抛出的受查异常（Checked Excepitons），也就是方法描述时在throws关键字后面列举的异常。<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/39.png"></p></blockquote><h3 id="LineNumberTable属性"><a href="#LineNumberTable属性" class="headerlink" title="LineNumberTable属性"></a>LineNumberTable属性</h3><blockquote><p>LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。<br>它并不是运行时必需的属性，但默认会生成到Class文件之中(调试错误用)<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/40.png"></p></blockquote><ul><li>找到 对应错误行</li></ul><h3 id="LocalVariableTable及LocalVariableTypeTable属性"><a href="#LocalVariableTable及LocalVariableTypeTable属性" class="headerlink" title="LocalVariableTable及LocalVariableTypeTable属性"></a>LocalVariableTable及LocalVariableTypeTable属性</h3><blockquote><p>LocalVariableTable属性用于描述栈帧中局部变量表的变量与Java源码中定义的变量之间的关系，它也不是运行时必需的属性<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/41.png"></p></blockquote><ul><li>找到对应参数值 调试<blockquote><p>JDK5添加LocalVariableTypeTable  对于非泛型类型来说，描述符和特征签名能描述的信息是能吻合一致的，但是泛型引入之后，由于描述符中泛型的参数化类型被擦除掉，描述符就不能准确描述泛型类型了。因此出现了LocalVariableTypeTable属性，使用字段的特征签名来完成泛型的描述。</p></blockquote></li></ul><h3 id="SourceFile及SourceDebugExtension属性"><a href="#SourceFile及SourceDebugExtension属性" class="headerlink" title="SourceFile及SourceDebugExtension属性"></a>SourceFile及SourceDebugExtension属性</h3><blockquote><p>找到对应源文件<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/42.png"><br>JDK加入定位额外的自定义内容文件<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/43.png"></p></blockquote><h3 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h3><blockquote><p>通知虚拟机自动为静态变量赋值。只有被static关键字修饰的变量（类变量）才可以使用这项属性。</p></blockquote><ul><li>对非static类型的变量（也就是实例变量）的赋值是在实例构造器<init>()方法中进行的；</init></li><li>而对于类变量，则有两种方式可以选择：在类构造器<clinit>()方法中或者使用ConstantValue属性。</clinit></li><li>目前，类型是基本类型或者java.lang.String的话，就将会生成ConstantValue属性来进行初始化；如果这个变量没<br>有被final修饰，或者并非基本类型及字符串，则将会选择在<clinit>()方法中进行初始化。</clinit></li></ul><p><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/44.png"></p><h3 id="InnerClasses属性"><a href="#InnerClasses属性" class="headerlink" title="InnerClasses属性"></a>InnerClasses属性</h3><p>InnerClasses属性用于记录内部类与宿主类之间的关联。如果一个类中定义了内部类，那编译器将会为它以及它所包含的内部类生成InnerClasses属性。</p><p><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/45.png"></p><h3 id="Deprecated及Synthetic属性"><a href="#Deprecated及Synthetic属性" class="headerlink" title="Deprecated及Synthetic属性"></a>Deprecated及Synthetic属性</h3><blockquote><p>Deprecated和Synthetic两个属性都属于标志类型的布尔属性，只存在有和没有的区别，没有属性值<br>的概念。<br>Deprecated属性用于表示某个类、字段或者方法，已经被程序作者定为不再推荐使用，它可以通<br>过代码中使用“@deprecated”注解进行设置。</p></blockquote><blockquote><p>Synthetic属性代表此字段或者方法并不是由Java源码直接产生的，而是由编译器自行添加的<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/46.png"></p></blockquote><h3 id="StackMapTable属性"><a href="#StackMapTable属性" class="headerlink" title="StackMapTable属性"></a>StackMapTable属性</h3><blockquote><p>JDK 6 新的验证器在同样能保证Class文件合法性的前提下，省略了在运行<br>期通过数据流分析去确认字节码的行为逻辑合法性的步骤，而在编译阶段将一系列的验证类型<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/47.png"></p></blockquote><h3 id="Signature属性"><a href="#Signature属性" class="headerlink" title="Signature属性"></a>Signature属性</h3><blockquote><p>JDK5  Signature属性会记录泛型签名信息,因为Java语言的泛型采用的是擦除法实现的伪泛型，字节码（Code属性）中所有的泛型信息编译（类型变量、参数化类型）在编译之后都通通被擦除掉。</p></blockquote><ul><li>好处：实现简单（主要修改Javac编译器，虚拟机内部只做了很少的改动）、非常容易实现Backport，运行期也能够节省一些类型所占的内存空间。</li><li>坏处是运行期就无法像C#等有真泛型支持的语言那样，将泛型类型与用户定义的普通类型同等对待，例如运行期做反射时无法获得泛型信息。现在Java的反射API能够获取的泛型类型，最终的数据来源也是这个属性。<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/48.png"></li></ul><h3 id="BootstrapMethods属性"><a href="#BootstrapMethods属性" class="headerlink" title="BootstrapMethods属性"></a>BootstrapMethods属性</h3><h3 id="MethodParameters属性"><a href="#MethodParameters属性" class="headerlink" title="MethodParameters属性"></a>MethodParameters属性</h3><p>JDK8</p><h3 id="模块化相关属性"><a href="#模块化相关属性" class="headerlink" title="模块化相关属性"></a>模块化相关属性</h3><h1 id="字节码指令简介"><a href="#字节码指令简介" class="headerlink" title="字节码指令简介"></a>字节码指令简介</h1><blockquote><p>简介</p></blockquote><ul><li>指令由一个字节长度的以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。</li></ul><blockquote><p>特点</p></blockquote><ul><li>由于Java虚拟机采用面向操作数栈而不是面向寄存器的架构（这两种架构的执行过程、区别和影响将在第8章中探讨），所以大多数指令都不包含操作数，只有一个操作码，指令参数都存放在操作数栈中。</li><li>最多255,由于Class文件格式放弃了编译后代码的操作数长度对齐，这就意味着虚拟机在处理那些超过一个字节的数<br>据时，不得不在运行时从字节中重建出具体数据的结构<pre class="line-numbers language-none"><code class="language-none">(byte1 &lt;&lt; 8) | byte2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>优势劣势</p></blockquote></li><li>某种程度上会导致解释执行字节码时将损失一些性能，但这样做的优势也同样明显：</li><li>放弃了操作数长度对齐，就意味着可以省略掉大量的填充和间隔符号；用一个字节来代表操作码，</li><li>也是为了尽可能获得短小精干的编译代码。这种追求尽可能小数据量、高传输效率的设计是由Java语言设计之初主要面向网络、智能家电的技术背景所决定的，并一直沿用至今。</li></ul><h2 id="字节码和数据类型"><a href="#字节码和数据类型" class="headerlink" title="字节码和数据类型"></a>字节码和数据类型</h2><blockquote><p>为了指令集控制在一自己，不能支持所有数据类型<br><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/49.png"></p></blockquote><ul><li>大部分不支持 整形 byte char short 和boolean ,编译运行期间会带符号 或者无符号或者成int</li></ul><h2 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h2><blockquote><p>加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈（见第2章关于内存区域的介绍）之<br>间来回传输，这类指令包括：</p></blockquote><ul><li>·将一个局部变量加载到操作栈：iload、iload_<n>、lload、lload_<n>、fload、fload_<n>、dload、<br>dload_<n>、aload、aload_<n></n></n></n></n></n></li><li>·将一个数值从操作数栈存储到局部变量表：istore、istore_<n>、lstore、lstore_<n>、fstore、<br>fstore_<n>、dstore、dstore_<n>、astore、astore_<n></n></n></n></n></n></li><li>·将一个常量加载到操作数栈：bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、<br>iconst_<i>、lconst_<l>、fconst_<f>、dconst_<d></d></f></l></i></li><li>·扩充局部变量表的访问索引的指令：wide</li></ul><h2 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h2><ul><li>加法指令：iadd、ladd、fadd、dadd</li><li>·减法指令：isub、lsub、fsub、dsub</li><li>·乘法指令：imul、lmul、fmul、dmul</li><li>·除法指令：idiv、ldiv、fdiv、ddiv</li><li>·求余指令：irem、lrem、frem、drem</li><li>·取反指令：ineg、lneg、fneg、dneg</li><li>·位移指令：ishl、ishr、iushr、lshl、lshr、lushr</li><li>·按位或指令：ior、lor</li><li>·按位与指令：iand、land</li><li>·按位异或指令：ixor、lxor</li><li>·局部变量自增指令：iinc</li><li>·比较指令：dcmpg、dcmpl、fcmpg、fcmpl、lcmp</li></ul><h2 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h2><blockquote><p>Java虚拟机直接支持（即转换时无须显式的转换指令）以下数值类型的宽化类型转换（WideningNumeric Conversion，即小范围类型向大范围类型的安全转换）：</p></blockquote><ul><li>·int类型到long、float或者double类型</li><li>·long类型到float、double类型</li><li>·float类型到double类型</li></ul><blockquote><p>与之相对的，处理窄化类型转换（Narrowing Numeric Conversion）时，就必须显式地使用转换指令来完成，这些转换指令包括i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l和d2f。窄化类型转换可能会导致转换结果产生不同的正负号、不同的数量级的情况，转换过程很可能会导致数值的精度丢失。</p></blockquote><blockquote><p>Java虚拟机将一个浮点值窄化转换为整数类型T（T限于int或long类型之一）的时候，必须遵循以下转换规则：</p></blockquote><ul><li>·如果浮点值是NaN，那转换结果就是int或long类型的0。</li><li>·如果浮点值不是无穷大的话，浮点值使用IEEE 754的向零舍入模式取整，获得整数值v。</li><li>如果v在目标类型T（int或long）的表示范围之类，那转换结果就是v；否则，将根据v的符号，转换为T所能表<br>示的最大或者最小正数。</li></ul><blockquote><p>数据类型窄化转换可能会发生上限溢出、下限溢出和精度丢失</p></blockquote><h2 id="对象创建访问指令"><a href="#对象创建访问指令" class="headerlink" title="对象创建访问指令"></a>对象创建访问指令</h2><ul><li>创建类实例的指令：new</li><li>·创建数组的指令：newarray、anewarray、* multianewarray</li><li>·访问类字段（static字段，或者称为类变量）和实例字段* （非static字段，或者称为实例变量）的</li><li>指令：getfield、putfield、getstatic、putstatic</li><li>·把一个数组元素加载到操作数栈的指令：baload、caload、* saload、iaload、laload、faload、</li><li>daload、aaload</li><li>·将一个操作数栈的值储存到数组元素中的指令：bastore、* castore、sastore、iastore、fastore、</li><li>dastore、aastore</li><li>·取数组长度的指令：arraylength</li><li>·检查类实例类型的指令：instanceof、checkcast</li></ul><h2 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h2><ul><li>·将操作数栈的栈顶一个或两个元素出栈：pop、pop2</li><li>·复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1、dup2_x1、dup_x2、dup2_x2</li><li>·将栈最顶端的两个数值互换：swap</li></ul><h2 id="转移控制指令"><a href="#转移控制指令" class="headerlink" title="转移控制指令"></a>转移控制指令</h2><p>从概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存<br>器的值。控制转移指令包括：</p><ul><li>·条件分支：ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、<br>if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne</li><li>·复合条件分支：tableswitch、lookupswitch</li><li>·无条件分支：goto、goto_w、jsr、jsr_w、ret</li></ul><blockquote><p>由于各种类型的比较最终都会转化为int类型的比较操作，int类型比较是否方便、完善就显得尤为重要，而Java虚拟机提供的int类型的条件分支指令是最为丰富、强大的。</p></blockquote><h2 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h2><p>方法调用（分派、执行过程）将在第8章具体讲解，这里仅列举以下五条指令用于方法调用：</p><ul><li>·invokevirtual指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式。</li><li>·invokeinterface指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。</li><li>·invokespecial指令：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。</li><li>·invokestatic指令：用于调用类静态方法（static方法）。</li><li>·invokedynamic指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。</li></ul><blockquote><p>方法调用指令与数据类型无关，而方法返回指令是根据返回值的类型区分的，包括ireturn（当返<br>回值是boolean、byte、char、short和int类型时使用）、lreturn、freturn、dreturn和areturn，另外还有一<br>条return指令供声明为void的方法、实例初始化方法、类和接口的类初始化方法使用。</p></blockquote><h2 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h2><p>Java程序中显式抛出异常的操作（throw语句）都由athrow指令来实现</p><blockquote><p>处理异常（catch语句）不是由字节码指令来实现的（很久之前曾经使用jsr和ret指令来实现，现在已经不用了），而是采用异常表来完成。</p></blockquote><h2 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h2><blockquote><p>Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用管程（Monitor，更常见的是直接将它称为“锁”）来实现的。</p></blockquote><p><img src="/2020/12/15/deepinjvm-part03-jvmsubsystem-chap06-classstructure/50.png"></p><h1 id="公有设计-私有实现"><a href="#公有设计-私有实现" class="headerlink" title="公有设计 私有实现"></a>公有设计 私有实现</h1><blockquote><p>满足规范 优化CLASS文件也可以<br>虚拟机实现的方式主要有以下两种：</p></blockquote><ul><li>·将输入的Java虚拟机代码在加载时或执行时翻译成另一种虚拟机的指令集；</li><li>·将输入的Java虚拟机代码在加载时或执行时翻译成宿主机处理程序的本地指令集（即即时编译器代码生成技术）。</li></ul><h1 id="CLASS文件结构发展"><a href="#CLASS文件结构发展" class="headerlink" title="CLASS文件结构发展"></a>CLASS文件结构发展</h1><blockquote><p>主要改变和不变</p></blockquote><ul><li><p>改变 集中在访问标志、属性表这些设计上原本就是可扩展的数据结构中添加新内容。</p></li><li><p>不变 主体结构、字节码指令的语义和数量</p></li></ul><blockquote><p>Java技术体系实现平台无关、语言无关两项特性的重要支柱。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part02-Structures-chap08-ThreadPool</title>
      <link href="2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/"/>
      <url>2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/</url>
      
        <content type="html"><![CDATA[<h1 id="执行任务和执行策略的隐形耦合"><a href="#执行任务和执行策略的隐形耦合" class="headerlink" title="执行任务和执行策略的隐形耦合"></a>执行任务和执行策略的隐形耦合</h1><blockquote><p>Executor框架解耦了任务提交和执行策略，但是有些类型需要明确指定执行策略</p></blockquote><ul><li>依赖性任务。</li><li>线程封闭机制任务。单线程的executor能够对并发更强的承诺相比于线程池。（确保任务不会并发，使得放宽代码对线程安全的要求） 。如果改变executor为线程池环境，就会失去线程安全性</li><li>对响应敏感的任务。</li><li>使用ThreadLocal的任务。ThreadLocal使得每个线程都拥有某个变量的一个私有“版本”。</li></ul><blockquote><p><strong>只有任务都是同类型并且相互独立的时候，线程池才能达到最佳</strong></p></blockquote><ul><li>运行时间大 和小在一起 任意“拥塞”</li><li>提交任务依赖于其他任务，除非线程池无限大，很有可能死锁</li><li>基于网络的典型服务器应用程序-网页、邮件、文件都是同类型且独立</li></ul><h2 id="线程饥饿死锁"><a href="#线程饥饿死锁" class="headerlink" title="线程饥饿死锁"></a>线程饥饿死锁</h2><blockquote><p>线程池中一个任务将另一个任务提交到同一个executor等待这个被提交任务结构，那么通常死锁。（第二任务停留在工作队列，并等待第一个任务完成，第一个又在等待第二个完成）</p></blockquote><ul><li>更大线程也会因为 所有都在等待其他工作队列的任务阻塞</li><li>单线程executor死锁例子<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/1.png"><br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/2.png"></li></ul><h2 id="运行时间长的任务"><a href="#运行时间长的任务" class="headerlink" title="运行时间长的任务"></a>运行时间长的任务</h2><blockquote><p>任务阻塞时间长（就算不死锁，响应也差）</p></blockquote><ul><li>通过限定任务等待资源时间（不要无限等待），很多库的大多数可阻塞方法都定义了限时版本和无限时版本<ul><li>Thread.join、BlockingQueue.put、CountDownLatch.await Selector.select</li></ul></li></ul><h1 id="设置线程池大小"><a href="#设置线程池大小" class="headerlink" title="设置线程池大小"></a>设置线程池大小</h1><ul><li>根据系统特性，类型决定。配置机制（Runtime.availableProcessors。</li><li>任务计算密集 I/O密集还是二者皆可 ？他们是否需要JDBC这样稀缺资源 。不同类别任务，行为差别很大 考虑使用多个线程池</li></ul><h2 id="计算密集型任务设置线程池"><a href="#计算密集型任务设置线程池" class="headerlink" title="计算密集型任务设置线程池"></a>计算密集型任务设置线程池</h2><p>Ncpu、线程池为Ncpu + 1最优利用（偶尔页缺失故障，这个额外线程确保CPU时钟不会浪费）<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/3.png"></p><blockquote><p>还有 内存、文件句柄、套接字句柄、数据库连接。</p></blockquote><ul><li>计算这些资源对线程池容易：每个任务对资源的需求，该资源的可用</li></ul><h1 id="配置ThreadPoolExecutor"><a href="#配置ThreadPoolExecutor" class="headerlink" title="配置ThreadPoolExecutor"></a>配置ThreadPoolExecutor</h1><blockquote><p>Executors的工厂方法返回的<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/4.png"></p></blockquote><h2 id="创建和销毁"><a href="#创建和销毁" class="headerlink" title="创建和销毁"></a>创建和销毁</h2><ul><li>Core pool size:基本大小 （没有任务执行 线程池的大小，只有工作队列满了情况才会创建超过这个数量的线程）</li><li>最大大小 （同时活动线程上限，某个线程空闲时间超过存活时间，被标记可回收，当线程池当前大小超过基本大小，线程将被终止</li><li>存活时间 （调整基本大小和存活时间来回收空闲线程，但是会产生额外的延时）</li></ul><blockquote><p>newFixedThreadPool 工厂方法将线程池基本大小和最大大小设置为参数中指定的值，而且线程池不会超时<br>newCachedThreadPool 工厂方法将线程池最大大小设置为Integer.MAX_VALUE 基本大小设置为0，超时设置为1分钟，这样创建的线程池无限扩张 ，需求降低自动收缩<br>其他形式通过显式 构造函数构造</p></blockquote><h2 id="管理队列任务"><a href="#管理队列任务" class="headerlink" title="管理队列任务"></a>管理队列任务</h2><p>有限的线程池会限制并发数目</p><ul><li>BlockingQueue 保存 <ul><li>无界队列 newFixedThreadPool newSingleThreadExecutor</li><li>有界队列 ArrayBlockingQueue 避免资源耗尽 。线程池小，队列大，有助于减少内存使用量，降低CPU使用率和减少上下文切换</li><li>同步移交 SynchronousQueue  比如newCacheThreadPool 避免任务排队</li></ul></li></ul><blockquote><p>任务相互独立时，为线程池或者工作队列设置界限才合理，任务之间相互依赖，可能会有“饥饿”死锁问题</p></blockquote><h2 id="饱和策略"><a href="#饱和策略" class="headerlink" title="饱和策略"></a>饱和策略</h2><blockquote><p>有界队列填满后，ThreadPoolExecutor饱和策略通过setRejectedExecutionHandler。</p></blockquote><ul><li>AbortPolicy 抛出未检查的RejectedExecution-exception </li><li>discardPolicy 多种抛弃方法 （抛弃最旧  或者当前）</li><li>Caller-Runs ：既不抛弃任务，也不抛出异常，任务退回调用者<ul><li>比如WebServer ,线程池所有线程都被占用、工作队列满了，下一个任务在execute时在主线程执行，这时候主线程都不能提交任何任务) 这期间 主线程不会调用accept，因此到达的请求将被保存在TCP层的队列而不是应用程序的队列中。如果持续过载，TCO层会发现它的请求队列填满了，同样开始抛弃请求。</li><li>服务器过载 ，过载情况慢慢向外蔓延—-线程池<del>工作队列</del>应用程序<del>TCP层</del>客户端<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/5.png"></li><li>信号量控制任务提交速率 （无界队列 ）<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/6.png"></li></ul></li></ul><h2 id="线程工厂"><a href="#线程工厂" class="headerlink" title="线程工厂"></a>线程工厂</h2><blockquote><p>每当线程池需要创建一个线程，都是通过线程工厂方法来完成。默认的线程工厂方法将创建一个<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/7.png"></p></blockquote><blockquote><p>比如名称<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/8.png"><br>在MyAppThread加上其他行为 （logger 写入信息，统计信息 调试信息）<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/9.png"><br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/10.png"></p></blockquote><h2 id="调用完构造函数继续定制-ThreadPoolExecutor"><a href="#调用完构造函数继续定制-ThreadPoolExecutor" class="headerlink" title="调用完构造函数继续定制 ThreadPoolExecutor"></a>调用完构造函数继续定制 ThreadPoolExecutor</h2><p>Setter </p><h1 id="扩展ThreadPoolExecutor"><a href="#扩展ThreadPoolExecutor" class="headerlink" title="扩展ThreadPoolExecutor"></a>扩展ThreadPoolExecutor</h1><blockquote><p>可子类化改写方法：beforeExecute AfterExecte terminated(线程池完成关闭操作后调用)</p></blockquote><blockquote><p>添加日志计时<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/11.png"></p></blockquote><h1 id="递归并行化"><a href="#递归并行化" class="headerlink" title="递归并行化"></a>递归并行化</h1><blockquote><p>如果循环的迭代操作时独立的，并且不需要等待所有迭代操作都完成在继续执行，就可以用Exector 串行循环转为并行循环<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/12.png"><br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/13.png"></p></blockquote><blockquote><p>深度优先算法遍历一个树（每个节点自己计算，就是compute 串行）<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/14.png"></p></blockquote><ul><li>等待结果<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/15.png"></li></ul><h2 id="谜题框架"><a href="#谜题框架" class="headerlink" title="谜题框架"></a>谜题框架</h2><blockquote><p>搬箱子 Hi-Q 四色方柱</p></blockquote><blockquote><p>定义</p></blockquote><ul><li>一个初始位置 一个目标 用于判断是否有效移动的规则集</li><li>规则集有：计算从指定位置开始的所有合法移动，以及每次移动的结果位置</li></ul><blockquote><p>定义<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/16.png"></p></blockquote><blockquote><p>串行解决 ：Node 代表通过一系列移动到达的一个位置 ，保留了到达该位置的移动和前一个Node ，回溯构建<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/17.png"><br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/18.png"></p></blockquote><ul><li>解决方法（深度搜索，但不一定是最短的）<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/19.png"></li></ul><blockquote><p>并行解决<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/20.png"></p></blockquote><ul><li>保证得到结果就返回 （闭锁）<br><img src="/2020/12/13/java-concurrency-in-pratice-part02-structures-chap08-threadpool/21.png"></li><li>不存在解答，遍历了所有（使用限时的getValue( 限时的await)</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part02-Structures-chap07-TaskCancel</title>
      <link href="2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/"/>
      <url>2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%BB%BB%E5%8A%A1%E5%8F%96%E6%B6%88">任务取消</a><ul><li><a href="#%E4%B8%AD%E6%96%AD">中断</a></li><li><a href="#%E5%93%8D%E5%BA%94%E4%B8%AD%E6%96%AD">响应中断</a></li><li><a href="#%E4%BE%8B%E5%AD%90%E8%AE%A1%E6%97%B6%E8%BF%90%E8%A1%8C%E6%9C%89%E4%BA%9B%E9%97%AE%E9%A2%98%E6%B0%B8%E8%BF%9C%E6%B2%A1%E6%9C%89%E7%BB%93%E6%9E%9C">例子：计时运行（有些问题永远没有结果）</a></li><li><a href="#future-%E6%9D%A5%E5%8F%96%E6%B6%88">Future 来取消</a></li><li><a href="#%E5%A4%84%E7%90%86%E4%B8%8D%E5%8F%AF%E4%B8%AD%E6%96%AD%E7%9A%84%E9%98%BB%E5%A1%9E">处理不可中断的阻塞</a><ul><li><a href="#io%E9%98%BB%E5%A1%9E">IO阻塞</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E9%94%81">获取某个锁</a></li></ul></li><li><a href="#newtaskfor--%E5%B0%81%E8%A3%85%E9%9D%9E%E6%A0%87%E5%87%86%E5%8F%96%E6%B6%88">NewTaskFor  封装非标准取消</a></li></ul></li><li><a href="#%E5%81%9C%E6%AD%A2%E5%9F%BA%E4%BA%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%9C%8D%E5%8A%A1">停止基于线程的服务</a><ul><li><a href="#%E6%97%A5%E5%BF%97%E6%9C%8D%E5%8A%A1">日志服务</a></li><li><a href="#%E5%85%B3%E9%97%ADexecutorservice">关闭ExecutorService</a></li><li><a href="#%E6%AF%92%E4%B8%B8%E5%AF%B9%E8%B1%A1-%E5%85%B3%E9%97%AD%E6%9C%8D%E5%8A%A1">“毒丸”对象 关闭服务</a></li><li><a href="#%E4%BE%8B%E5%AD%90%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E7%9A%84%E6%9C%8D%E5%8A%A1">例子：只执行一次的服务</a></li><li><a href="#shutdownnow%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7">shutdownNow的局限性</a></li></ul></li><li><a href="#%E5%A4%84%E7%90%86%E9%9D%9E%E6%AD%A3%E5%B8%B8%E7%BB%88%E6%AD%A2%E7%BA%BF%E7%A8%8B">处理非正常终止线程</a><ul><li><a href="#%E6%9C%AA%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8%E7%9A%84%E5%A4%84%E7%90%86">未捕获异常的处理</a></li></ul></li><li><a href="#jvm%E5%85%B3%E9%97%AD">JVM关闭</a><ul><li><a href="#%E5%85%B3%E9%97%AD%E9%92%A9%E5%AD%90">关闭钩子</a></li><li><a href="#%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B">守护线程</a></li><li><a href="#%E7%BB%88%E7%BB%93%E5%99%A8">终结器</a></li></ul></li></ul><!-- /TOC --><h1 id="任务取消"><a href="#任务取消" class="headerlink" title="任务取消"></a>任务取消</h1><blockquote><p>java不能安全抢占停止线程，所以只能协作机制</p></blockquote><ul><li>标志取消法，让素数生成器运行1s后取消。通常不会刚好运行1s停止 可能刚好在循环下一次<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/1.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/2.png"></li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><blockquote><p>在素数退出的时候，阻塞put </p></blockquote><ul><li>生产者速度超过消费者处理速度</li><li>队列填满 生产者put阻塞 </li><li>消费者希望取消生产者任务，cancel设置标志</li><li>生产者永远检查不了标志（在阻塞put)<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/3.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/4.png"></li></ul><blockquote><p>中断的作用<br>每个线程都有一个bool中断状态<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/5.png"></p></blockquote><ul><li>interrupt 中断线程</li><li>isinterrupted 返回状态</li><li>静态的 interrupted 清除中断状态返回之前的状态</li></ul><blockquote><p>何时检查中断<br>Thread.sleep 和Object.wait 都会检查线程何时中断，发现中断返回</p></blockquote><blockquote><p>上述阻塞库方法 响应中断的操作</p></blockquote><ul><li>清除中断状态</li><li>抛出InterruptedException</li></ul><blockquote><p>线程非阻塞状态中断 中断状态设置</p></blockquote><blockquote><p>中断操作的理解</p></blockquote><ul><li>不会中断正在运行的线程，只是发出中断请求，在何时时候中断自己</li><li>中断式实现取消的最合理方法<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/6.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/7.png"></li></ul><h2 id="响应中断"><a href="#响应中断" class="headerlink" title="响应中断"></a>响应中断</h2><blockquote><p>可中断的阻塞的两种响应 例如Thread.sleep BlockingQueue.put </p></blockquote><ul><li><p>传递异常，从而你的方法也可中断的阻塞<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/8.png"></p></li><li><p>恢复中断状态，从而调用栈上层代码处理<br>不是在捕获的时候（可能无限循环）<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/9.png"></p></li></ul><h2 id="例子：计时运行（有些问题永远没有结果）"><a href="#例子：计时运行（有些问题永远没有结果）" class="headerlink" title="例子：计时运行（有些问题永远没有结果）"></a>例子：计时运行（有些问题永远没有结果）</h2><blockquote><p>找出10分钟的的答案</p></blockquote><ul><li>指定时间运行任意一个Runnable实例<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/10.png"><br>中断线程之前，无法知道调用线程的中断策略</li><li>专门线程中断任务<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/11.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/12.png"><br>存在join（等待线程死亡) 无法知道执行控制是因为线程正常退出还是jion超时</li></ul><h2 id="Future-来取消"><a href="#Future-来取消" class="headerlink" title="Future 来取消"></a>Future 来取消</h2><blockquote><p>Future 抽象机制管理任务生命周期，处理异常、取消。<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/13.png"></p></blockquote><h2 id="处理不可中断的阻塞"><a href="#处理不可中断的阻塞" class="headerlink" title="处理不可中断的阻塞"></a>处理不可中断的阻塞</h2><p><strong>等待获得内置锁的阻塞或同步IO的阻塞，中断请求只能设置线程中断状态，我们要指导阻塞原因</strong></p><h3 id="IO阻塞"><a href="#IO阻塞" class="headerlink" title="IO阻塞"></a>IO阻塞</h3><blockquote><p>java.io同步Socket  I/O 常见的阻塞I/O形式：对套接字读取写入。 </p></blockquote><ul><li>解决方法，虽然题目不响应中断，关机底层的套接字，可以使执行read、wirite方法阻塞的线程抛出 SocketException</li></ul><blockquote><p>java.io同步 I/O ；中断一个正在InterruptibleChannel上等待的线程时，将抛出ClosedByInterruptException ，并导致所有链路上操作阻塞线程抛出ClosedByInterruptException。大多数标准Channel都实现了InterruptibleChannel。</p></blockquote><blockquote><p>java.nio 调用Selector.select阻塞了  close 抛出closedselectorException</p></blockquote><h3 id="获取某个锁"><a href="#获取某个锁" class="headerlink" title="获取某个锁"></a>获取某个锁</h3><blockquote><p>线程认为自己肯定会获得锁，所以不好中断。  Lock类有lockinterruptibly 允许等待锁同时响应中断<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/14.png"></p></blockquote><h2 id="NewTaskFor-封装非标准取消"><a href="#NewTaskFor-封装非标准取消" class="headerlink" title="NewTaskFor  封装非标准取消"></a>NewTaskFor  封装非标准取消</h2><blockquote><p>java6新add ThreadPoolExecutor 的NewTaskFor</p></blockquote><ul><li>Callable提交给ExectorService，</li><li>工厂方法 返回RunnabkeFuture由futureTask实现<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/15.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/16.png"></li></ul><h1 id="停止基于线程的服务"><a href="#停止基于线程的服务" class="headerlink" title="停止基于线程的服务"></a>停止基于线程的服务</h1><blockquote><p>背景</p></blockquote><ul><li>应用程序有多个线程的服务，例如线程池，服务生命周期比创建它们方法生命周期更长</li><li>应用程序停 服务线程也需要停 服务拥有的线程也需要停止</li></ul><blockquote><p>封装原则：除非拥有某个线程，否则不能对线程控制 （中断 或者修改线程优先级）。<br>线程所有权不可传递: 应用程序有服务 服务有工作者线程 应用程序不拥有工作者线程，不能直接停止工作者线程。<br>例子</p></blockquote><ul><li>ExectorService 提供了shutdown 和ShutdownNow 方法（关闭自己和它拥有的线程）。其他拥有服务的也需要类似机制</li></ul><h2 id="日志服务"><a href="#日志服务" class="headerlink" title="日志服务"></a>日志服务</h2><blockquote><p>大多数服务器应用程序用到日志，print。PrintWriter时线程安全的，但是高容量应用程序需要一定的开销。log方法将日志消息放入某个对了，由其他线程来处理<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/17.png"></p></blockquote><ul><li>多消费者单生产者 （缺少停止）</li></ul><blockquote><p>直接使日志线程退出的问题 （由于反复take take能响应中断，直接捕获中断退出）</p></blockquote><ul><li>丢失其他等待写入消息</li><li>其他线程调用log阻塞 （消息队列满），这些线程无法解除阻塞</li></ul><blockquote><p>设置“请求关闭”标志，避免进一步提交日志消息。然后把队列所有消息写入，并解除log阻塞生产者</p></blockquote><ul><li>存在问题<ul><li>竞态条件：先判断在运行（可通过宣布清空等待数秒，降低概率，没解决实际问题）<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/18.png"></li></ul></li><li>解决方法<ul><li>日志提交操作原子化</li><li>原子方式检测关闭，有条件递增保持提交</li></ul></li></ul><h2 id="关闭ExecutorService"><a href="#关闭ExecutorService" class="headerlink" title="关闭ExecutorService"></a>关闭ExecutorService</h2><ul><li>shutdownnow()立即所有</li><li>shutdown 等待队列所有任务执行完<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/19.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/20.png"></li></ul><h2 id="“毒丸”对象-关闭服务"><a href="#“毒丸”对象-关闭服务" class="headerlink" title="“毒丸”对象 关闭服务"></a>“毒丸”对象 关闭服务</h2><blockquote><p>当生产者提交“毒丸”对象，不会在提交任何工作，而FIFO队列消费者提交毒丸之前的工作都会被处理</p></blockquote><ul><li>问题只有消费者 生产者数量已知情况可以用“毒丸”<blockquote><p>桌面搜索：单生产者-单消费者例子<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/21.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/22.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/23.png"></p></blockquote></li></ul><blockquote><p>扩展多个生产者：每个生产者向队列放一个“毒丸”，当消费者收到对应数目“毒丸”：才停止。</p></blockquote><ul><li>缺点<ul><li>只能无界队列</li><li>太多数量 难使用</li></ul></li></ul><h2 id="例子：只执行一次的服务"><a href="#例子：只执行一次的服务" class="headerlink" title="例子：只执行一次的服务"></a>例子：只执行一次的服务</h2><blockquote><p>处理一批任务 完成后返回<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/24.png"></p></blockquote><h2 id="shutdownNow的局限性"><a href="#shutdownNow的局限性" class="headerlink" title="shutdownNow的局限性"></a>shutdownNow的局限性</h2><blockquote><p>shutdown，会尝试取消正在执行的任务并返回所有已提交但未开始的任务（可以写入日志或保存起来 以便以后进行处理）<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/25.png"><br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/26.png"></p></blockquote><h1 id="处理非正常终止线程"><a href="#处理非正常终止线程" class="headerlink" title="处理非正常终止线程"></a>处理非正常终止线程</h1><blockquote><p>单线程运行 未捕获异常 终止，程序停止运行，输出栈信息<br>多线程运行 某线程出故障，控制台信息</p></blockquote><ul><li>问题： RuntimeException等通常不会被捕获</li></ul><blockquote><p>任务处理线程 （线程池的工作者 Swing的事件派发线程），将通过某种抽象机制（Runnable 等)运行未知代码</p></blockquote><blockquote><p>调用每个方法都要持怀疑态度</p></blockquote><blockquote><p>解决方法</p></blockquote><ul><li>try catch finally<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/27.png"></li></ul><h2 id="未捕获异常的处理"><a href="#未捕获异常的处理" class="headerlink" title="未捕获异常的处理"></a>未捕获异常的处理</h2><ul><li>Thread API:Uncatught-ExceptionHandler<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/28.png"></li></ul><p>步骤</p><ul><li>线程由于未捕获异常退出时，JVM会把这个事件报告给应用程序提供的异常处理器</li><li>没有任何异常处理器 默认将栈追踪信息输出到System.err</li></ul><blockquote><p>例子<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/29.png"></p></blockquote><h1 id="JVM关闭"><a href="#JVM关闭" class="headerlink" title="JVM关闭"></a>JVM关闭</h1><blockquote><p>方式 </p></blockquote><ul><li>正常关闭：最后一个正常线程结束，或者调用了System.exit Ctrl+C（SIGINT)</li><li>强制关闭：Runtime.halt 或者操作系统”杀死“ JVM进程<br>(SIGKILL)</li></ul><h2 id="关闭钩子"><a href="#关闭钩子" class="headerlink" title="关闭钩子"></a>关闭钩子</h2><ul><li>正常关闭：<ul><li>调用所有已注册的关闭钩子（shutdown Hook)（通过Runtime.addShutdownHook注册的没开启的线程）。</li><li>关闭了应用程序线程，如果有其他（守护 非守护）线程还在运行，将于关闭进程并发。</li><li>所有关闭钩子执行结束 如果runFinalizerOnExit true，那么JVM运行终结器 停止</li><li>如果关闭钩子 或终结器没完成，那么 正常关闭进程“挂起” JVM被强制关闭，只关闭JVM，不运行关闭钩子</li></ul></li></ul><blockquote><p>关闭钩子的作用 </p></blockquote><ul><li>实现服务应用程序的清理 （清理临时文件，无法由操作系统自动清除的资源）<br><img src="/2020/12/04/java-concurrency-in-pratice-part02-structures-chap07-taskcancel/30.png"></li></ul><blockquote><p>关闭钩子注意点</p></blockquote><ul><li>关闭钩子并发 ，不应该依赖可能被应用程序和其他关闭钩子关闭的服务</li><li>对所有服务同一个关闭钩子（不是每个服务一个）</li></ul><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><blockquote><p>作用</p></blockquote><ul><li>创建一个线程执行辅助工作，但不希望线程阻碍JVM关闭（Daemon Thread)</li></ul><blockquote><p>线程分为守护线程和普通线程</p></blockquote><ul><li>JVM启动创建的线程，除了主线程都是守护线程（垃圾回收机和其他辅助工作线程）</li><li>创建一个新线程，新线程继承创建它的线程守护。所以默认主线程创建所有线程为普通线程</li></ul><blockquote><p>守护线程和普通线程的区别</p></blockquote><ul><li>线程退出发生的操作，一个线程退出，JVM检查其他在运行的线程，如果这些线程都是守护线程，JVM会正常退出操作。JVM停止时，所有仍然存在的守护线程将被抛弃（既不finally 也不会追踪栈，JVM直接退出</li><li>尽可能少使用守护线程<ul><li>包含I/O的守护 很危险（不清理 直接抛弃）</li><li>最好是“内部”任务，周期移除内存缓存逾期数据</li></ul></li></ul><h2 id="终结器"><a href="#终结器" class="headerlink" title="终结器"></a>终结器</h2><blockquote><p>不需要内存资源，可通过垃圾回收期回收他们，其他资源（文件句柄或者套接字句柄），需要显式交还给操作系统。</p></blockquote><ul><li>通过垃圾回收机对finalize 方法对象特殊处理完成</li></ul><blockquote><p>避免使用包含终结器的类（通过finally 和显式close 更好）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-core-onJava8</title>
      <link href="2020/11/29/java-core-onjava8/"/>
      <url>2020/11/29/java-core-onjava8/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5">对象的概念</a><ul><li><a href="#%E5%B0%81%E8%A3%85">封装</a></li><li><a href="#is-a-is-like-a">is-a is-like-a</a></li></ul></li><li><a href="#%E8%BF%90%E7%AE%97%E7%AC%A6">运算符</a></li><li><a href="#-">== !=</a><ul><li><a href="#%E7%9F%AD%E8%B7%AF">短路</a></li><li><a href="#%E4%B8%8B%E5%88%92%E7%BA%BF">下划线</a></li><li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串+</a></li><li><a href="#java%E6%B2%A1%E6%9C%89sizeof">Java没有sizeof</a></li><li><a href="#%E6%BA%A2%E5%87%BA">溢出</a></li><li><a href="#switch-%E5%AD%97%E7%AC%A6%E4%B8%B2">switch 字符串</a></li></ul></li><li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86">初始化和清理</a><ul><li><a href="#%E9%87%8D%E8%BD%BD%E4%B8%8E%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">重载与基本类型</a></li><li><a href="#static">static</a></li><li><a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8">垃圾回收器</a></li><li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F">初始化顺序</a></li><li><a href="#%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%88%9D%E5%A7%8B%E5%8C%96">静态数据初始化</a></li><li><a href="#%E6%98%BE%E5%BC%8F%E9%9D%99%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96">显式静态初始化</a></li><li><a href="#%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8">可变参数列表</a></li></ul></li><li><a href="#%E5%B0%81%E8%A3%85-1">封装</a><ul><li><a href="#classpath-%E6%90%9C%E7%B4%A2%E7%9B%AE%E5%BD%95">classPath 搜索目录</a></li><li><a href="#jar">jar</a></li><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a></li></ul></li><li><a href="#%E5%A4%8D%E7%94%A8">复用</a><ul><li><a href="#protectd">protectd</a></li><li><a href="#final">final</a></li><li><a href="#%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%8A%A0%E8%BD%BD">类初始化和加载</a></li></ul></li><li><a href="#%E5%A4%9A%E6%80%81">多态</a><ul><li><a href="#%E7%BB%91%E5%AE%9A%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93-%E5%A4%9A%E6%80%81-%E6%8C%87%E5%90%91%E7%9A%84%E5%BC%95%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B">绑定（如何知道 多态 指向的引用对象类型）</a></li><li><a href="#%E5%90%91%E4%B8%8A%E8%BD%AC%E6%8D%A2">向上转换</a><ul><li><a href="#%E9%99%B7%E9%98%B1%E9%87%8D%E5%86%99%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95">陷阱：“重写”私有方法</a></li><li><a href="#%E9%99%B7%E9%98%B1%E5%B1%9E%E6%80%A7%E4%B8%8E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">陷阱：属性与静态方法</a></li></ul></li><li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F-1">初始化顺序</a></li><li><a href="#%E6%9E%84%E9%80%A0%E5%99%A8%E5%86%85%E9%83%A8%E5%A4%9A%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E8%A1%8C%E4%B8%BA">构造器内部多态方法的行为</a></li><li><a href="#%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B">向下转型</a></li></ul></li><li><a href="#%E6%8E%A5%E5%8F%A3">接口</a><ul><li><a href="#%E6%8E%A5%E5%8F%A3%E5%88%9B%E5%BB%BA">接口创建</a></li><li><a href="#%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95">默认方法</a></li><li><a href="#%E5%A4%9A%E7%BB%A7%E6%89%BF">多继承</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">接口中的静态方法</a></li><li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3">抽象类和接口</a></li><li><a href="#%E5%AE%8C%E5%85%A8%E8%A7%A3%E8%80%A6">完全解耦</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3">使用继承扩展接口</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F">接口和工厂方法模式</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB">内部类</a><ul><li><a href="#this-new">.this .new</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB%E6%96%B9%E6%B3%95">内部类方法</a></li></ul></li><li><a href="#%E5%B5%8C%E5%A5%97%E7%B1%BB">嵌套类</a><ul><li><a href="#%E6%8E%A5%E5%8F%A3%E5%86%85%E9%83%A8%E7%B1%BB">接口内部类</a></li></ul></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%86%85%E9%83%A8%E7%B1%BB">为什么需要内部类</a></li><li><a href="#%E9%97%AD%E5%8C%85%E5%92%8C%E5%9B%9E%E8%B0%83">闭包和回调</a></li><li><a href="#%E5%86%85%E9%83%A8%E7%B1%BB%E6%A0%87%E8%AF%86%E7%AC%A6">内部类标识符</a></li></ul></li><li><a href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">设计模式</a><ul><li><a href="#%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99">六大原则</a><ul><li><a href="#%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3">单一职责</a></li><li><a href="#%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2">里氏替换</a></li><li><a href="#%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE">依赖倒置</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB">接口隔离</a></li><li><a href="#%E8%BF%AA%E7%B1%B3%E7%89%B9--%E6%9C%80%E5%B0%91%E7%9F%A5%E9%81%93">迪米特 | 最少知道</a></li><li><a href="#%E5%BC%80%E9%97%AD">开闭</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li><li><a href="#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-1">单例模式</a></li></ul></li></ul><!-- /TOC --><h1 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h1><blockquote><p>Grady Booch 提供了对对象简洁的描述：一个对象具有自己的状态，行为和标识。这意味着对象有自己的内部数据(提供状态)、方法 (产生行为)，并彼此区分（每个对象在内存中都有唯一的地址）。</p></blockquote><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>因此，使用访问控制的原因有以下两点：</p><ul><li><p>让应用程序员不要触摸他们不应该触摸的部分。</p></li><li><p>使类库的创建者（研发程序员）在不影响后者使用的情况下完善更新工具库。例如，我们开发了一个功能简单的工具类，后来发现可以通过优化代码来提高执行速度。假如工具类的接口和实现部分明确分开并受到保护，那我们就可以轻松地完成改造。</p></li></ul><h2 id="is-a-is-like-a"><a href="#is-a-is-like-a" class="headerlink" title="is-a is-like-a"></a>is-a is-like-a</h2><pre class="line-numbers language-none"><code class="language-none">继承应该只覆盖基类的方法(不应该添加基类中没有的方法)吗？ is a有时你在派生类添加了新的接口元素，从而扩展接口。虽然新类型仍然可以替代基类，但是这种替代不完美，原因在于基类无法访问新添加的方法。这种关系称为像是一个(is-like-a)关系。当你看到替代原则时，很容易会认为纯粹替代是唯一可行的方式，并且使用纯粹替代的设计是很好的。但有些时候，你会发现必须得在派生(扩展)类中添加新方法(提供新的接口)。只要仔细审视，你可以很明显地区分两种设计方式的使用场合。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h1 id=""><a href="#" class="headerlink" title="== !="></a>== !=</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// operators/Equivalence.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Equivalence</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> n1 <span class="token operator">=</span> <span class="token number">47</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> n2 <span class="token operator">=</span> <span class="token number">47</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1 <span class="token operator">!=</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>表达式 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span> 将会输出比较的结果。因为两个 <span class="token class-name">Integer</span> 对象相同，所以先输出 <span class="token boolean">true</span>，再输出 <span class="token boolean">false</span>。但是，尽管对象的内容一样，对象的引用却不一样。<span class="token operator">==</span> 和 <span class="token operator">!=</span> 比较的是对象引用，所以输出实际上应该是先输出 <span class="token boolean">false</span>，再输出 <span class="token boolean">true</span>（译者注：如果你把 <span class="token number">47</span> 改成 <span class="token number">128</span>，那么打印的结果就是这样，因为 <span class="token class-name">Integer</span> 内部维护着一个 <span class="token class-name">IntegerCache</span> 的缓存，默认缓存范围是 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">]</span>，所以 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">]</span> 之间的值用 <span class="token operator">==</span> 和 <span class="token operator">!=</span> 比较也能能到正确的结果，但是不推荐用关系运算符比较，具体见 JDK 中的 <span class="token class-name">Integer</span> 类源码）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h2><pre class="line-numbers language-none"><code class="language-none">短路逻辑运算符支持一种称为“短路”（short-circuiting）的现象。整个表达式会在运算到可以明确结果时就停止并返回结果，这意味着该逻辑表达式的后半部分不会被执行到。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>Java 7 中有一个深思熟虑的补充：我们可以在数字字面量中包含下划线 _，以使结果更清晰。这对于大数值的分组特别有用。代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// operators/Underscores.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Underscores</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">341_435_936.445_667</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bin <span class="token operator">=</span> <span class="token number">0b0010_1111_1010_1111_1010_1111_1010_1111</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>bin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x%n"</span><span class="token punctuation">,</span> bin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>        <span class="token keyword">long</span> hex <span class="token operator">=</span> <span class="token number">0x7f_e9_b7_aa</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x%n"</span><span class="token punctuation">,</span> hex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 注意 <span class="token operator">%</span>n的使用。熟悉 <span class="token class-name">C</span> 风格的程序员可能习惯于看到 \n 来表示换行符。问题在于它给你的是一个“<span class="token class-name">Unix</span>风格”的换行符。此外，如果我们使用的是 <span class="token class-name">Windows</span>，则必须指定 \r\n。这种差异的包袱应该由编程语言来解决。这就是 <span class="token class-name">Java</span> 用 <span class="token operator">%</span>n 实现的可以忽略平台间差异而生成适当的换行符，但只有当你使用 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 时。对于 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，我们仍然必须使用 \n；如果你使用 <span class="token operator">%</span>n，<span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 只会输出 <span class="token operator">%</span>n 而不是换行符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串+"></a>字符串+</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// operators/StringOperators.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringOperators</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"x, y, z "</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将 x 转换为字符串</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        s <span class="token operator">+=</span> <span class="token string">"(summed) = "</span><span class="token punctuation">;</span>         <span class="token comment">// 级联操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Integer.toString()方法的简写:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>复制<span class="token class-name">ErrorOK</span><span class="token operator">!</span>输出结果：x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token number">012</span><span class="token number">0</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> zx<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">(</span>summed<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token number">0</span>复制<span class="token class-name">ErrorOK</span><span class="token operator">!</span>注意：上例中第 <span class="token number">1</span> 输出语句的执行结果是 <span class="token number">012</span> 而并非 <span class="token number">3</span>，这是因为编译器将其分别转换为其字符串形式然后与字符串变量 s 连接。在第 <span class="token number">2</span> 条输出语句中，编译器将开头的变量转换为了字符串，由此可以看出，这种转换与数据的位置无关，只要当中有一条数据是字符串类型，其他非字符串数据都将被转换为字符串形式并连接。最后一条输出语句，我们可以看出 <span class="token operator">+=</span> 运算符可以拼接其右侧的字符串连接结果并重赋值给自身变量 s。括号 <span class="token punctuation">(</span><span class="token punctuation">)</span> 可以控制表达式的计算顺序，以便在显示 <span class="token keyword">int</span> 之前对其进行实际求和。请注意主方法中的最后一个例子：我们经常会看到一个空字符串 <span class="token string">""</span> 跟着一个基本类型的数据。这样可以隐式地将其转换为字符串，以代替繁琐的显式调用方法（如这里可以使用 <span class="token operator">*</span><span class="token operator">*</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span>）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java没有sizeof"><a href="#Java没有sizeof" class="headerlink" title="Java没有sizeof"></a>Java没有sizeof</h2><p>Java 不需要  sizeof() 方法来满足这种需求，因为所有类型的大小在不同平台上是相同的。我们不必考虑这个层次的移植问题 —— Java 本身就是一种“与平台无关”的语言。</p><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// operators/Overflow.java</span><span class="token comment">// 厉害了！内存溢出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Overflow</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> big <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"big = "</span> <span class="token operator">+</span> big<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bigger <span class="token operator">=</span> big <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bigger = "</span> <span class="token operator">+</span> bigger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出结果：big <span class="token operator">=</span> <span class="token number">2147483647</span>bigger <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="switch-字符串"><a href="#switch-字符串" class="headerlink" title="switch 字符串"></a>switch 字符串</h2><p>Java 7 增加了在字符串上 switch 的用法。 </p><h1 id="初始化和清理"><a href="#初始化和清理" class="headerlink" title="初始化和清理"></a>初始化和清理</h1><p>利用构造器保证初始化<br>在 Java 中，类的设计者通过构造器保证每个对象的初始化。</p><h2 id="重载与基本类型"><a href="#重载与基本类型" class="headerlink" title="重载与基本类型"></a>重载与基本类型</h2><pre class="line-numbers language-none"><code class="language-none">基本类型可以自动从较小的类型转型为较大的类型默认先找对应的参数(byte 找 byte)，没有的话向上(刚好合适的上一个比如同时有short int 的方法 就找short)转换如果传入的参数类型大于方法期望接收的参数类型，你必须首先做下转换，如果你不做的话，编译器就会报错。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>静态方法是为类而创建的，不需要任何对象。</p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><blockquote><p>如果你打算使用 finalize() ，就能在垃圾回收时做一些重要的清理工作</p></blockquote><ul><li>对象可能不被垃圾回收。</li><li>垃圾回收不等同于析构。</li><li>垃圾回收只与内存有关。</li></ul><blockquote><p>本地方法目前只支持 C 和 C++，但是它们可以调用其他语言写的代码，所以实际上可以调用任何代码。在非 Java 代码中，也许会调用 C 的 malloc() 函数系列来分配存储空间，而且除非调用 free() 函数，不然存储空间永远得不到释放，造成内存泄露。但是，free() 是 C 和 C++ 中的函数，所以你需要在 finalize() 方法里用本地方法调用它。</p></blockquote><blockquote><p>finalize() 方法来验证终结条件，将会很难发现这个 bug。</p></blockquote><h2 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><p>在类中变量定义的顺序决定了它们初始化的顺序。即使变量定义散布在方法定义之间，它们仍会在任何方法（包括构造器）被调用之前得到初始化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/OrderOfInitialization.java</span><span class="token comment">// Demonstrates initialization order</span><span class="token comment">// When the constructor is called to create a</span><span class="token comment">// Window object, you'll see a message:</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>    <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token keyword">int</span> marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Window("</span> <span class="token operator">+</span> marker <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span>    <span class="token class-name">Window</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Before constructor</span>    <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Show that we're in the constructor:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"House()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Reinitialize w3</span>    <span class="token punctuation">}</span>    <span class="token class-name">Window</span> w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// After constructor</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Window</span> w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// At end</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderOfInitialization</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">House</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Shows that construction is done</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态数据初始化"><a href="#静态数据初始化" class="headerlink" title="静态数据初始化"></a>静态数据初始化</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/StaticInitialization.java</span><span class="token comment">// Specifying initial values in a class definition</span><span class="token keyword">class</span> <span class="token class-name">Bowl</span> <span class="token punctuation">{</span>    <span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token keyword">int</span> marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bowl("</span> <span class="token operator">+</span> marker <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span> marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f1("</span> <span class="token operator">+</span> marker <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Table</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">Bowl</span> bowl1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Table()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bowl2<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">int</span> marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f2("</span> <span class="token operator">+</span> marker <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">Bowl</span> bowl2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cupboard</span> <span class="token punctuation">{</span>    <span class="token class-name">Bowl</span> bowl3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Bowl</span> bowl4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cupboard()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bowl4<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token keyword">int</span> marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f3("</span> <span class="token operator">+</span> marker <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">Bowl</span> bowl5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticInitialization</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main creating new Cupboard()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main creating new Cupboard()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cupboard<span class="token punctuation">.</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">Table</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Cupboard</span> cupboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出：<span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name">Table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>main creating <span class="token keyword">new</span> <span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>main creating <span class="token keyword">new</span> <span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Bowl</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token class-name">Cupboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">f2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">f3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>初始化的顺序先是静态对象（如果它们之前没有被初始化的话），然后是非静态对象，从输出中可以看出。要执行 main() 方法，必须加载 StaticInitialization 类，它的静态属性 table 和 cupboard 随后被初始化，这会导致它们对应的类也被加载，而由于它们都包含静态的 Bowl 对象，所以 Bowl 类也会被加载。因此，在这个特殊的程序中，所有的类都会在 main() 方法之前被加载。实际情况通常并非如此，因为在典型的程序中，不会像本例中所示的那样，将所有事物通过 static 联系起来。</p></blockquote><p>概括一下创建对象的过程，假设有个名为 Dog 的类：</p><ul><li><strong>即使没有显式地使用 static 关键字，构造器实际上也是静态方法。所以，当首次创建 Dog 类型的对象或是首次访问 Dog 类的静态方法或属性时，Java 解释器必须在类路径中查找，以定位 Dog.class。</strong></li><li>当加载完 Dog.class 后（后面会学到，这将创建一个 Class 对象），有关静态初始化的所有动作都会执行。因此，静态初始化只会在首次加载 Class 对象时初始化一次。</li><li>当用 new Dog() 创建对象时，首先会在堆上为 Dog 对象分配足够的存储空间。</li><li>分配的存储空间首先会被清零，即会将 Dog 对象中的所有基本类型数据设置为默认值（数字会被置为 0，布尔型和字符型也相同），引用被置为 null。</li><li>执行所有出现在字段定义处的初始化动作。</li><li>执行构造器。你将会在”复用”这一章看到，这可能会牵涉到很多动作，尤其当涉及继承的时候。</li></ul><h2 id="显式静态初始化"><a href="#显式静态初始化" class="headerlink" title="显式静态初始化"></a>显式静态初始化</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/ExplicitStatic.java</span><span class="token comment">// Explicit static initialization with "static" clause</span><span class="token keyword">class</span> <span class="token class-name">Cup</span> <span class="token punctuation">{</span>    <span class="token class-name">Cup</span><span class="token punctuation">(</span><span class="token keyword">int</span> marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cup("</span> <span class="token operator">+</span> marker <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"f("</span> <span class="token operator">+</span> marker <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cups</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">Cup</span> cup1<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Cup</span> cup2<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        cup1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cup2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Cups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cups()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExplicitStatic</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inside main()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cups</span><span class="token punctuation">.</span>cup1<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>    <span class="token punctuation">}</span>    <span class="token comment">// static Cups cups1 = new Cups(); // [2]</span>    <span class="token comment">// static Cups cups2 = new Cups(); // [2]</span><span class="token punctuation">}</span>输出：<span class="token class-name">Inside</span> main<span class="token class-name">Cup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">Cup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>无论是通过标为 [1] 的行访问静态的 cup1 对象，还是把标为 [1] 的行去掉，让它去运行标为 [2] 的那行代码（去掉 [2] 的注释），Cups 的静态初始化动作都会执行。如果同时注释 [1] 和 [2] 处，那么 Cups 的静态初始化就不会进行。此外，把标为 [2] 处的注释都去掉还是只去掉一个，静态初始化只会执行一次。</li></ul><h2 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// housekeeping/NewVarArgs.java</span><span class="token comment">// Using array syntax to create variable argument lists</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewVarArgs</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Can take individual elements:</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token number">11.11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">3.14F</span><span class="token punctuation">,</span> <span class="token number">11.11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Or an array:</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Empty list is OK</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">47</span> <span class="token number">3.14</span> <span class="token number">11.11</span> <span class="token number">47</span> <span class="token number">3.14</span> <span class="token number">11.11</span> one two three <span class="token class-name">A</span><span class="token annotation punctuation">@15db9742</span> <span class="token class-name">A</span><span class="token annotation punctuation">@6d06d69c</span> <span class="token class-name">A</span><span class="token annotation punctuation">@7852e922</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h1><h2 id="classPath-搜索目录"><a href="#classPath-搜索目录" class="headerlink" title="classPath 搜索目录"></a>classPath 搜索目录</h2><pre class="line-numbers language-none"><code class="language-none">当 Java 解释器必须要加载一个 .class 文件时，它能定位到 .class 文件所在的位置。首先，它找出环境变量 CLASSPATH（通过操作系统设置，有时也能通过 Java 的安装程序或基于 Java 的工具设置）。CLASSPATH 包含一个或多个目录，用作查找 .class 文件的根目录。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="jar"><a href="#jar" class="headerlink" title="jar"></a>jar</h2><pre class="line-numbers language-none"><code class="language-none">在 Java 中，可运行程序是一组 .class 文件，它们可以打包压缩成一个 Java 文档文件（JAR，使用 jar 文档生成器）。Java 解释器负责查找、加载和解释这些文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// hiding/Lunch.java</span><span class="token comment">// Demonstrates class access specifiers. Make a class</span><span class="token comment">// effectively private with private constructors:</span><span class="token keyword">class</span> <span class="token class-name">Soup1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Soup1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Soup1</span> <span class="token function">makeSoup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// [1]</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Soup1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Soup2</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Soup2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Soup2</span> ps1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Soup2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2]</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Soup2</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ps1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Only one public class allowed per file:</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lunch</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">testPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Can't do this! Private constructor:</span>        <span class="token comment">//- Soup1 soup = new Soup1();</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Soup1</span> soup <span class="token operator">=</span> <span class="token class-name">Soup1</span><span class="token punctuation">.</span><span class="token function">makeSoup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">testSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Soup2</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Soup2 用到了所谓的设计模式（design pattern）。这种模式叫做单例模式（singleton），因为它只允许创建类的一个对象。Soup2 类的对象是作为 Soup2 的 static private 成员而创建的，所以有且只有一个，你只能通过 public 修饰的 access() 方法访问到这个对象。</p></blockquote><h1 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h1><blockquote><p>如何在不污染源代码的前提下使用现存代码是需要技巧的。在本章里，你将学习到两种方式来达到这个目的：</p></blockquote><ul><li>第一种方式直接了当。在新类中创建现有类的对象。这种方式叫做“组合”（Composition），通过这种方式复用代码的功能，而非其形式。</li><li>第二种方式更为微妙。创建现有类类型的新类。照字面理解：采用现有类形式，又无需在编码时改动其代码，这种方式就叫做“继承”（Inheritance），编译器会做大部分的工作。继承是面向对象编程（OOP）的重要基础之一。更多功能相关将在多态（Polymorphism）章节中介绍。</li></ul><h2 id="protectd"><a href="#protectd" class="headerlink" title="protectd"></a>protectd</h2><pre class="line-numbers language-none"><code class="language-none">键字 protected 就起这个作用。它表示“就类的用户而言，这是 private 的。但对于任何继承它的子类或在同一包中的类，它是可访问的。”（protected 也提供了包访问权限）尽管可以创建 protected 属性，但是最好的方式是将属性声明为 private 以一直保留更改底层实现的权利。然后通过 protected 控制类的继承者的访问权限。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>使用 final 方法的原因有两个。第一个原因是给方法上锁，防止子类通过覆写改变方法的行为。这是出于继承的考虑，确保方法的行为不会因继承而改变。</p><h2 id="类初始化和加载"><a href="#类初始化和加载" class="headerlink" title="类初始化和加载"></a>类初始化和加载</h2><pre class="line-numbers language-none"><code class="language-none">当执行 java Beetle，首先会试图访问 Beetle 类的 main() 方法（一个静态方法），加载器启动并找出 Beetle 类的编译代码（在名为 Beetle.class 的文件中）。在加载过程中，编译器注意到有一个基类，于是继续加载基类。不论是否创建了基类的对象，基类都会被加载。（可以尝试把创建基类对象的代码注释掉证明这点。）如果基类还存在自身的基类，那么第二个基类也将被加载，以此类推。接下来，根基类（例子中根基类是 Insect）的 static 的初始化开始执行，接着是派生类，以此类推。这点很重要，因为派生类中 static 的初始化可能依赖基类成员是否被正确地初始化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="绑定（如何知道-多态-指向的引用对象类型）"><a href="#绑定（如何知道-多态-指向的引用对象类型）" class="headerlink" title="绑定（如何知道 多态 指向的引用对象类型）"></a>绑定（如何知道 多态 指向的引用对象类型）</h2><p>那么编译器是如何知道这里的 Instrument 引用指向的是 Wind，而不是 Brass 或 Stringed 呢？编译器无法得知。为了深入理解这个问题，有必要研究一下绑定这个主题。</p><blockquote><p>前期绑定</p></blockquote><pre class="line-numbers language-none"><code class="language-none">将一个方法调用和一个方法主体关联起来称作绑定。若绑定发生在程序运行前（如果有的话，由编译器和链接器实现），叫做前期绑定。你可能从来没有听说这个术语，因为它是面向过程语言不需选择默认的绑定方式，例如在 C 语言中就只有前期绑定这一种方法调用。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>后期绑定</p></blockquote><pre class="line-numbers language-none"><code class="language-none">意味着在运行时根据对象的类型进行绑定。后期绑定也称为动态绑定或运行时绑定。当一种语言实现了后期绑定，就必须具有某种机制在运行时能判断对象的类型，从而调用恰当的方法。也就是说，编译器仍然不知道对象的类型，但是方法调用机制能找到正确的方法体并调用。每种语言的后期绑定机制都不同，但是可以想到，对象中一定存在某种类型信息。Java 中除了 static 和 final 方法（private 方法也是隐式的 final）外，其他所有方法都是后期绑定。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="向上转换"><a href="#向上转换" class="headerlink" title="向上转换"></a>向上转换</h2><p><img src="/2020/11/29/java-core-onjava8/Java-core-onJava8.md"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Shape</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>你可能再次认为 <span class="token class-name">Shape</span> 的 <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法被调用，因为 s 是一个 <span class="token class-name">Shape</span> 引用——编译器怎么可能知道要做其他的事呢？然而，由于后期绑定（多态）被调用的是 <span class="token class-name">Circle</span> 的 <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法，这是正确的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="陷阱：“重写”私有方法"><a href="#陷阱：“重写”私有方法" class="headerlink" title="陷阱：“重写”私有方法"></a>陷阱：“重写”私有方法</h3><h3 id="陷阱：属性与静态方法"><a href="#陷阱：属性与静态方法" class="headerlink" title="陷阱：属性与静态方法"></a>陷阱：属性与静态方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">然而，只有普通的方法调用可以是多态的。例如，如果你直接访问一个属性，该访问会在编译时解析：<span class="token comment">// polymorphism/FieldAccess.java</span><span class="token comment">// Direct field access is determined at compile time</span><span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> field <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> field<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> field <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> field<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSuperField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>field<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldAccess</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Super</span> sup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Upcast</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sup.field = "</span> <span class="token operator">+</span> sup<span class="token punctuation">.</span>field <span class="token operator">+</span>                           <span class="token string">", sup.getField() = "</span> <span class="token operator">+</span> sup<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sub</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub.field = "</span> <span class="token operator">+</span> sub<span class="token punctuation">.</span>field <span class="token operator">+</span>                           <span class="token string">", sub.getField() = "</span> <span class="token operator">+</span> sub<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token operator">+</span> <span class="token string">", sub.getSuperField() = "</span> <span class="token operator">+</span> sub<span class="token punctuation">.</span><span class="token function">getSuperField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：sup<span class="token punctuation">.</span>field <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sup<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>sub<span class="token punctuation">.</span>field <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sub<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sub<span class="token punctuation">.</span><span class="token function">getSuperField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结</p></blockquote><pre class="line-numbers language-none"><code class="language-none">尽管这看起来是个令人困惑的问题，实际上基本不会发生。首先，通常会将所有的属性都指明为 private，因此不能直接访问它们，只能通过方法来访问。此外，你可能也不会给基类属性和派生类属性起相同的名字，这样做会令人困惑。如果一个方法是静态(static)的，它的行为就不具有多态性：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="初始化顺序-1"><a href="#初始化顺序-1" class="headerlink" title="初始化顺序"></a>初始化顺序</h2><p>从创建 Sandwich 对象的输出中可以看出对象的构造器调用顺序如下：</p><p>基类构造器被调用。这个步骤被递归地重复，这样一来类层次的顶级父类会被最先构造，然后是它的派生类，以此类推，直到最底层的派生类。<br>按声明顺序初始化成员。<br>调用派生类构造器的方法体。</p><h2 id="构造器内部多态方法的行为"><a href="#构造器内部多态方法的行为" class="headerlink" title="构造器内部多态方法的行为"></a>构造器内部多态方法的行为</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">如果在构造器中调用了动态绑定方法，就会用到那个方法的重写定义。然而，调用的结果难以预料因为被重写的方法在对象被完全构造出来之前已经被调用，这使得一些 bug 很隐蔽，难以发现。从概念上讲，构造器的工作就是创建对象（这并非是平常的工作）。在构造器内部，整个对象可能只是部分形成——只知道基类对象已经初始化。如果构造器只是构造对象过程中的一个步骤，且构造的对象所属的类是从构造器所属的类派生出的，那么派生部分在当前构造器被调用时还没有初始化。然而，一个动态绑定的方法调用向外深入到继承层次结构中，它可以调用派生类的方法。如果你在构造器中这么做，就可能调用一个方法，该方法操纵的成员可能还没有初始化——这肯定会带来灾难。下面例子展示了这个问题：<span class="token comment">// polymorphism/PolyConstructors.java</span><span class="token comment">// Constructors and polymorphism</span><span class="token comment">// don't produce what you might expect</span><span class="token keyword">class</span> <span class="token class-name">Glyph</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Glyph.draw()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Glyph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Glyph() before draw()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Glyph() after draw()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">RoundGlyph</span> <span class="token keyword">extends</span> <span class="token class-name">Glyph</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> radius <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token class-name">RoundGlyph</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        radius <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RoundGlyph.RoundGlyph(), radius = "</span> <span class="token operator">+</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RoundGlyph.draw(), radius = "</span> <span class="token operator">+</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PolyConstructors</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">RoundGlyph</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token class-name">Glyph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> before <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">RoundGlyph</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius <span class="token operator">=</span> <span class="token number">0</span><span class="token class-name">Glyph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> after <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">RoundGlyph<span class="token punctuation">.</span>RoundGlyph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius <span class="token operator">=</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>规范</p></blockquote><ul><li>因此，编写构造器有一条良好规范：做尽量少的事让对象进入良好状态。如果有可能的话，尽量不要调用类中的任何方法。在基类的构造器中能安全调用的只有基类的 final 方法（这也适用于可被看作是 final 的 private 方法）。这些方法不能被重写，因此不会产生意想不到的结果。你可能无法永远遵循这条规范，但应该朝着它努力。</li></ul><h2 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h2><blockquote><p>但是在 Java 中，每次转型都会被检查！所以即使只是进行一次普通的加括号形式的类型转换，在运行时这个转换仍会被检查，以确保它的确是希望的那种类型。如果不是，就会得到 ClassCastException （类转型异常）。</p></blockquote><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口创建"><a href="#接口创建" class="headerlink" title="接口创建"></a>接口创建</h2><p>描述 Java 8 之前的接口更加容易，因为它们只允许抽象方法。像下面这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// interfaces/PureInterface.java</span><span class="token comment">// Interface only looked like this before Java 8</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PureInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Java 8 允许接口包含默认方法和静态方法——基于某些重要原因</li><li>接口同样可以包含属性，这些属性被隐式指明为 static 和 final。</li><li>你可以选择显式地声明接口中的方法为 public，但是即使你不这么做，它们也是 public 的。所以当实现一个接口时，来自接口中的方法必须被定义为 public。否则，它们只有包访问权限，这样在继承时，它们的可访问权限就被降低了，这是 Java 编译器所不允许的。</li></ul><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// interfaces/InterfaceWithDefault.java</span><span class="token keyword">interface</span> <span class="token class-name">InterfaceWithDefault</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">firstMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">secondMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">newMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"newMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><blockquote><p>结合带有默认方法的接口意味着结合了多个基类中的行为。因为接口中仍然不允许存在属性（只有静态属性，不适用），所以属性仍然只会来自单个基类或抽象类，也就是说，不会存在状态的多继承。</p></blockquote><h2 id="接口中的静态方法"><a href="#接口中的静态方法" class="headerlink" title="接口中的静态方法"></a>接口中的静态方法</h2><p>Java 8 允许在接口中添加静态方法。这么做能恰当地把工具功能置于接口中，从而操作接口，或者成为通用的工具：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// onjava/Operations.java</span><span class="token keyword">package</span> <span class="token namespace">onjava</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operations</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runOps</span><span class="token punctuation">(</span><span class="token class-name">Operations</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ops<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Operations</span> op<span class="token operator">:</span> ops<span class="token punctuation">)</span> <span class="token punctuation">{</span>            op<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>这是模板方法设计模式的一个版本（在“设计模式”一章中详细描述），<span class="token function">runOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是一个模板方法。<span class="token function">runOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 使用可变参数列表，因而我们可以传入任意多的 <span class="token class-name">Operation</span> 参数并按顺序运行它们：<span class="token comment">// interface/Machine.java</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">onjava<span class="token punctuation">.</span></span><span class="token class-name">Operations</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bing</span> <span class="token keyword">implements</span> <span class="token class-name">Operations</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Operations</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Bing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Crack</span> <span class="token keyword">implements</span> <span class="token class-name">Operations</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Operations</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Crack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Twist</span> <span class="token keyword">implements</span> <span class="token class-name">Operations</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Operations</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Twist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Machine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Operations</span><span class="token punctuation">.</span><span class="token function">runOps</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Bing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Crack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Twist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Bing</span><span class="token class-name">Crack</span><span class="token class-name">Twist</span>这里展示了创建 <span class="token class-name">Operations</span> 的不同方式：一个外部类<span class="token punctuation">(</span><span class="token class-name">Bing</span><span class="token punctuation">)</span>，一个匿名类，一个方法引用和 lambda 表达式——毫无疑问用在这里是最好的解决方法。这个特性是一项改善，因为它允许把静态方法放在更合适的地方。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><p><img src="/2020/11/29/java-core-onjava8/2.png"></p><h2 id="完全解耦"><a href="#完全解耦" class="headerlink" title="完全解耦"></a>完全解耦</h2><p>将接口与实现解耦使得接口可以应用于多种不同的实现，因而代码更具可复用性。</p><h2 id="使用继承扩展接口"><a href="#使用继承扩展接口" class="headerlink" title="使用继承扩展接口"></a>使用继承扩展接口</h2><p>通过继承，可以很容易在接口中增加方法声明，还可以在新接口中结合多个接口。这两种情况都可以得到新接口，如下例所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// interfaces/HorrorShow.java</span><span class="token comment">// Extending an interface with inheritance</span><span class="token keyword">interface</span> <span class="token class-name">Monster</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">menace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">DangerousMonster</span> <span class="token keyword">extends</span> <span class="token class-name">Monster</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口和工厂方法模式"><a href="#接口和工厂方法模式" class="headerlink" title="接口和工厂方法模式"></a>接口和工厂方法模式</h2><p>接口是多实现的途径，而生成符合某个接口的对象的典型方式是工厂方法设计模式。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="this-new"><a href="#this-new" class="headerlink" title=".this .new"></a>.this .new</h3><blockquote><p>如果你需要生成对外部类对象的引用，可以使用外部类的名字后面紧跟圆点和 this。</p></blockquote><blockquote><p>有时你可能想要告知某些其他对象，去创建其某个内部类的对象。要实现此目的，你必须在 new 表达式中提供对其他外部类对象的引用，这是需要使用 .new 语法，就像下面这样：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// innerclasses/DotNew.java</span><span class="token comment">// Creating an inner class directly using .new syntax</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DotNew</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DotNew</span> dn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DotNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DotNew<span class="token punctuation">.</span>Inner</span> dni <span class="token operator">=</span> dn<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在拥有外部类对象之前是不可能创建内部类对象的。这是因为内部类对象会暗暗地连接到建它的外部类对象上。但是，如果你创建的是嵌套类（静态内部类），那么它就不需要对外部类对象的引用。</p></blockquote><h3 id="内部类方法"><a href="#内部类方法" class="headerlink" title="内部类方法"></a>内部类方法</h3><ul><li>之前内部类的作用<ul><li>给类的设计者提供了一种途径，通过这种方式可以完全阻止任何依赖于类型的编码，并且完全隐藏了实现的细节。</li></ul></li><li>发展之后：可以在一个方法里面或者在任意的作用域内定义内部类。<ul><li>如前所示，你实现了某类型的接口，于是可以创建并返回对其的引用。</li><li>你要解决一个复杂的问题，想创建一个类来辅助你的解决方案，但是又不希望这个类是公共可用的。<blockquote><p>例子</p></blockquote></li></ul></li><li>一个定义在方法中的类。<ul><li>在方法的作用域内（而不是在其他类的作用域内）创建一个完整的类。这被称作局部内部类：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// innerclasses/Parcel5.java</span><span class="token comment">// Nesting a class within a method</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Destination</span> <span class="token function">destination</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PDestination</span> <span class="token keyword">implements</span> <span class="token class-name">Destination</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> label<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token class-name">PDestination</span><span class="token punctuation">(</span><span class="token class-name">String</span> whereTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                label <span class="token operator">=</span> whereTo<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> label<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PDestination</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Parcel5</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Destination</span> d <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">destination</span><span class="token punctuation">(</span><span class="token string">"Tasmania"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>一个定义在作用域内的类，此作用域在方法的内部。<ul><li>在任意的作用域内嵌入一个内部类：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// innerclasses/Parcel6.java</span><span class="token comment">// Nesting a class within a scope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel6</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">internalTracking</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">class</span> <span class="token class-name">TrackingSlip</span> <span class="token punctuation">{</span>                <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>                <span class="token class-name">TrackingSlip</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    id <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">String</span> <span class="token function">getSlip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> id<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">TrackingSlip</span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrackingSlip</span><span class="token punctuation">(</span><span class="token string">"slip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> ts<span class="token punctuation">.</span><span class="token function">getSlip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Can't use it here! Out of scope:</span>        <span class="token comment">//- TrackingSlip ts = new TrackingSlip("x");</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">internalTracking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Parcel6</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">TrackingSlip</span> 类被嵌入在 <span class="token keyword">if</span> 语句的作用域内，这并不是说该类的创建是有条件的，它其实与别的类一起编译过了。然而，在定义 <span class="token class-name">Trackingslip</span> 的作用域之外，它是不可用的，除此之外，它与普通的类一样。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>一个实现了接口的匿名类。<ul><li>在这个匿名内部类中，使用了默认的构造器来生成 Contents。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// innerclasses/Parcel7.java</span><span class="token comment">// Returning an instance of an anonymous inner class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel7</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Contents</span> <span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Insert class definition</span>            <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Semicolon required</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Parcel7</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Contents</span> c <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>一个匿名类，它扩展了没有默认构造器的类。<ul><li>有参构造器<pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">// innerclasses/Parcel8.java</span><span class="token comment">// Calling the base-class constructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel8</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Wrapping</span> <span class="token function">wrapping</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Base constructor call:</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wrapping</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// [1]</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">47</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// [2]</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Parcel8</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Wrapping</span> w <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">wrapping</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 将合适的参数传递给基类的构造器。<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 在匿名内部类末尾的分号，并不是用来标记此内部类结束的。实际上，它标记的是表达式的结束，只不过这个表达式正巧包含了匿名内部类罢了。因此，这与别的地方使用的分号是一致的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>一个匿名类，它执行字段初始化。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// innerclasses/Parcel9.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel9</span> <span class="token punctuation">{</span>    <span class="token comment">// Argument must be final or "effectively final"</span>    <span class="token comment">// to use within the anonymous inner class:</span>    <span class="token keyword">public</span> <span class="token class-name">Destination</span> <span class="token function">destination</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> dest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Destination</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token class-name">String</span> label <span class="token operator">=</span> dest<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> label<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Parcel9</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Destination</span> d <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">destination</span><span class="token punctuation">(</span><span class="token string">"Tasmania"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>一个匿名类，它通过实例初始化实现构造（匿名内部类不可能有构造器）。</li></ul><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><blockquote><p>如果不需要内部类对象与其外部类对象之间有联系，那么可以将内部类声明为 static，这通常称为嵌套类。想要理解 static 应用于内部类时的含义，就必须记住，普通的内部类对象隐式地保存了一个引用，指向创建它的外部类对象。然而，当内部类是 static 的时，就不是这样了。嵌套类意味着：</p></blockquote><ul><li>创建嵌套类的对象时，不需要其外部类的对象。</li><li>不能从嵌套类的对象中访问非静态的外部类对象。<blockquote><p>嵌套类与普通的内部类还有一个区别。普通内部类的字段与方法，只能放在类的外部层次上，所以普通的内部类不能有 static 数据和 static 字段，也不能包含嵌套类。但是嵌套类可以包含所有这些东西：</p></blockquote></li></ul><h3 id="接口内部类"><a href="#接口内部类" class="headerlink" title="接口内部类"></a>接口内部类</h3><p>嵌套类可以作为接口的一部分。你放到接口中的任何类都自动地是 public 和 static 的。因为类是 static 的，只是将嵌套类置于接口的命名空间内，这并不违反接口的规则。你甚至可以在内部类中实现其外部接口，就像下面这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// innerclasses/ClassInInterface.java</span><span class="token comment">// {java ClassInInterface$Test}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClassInInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">howdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">ClassInInterface</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">howdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Howdy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">howdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为什么需要内部类"><a href="#为什么需要内部类" class="headerlink" title="为什么需要内部类"></a>为什么需要内部类</h2><p>所以，使用内部类最吸引人的原因是：</p><blockquote><p>每个内部类都能独立地继承自一个（接口的）实现，所以无论外部类是否已经继承了某个（接口的）实现，对于内部类都没有影响。</p></blockquote><p>但如果使用内部类，还可以获得其他一些特性：</p><ul><li>内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外部类对象的信息相互独立。</li><li>在单个外部类中，可以让多个内部类以不同的方式实现同一个接口，或继承同一个类。 稍后就会展示一个这样的例子。</li><li>创建内部类对象的时刻并不依赖于外部类对象的创建</li><li>内部类并没有令人迷惑的”is-a”关系，它就是一个独立的实体。</li></ul><h2 id="闭包和回调"><a href="#闭包和回调" class="headerlink" title="闭包和回调"></a>闭包和回调</h2><blockquote><p>闭包（closure）是一个可调用的对象，它记录了一些信息，这些信息来自于创建它的作用域。通过这个定义，可以看出内部类是面向对象的闭包，因为它不仅包含外部类对象（创建内部类的作用域）的信息，还自动拥有一个指向此外部类对象的引用，在此作用域内，内部类有权操作所有的成员，包括 private 成员。</p></blockquote><blockquote><p>人们认为 Java 应该包含某种类似指针的机制，以允许回调（callback）。通过回调，对象能够携带一些信息，这些信息允许它在稍后的某个时刻调用初始的对象。稍后将会看到这是一个非常有用的概念。</p></blockquote><h2 id="内部类标识符"><a href="#内部类标识符" class="headerlink" title="内部类标识符"></a>内部类标识符</h2><blockquote><p>由于编译后每个类都会产生一个 .class 文件，其中包含了如何创建该类型的对象的全部信息（此信息产生一个”meta-class”，叫做 Class 对象）。</p></blockquote><blockquote><p>你可能猜到了，内部类也必须生成一个 .class 文件以包含它们的 Class 对象信息。这些类文件的命名有严格的规则：外部类的名字，加上 “$” ，再加上内部类的名字。例如，LocalInnerClass.java 生成的 .class 文件包括：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Counter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">LocalInnerClass</span>$<span class="token number">1.</span><span class="token keyword">class</span><span class="token class-name">LocalInnerClass</span>$<span class="token number">1L</span>ocalCounter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">LocalInnerClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>概念</p></blockquote><ul><li>最初，你可以将模式视为解决特定类问题的一种特别巧妙且有深刻见解的方法。这就像前辈已经从所有角度去解决问题，并提出了最通用，最灵活的解决方案。</li></ul><blockquote><p>将易变的事物与不变的事物分开</p></blockquote><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><ul><li><p>概念：对功能进行分类，代码进行解耦</p></li><li><p>栗子：一个网络请求框架大致分为：请求类，缓存类，配置类；不能把这三个功能混合在一起，必须分成三个类分别去实现不同的功能</p></li></ul><h3 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h3><ul><li><p>概念：在继承类时，除了扩展一些新的功能之外，尽量不要删除或者修改对父类方法的引用，也尽量不要重载父类的方法</p></li><li><p>栗子：每个类都是Object的子类，Object类中有一个toString()的方法，假如子类重写该方法并且返回null，这个子类的下一级继承返回的都是null，那么在不同开发人员维护时可能考虑不到这个问题，并且很可能会导致程序崩溃</p></li></ul><h3 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h3><ul><li><p>概念：高层模块不依赖低层次模块的细节，高层次就是不依赖细节而是依赖抽象（不依赖具体的类，而是依赖于接口）</p></li><li><p>栗子：某个网络框架为了满足不同开发者的需求，即能使用高效的OkHttp框架，也可以使用原生的API。正所谓萝卜白菜各有所爱，那么是如何进行切换的呢，这个时候需要面向接口编程思想了，把一些网络请求的方法封装成一个接口，然后分别创建OkHttp和原生API的接口实现类，当然也方便后续其他开发人员进行扩展其他网络框架的应用</p></li></ul><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><ul><li><p>概念：在定义接口方法时应该合理化，尽量追求简单最小，避免接口臃肿</p></li><li><p>栗子：在实际开发中，往往为了节省时间，可能会将多个功能的方法抽成一个接口，其实这设计理念不正确的，这样会使接口处于臃肿的状态，这时就需要合理的拆分接口中的方法，另外抽取成一个独立的接口，避免原有的接口臃肿导致代码理解困难</p></li></ul><h3 id="迪米特-最少知道"><a href="#迪米特-最少知道" class="headerlink" title="迪米特 | 最少知道"></a>迪米特 | 最少知道</h3><ul><li><p>概念：一个对象应该对其他对象有最少的了解；一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的一概不关心。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。只与直接的朋友通信。每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合就成为朋友关系，这种关系的类型有很多，例如组合、聚合、依赖等。</p></li><li><p>栗子：一般在使用框架的时候，框架的开发者会抽出一个类供外部调用，而这个主要的类像是一个中介一样去调用框架里面的其他类，恰恰框架里面其他类一般都是不可访问（调用）的，这个框架就遵守了迪米特原则，其他开发人员只关心调用的方法，并不需要关心功能具体如何实现</p></li></ul><h3 id="开闭"><a href="#开闭" class="headerlink" title="开闭"></a>开闭</h3><ul><li><p>概念：类、模块和函数应该对扩展开放，对修改关闭</p></li><li><p>栗子：在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试，整个流程对开发周期影响很大，这个时候就需要开闭原则来解决这种问题</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>单一职责原则告诉我们实现类要职责单一</p></li><li><p>里氏替换原则告诉我们不要破坏继承体系</p></li><li><p>依赖倒置原则告诉我们要面向接口编程</p></li><li><p>接口隔离原则告诉我们在设计接口的时候要精简单一</p></li><li><p>迪米特原则告诉我们要降低耦合</p></li><li><p>开闭原则是总纲，告诉我们要对扩展开放，对修改关闭</p></li></ul><h2 id="单例模式-1"><a href="#单例模式-1" class="headerlink" title="单例模式"></a>单例模式</h2><p>也许单例模式是最简单的设计模式，它是一种提供一个且只有一个对象实例的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// patterns/SingletonPattern.java</span><span class="token keyword">interface</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** 由于这不是从Cloneable基类继承而且没有添加可克隆性，* 因此将其设置为final可防止通过继承添加可克隆性。* 这也实现了线程安全的延迟初始化：*/</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ResourceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Resource</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">ResourceImpl</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResourceHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceImpl</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Resource</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">ResourceHolder</span><span class="token punctuation">.</span>resource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Resource</span> r <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Resource</span> s2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token comment">// 不能这么做，会发生：compile-time error（编译时错误）.     </span>             <span class="token comment">// Singleton s3 = (Singleton)s2.clone();    </span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">/* Output: 47 9 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>创建单例的关键是防止客户端程序员直接创建对象。 在这里，这是通过在Singleton类中将Resource的实现作为私有类来实现的。</p></li><li><p>此时，你将决定如何创建对象。在这里，它是按需创建的，在第一次访问的时候创建。 该对象是私有的，只能通过public getResource（）方法访问。</p></li><li><p>懒惰地创建对象的原因是它嵌套的私有类resourceHolder在首次引用之前不会加载（在getResource（）中）。当Resource对象加载的时候，静态初始化块将被调用。由于JVM的工作方式，这种静态初始化是线程安全的。为保证线程安全，Resource中的getter和setter是同步的。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-pipe</title>
      <link href="2020/11/26/linux-pipe/"/>
      <url>2020/11/26/linux-pipe/</url>
      
        <content type="html"><![CDATA[<h1 id="进程通信-pipe"><a href="#进程通信-pipe" class="headerlink" title="进程通信 pipe"></a>进程通信 pipe</h1><p>fork(进程)  thread(线程)</p><p>管道最大值为64k  65535bytes</p><pre class="line-numbers language-none"><code class="language-none">popen()会调用fork()产生子进程，然后从子进程中调用/bin/sh -c来执行参数command的指令。参数type可使用“r”代表读取，“w”代表写入。依照此type值，popen()会建立管道连到子进程的标准输出设备或标准输入设备，然后返回一个文件指针。随后进程便可利用此文件指针来读取子进程的输出设备或是写入到子进程的标准输入设备中。此外，所有使用文件指针(FILE*)操作的函数也都可以使用，除了fclose()以外。如果 type 为 r，那么调用进程读进 command 的标准输出。如果 type 为 w，那么调用进程写到 command 的标准输入。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结</p></blockquote><pre class="line-numbers language-none"><code class="language-none">1.popen是并行（最后子进程是由pclose回收），system是串行（会等待子进程做完事，然后收拾）。          2.system() 在等待命令终止时将忽略SIGINT 和SIGQUIT 信号，同时阻塞SIGCHLD 信号，但是popen里面都没有涉及到信号          3.system返回值比较复杂，里面有fork，exec，waitpid，返回值可能就是fork，exec，waitpid的回值，而popen会返回一个流，popen可以打开一个文件          4.system只有一个参数，例如system("mkdir dir");创建一个目录，popen有两个参数，一个是文件的路径：路径，一个是选项                   5.popen() 的参数是指向以空字符结尾的字符串的指针，这些字符串分别包含一个shell 命令行和一个I/O 模式，此模式可以是进行读取的r ，或进行写入的w 。            6.在linux中我们可以通过system()来执行一个shell命令，popen()也是执行shell命令并且通过管道和shell命令进行通信。system()、popen()给我们处理了fork、exec、waitpid等一系列的处理流程，让我们只需要关注最后的返回结果(函数的返回值)即可。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Pipe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-ToptoDown-chap07-802.11-wireless-LAN</title>
      <link href="2020/11/20/ji-suan-ji-wang-luo-toptodown-chap07-802-11-wireless-lan/"/>
      <url>2020/11/20/ji-suan-ji-wang-luo-toptodown-chap07-802-11-wireless-lan/</url>
      
        <content type="html"><![CDATA[<h1 id="802-11体系结构"><a href="#802-11体系结构" class="headerlink" title="802.11体系结构"></a>802.11体系结构</h1><blockquote><p>基本构件</p></blockquote><ul><li>BSS<ul><li>包含一个或多个无线站点和<strong>一个AP</strong>（中央基站）</li></ul></li></ul><blockquote><p>典型的家庭网络</p></blockquote><ul><li>一个AP和一台将该BSS连接到Internet的路由器 </li><li>自组织（不和外接相连，自己聚集）<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap07-802-11-wireless-lan/1.png"></li></ul><h1 id="相同IP子网的移动性"><a href="#相同IP子网的移动性" class="headerlink" title="相同IP子网的移动性"></a>相同IP子网的移动性</h1><blockquote><p>为了增加无线LAN的物理范围，公司和大学通常会在一个IP子网里面部署多个BSS。</p></blockquote><ul><li><p>无线站点如何维持进行中的TCP会话（从一个BSS到另一个BSS），无缝切换？</p></li><li><p>实例： 两个BSS互联设备不是路由器，所以两个BSS中的所有站点包括AP都是同一个IP子网<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap07-802-11-wireless-lan/1.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-ToptoDown-chap06-Linker-Layer-LAN</title>
      <link href="2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/"/>
      <url>2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%BA%A4%E6%8D%A2%E5%B1%80%E5%9F%9F%E7%BD%91">交换局域网</a><ul><li><a href="#%E9%93%BE%E8%B7%AF%E5%B1%82%E5%AF%BB%E5%9D%80%E5%92%8Carp">链路层寻址和ARP</a><ul><li><a href="#mac%E5%9C%B0%E5%9D%80">MAC地址</a></li><li><a href="#arp">ARP</a></li><li><a href="#%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E5%88%B0%E5%AD%90%E7%BD%91%E4%BB%A5%E5%A4%96">发送数据到子网以外</a></li></ul></li><li><a href="#%E4%BB%A5%E5%A4%AA%E7%BD%91">以太网</a><ul><li><a href="#%E5%B8%A7%E7%BB%93%E6%9E%84">帧结构</a></li></ul></li><li><a href="#%E9%93%BE%E8%B7%AF%E5%B1%82%E4%BA%A4%E6%8D%A2%E6%9C%BA">链路层交换机</a><ul><li><a href="#%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E8%BD%AC%E5%8F%91%E5%92%8C%E8%BF%87%E6%BB%A4">交换机的转发和过滤</a></li><li><a href="#%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E8%87%AA%E5%AD%A6%E4%B9%A0">交换机的自学习</a></li><li><a href="#%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8%E6%AF%94%E8%BE%83">交换机和路由器比较</a></li></ul></li><li><a href="#vlan">VLAN</a><ul><li><a href="#vlan-trunking">VLAN trunking</a></li></ul></li></ul></li><li><a href="#%E5%9B%9E%E9%A1%BEweb%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8Bfrom-top-to-down">回顾Web页面请求过程（From top to Down）</a><ul><li><a href="#%E5%87%86%E5%A4%871dhcpudpip-%E4%BB%A5%E5%A4%AA%E7%BD%91">准备1、DHCP、UDP、IP 以太网</a></li><li><a href="#%E5%87%86%E5%A4%872-dns%E5%92%8Carp">准备2 DNS和ARP</a></li><li><a href="#%E5%87%86%E5%A4%873-%E5%9F%9F%E5%86%85%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%88%B0dns%E6%9C%8D%E5%8A%A1%E5%99%A8">准备3： 域内路由选择到DNS服务器</a></li><li><a href="#web-client---server-%E4%BA%A4%E4%BA%92tcp-http">Web Client - Server 交互：TCP HTTP</a></li></ul></li></ul><!-- /TOC --><h1 id="交换局域网"><a href="#交换局域网" class="headerlink" title="交换局域网"></a>交换局域网</h1><h2 id="链路层寻址和ARP"><a href="#链路层寻址和ARP" class="headerlink" title="链路层寻址和ARP"></a>链路层寻址和ARP</h2><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><blockquote><p>为什么要有链路层地址</p></blockquote><ul><li>不是主机和路由器有链路层地址，而是他们的适配器（网络接口）具有链路层地址。多个网络接口就有多个链路层地址（相关联的多个IP一样）</li><li>分层原理 局域网适用于任意网络层 不一定是IP</li></ul><blockquote><p>链路层任务<br>在主机和路由器直接承载数据报。</p></blockquote><blockquote><p>链路层地址称呼  48bit 唯一</p></blockquote><ul><li>LAN 地址</li><li>物理 地址</li><li>MAC 地址（最常用）</li></ul><blockquote><p>适配器向目的适配器发送帧</p></blockquote><ul><li> （插入目的的MAC，发送到局域网）</li><li>有的需要局域网内所有其他适配器处理  MAC广播地址FF-FF-FF-FF-FF-FF</li></ul><h3 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h3><blockquote><p>假设简单的一个主机1Ip和1MAC,交换机广播帧<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/1.png"></p></blockquote><ul><li>过程<ul><li>222.222.222.220向222.222.222.222发IP数据报。他们在相同的子网里面。</li><li>为了发送需要向适配器提供IP数据报和目的222.222.222.222的MAC地址</li><li>ARP在发送主机的ARP模块（<strong>局域网</strong>内然后IP输入就能得到AMC）<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/2.png"></li><li>当ARP表没有的时候，发送方构造一个特殊的ARP Packet。（包括 发送、接受IP 接受MAC字段） 广播<blockquote><p>ARP是封装在链路层的，也包含网络层地址（可以是跨越链路层和网络层的协议）不一定在哪个层</p></blockquote></li></ul></li></ul><h3 id="发送数据到子网以外"><a href="#发送数据到子网以外" class="headerlink" title="发送数据到子网以外"></a>发送数据到子网以外</h3><p><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/3.png"></p><blockquote><p>过程</p></blockquote><ul><li>111.111.111.111想给主机222.222.222.222发送数据报，需要给适配器指示MAC </li><li>这个MAC是111.111.111.110 路由器接口的MAC。通往最终目的的第一跳路由器IP. </li><li>路由器得到这个数据 查表继续向222.222.222.220转发</li></ul><h2 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h2><h3 id="帧结构"><a href="#帧结构" class="headerlink" title="帧结构"></a>帧结构</h3><p><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/4.png"></p><ul><li>数据字段 46~1500bytes</li><li>目的地址</li><li>源地址</li><li>类型字段：允许以太网复用多种网络层协议</li><li>CRC:4bytes</li><li>前同步码：前7byte 10101010 最后一个字节10101011 唤醒接收适配器，他们时钟和发送方时钟同步。 以太网类型 10Mbs\100Mbs\1Gps</li></ul><h2 id="链路层交换机"><a href="#链路层交换机" class="headerlink" title="链路层交换机"></a>链路层交换机</h2><h3 id="交换机的转发和过滤"><a href="#交换机的转发和过滤" class="headerlink" title="交换机的转发和过滤"></a>交换机的转发和过滤</h3><ul><li><p>过滤：决定一个帧被转发还是丢弃</p></li><li><p>转发：决定一个帧被导向哪个接口</p></li><li><p>交换机表：<br>  <img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/5.png"></p><ul><li>一个MAC</li><li>一个通往MAC的接口</li><li>表项时间</li></ul></li><li><p>交换机表的三种情况 MAC DD-DD-DD-DD-DD-DD从x接口到达</p><ul><li>没有表项联系该MAC：向除x接口外所有接口前面的输出缓存转发该帧副本（相当于广播）</li><li>有个表项把该MAC和接口x联系起来，无须转发任何接口，直接丢弃</li><li>有个表项把该MAC和接口y!=x联系起来.转发对应接口就可</li></ul></li><li><p>现代分组交换机可以被配置（IP或者MAC转发）</p></li></ul><blockquote><p>交换机的优点</p></blockquote><ul><li>即插即用（不用网络管理员）</li></ul><h3 id="交换机的自学习"><a href="#交换机的自学习" class="headerlink" title="交换机的自学习"></a>交换机的自学习</h3><blockquote><p>学习MAC到达的接口和时间（设置老化期）<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/6.png"></p></blockquote><blockquote><p>交换机毒化</p></blockquote><ul><li>通过伪造表项填满交换机表</li></ul><h3 id="交换机和路由器比较"><a href="#交换机和路由器比较" class="headerlink" title="交换机和路由器比较"></a>交换机和路由器比较</h3><blockquote><p>不同层级</p></blockquote><blockquote><p>交换机的优点、缺点</p></blockquote><ul><li>优点</li><li>第二层<ul><li>即插即用</li><li>高分组过滤和转发速率</li></ul></li><li>缺点<ul><li>对广播风暴没有任何保护（如果主机一直广播以太网帧，交换机会一直转发，导致整个以太网崩溃）</li></ul></li></ul><blockquote><p>优缺点对比<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/7.png"></p></blockquote><blockquote><p>组网意见</p></blockquote><ul><li>几百台主机 小网络几个局域网网段,交换机就够了，不要求IP地址的然后配置就能使流量局部化。</li><li>几千台，网络中（除了交换机）还需包括路由器，对广播风暴控制</li></ul><h2 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h2><blockquote><p>交换局域网的问题</p></blockquote><ul><li>缺乏流量隔离。有些广播帧跨域了 整个机构网络</li><li>交换机的无效使用。单个96端口的不能隔离10个组</li><li>管理用户。改变物理布线，才能连到不同交换机<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/8.png"></li></ul><blockquote><p>VLAN的作用</p></blockquote><ul><li>单一物理局域网定义多个虚拟局域网</li></ul><blockquote><p>VALN的困难</p></blockquote><ul><li>完全隔绝的两个VLAN的，流量怎么交换？<ul><li>通过VLAN的一个端口连接外部路由（属于两个VLAN的）</li></ul></li></ul><h3 id="VLAN-trunking"><a href="#VLAN-trunking" class="headerlink" title="VLAN trunking"></a>VLAN trunking</h3><blockquote><p>特殊的端口被配置为干线trunking，发送到任何VLAN的帧，通过干线链路转发到其他交换机<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/9.png"></p></blockquote><blockquote><p>扩展的以太网帧 802.1q VLAN<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/10.png"></p></blockquote><ul><li>VLAN还能基于IP 和MAC</li></ul><h1 id="回顾Web页面请求过程（From-top-to-Down）"><a href="#回顾Web页面请求过程（From-top-to-Down）" class="headerlink" title="回顾Web页面请求过程（From top to Down）"></a>回顾Web页面请求过程（From top to Down）</h1><blockquote><p>假设情况</p></blockquote><ul><li>一个学生用便携机和学校的以太网交换机相连，交换机又与学校的路由器相连。</li><li> 学校的路由器和一个ISP相连（Comcast.net) </li><li>这里comcast.net为学校提供DNS服务。DNS服务器在Comcast网络，而不是学校网络</li><li>DHCP服务器在路由器中<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap06-linker-layer-lan/11.png"></li></ul><h2 id="准备1、DHCP、UDP、IP-以太网"><a href="#准备1、DHCP、UDP、IP-以太网" class="headerlink" title="准备1、DHCP、UDP、IP 以太网"></a>准备1、DHCP、UDP、IP 以太网</h2><blockquote><p>过程</p></blockquote><ul><li>首先网络连接，没有IP就不能做任何事情。所以Bob的便携机运行DHCP协议从本地获得一个IP以及其他信息<ul><li>Bob操作系统生成DHCP request 报文 ，放入目的端口67（DHCP server） 和源端口68（DHCP Client）的UDP报文段</li><li>报文段被放置在一个广播IP目的地址255.255.255.255，和源IP0.0.0.0（还无IP）的IP数据报中</li><li>IP数据报被放入以太网帧中 目的MAC FF:FF:FF:FF:FF:FF ,源MAC 就是自己的MAC:XXXX。使该帧广播到与交换机连接的所有设备（如果顺利 包含了DHCP服务器）</li><li>DHCP请求的广播以太网帧是第一个Bob发送到以太网交换机的帧。所以该交换机在所有的出端口广播入帧，包含连接路由器的端口</li><li>路由器在它具有MAC的XXXXXX 接口收到该广播以太网帧，该帧包含DHCP请求，并且从该以太网帧抽取IP数据报。该数据报的广播IP目的地址指示其需要高层协议处理。数据报的payload（UDP报文）分解，向上到达UDP。DHCP服务器由来DHCP请求报文。</li><li>假设DHCP可分配 68.85.2.0/24 块。DHCP服务器生成了包含IP、默认网关、子网掩码的DHCP ACK报文。一直下放到以太网帧源MAC 路由器的MAC 目的也就是Bob的MAC</li><li>包含DHCP ACK的以太网帧从路由器发到交换机。交换机是自学习的，先前知道了Bob的位置，就只往Bob的输出端口转发。</li><li>Bob 接收到DHCP ACK以太网帧。得到UDP报文段，得到DHCP ACK报文。得到Ip和DNS serverIP IP转发表安装默认网关，除了 子网内的地址都会往 默认网关发送目的地址</li><li>*（DHCP后只有两个步骤是实际必要的）**</li></ul></li></ul><h2 id="准备2-DNS和ARP"><a href="#准备2-DNS和ARP" class="headerlink" title="准备2 DNS和ARP"></a>准备2 DNS和ARP</h2><blockquote><p>Bob的Web浏览器生成一个TCPSocket用于给<a href="http://www.google.com发送http请求.为了生成这个套接字需要知道www.google.com的ip(tcp/">www.google.com发送HTTP请求。为了生成这个套接字需要知道www.google.com的IP（TCP</a> Socket 需要四元组） 所以需要DNS</p></blockquote><ul><li>Bob的操作系统生成了DNS查询报文，把字符串<a href="http://www.google.com放入dns报文的问题段中.dns报文被放置在具有53端口号(dns服务器)目的端口的udp报文段.该udp报文段则放入(dhcp/">www.google.com放入DNS报文的问题段中。DNS报文被放置在具有53端口号（DNS服务器）目的端口的UDP报文段。该UDP报文段则放入（DHCP</a> ACK的 DNS服务器IP）和源IP BobIp的IP数据报里面</li><li>数据报放入以太网帧。在链路层寻址网关路由器。虽然知道网关路由器的IP，但是不知道网关路由器的MAC，为了获得网关路由器的MAC，需要使用ARP</li><li>Bob生成了一个具有目的IP地址的（默认网关）的ARP查询报文，放入具有广播目的地址（FF:FF:FF:FF:FF:FF)的以太网帧，向交换机发送。交换机把该帧交付给所有连接的设备（包括网关路由器）。</li><li>网关路由器的接口收到了包含该ARp查询的报文的帧，发现ARP报文的目标IP对应接口IP。网关因此准备了一个MAC回答，指示自己的对应IP的MAC，放入以太网帧，目的地址是Bob的MAC地址。</li><li>Bob收到ARP回答报文的帧，从报文得到网关的MAAC</li><li>Bob可以使包含DNS查询的以太网帧寻址到网关路由器的MAC。<strong>注意 该帧的目的地址网关路由器MAC,该帧的数据报目的地址IP是DNS服务器IP</strong>。Bob给交换机发送该帧，交换机将该帧交付到网关路由器。</li></ul><h2 id="准备3：-域内路由选择到DNS服务器"><a href="#准备3：-域内路由选择到DNS服务器" class="headerlink" title="准备3： 域内路由选择到DNS服务器"></a>准备3： 域内路由选择到DNS服务器</h2><ul><li>网关路由器收到该帧抽取包含DNS查询的IP数据报。查找该数据报的目的地址（DNS服务器IP），根据转发表决定发到Comcast网络最左边的路由器，IP数据报放到链路层分发到该路由器</li><li>Comcast 最左边的路由器接收到帧，抽取IP数据报，查找目的地址（DNS IP）根据转发表确定接口，<strong>（转发表有 Comcast域内协议 RIP、或、OSPF、IS-IS等域内协议和Internet的域间协议BGP填写）</strong></li><li>包含DNS查询的IP数据报到达了DNS服务器，服务器抽取出DNS查询报文，在它的DNS数据库 中查找名字<a href="http://www.google.com/">www.google.com</a> IP的源记录（来源google.com的权威服务器），DNS服务器形成包含主机名到IP地址映射的DNS回答报文。放入UDP报文段，放入到BobIP的数据报。</li><li>Bob得到了服务器<a href="http://www.google.com的ip./">www.google.com的IP。</a></li></ul><h2 id="Web-Client-Server-交互：TCP-HTTP"><a href="#Web-Client-Server-交互：TCP-HTTP" class="headerlink" title="Web Client - Server 交互：TCP HTTP"></a>Web Client - Server 交互：TCP HTTP</h2><ul><li>Bob得到了服务器<a href="http://www.google.com的ip,来生成tcpsocket.生成tcp/">www.google.com的IP，来生成TCPSocket。生成TCP</a> socket时必须对<a href="http://www.google.com的tcp三次握手.bob先生成了目的端口80(http)/">www.google.com的TCP三次握手。Bob先生成了目的端口80（HTTP）</a> TCP SYN报文段，放入目的IP （网站IP） 的IP数据报，放入MAC地址（网关路由器MAC）的帧中，发送给交换机。</li><li>经过多个路由转发，最终包含TCP SYN报文到达<a href="http://www.google.com.数据报抽取出来并分解到和端口80联系的欢迎套接字.生成一个连接套接字(根据收到的四元组).然后产生一个tcp/">www.google.com。数据报抽取出来并分解到和端口80联系的欢迎套接字。生成一个连接套接字（根据收到的四元组）。然后产生一个TCP</a> SYN ACK报文段，放入数据报（目的Bob）放入链路层帧，往回传。</li><li>Bob得到了数据报，被操作系统分解到之前已经生成的TCP Socket的里面，进入连接状态。</li><li>现在可以通过这个TCP socket，Bob浏览器生成包含要获取URL的HTTP GET报文。交付到报文段、数据报 最后到<a href="http://www.google.com./">www.google.com。</a></li><li><a href="http://www.google.com/">www.google.com</a> 的HTTP服务器从TCP socket 读取HTTP GET报文，生成HTTP 响应 返回</li><li>Bob 的Web流量从套接字读取到HTTP响应，抽取出html,就显示了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-ToptoDown-chap05-Internet-Layer-Control</title>
      <link href="2020/11/20/ji-suan-ji-wang-luo-toptodown-chap05-internet-layer-control/"/>
      <url>2020/11/20/ji-suan-ji-wang-luo-toptodown-chap05-internet-layer-control/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#overview">overview</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95">路由选择算法</a><ul><li><a href="#ospf-open-shortest-path-first%E5%A4%A7%E8%A7%84%E6%A8%A1">OSPF (Open Shortest Path First)（大规模）</a></li></ul></li><li><a href="#icmp%E6%8A%A5%E6%96%87">ICMP报文</a><ul><li><a href="#ping%E5%8E%9F%E7%90%86">ping原理</a></li><li><a href="#traceroute-%E5%8E%9F%E7%90%86">traceroute 原理</a></li></ul></li></ul><!-- /TOC --><h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><blockquote><p>转发表（目的地转发）和流表（通用转发）如何产生</p></blockquote><blockquote><p>两种方式<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap05-internet-layer-control/2.png"></p></blockquote><h1 id="路由选择算法"><a href="#路由选择算法" class="headerlink" title="路由选择算法"></a>路由选择算法</h1><h2 id="OSPF-Open-Shortest-Path-First-（大规模）"><a href="#OSPF-Open-Shortest-Path-First-（大规模）" class="headerlink" title="OSPF (Open Shortest Path First)（大规模）"></a>OSPF (Open Shortest Path First)（大规模）</h2><ul><li>根据时间判断最短路径</li><li>对所有路由发送信息</li><li>只有路由状态改变才再次发 </li><li>30分钟刷新一次链路（只看附近 对整体影响小）</li></ul><h1 id="ICMP报文"><a href="#ICMP报文" class="headerlink" title="ICMP报文"></a>ICMP报文</h1><blockquote><p>主机和路由沟通网络层信息</p></blockquote><blockquote><p>ICMP报文是在IP的payload里面<br><img src="/2020/11/20/ji-suan-ji-wang-luo-toptodown-chap05-internet-layer-control/1.png"></p></blockquote><h2 id="ping原理"><a href="#ping原理" class="headerlink" title="ping原理"></a>ping原理</h2><blockquote><p>ping 程序发送ICMP类型8编码0到指定主机</p></blockquote><h2 id="traceroute-原理"><a href="#traceroute-原理" class="headerlink" title="traceroute 原理"></a>traceroute 原理</h2><blockquote><p>ICMP报文实现</p></blockquote><blockquote><p>过程</p></blockquote><ul><li>向目的主机发送一系列ip数据报，数据报携带不可达到的UDP端口号的UDP报文。</li><li>第一个TTL1 、第二个TTL2 依次类推</li><li>第n个数据报到第n台路由器的时候，第n台路由观察到数据报TTL过期，发送ICMP告警报文给源主机（类型11 编码0）。包括了路由器名字和它的IP。</li><li>主机得到往返时延，IP和名字</li><li>何时停止呢？<ul><li>数据报包括端口不可达的UDP报文段，目的主机 向源主机发送端口不可达ICMP报文（类型3 编码3）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-ToptoDown-chap04-Internet-Layer-Data</title>
      <link href="2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/"/>
      <url>2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#overview">overview</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8E%9F%E7%90%86">路由器原理</a><ul><li><a href="#%E8%BE%93%E5%85%A5%E8%BE%93%E5%85%A5%E7%AB%AF%E5%8F%A3%E5%A4%84%E7%90%86%E5%92%8C%E5%9F%BA%E4%BA%8E%E7%9B%AE%E7%9A%84%E5%9C%B0%E8%BD%AC%E5%8F%91">输入输入端口处理和基于目的地转发</a></li><li><a href="#%E4%BA%A4%E6%8D%A2">交换</a></li><li><a href="#%E8%BE%93%E5%87%BA%E7%AB%AF%E5%8F%A3%E5%A4%84%E7%90%86">输出端口处理</a></li><li><a href="#%E4%BD%95%E5%A4%84%E6%8E%92%E9%98%9F">何处排队</a></li><li><a href="#%E5%88%86%E7%BB%84%E8%B0%83%E5%BA%A6">分组调度</a></li></ul></li><li><a href="#ipv4-%5Cipv6">IPV4 \IPV6</a><ul><li><a href="#ipv4-%E6%95%B0%E6%8D%AE%E6%8A%A5">ipv4 数据报</a></li><li><a href="#ipv4-%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%88%86%E7%89%87">Ipv4 数据报分片</a></li><li><a href="#ipv4-%E7%BC%96%E5%9D%80">ipv4 编址</a></li><li><a href="#dhcp">DHCP</a></li><li><a href="#nat">NAT</a></li><li><a href="#ipv6">ipv6</a><ul><li><a href="#ipv6%E6%95%B0%E6%8D%AE%E6%8A%A5">ipv6数据报</a></li></ul></li><li><a href="#ipv6-%E5%92%8Cipv4%E7%9A%84%E8%BF%81%E7%A7%BB">ipv6 和ipv4的迁移</a></li><li><a href="#%E9%80%9A%E7%94%A8%E8%BD%AC%E5%8F%91%E5%92%8Csdn">通用转发和SDN</a><ul><li><a href="#%E5%8C%B9%E9%85%8D">匹配</a></li><li><a href="#%E5%8C%B9%E9%85%8D%E5%8A%A8%E4%BD%9C%E4%BE%8B%E5%AD%90">匹配动作例子</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><blockquote><p>网络层总览图<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/1.png"></p></blockquote><p><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/2.png"></p><blockquote><p>网络层的功能</p></blockquote><ul><li>转发</li><li>路由选择</li></ul><blockquote><p>分组交换机的定义</p></blockquote><ul><li>基于链路层帧的字段 为链路层交换机</li><li>其他分组交换机称为路由器</li></ul><h1 id="路由器原理"><a href="#路由器原理" class="headerlink" title="路由器原理"></a>路由器原理</h1><blockquote><p>路由器结构<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/3.png"></p></blockquote><ul><li>输入端口、输出端口、交换结构几乎用硬件（数据平面 ns级别）</li><li>路由选择处理器：控制功能（ 控制平面 ms级别）<ul><li>目的地转发：（通过目的地）直接告诉该往哪个出口来</li><li>通用转发： 还基于其他很多策略来转发</li></ul></li></ul><h2 id="输入输入端口处理和基于目的地转发"><a href="#输入输入端口处理和基于目的地转发" class="headerlink" title="输入输入端口处理和基于目的地转发"></a>输入输入端口处理和基于目的地转发</h2><p><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/4.png"></p><blockquote><p>最长前缀匹配找 输出端口</p></blockquote><h2 id="交换"><a href="#交换" class="headerlink" title="交换"></a>交换</h2><p><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/5.png"></p><ul><li>内存交换。最简单，共享系统一次只能执行一个内存读写</li><li>总线交换。无须路由选择处理器</li><li>互联网络交换。并行转发</li></ul><h2 id="输出端口处理"><a href="#输出端口处理" class="headerlink" title="输出端口处理"></a>输出端口处理</h2><p><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/6.png"></p><h2 id="何处排队"><a href="#何处排队" class="headerlink" title="何处排队"></a>何处排队</h2><blockquote><p>输入排队<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/7.png"></p></blockquote><ul><li>HOL Head-Of-Line HOL阻塞 输入链路分组速率达到58%输入队列就无限增大</li></ul><blockquote><p>输出排队<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/8.png"></p></blockquote><ul><li>没有足够的内存存放分组</li><li>可能需要的缓存<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/9.png"></li><li>最新的研究缓存 （N为一条链路的TCP流）<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/10.png"></li></ul><h2 id="分组调度"><a href="#分组调度" class="headerlink" title="分组调度"></a>分组调度</h2><blockquote><p>FIFO<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/11.png"><br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/12.png"></p></blockquote><blockquote><p>Priority queuing<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/13.png"><br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/14.png"></p></blockquote><blockquote><p>循环加权公平<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/15.png"><br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/16.png"></p></blockquote><h1 id="IPV4-IPV6"><a href="#IPV4-IPV6" class="headerlink" title="IPV4 \IPV6"></a>IPV4 \IPV6</h1><h2 id="ipv4-数据报"><a href="#ipv4-数据报" class="headerlink" title="ipv4 数据报"></a>ipv4 数据报</h2><p><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/17.png"></p><ul><li>版本：4bitIP协议版本 ipv4 ipv6</li><li>首部长度:4bit,一般首部不含选项，一般20bytes</li><li>服务类型（TOS）：8bit 区别不同类型的IP数据报，（时延、实时、拥塞通告明确用2bitTOS）</li><li>数据报长度。数据报总长度（首部加数据） 最高65535bytes ，但是很少超过1500bytes（以太网帧的载荷限制)</li><li>标识、标志、片偏移：分片</li><li>TTL：8bit ，TIME-TO-LIVE 保证不会一直循环 到0被丢弃</li><li>上层协议：8bit，到达目的地才会有用，交给哪个运输层协议（6 TCP 17UDP）</li><li>首部校验和：16bit，对首部计算校验（只有首部），每两个字节一个数，反码运算求和。<ul><li>为什么UDP 、TCP 在运输层和网络层都执行了差错检测？</li><li>IP是只对首部，TCP、UDP是对整个报文段。而且TCP、UDP 和IP不一定在一个协议栈上。（IP不一定数据传给TCP、UDP ，TCP、UDP可以运行在别的协议上）</li></ul></li><li>源和目的IP</li><li>选项：扩展首部</li><li>数据：payload</li></ul><blockquote><p>一个数据报总长20bytes首部（无选项），如果承载TCP报文段，每个数据报总长40bytes的首部和应用层报文。</p></blockquote><h2 id="Ipv4-数据报分片"><a href="#Ipv4-数据报分片" class="headerlink" title="Ipv4 数据报分片"></a>Ipv4 数据报分片</h2><blockquote><p>以太网帧MTU1500 有些链路帧MTU 576<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/18.png"></p></blockquote><h2 id="ipv4-编址"><a href="#ipv4-编址" class="headerlink" title="ipv4 编址"></a>ipv4 编址</h2><blockquote><p>一个IP和接口相关<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/19.png"></p></blockquote><blockquote><p>子网划分<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/20.png"></p></blockquote><blockquote><p>如何得到地址</p></blockquote><ol><li>获取一块地址<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/21.png"></li><li>获取主机地址：DHCP</li></ol><ul><li>DHCP代理<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/22.png"></li></ul><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><blockquote><p>DHCP步骤<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/23.png"></p></blockquote><ul><li>需要请求的原因是可能是有多个DHCP提供  选择一个请求</li><li><strong>只有最后两个DHCP步骤是实际必要的</strong></li></ul><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向因特网的管理机构申请。</p><ul><li>10.0.0.0 到 10.255.255.255</li><li>172.16.0.0 到 172.31.255.255</li><li>192.168.0.0 到 192.168.255.255<br>专用的 不能在因特网通信 机构内部通信</li></ul><blockquote><p>NAT-DHCP路由器<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/24.png"></p></blockquote><blockquote><p>NAT 的问题</p></blockquote><ul><li>没法当服务器（P2P)。</li><li>解决方案：NAT穿越等等</li></ul><blockquote><p>检测数据报：防火墙和入侵检测系统 （阻挡恶意分组）</p></blockquote><h2 id="ipv6"><a href="#ipv6" class="headerlink" title="ipv6"></a>ipv6</h2><h3 id="ipv6数据报"><a href="#ipv6数据报" class="headerlink" title="ipv6数据报"></a>ipv6数据报</h3><p><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/25.png"></p><ul><li>版本：4bit</li><li>流量类型：8bit。和ipv4 TOS差不多</li><li>流标签：20bit，标记一条数据报的流，给优先级（VIP）</li><li>payload：16bit。<strong>首部后面的字节数量</strong>，因为ipv6首部定长40bytes</li><li>下一个首部： 上层协议 TCP、UDP</li><li>跳限制：TTL</li><li>源地址和目的地址</li><li>数据</li></ul><blockquote><p>ipv6的改进对ipv4</p></blockquote><ul><li>取消分片：IPv6不允许在中间路由器分片，分片消耗大量资源，路由器收到ipv6数据报太大不能放到链路上，就会丢弃并和发送方回 “分组太大”的ICMP差错报文</li><li>去掉了首部校验和：因为运输层和网络层都执行了校验，IP设计者觉得可以去掉（计算耗时）</li><li>去掉选项。使得IP首部定长40bytes ，而且选项可以再下一个首部体现。</li></ul><h2 id="ipv6-和ipv4的迁移"><a href="#ipv6-和ipv4的迁移" class="headerlink" title="ipv6 和ipv4的迁移"></a>ipv6 和ipv4的迁移</h2><blockquote><p>隧道技术 ：把整个IPv6数据报放入IPv4数据报的数据里面<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/26.png"></p></blockquote><blockquote><p>IPv6的提醒<br>改变网络层协议是及其困难的，应用层容易得多。</p></blockquote><h2 id="通用转发和SDN"><a href="#通用转发和SDN" class="headerlink" title="通用转发和SDN"></a>通用转发和SDN</h2><blockquote><p>通用转发步骤： 匹配+转发</p></blockquote><ul><li>查找IP</li><li>将分组发送到特定输出端口</li></ul><blockquote><p>分组交换机 （不是第三层的路由器 第二层的交换机）<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/27.png"></p></blockquote><blockquote><p>流表：匹配加动作转发表</p></blockquote><ul><li>表项有<ul><li>首部字段集合 ： 比如一些网段</li><li>计数器集合：更新时间</li><li>分组匹配流表项的动作集合：丢弃 给的端口 复制分发等</li></ul></li></ul><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><blockquote><p>三个层次的首部字段<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/28.png"></p></blockquote><h3 id="匹配动作例子"><a href="#匹配动作例子" class="headerlink" title="匹配动作例子"></a>匹配动作例子</h3><blockquote><p>基本网络<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/29.png"></p></blockquote><ul><li><p>简单转发</p><ul><li>h5、h6发往 h3、h4的分组 （使用s3<del>s2 s1</del>s2（不使用s3~s2)<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/30.png"><br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/31.png"><br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/32.png"></li></ul></li><li><p>负载均衡</p><ul><li>h3<del>10.1.*.*的数据报直接通过s1</del>s2 h4<del>10.1.<em>.</em> 经过s2</del>s3~s1转发<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/33.png"></li></ul></li><li><p>充当防火墙</p><ul><li>s2 只希望（在任何接口接受s3相连主机的流量）<br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/34.png"><br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/35.png"><br><img src="/2020/11/19/ji-suan-ji-wang-luo-toptodown-chap04-internet-layer-data/36.png"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part02-Structures-chap06-TaskExcute</title>
      <link href="2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/"/>
      <url>2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/</url>
      
        <content type="html"><![CDATA[<h1 id="在线程执行任务"><a href="#在线程执行任务" class="headerlink" title="在线程执行任务"></a>在线程执行任务</h1><h2 id="串行执行任务"><a href="#串行执行任务" class="headerlink" title="串行执行任务"></a>串行执行任务</h2><p><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/1.png"></p><ul><li>特点<ul><li>简单、理论正确</li><li>每次处理一个请求（新连接需等待请求完成）</li><li>性能差，等待I\O操作的时候CPU空闲</li><li>某些情况能带来简单性 安全性<h2 id="显式创建"><a href="#显式创建" class="headerlink" title="显式创建"></a>显式创建</h2></li></ul></li></ul><p><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/2.png"></p><ul><li>特点<ul><li>结构类似单线程版本 （主线程不断交替 接受 和分发）</li><li>任务处理从主线程分离，可以接受新请求提高响应性</li><li>任务可以并行，同时服务多个请求。</li><li>任务处理代码必须先从安全。多个任务会并发调用这段代码</li><li>无限制创建线程</li></ul></li></ul><h2 id="无限制创建线程的问题"><a href="#无限制创建线程的问题" class="headerlink" title="无限制创建线程的问题"></a>无限制创建线程的问题</h2><ul><li>线程生命周期开销非常高 （线程 创建 销毁）</li><li>资源消耗 （内存开销）你有足够多的线程使CPU忙碌，在创建更多的线程反而降低性能</li><li>稳定性 </li></ul><h1 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h1><p><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/3.png"></p><blockquote><p>基于生产者–消费者模式，提交任务–生产者，执行任务消费者</p></blockquote><h2 id="基于Executor的Web服务器"><a href="#基于Executor的Web服务器" class="headerlink" title="基于Executor的Web服务器"></a>基于Executor的Web服务器</h2><p><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/4.png"></p><ul><li>任务提交和处理解耦，另一种Exector 就可以改变服务器行为。<ul><li>修改行为的Excutor<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/5.png"></li><li>类似单线程的行为的Executor</li></ul></li></ul><h2 id="执行策略"><a href="#执行策略" class="headerlink" title="执行策略"></a>执行策略</h2><ul><li>（What Where When How ) <ul><li>what thread run task</li><li>what Order (FIIO LIFO priority)</li><li>how many concurrent Task</li></ul></li></ul><p>执行原因：<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/6.png"></p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>exectors 静态工厂方法</p><ul><li><p>newFixedThreadPool.固定长度线程池</p></li><li><p>newCachedThreadPoll.可缓存的线程池。线程池的当前规模超过了处理需求会回收，增加会添加新的线程（规模不受限制）</p></li><li><p>newSingleThreaxdExecutor单个工作者来执行任务，这个线程异常结束，会创建另一个替代</p></li><li><p>newScheduledThreadPool 固定长度以延迟或者定时来执行任务</p></li><li><p>newFixedThreadPool和new CachedThreadPool工厂方法返回通用的ThreadPool-Executor实例。</p></li></ul><h2 id="Executor的生命周期"><a href="#Executor的生命周期" class="headerlink" title="Executor的生命周期"></a>Executor的生命周期</h2><blockquote><p>扩展接口 Executor<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/7.png"></p></blockquote><blockquote><p>生命周期管理的例子<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/8.png"><br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/9.png"></p></blockquote><blockquote><p>延迟任务与周期任务</p></blockquote><ul><li><p>Timer 支持基于绝对时间而不是相对时间的调度，任务对系统时钟敏感。jdk5 以上基本不用了，单个线程执行延迟 周期</p><ul><li>Timer不捕获异常，抛出未检查异常会终止定时线程。（线程泄露）<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/10.png"></li></ul></li><li><p>ScheduledThreadExecutor 只支持相对时间的调度，多个线程执行延迟 周期</p><ul><li>可以用DelayQueue  实现了BlockingQueue,为ScheduledThreadExecutor提供调度。 管理一组Delayed 对象，每个对象有一个相应的延时。</li></ul></li></ul><h1 id="找出利用并行性"><a href="#找出利用并行性" class="headerlink" title="找出利用并行性"></a>找出利用并行性</h1><blockquote><p>Executor 执行的任务是Runnable，大多数服务端请求有个明显的任务：单个客户请求。桌面应用和服务器应用，在单个客户请求也有可发行的并行性。</p></blockquote><h2 id="例子：页面渲染器-HTML"><a href="#例子：页面渲染器-HTML" class="headerlink" title="例子：页面渲染器 HTML"></a>例子：页面渲染器 HTML</h2><blockquote><p>简单方法串行处理HTML </p></blockquote><ul><li>从头开始 等图像下载完在继续（Bad)</li><li>先绘制文本，同时为图像留下矩形占位空间，处理完文本在下载图像放到之前的空间。<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/11.png"></li></ul><p>这种方法，图像下载大部分时间在等待IO，这期间CPU基本不动。</p><h2 id="携带结果的任务Callable-Future"><a href="#携带结果的任务Callable-Future" class="headerlink" title="携带结果的任务Callable Future"></a>携带结果的任务Callable Future</h2><blockquote><p>Runnable的局限</p></blockquote><ul><li>虽然run能写入日志或者结果放入共享结构，但它不能返回一个值或抛出受检查的异常</li></ul><blockquote><p>存在延迟的计算更适合的Callable</p></blockquote><ul><li>执行数据库查询、网络上获取资源、计算复杂功能</li><li>认为主入口（call）返回一个值并且可能抛出异常</li><li>Executor包含辅助方法封装其他类型任务为Callable<ul><li>Runnable + java.security.PrivilegedAction</li></ul></li></ul><blockquote><p>Executor执行任务（Runnable  Callable)的生命周期</p></blockquote><ul><li>创建、提交、开始、完成</li><li>提交没开始可以取消，在执行的响应中断可以取消。</li></ul><blockquote><p>Future表示一个任务的生命周期</p></blockquote><ul><li>是否完成、取消  结果、把任务取消等等）</li><li>生命周期只能前进（不像ExecutorService的生命周期）</li><li>get<ul><li>任务完成：会立即返回或者抛出一个Excepiton 无完成，get阻塞到任务完成</li><li>任务抛出异常 封装成ExecutionException 重新抛出，getCause获取被封装的异常</li><li>任务被取消抛出CancellationException<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/12.png"></li></ul></li></ul><blockquote><p>创建Future，描述任务。<br>ExectorService的submit方法将返回Future,将Runnable Callable提交给Executor得到一个Future用来获得任务执行结果。</p></blockquote><blockquote><p>显式指定Runnable\Callable实例化为FutureTask<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/13.png"></p></blockquote><h2 id="例子：Future页面渲染"><a href="#例子：Future页面渲染" class="headerlink" title="例子：Future页面渲染"></a>例子：Future页面渲染</h2><blockquote><p>分解任务 渲染所有文本（CPU密集型） 下载图像（IO密集型）<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/14.png"></p></blockquote><ul><li>缺点<ul><li>没有每下载一幅就展示一幅</li></ul></li></ul><h2 id="异构任务并行化的局限"><a href="#异构任务并行化的局限" class="headerlink" title="异构任务并行化的局限"></a>异构任务并行化的局限</h2><blockquote><p>上面分解了两个不同类型任务，异构任务并行化重大性能提升是困难的（大小不一样， 文本远远快于图像）A是B执行时间的10倍 比串行只加速百分9</p></blockquote><blockquote><p>结论</p></blockquote><ul><li>大量相互独立的同构任务并发，才能带来真正的性能提升</li></ul><h2 id="CompletionService-Executor和BlockingQueue"><a href="#CompletionService-Executor和BlockingQueue" class="headerlink" title="CompletionService Executor和BlockingQueue"></a>CompletionService Executor和BlockingQueue</h2><blockquote><p>之前Executor 想在一组计算任务完成后获得结果方法</p></blockquote><ul><li>可以保留每个任务关联的Future，反复使用get,同时设置timeout为0 ，反复查询（这样比较复杂）</li></ul><blockquote><p>更好的任务完成后获得结果的方法 CompletionService</p></blockquote><ul><li>ExecutorCompletionService 实现<ul><li>计算部分委托Executor,提交某个任务，先包装为QueueingFuture(FutureTask子类)<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/15.png"></li><li>计算完成 调用Future-Task的done方法结果放入BlockingQueue（ take poll在得出结果先阻塞）</li></ul></li></ul><h2 id="例子：CompletionService的页面渲染器"><a href="#例子：CompletionService的页面渲染器" class="headerlink" title="例子：CompletionService的页面渲染器"></a>例子：CompletionService的页面渲染器</h2><blockquote><p>每一幅图片下载独立任务（在线程池执行），串行下载到并行。通过在CompletionService获得结果，使得每张图像下载完成就立刻显示<br> <img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/16.png"></p></blockquote><blockquote><p>多个ExecutorCompletionService 可以共享一个Exector 。</p></blockquote><h2 id="任务的时间限制"><a href="#任务的时间限制" class="headerlink" title="任务的时间限制"></a>任务的时间限制</h2><blockquote><p>例子：Web从外部广告服务器获取广告信息，超过2s就显示默认广告；超过等待时间，只显示已经获得数据<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/17.png"><br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/18.png"></p></blockquote><h2 id="例子：旅行预订门户网站"><a href="#例子：旅行预订门户网站" class="headerlink" title="例子：旅行预订门户网站"></a>例子：旅行预订门户网站</h2><blockquote><p>背景</p></blockquote><ul><li>用户输入旅行日期和其他要求，门户获取显示多条航线、旅店公司报价。获取过程中，会调用Web服务、访问数据库等等其他机制。不能让页面响应时间受限于最慢的响应，应该只显示指定时间收到信息。没有及时响应的服务提供（可以被忽略或者显示提示信息）</li><li>从一个公司获得报价和其他公司无关，可以把报价当做任务提交到线程池，保留n个Future,通过限时get 串行获取每个结果。或者—invokeALL</li><li>invokeAll 多个任务提交到一个ExeutorService 获得结果<br>返回一组Future.返回条件如下<ul><li>所有任务执行完毕</li><li>调用线程中断</li><li>超过时限</li></ul></li></ul><blockquote><p>预订时间请求报价<br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/19.png"><br><img src="/2020/11/16/java-concurrency-in-pratice-part02-structures-chap06-taskexcute/20.png"></p></blockquote><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><pre class="line-numbers language-none"><code class="language-none">Executor框架把任务提交和执行策略解耦，支持多种不同类型执行策略。 粒度更细的并行性 以及任务边界的 在应用中十分重要。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi6-ChannelEstimated</title>
      <link href="2020/11/16/wifi6-channelestimated/"/>
      <url>2020/11/16/wifi6-channelestimated/</url>
      
        <content type="html"><![CDATA[<h1 id="得到精确的包头-校准完频偏了"><a href="#得到精确的包头-校准完频偏了" class="headerlink" title="得到精确的包头 校准完频偏了"></a>得到精确的包头 校准完频偏了</h1><h1 id="对LLTF-OFDM解调"><a href="#对LLTF-OFDM解调" class="headerlink" title="对LLTF OFDM解调"></a>对LLTF OFDM解调</h1><p><img src="/2020/11/16/wifi6-channelestimated/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> wifi6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-ToptoDown-chap03-Tranport-Layer</title>
      <link href="2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/"/>
      <url>2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#overview">overview</a><ul><li><a href="#%E8%BF%90%E8%BE%93%E5%B1%82%E5%92%8C%E7%BD%91%E7%BB%9C%E5%B1%82%E5%85%B3%E7%B3%BB">运输层和网络层关系</a></li><li><a href="#%E8%BF%90%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0">运输层概述</a></li></ul></li><li><a href="#%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E8%A7%A3">多路复用和多路分解</a><ul><li><a href="#%E9%9D%A2%E5%90%91%E9%9D%9E%E8%BF%9E%E6%8E%A5%E7%9A%84-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E8%A7%A3">面向非连接的 多路复用 和多路分解</a></li><li><a href="#%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8-%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E8%A7%A3">面向连接的 多路复用 和多路分解</a></li><li><a href="#%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F">端口扫描</a></li><li><a href="#web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Ctcp">WEB服务器和TCP</a></li></ul></li><li><a href="#udp">UDP</a><ul><li><a href="#udp%E6%8A%A5%E6%96%87%E6%AE%B5">UDP报文段</a></li></ul></li><li><a href="#%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93">可靠数据传输</a><ul><li><a href="#%E6%9E%84%E5%BB%BArdt%E5%8D%8F%E8%AE%AE">构建RDT协议</a><ul><li><a href="#rdt10">RDT1.0</a></li><li><a href="#rdt20-%E6%8E%A5%E5%8F%97%E6%96%B9%E6%A0%A1%E9%AA%8C-%E5%9B%9Eack">RDT2.0 （接受方校验 回ACK）</a></li><li><a href="#rdt21-%E5%8F%8D%E5%BA%94%E4%BA%86%E5%8F%91%E9%80%81%E6%96%B9%E6%AD%A3%E5%8F%91%E9%80%81%E5%88%86%E7%BB%84%E6%8E%A5%E6%94%B6%E6%96%B9%E5%B8%8C%E6%9C%9B%E6%8E%A5%E5%8F%97%E5%88%86%E7%BB%84">RDT2.1 （反应了发送方正发送分组、接收方希望接受分组)</a></li><li><a href="#rdt22-%E6%97%A0nak%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93">RDT2.2 (无NAK的可靠数据传输)</a></li><li><a href="#rdt30">RDT3.0</a></li></ul></li><li><a href="#%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%8F%AF%E9%9D%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">流水线可靠的数据传输协议</a><ul><li><a href="#%E5%9B%9E%E9%80%80n%E6%AD%A5-go-back-n">回退N步 Go-Back-N</a></li><li><a href="#%E9%80%89%E6%8B%A9%E9%87%8D%E4%BC%A0">选择重传</a></li></ul></li></ul></li><li><a href="#%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84tcp">面向连接的TCP</a><ul><li><a href="#tcp%E8%BF%9E%E6%8E%A5">TCP连接</a></li><li><a href="#tcp%E6%8A%A5%E6%96%87%E6%AE%B5">TCP报文段</a><ul><li><a href="#%E5%BA%8F%E5%8F%B7%E5%92%8C%E7%A1%AE%E8%AE%A4%E5%8F%B7">序号和确认号</a></li></ul></li><li><a href="#%E4%BC%B0%E8%AE%A1rtt-rtt%E6%98%AF%E4%BC%9A%E5%8F%98%E5%8C%96%E7%9A%84">估计RTT（ RTT是会变化的）</a></li><li><a href="#%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93-%E9%87%8D%E4%BC%A0%E9%97%AE%E9%A2%98-">可靠数据传输（ 重传问题 ）</a><ul><li><a href="#%E6%8E%A8%E8%8D%90%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8%E7%AE%A1%E7%90%86">推荐的定时器管理</a></li><li><a href="#%E8%B6%85%E6%97%B6%E9%97%B4%E9%9A%94%E5%8A%A0%E5%80%8D">超时间隔加倍</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0-ack%E5%BB%BA%E8%AE%AE-%E5%86%97%E4%BD%99ack%E7%9A%84%E4%BD%9C%E7%94%A8">快速重传 （ACK建议 冗余ACK的作用）</a></li><li><a href="#gbn%E8%BF%98%E6%98%AFsr">GBN还是SR</a></li></ul></li><li><a href="#%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">流量控制</a></li><li><a href="#tcp%E8%BF%9E%E6%8E%A5%E6%8B%86%E9%99%A4">TCP连接、拆除</a></li></ul></li><li><a href="#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86">拥塞控制原理</a><ul><li><a href="#%E6%8B%A5%E5%A1%9E%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E4%BB%A3%E4%BB%B7">拥塞的原因和代价</a></li><li><a href="#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95">拥塞控制方法</a></li></ul></li><li><a href="#tcp%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">TCP拥塞控制</a><ul><li><a href="#tcp%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95">TCP拥塞控制算法</a></li><li><a href="#tcp-%E5%85%AC%E5%B9%B3%E6%80%A7">TCP 公平性</a><ul><li><a href="#udp-%E4%B8%8D%E5%85%AC%E5%B9%B3">UDP 不公平</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E8%BE%85%E5%8A%A9%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">网络辅助拥塞控制</a></li></ul></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98useful">习题（useful）</a></li></ul><!-- /TOC --><h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><blockquote><p>运输层协议的作用<br>提供不同主机的应用程序的逻辑通信（好像连接在一起）<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/1.png"></p></blockquote><blockquote><p>从应用层的message 到运输层的报文段（segment)</p></blockquote><h2 id="运输层和网络层关系"><a href="#运输层和网络层关系" class="headerlink" title="运输层和网络层关系"></a>运输层和网络层关系</h2><blockquote><p>为主机提供逻辑通信的区别</p></blockquote><ul><li>运输层提供的是主机不同<strong>进程</strong>的逻辑通信</li><li>网络层就是主机之间的逻辑通信</li></ul><h2 id="运输层概述"><a href="#运输层概述" class="headerlink" title="运输层概述"></a>运输层概述</h2><blockquote><p>为了不混淆</p></blockquote><ul><li>TCP分组和UDP分组统称报文段</li><li>数据报名称留给网络层分组</li></ul><blockquote><p>IP服务模型是尽力而为交付服务 。</p></blockquote><ul><li>但是不保证</li><li>不可靠服务</li></ul><blockquote><p>UDP TCP的服务模型</p></blockquote><ul><li>两个端系统间IP的交付服务扩展为端系统上两个进程之间的交付服务</li><li> 这种扩展也叫运输层的多路复用和多路分解</li></ul><h1 id="多路复用和多路分解"><a href="#多路复用和多路分解" class="headerlink" title="多路复用和多路分解"></a>多路复用和多路分解</h1><blockquote><p>报文段的共性 </p></blockquote><ul><li>套接字有唯一标识</li><li>特殊字段指示交付的套接字<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/2.png"></li></ul><h2 id="面向非连接的-多路复用-和多路分解"><a href="#面向非连接的-多路复用-和多路分解" class="headerlink" title="面向非连接的 多路复用 和多路分解"></a>面向非连接的 多路复用 和多路分解</h2><blockquote><p>UDP套接字 二元组全面标识（包含目的IP 目的端口）</p></blockquote><blockquote><p>UDP报文段 只有端口号</p></blockquote><blockquote><p>UDP客户-服务端例字</p></blockquote><ul><li>创建套接字<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/6.png">自动分配端口</li><li>或者bind关联特定端口</li><li>假设主机A一个进程具有UDP端口19157，发送一个应用程序数据块给主机B另一进程，改进程具有端口UDP46428。<ul><li>主机A的运输层创建运输层报文段，包括（应用程序数据、源port19157、目的port46428、其他两个值（不重要目前）</li><li>运输层将得到的报文段传递到网络层，网络层封装报文段到IP数据报，来尽力而为交付报文段到接受主机</li><li>到了主机B ，主机B的运输层检测报文段的目的端口46428，将报文段交付给端口号46428的套接字。</li><li>源端口是为了B回发报文段<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/3.png"></li></ul></li></ul><h2 id="面向连接的-多路复用-和多路分解"><a href="#面向连接的-多路复用-和多路分解" class="headerlink" title="面向连接的 多路复用 和多路分解"></a>面向连接的 多路复用 和多路分解</h2><blockquote><p>套接字 四元组 （多了 源IP 源端口）</p></blockquote><p>TCP客户-服务端例子</p><ul><li>TCPServer 在12000端口等待连接</li><li>TCP 客户创建一个套接字发送一个连接建立请求报文<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/4.png"></li><li>一条连接建立请求不过是一个目的端口12000，TCP首部特定的连接建立位 TCP报文段</li><li>计算机主机操作系统收到具有目的端口12000的入连接请求报文段，它定位到服务端进程（在12000端口等待接收连接），然后服务器进程创建一个新的套接字<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/5.png"></li><li>服务器运输层还注意到请求报文段的4元组，后续到达的报文段 4元组就被分解到套接字。</li></ul><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><blockquote><p>nmap </p></blockquote><h2 id="WEB服务器和TCP"><a href="#WEB服务器和TCP" class="headerlink" title="WEB服务器和TCP"></a>WEB服务器和TCP</h2><blockquote><p>Web服务器主机，在端口80运行Apache服务器。客户端发送报文段，目的端口都80。每条连接都生成一个新进程，</p></blockquote><blockquote><p>现在，高性能Web服务器都是通常只使用一个进程，但是为每个新连接套接字创建新的线程<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/7.png"></p></blockquote><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><blockquote><p>UDP 定义</p></blockquote><ul><li>除了复用/分解功能和少量的差错检测，对IP几乎没有增加别的东西</li></ul><blockquote><p>例子: DNS<br>DNS查询报文</p></blockquote><blockquote><p>许多应用UDP更适应的原因</p></blockquote><ul><li>关于发送什么数据和何时发送的应用层控制更为精细。实时应用，容忍一些数据丢失。（谷歌浏览器的QUIC协议 快速UDPINTENET连接）将UDP作为支撑的运输协议在UDP之上的应用层实现可靠性</li><li>无须连接建立。DNS 运行UDP的主要原因。</li><li>无连接状态。（接受发送缓存、拥塞控制参数、序号确认号参数）</li><li>分组首部开销小。 TCP首部20Bytes UDP8Bytes</li></ul><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/8.png"></p><ul><li>但是现在多媒体使用UDP也有争议，无控制的UDP，可能使路由器大量分组溢出</li></ul><h2 id="UDP报文段"><a href="#UDP报文段" class="headerlink" title="UDP报文段"></a>UDP报文段</h2><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/9.png"></p><ul><li>UDP首部4个字段 每个字段2byte <ul><li>端口号：用于分解（交付到对应进程）</li><li>长度字段：报文段总字节数（首部加数据）</li><li>检验和：差错检测，确定当UDP报文段从源到目的地移动，其中bit是否改变。简单的校验和<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/10.png"><br>把结果的反码作为校验和，四个相加应该为16个1</li></ul></li></ul><blockquote><p>UDP检验和的目的</p></blockquote><ul><li>许多链路层协议（以太网协议等）提供了差错检测。但是不能保证源和目的之间所有的链路都提供差错检测。</li><li>端到端原则：因为某种功能（此时是差错检测）必须基于端到端实现：“与在较高级别提供这些功能的代价相比，较低级别设置的功能可能是冗余的或几乎没有价值的 </li></ul><blockquote><p>UDP只丢弃受损的报文段</p></blockquote><h1 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a>可靠数据传输</h1><blockquote><p>TCP在不可靠的（IP）短刀端网络层之上实现的可靠数据传输协议（reliable data transfer protocol)<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/11.png"></p></blockquote><blockquote><p>从单向讨论</p></blockquote><h2 id="构建RDT协议"><a href="#构建RDT协议" class="headerlink" title="构建RDT协议"></a>构建RDT协议</h2><h3 id="RDT1-0"><a href="#RDT1-0" class="headerlink" title="RDT1.0"></a>RDT1.0</h3><ul><li>可靠信道<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/12.png"></li></ul><h3 id="RDT2-0-（接受方校验-回ACK）"><a href="#RDT2-0-（接受方校验-回ACK）" class="headerlink" title="RDT2.0 （接受方校验 回ACK）"></a>RDT2.0 （接受方校验 回ACK）</h3><ul><li>不可靠信道<br>电话口述，包括了肯定确认（“OK”）、否定确认（“请重复一遍”）ARQ(自动重传请求)</li></ul><p>ARQ 协议还需要的另三种协议功能来处理bit差错</p><ul><li>差错检测。</li><li>接收方反馈。 ACK 和NAK</li><li>重传。 接收方收到有差错的分组，发送方将重传该分组。</li></ul><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/13.png"></p><ul><li>注意到发送方处于等待ACK或者NAK状态，他不能向上层获得更多数据。 这种协议叫<strong>停等协议</strong></li></ul><blockquote><p>发送方步骤</p></blockquote><ol><li>等待上层调用，发送数据、和校验和组成的分组</li><li> 等待到ACK就继续等待上层调用，否则重发</li></ol><blockquote><p>接收方</p></blockquote><ol><li>等待接受，校验不对就发NAK（无校验）</li><li>对就提取数据，然后发ACK（无校验）</li></ol><blockquote><p>RDT2.0的缺陷。</p></blockquote><ul><li>没有考虑ACK或者NAK分组受损的情况。如果ACK NAK分组受损受损，发送方无法知道接收方是否正确接收上一块的发送的数据。</li><li>处理受损ACK和NAK三种情况<ol><li>发送方 再问 “你说什么” （新型分组） ，接收方就在发一份。但是新型分组差错呢，这样就很难行的通了</li><li>增加足够的检验和bit，是发送方不仅可以检测差错，还能恢复 （可以直接解决）</li><li>当发送方收到含糊不清的ACK或者NAK分组，只需重传当前数据分组即可。这方法在信道中加入了<strong>冗余分组</strong>（duplicate packet）。困难在与接收方不知道它上次发送的ACK或NAK是否被发送方正确接收。</li></ol></li></ul><h3 id="RDT2-1-（反应了发送方正发送分组、接收方希望接受分组"><a href="#RDT2-1-（反应了发送方正发送分组、接收方希望接受分组" class="headerlink" title="RDT2.1 （反应了发送方正发送分组、接收方希望接受分组)"></a>RDT2.1 （反应了发送方正发送分组、接收方希望接受分组)</h3><ul><li>解决新问题的方法（所有数据传输协议都采用了），数据分组添加新字段，发送方对数据分组编号。即将发送数据分组的序号放入。接收方只需检查序号，即可确定收到的分组是否异常重传。<ul><li>对于停等的简单情况，1bit序号来确认是否重传前一个发送分组即可。<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/14.png"></li></ul></li><li>发送机步骤<ol><li>上层调用发分组0，用数据和正发送的序号、校验和组成分组，发送</li><li>分组是否有效 NAK就重发</li><li>都正确就等待发送分组1</li></ol></li><li>接受 步骤<ul><li>在RDT2.0上添加了检验和在发送分组</li></ul></li></ul><h3 id="RDT2-2-无NAK的可靠数据传输"><a href="#RDT2-2-无NAK的可靠数据传输" class="headerlink" title="RDT2.2 (无NAK的可靠数据传输)"></a>RDT2.2 (无NAK的可靠数据传输)</h3><blockquote><p>发送机接受机，添加了序号的确认。<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/15.png"></p></blockquote><h3 id="RDT3-0"><a href="#RDT3-0" class="headerlink" title="RDT3.0"></a>RDT3.0</h3><p>除了bit受损，底层信道还会丢包（正常），需要增加新的机制。</p><blockquote><p>发送方来负责检测和恢复丢包。</p></blockquote><ul><li>需要等待多久才能确定已经丢失了某些东西。<ul><li>至少等待：发送方与接受方直接的一个往返时延（可能包括中间路由器的缓冲时延）接收方处理一个分组所需的时间。</li><li>聪明的额方法明智的选择一个时间值，判定可能发生了丢包。（ 需要倒计时定时器）</li><li>这就是冗余数据分组的可能性。（RDT2.2 通过序号可以处理）</li></ul></li></ul><blockquote><p>发射端步骤<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/16.png"></p></blockquote><blockquote><p>bit交替协议 （多种情况分析，还有其他情况）<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/17.png"></p></blockquote><h2 id="流水线可靠的数据传输协议"><a href="#流水线可靠的数据传输协议" class="headerlink" title="流水线可靠的数据传输协议"></a>流水线可靠的数据传输协议</h2><blockquote><p>停等协议的问题：利用率低<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/18.png"></p></blockquote><blockquote><p>流水线的影响<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/19.png"></p></blockquote><ul><li>必须增加序号范围。</li><li>发送和接受需要缓存多个分组。发送方最低限度应当能缓冲那些已发送但是没确认的分组。接收方需要缓存那些已正确接收分组。</li><li>如何处理丢失、损伤、延时过大的分组（也决定了序号范围和堆缓冲的要求）。基本方法 Go-Back-N 回退N步，选择重传（Selective Repert，SR)</li></ul><h3 id="回退N步-Go-Back-N"><a href="#回退N步-Go-Back-N" class="headerlink" title="回退N步 Go-Back-N"></a>回退N步 Go-Back-N</h3><blockquote><p>以下 显示了发送方看到的GBN序号范围，四段<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/20.png"></p></blockquote><ul><li>基序号base：最早未确认分组</li><li>nextseqnum：最小未使用序号</li><li>用窗口长度N滑动，也叫滑动窗口协议（Sliding-window protocol）<ul><li>限制窗口长度的原因（流量控制是原因之一）</li></ul></li><li>分组序号在分组首部固定长度的字段。bit是k（范围[0,2^k-1]</li></ul><blockquote><p>GBN框图<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/21.png"></p></blockquote><ul><li>GBN发送方需要响应的事件<ul><li>上层的调用。rdt_send() 发送方检查发送窗口是否已满，即是否N个已发送未确认分组。<ul><li>未满，产生一个新的分组并发送。</li><li>已满，隐式的提醒上层，上层可能之后再试。实际实现，发送方更可能缓存这些数据，或者使用同步机制（信号量或者标志）允许上层只在窗口不满时调用rdt——send()</li></ul></li><li>收到ACK。序号n的分组采用累积确认，确认到n以前包括n所有分组</li><li>超时事件。发送方重传所有已发送但未被确认的分组。</li></ul></li></ul><ul><li>GBN接受方需要响应的事件<ul><li>接收方确认一个序号n分组正确接收，并且按序（上次交付上层的数据时序号n-1分组）后为分组n发送一个ack</li><li>其他所有情况接收方丢弃分组并未最近按序接收的分组重新发送ACK</li><li>注意一次交付给上层一个分组（所以 k接收交付 比k小的肯定也交付了</li></ul></li></ul><blockquote><p>接收方丢弃所有失序分组的原因：需要按序交付</p></blockquote><ul><li>改进办法：假设期望收到n，分组n+1到了。数据必须按序交付，接收方可能缓存分组n+1,等待收到分组n，再将该分组交付上层。分组n丢失，分组n和分组n+1 会根据GBN重传规则和重传。接收方只需丢弃分组n+1。</li></ul><blockquote><p>窗口长度4个分组的GBN<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/22.png"></p></blockquote><ul><li>步骤<ul><li>发送0~3 分组，等待一个或者多个确认</li><li>收到 每个ACK （ACK 0 或者ACK 1），窗口就可以发送分组4 分组 5 了</li><li>分组2丢失，分组3、4、5 被发现是失序分组并丢弃</li></ul></li></ul><h3 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h3><p>GBN协议填充了流水线，但是单个分组差错会引起GBN的重传大量分组。</p><blockquote><p>SR 通过让发送方仅仅重传它怀疑在接收方出错的分组而避免不必要的重传。示意图如下<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/23.png"></p></blockquote><ul><li><p>SR接收方确认一个正确接收的分组，不管是否按序。失序的分组将缓存直到所有丢失分组（序号更小的分组）都被收到为止。在将一批分组按序交付。</p></li><li><p>SR发送方的事件 动作</p><ol><li>从上层收到数据。检测下一个可用与改分组的序号。序号在窗口内，打包数据发送。否则和GBN一样要么，数据缓存，要不返回上层后续传输</li><li>超时。每个分组需要独立的逻辑定时器</li><li>收到ACK，分组序号在窗口内，标记确认分组已接收。该分组序号等于send_base,窗口移动到具有最小序号的非确认处。</li></ol></li><li><p>SR接收方 事件动作</p><ol><li>序号在[rev_base,rev_base+N-1]的分组被正确接收。在窗口内，一个选择ACK回送，没收到过就缓存下来。等于基序号（rev_base)就把该分组和之前缓存的按序交付给上层</li><li>序号在[rev_base-N,rev_base-1] 内的分组被正确接收。<strong>也必须产生一个ACK</strong>即使是接收方以前已确认的分组，这是必要的，如果send_base的ACK没有从接收方传播回来，发送窗口永远不会移动。</li><li>其他情况，忽略分组</li></ol></li></ul><blockquote><p>有限序号范围缺乏同步的严重后果。4个分组序号0、1、2、3有限序号范围且窗口长度3<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/24.png"><br>接收方正确确认0、1、2，窗口落在4、5、6分分组上，序号分别是3、0、1。</p></blockquote><ul><li> 第一种情况：前三个分组ACK丢失，发送方重传，因此，接收方下一步要接受序号0的分组。</li><li> 第二种情况：前三个分组ACK都正确交付，序号3分组丢失,分组0到达（包含一个新数据的分组）</li></ul><blockquote><p>结论：窗口比序号小时无法工作（无法区分是第一个分组的重传还是第五个分组的初次传输），后续证明 窗口长度必须小于序号空间大小的一半</p></blockquote><h1 id="面向连接的TCP"><a href="#面向连接的TCP" class="headerlink" title="面向连接的TCP"></a>面向连接的TCP</h1><h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><ul><li>三次握手建立 连接</li><li>数据放到send buffer （三次握手期间设置的）</li><li>从缓存中取出放入报文的数据数量受限于 Maaximun Segment Size MSS最大报文段长度。由本地发送主机最大链路帧长度（Maximum Transmission Unit,MTU)设置 以太网和PPP链路层协议都具有1500byte的MTU，MSS通常1460byte（首部40byte）<ul><li>MSS是报文段里应用层数据的最大长度，而不是包括首部TCP报文段的最大长度</li></ul></li><li>TCP连接包括：主机缓存、变量进程连接的套接字<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/25.png"></li></ul><h2 id="TCP报文段"><a href="#TCP报文段" class="headerlink" title="TCP报文段"></a>TCP报文段</h2><blockquote><p>TCP发送大文件通常划分成长度MSS的若干块</p></blockquote><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/26.png"></p><ul><li>首部字段详解<ul><li>与UDP报文一样的端口</li><li>32bit的序号，和确认序号</li><li>4bit首部字段（通常选项字段为空所以，TCP首部典型长度20字节</li><li>8bit的标志字段。ACK确认字段的值有效。RST、SYN、FIN用于连接建立和拆除。CWR、ECE用于明确拥塞通告。<br>PSH，指示接收方立即上交数据给上层。URG 指示报文段里面存在被发送端上层置为“紧急”的数据。由16bit的紧急数据指针字段指出。<strong>（实践中，PSH、URG和紧急数据指针并不使用）</strong></li><li>16bit的接受窗口（流量控制，愿意接受的字节数量）</li><li>可选与变长的选项字段（协商MSS 或者窗口调节因子）</li></ul></li></ul><h3 id="序号和确认号"><a href="#序号和确认号" class="headerlink" title="序号和确认号"></a>序号和确认号</h3><blockquote><p>序号是该报文段 首字节的字节编号<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/27.png"></p></blockquote><blockquote><p>累积确认： TCP只确认该流中至第一个丢失字节为止。<br>已收到0<del>535 以及900</del>1000 还没收到536~899 会确认536.</p></blockquote><blockquote><p>收到失序报文段的解决方法</p></blockquote><ul><li>编程人员处理<ul><li>立即丢弃</li><li>保留失序字节等待缺少字节填充（实践做法）</li></ul></li></ul><blockquote><p>Telnet例子（现在更多SSH Telnet无加密）<br>输了了一个C<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/28.png"></p></blockquote><ul><li>TCP连接建立后没有发送任何数据之前 该用户等待79 服务器等待42</li><li>第三个报文段，唯一目的是确认已从服务器收到数据。虽然无数据，还是要填序号 （有这个字段）</li></ul><h2 id="估计RTT（-RTT是会变化的）"><a href="#估计RTT（-RTT是会变化的）" class="headerlink" title="估计RTT（ RTT是会变化的）"></a>估计RTT（ RTT是会变化的）</h2><ul><li><p>估计RTT方法</p><ul><li>样本RTT 从报文段发出到对该报文段确认的时间量，大多数TCP实现只在某个时刻做一次（一般只为了一个估计SamleRTT)</li><li>EstimatedRTT是一个SampleRTT均值，获得新的SampleRTT就按下面更新<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/29.png"> 协议里面的推荐值<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/30.png"><br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/31.png"></li><li>RTT偏差DevRTT偏离SampleRTT一般偏离EstimatedRTT的程度 β推荐值0.25<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/32.png"></li></ul></li><li><p>设置和管理重传时间间隔，推荐初始TimeoutInterval=1s<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/33.png"></p></li></ul><h2 id="可靠数据传输（-重传问题-）"><a href="#可靠数据传输（-重传问题-）" class="headerlink" title="可靠数据传输（ 重传问题 ）"></a>可靠数据传输（ 重传问题 ）</h2><h3 id="推荐的定时器管理"><a href="#推荐的定时器管理" class="headerlink" title="推荐的定时器管理"></a>推荐的定时器管理</h3><blockquote><p>推荐只使用单一的重传定时器<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/34.png"></p></blockquote><blockquote><p>确丢失才会重传 （已收到120的ACK<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/35.png"></p></blockquote><h3 id="超时间隔加倍"><a href="#超时间隔加倍" class="headerlink" title="超时间隔加倍"></a>超时间隔加倍</h3><blockquote><p>大多数实现的修改 （而不是用EstimatedRTT和DevRTT推算）</p></blockquote><h3 id="快速重传-（ACK建议-冗余ACK的作用）"><a href="#快速重传-（ACK建议-冗余ACK的作用）" class="headerlink" title="快速重传 （ACK建议 冗余ACK的作用）"></a>快速重传 （ACK建议 冗余ACK的作用）</h3><blockquote><p>TCP ACK建议<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/36.png"></p></blockquote><blockquote><p>快速重传的条件<br>TCP发送方发现对相同数据3个冗余ACK，说明这个报文段之后以及丢失（20年的经验）<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/37.png"></p></blockquote><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/38.png"></p><h3 id="GBN还是SR"><a href="#GBN还是SR" class="headerlink" title="GBN还是SR"></a>GBN还是SR</h3><blockquote><p>TCP 差错最好分类成GBN和SR的混合体</p></blockquote><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><blockquote><p>流量控制原因 </p></blockquote><ul><li>发送方发送太快溢出了接受缓存</li></ul><p><font size="4,font" color="red"><strong>本节假设接收方丢弃失序报文</strong></font></p><blockquote><p>流量控制的方法</p></blockquote><ul><li>通过发送方维护接收窗口变量来提供流量控制<ul><li>给发送方指示接收方还有多少可用的缓存空间<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/39.png"><br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/40.png"></li></ul></li></ul><h2 id="TCP连接、拆除"><a href="#TCP连接、拆除" class="headerlink" title="TCP连接、拆除"></a>TCP连接、拆除</h2><blockquote><p>TCP连接建立步骤</p></blockquote><ol><li>客户端TCP首先给服务端TCP发送一个特殊的TCP报文段。（不含应用层数据）。首部SYNbit置1，也叫SYN报文段。还会随机选择一个初始序号(client_isn)，放入SYN报文段序号字段中。（避免安全性攻击）</li><li>一旦 TCP SYN报文段 的IP数据报到达了，服务器从数据报提取出TCP SYN报文段。并为TCP连接分配TCP缓存和变量，并向该客户TCP发送允许连接的报文段（这也是TCP易于收到SYN洪泛的拒绝服务攻击的原因）。这个允许连接的报文段也无应用层数据。在首部包含3个信息：一、SYNbit 1 二、确认号字段client_isn+1 三、选择自己的初始序号server_isn（复杂函数生成） 放入序号字段 。这个字段也叫<strong>SYNACK报文段</strong> </li><li>在收到SYNACK报文段，客户也要给该连接分配缓存和变量。客户给服务器的允许连接报文段进行确认。（server_isn+1)然后SYN bit=0 （连接建立了）  （第三次报文段负载可以携带客户到服务器的数据了。<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/41.png"></li></ol><blockquote><p>TCP客户（或服务器）拆除连接</p></blockquote><ol><li>应用程序发出FINbit 特殊报文段</li><li>服务器发送回ACK</li><li>然后服务器发送回自己的FINbit 终止报文段</li><li>客户对终止报文段确认<br>之后两台主机上用于连接的资源都被释放了<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/42.png"></li></ol><blockquote><p>TCP客户状态的例子<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/43.png"></p></blockquote><blockquote><p>TCP服务状态的例子<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/45.png"></p></blockquote><blockquote><p>应对 SYN洪泛攻击（不发送第三步握手）的防御 SYNcookie</p></blockquote><ul><li>服务器收到SYN报文段，它不知道该报文段是合法还是SYN洪泛攻击。它不会为该报文段生成一个半开连接。相反，生成一个初始TCP序号，该序号是SYN报文段的source IP Port、aim IP Port 服务器知道的秘密数的散列函数来生成的初始序号 “cookie” <font size="4,font" color="red"> 重要是，服务器并不记忆该cookie或者任何对应SYN的其他状态信息</font></li><li>合法的会回ACK，任何服务器通过计算得到cookie+1看看是不是对的</li><li>不合法的也没分配资源</li></ul><blockquote><p>不准备连接的TCP主机（nmap端口扫描原理）<br>比如主机端口80 不接受连接（无监听） 会向源发送RST bit 1 特殊重置报文段。（告诉目标不要在发送该报文段） UDP会受到特殊的ICMP数据报</p></blockquote><h1 id="拥塞控制原理"><a href="#拥塞控制原理" class="headerlink" title="拥塞控制原理"></a>拥塞控制原理</h1><h2 id="拥塞的原因和代价"><a href="#拥塞的原因和代价" class="headerlink" title="拥塞的原因和代价"></a>拥塞的原因和代价</h2><ol><li>简单情况：直接连接一个无限大缓存（分组到达速率超过容量就缓存）路由<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/46.png"><br> 吞吐量（接收方每s接收的字节数）<br> <img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/47.png"><br> 分组到达速率越接近链路容量，分组经历巨大的排队时延</li><li>略复杂情况：直接连接一个有限缓存（分组到达速率超过容量就缓存）路由<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/48.png"><br> a:主机A可以确定路由缓存是否空闲<br> b: 发送方确定分组丢失在重传<br> c: 提前超时重传队列中被推迟还没丢失的分组<br> <img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/49.png"></li><li>复杂情况 多发送方 有限缓存 多台路由<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/50.png"><br> 供给载荷趋近无穷大 R2的缓存会被B-D连接占满，从而A-C吞吐量趋于0<br> <img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/51.png"><h2 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h2></li></ol><blockquote><p>根据网络层是否为运输层提供线索帮助，区分控制方法</p></blockquote><ul><li>端到端控制。网络层无辅助。TCP三次丢失，会减小拥塞窗口长度。</li><li>网络辅助的拥塞控制。路由器提供了显示反馈信息。<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/52.png"></li></ul><h1 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h1><ul><li>端到端的扩展</li></ul><blockquote><p>三个问题</p></blockquote><ol><li>TCP发送方如何简直它向连接发送流量的速率？<ul><li>TCP连接每一端都是由 接受缓存、发送缓存、几个变量（LastByteRead\rwnd等组成） 添加额外变量 拥塞窗口（congrestion window)cwnd,对TCP发送方向网络发送流量速率进行限制。<font size="4,font" color="red"> 特别是，一个发送方未被确认的数据量仅仅受限于cwnd</font></li><li>为了关注拥塞控制（与流量控制对比）加上TCP接受缓存足够大狐狸接受窗口的现在。发送方未被确认的数据量仅受限于cwnd</li><li>发送方的速率被调整为cwnd/RTT 字节/s</li></ul></li><li>TCP 发送方如何感知与目的地之间的路径出现拥塞<ul><li>丢包事件 要么出现超时 要么收到接收方三个冗余ACK</li></ul></li><li>调节发送速率的算法（指导性准则）<ul><li>一个丢失的报文段意味着拥塞，降低</li><li>一个确认的报文段意味交付，增加</li><li>带宽探测</li></ul></li></ol><h2 id="TCP拥塞控制算法"><a href="#TCP拥塞控制算法" class="headerlink" title="TCP拥塞控制算法"></a>TCP拥塞控制算法</h2><blockquote><p>步骤如下</p></blockquote><ol><li>慢启动</li></ol><ul><li>开始MSS很小 假设MSS=500字节 RTT=200ms 发送速率MSS/RTT =20kb/s </li><li>确认了就逐步翻倍增加 cwnd以1个MSS开始</li><li>结束慢启动方式（3种情况）<ol><li>直到超时指示的丢包将cwnd=1重新开始慢启动，第二个状态设为ssthresh （慢启动阈值）设为cwnd/2</li><li>直接和ssthresh 关联，到达ssthresh设为cwnd的一半时，到达时结束慢启动，到拥塞避免模式</li><li>三个冗余ACK 快速重传快速恢复</li></ol></li></ul><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/53.png"></p><ol start="2"><li>拥塞避免</li></ol><ul><li>一旦进入拥塞避免,cwnd的值大约是上次拥塞的值一半。TCP每过一个RTT只将cwnd增加一个MSS。例子：MSS=1460 cwnd=14600字节 则一个RTT发送10个报文段。</li><li>出现超时就结束拥塞避免的快速增长。 cwnd=1个MSS ssthresh=cwnd拥塞值的一半。</li><li>出现冗余ACK事件。对这种丢包，反应弱一点，将cwnd降为一半 ssthresh值为cwnd值的一半，进入快速恢复</li></ul><ol start="3"><li>快速恢复</li></ol><ul><li>是推荐而非必须 （早起版本无）</li></ul><blockquote><p>慢启动、拥塞避免、快速恢复示意图 Reno新版本<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/54.png"></p></blockquote><ol start="4"><li><p>总结TCP拥塞<br>加性增、乘性减 AIMD拥塞控制<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/55.png"></p></li><li><p>TCP稳态吞吐量<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/56.png"></p></li><li><p>TCP高带宽路径吞吐量<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/57.png"><br>10Gbps 需要2*10^-10的报文丢失概率</p></li></ol><h2 id="TCP-公平性"><a href="#TCP-公平性" class="headerlink" title="TCP 公平性"></a>TCP 公平性</h2><p>目标在交叉点附近 公平<br><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/58.png"></p><h3 id="UDP-不公平"><a href="#UDP-不公平" class="headerlink" title="UDP 不公平"></a>UDP 不公平</h3><p>可能压制TCO的流量</p><h3 id="网络辅助拥塞控制"><a href="#网络辅助拥塞控制" class="headerlink" title="网络辅助拥塞控制"></a>网络辅助拥塞控制</h3><p>来控制</p><h1 id="习题（useful）"><a href="#习题（useful）" class="headerlink" title="习题（useful）"></a>习题（useful）</h1><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/59.png"></p><pre class="line-numbers language-none"><code class="language-none">R7、是的，两个段将指向同一个套接字。对于每个接收到的段，在套接字接口上，操作系统将为进程提供IP地址，以确定各个段的来源。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/11/13/ji-suan-ji-wang-luo-toptodown-chap03-tranport-layer/60.png"></p><pre class="line-numbers language-none"><code class="language-none">R8、对于每个持久连接，Web服务器创建一个单独的“连接套接字”。每个连接套接字被标识为具有四个元组:（源IP地址、源端口号、目标IP地址、目标端口号）。当主机C接收和IP数据报，它检查数据报/段中的这四个字段确定哪个套接字应该通过TCP段的有效负载。因此，来自A和B的请求通过不同的套接字。这两个参数的标识符用于目标端口的套接字具有80；但是，这些套接字的标识符源IP地址的不同值。与UDP不同，传输层通过时TCP段对应用程序进程的有效负载，它不指定源IP地址，因为这是由套接字标识符隐式指定的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">rwnd 就是TCP首部的接受窗口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>【问题1】为什么连接的时候是三次握手，关闭的时候却是四次握手？</li></ul><pre class="line-numbers language-none"><code class="language-none">答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，"你发的FIN报文我收到了"。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">问：三次握手中，为什么客户机最后还要再向服务器发送一次确认呢？答：这是为了防止已失效的连接请求报文段突然又传到了服务器。所谓“已失效的连接请求报文段”是这样产生的。考虑一种正常的情况，客户机发出连接请求，但因为连接请求报文丢失而未收到确认。于是客户机再重传了一次连接请求，后来收到了确认，建立了连接。数据传输完后，就释放了连接。客户机共发送了两个连接请求报文段，其中第一个丢失，第二个到达了服务器，没有所谓的“已失效的连接请求报文段”。　　但是如果出现了一种异常情况，即客户机发出的第一个报文段并没有丢失，而是在某个节点上长时间滞留了，直至客户机向服务器发送了第二个报文段并且已经完成数据传输释放了连接，此时，第一个报文到达服务器后会被误以为是客户机重新发起的一次连接请求，实质上是一个早已失效的连接请求。如果没有第三次握手，那么这个连接就建立了，但是客户机并不会向服务器发送任何请求，这样连接就会一直持续，白白的消耗网络资源。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>【问题2】为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？</li></ul><pre class="line-numbers language-none"><code class="language-none">答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。在Client发送出最后的ACK回复，但该ACK可能丢失。Server如果没有收到ACK，将不断重复发送FIN片段。所以Client不能立即关闭，它必须确认Server接收到了该ACK。Client会在发送出ACK之后进入到TIME_WAIT状态。Client会设置一个计时器，等待2MSL的时间。如果在该时间内再次收到FIN，那么Client会重发ACK并再次等待2MSL。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指一个片段在网络中最大的存活时间，2MSL就是一个发送和一个回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>【问题3】为什么不能用两次握手进行连接？<pre class="line-numbers language-none"><code class="language-none">答：3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。       现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发 送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>【问题4】如果已经建立了连接，但是客户端突然出现故障了怎么办？<pre class="line-numbers language-none"><code class="language-none">TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>【问题5】如果已经建立了连接，但是客户端突然出现故障了怎么办？<pre class="line-numbers language-none"><code class="language-none">这个不难TCP自己做了保证，TCP默认有个定时器，每次收到客户端的请求后会把定时器设置好，通常设置两小时，超过两小时还没收到数据。服务端会发送一个探测报文，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part01-Base-chap05-BaseModule</title>
      <link href="2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/"/>
      <url>2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/</url>
      
        <content type="html"><![CDATA[<p>委托是创建线程安全类最有效的策略，让现有的线程安全类管理所有状态</p><h1 id="同步容器类"><a href="#同步容器类" class="headerlink" title="同步容器类"></a>同步容器类</h1><p>Vector Hashtable ，他们的线程安全通过状态封装起来，并对每个公有方法同步，每次只有一个线程能访问</p><h2 id="同步容器类的问题"><a href="#同步容器类的问题" class="headerlink" title="同步容器类的问题"></a>同步容器类的问题</h2><blockquote><p>某些复合操作需要客户端额外的加锁，迭代遍历，跳转、条件运算。</p></blockquote><blockquote><p>虽然没有加锁，复合操作任然线程安全，但是多线程并发修改的时候可能出现意料之外的行为</p></blockquote><p><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/1.png"><br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/2.png"></p><blockquote><p>例子问题 size的变化<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/3.png"></p></blockquote><blockquote><p>解决办法<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/4.png"></p></blockquote><blockquote><p>例子2问题 size可能的变化<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/5.png"></p></blockquote><blockquote><p>解决办法<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/6.png"></p></blockquote><h2 id="迭代器与ConcurrentModificationException"><a href="#迭代器与ConcurrentModificationException" class="headerlink" title="迭代器与ConcurrentModificationException"></a>迭代器与ConcurrentModificationException</h2><ul><li>发现迭代过程被修改抛出的（通过修改次数计数器实现）。但是也可能有失效的计数值</li></ul><blockquote><p>迭代例子<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/7.png"></p></blockquote><blockquote><p>解决方法的权衡</p></blockquote><ul><li>向之前那样加锁，在dosomething时持有锁，可能导致死锁（dosomthing也需要 list的锁）。</li><li>就算没有死锁问题，持有锁时间过长导致很多线程竞争锁，吞吐量和CPU利用率。</li><li>“克隆”容器迭代，确定有显著的性能开销</li></ul><h2 id="隐藏的迭代器操作"><a href="#隐藏的迭代器操作" class="headerlink" title="隐藏的迭代器操作"></a>隐藏的迭代器操作</h2><blockquote><p>编译器把字符串的连接操作，转换为调用StringBuilder.append(Object),然后会调用容器的toString，会迭代器容器</p></blockquote><p><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/8.png"><br>可能抛出ConcurrentModificationException。addTenThing不是线程安全的</p><blockquote><p>容器的hashcode和equals 也会间接执行迭代</p></blockquote><h1 id="并发容器-（并发性重点）"><a href="#并发容器-（并发性重点）" class="headerlink" title="并发容器 （并发性重点）"></a>并发容器 （并发性重点）</h1><blockquote><p>同步容器的缺点</p></blockquote><ul><li>把并发状态访问串行化，吞吐量严重降低</li></ul><blockquote><p>并发容器是目标</p></blockquote><ul><li>针对多个线程并发访问设计的</li></ul><blockquote><p>Java5的并发容器</p></blockquote><ul><li>Concurrent-HashMap，替代同步的Map</li><li>CopyOnWriteArrayList,用于遍历操作为主要操作的情况下代替同步List</li><li>ConcurrentMap接口增加了常见复合操作的支持，if not add ，替换和有条件删除</li></ul><blockquote><p>新的容器类型 </p></blockquote><ul><li><p>Queue  保存一组等待处理的数据，Queue的操作不会阻塞，队列空，返回空值。</p></li><li><p>虽然可以用List模拟Queue行为–也正是通过LinkedList来实现Queue的，还是需要Queue，去掉List的随机访问需求，更高效并发</p><ul><li>ConcurrentLinkedQueue:传统的先入先出队列</li><li>PriorityQueue,非并发的优先队列。</li></ul></li><li><p>BlockingQueue</p><ul><li>扩展了Queue 增加了可阻塞的插入和获取，</li><li>队列空，获取元素的操作阻塞，知道出现第一个可用的元素；</li><li>队列已满，插入一直阻塞知道队列有可用空间 （生产者-消费者设计模式 需求）</li></ul></li></ul><blockquote><p>java6 并发容器</p></blockquote><ul><li>ConcurrentSkipListMap替代同步的SortedMap（用synchronizedMap包装的TreeMap)</li><li>ConcurrentSkipListSet替代同步的SortedMap（用synchronizedMap包装的TreeSet)</li></ul><h2 id="Concurrent-HashMap"><a href="#Concurrent-HashMap" class="headerlink" title="Concurrent-HashMap"></a>Concurrent-HashMap</h2><blockquote><p>粒度更细的加锁机制：分段锁</p></blockquote><ul><li>任意读取线程并发访问Map</li><li>执行读操作线程和写入操作线程并发访问MAP，一定数量的写入线程可以并发修改Map</li><li>并发环境更高吞吐量，单线程环境损失很少性能</li><li>弱一致性的迭代器而不是“及时失败”<ul><li>不会ConcurrentModificationException ，所以迭代过程不用加锁</li><li>容忍并发修改，可以（但不保证）修改后操作反映给容器</li><li>size、isEmpty可能过期,但是并发环境用处较小</li><li>换取到其他重要操作的性能优化，get、put、containsKey remove等</li></ul></li></ul><blockquote><p>只有独占访问，才应该放弃ConcurrentHashMap 用Hashtable</p></blockquote><h2 id="额外的原子Map操作"><a href="#额外的原子Map操作" class="headerlink" title="额外的原子Map操作"></a>额外的原子Map操作</h2><blockquote><p>ConcurrentMap接口 添加了一些常见的复合操作 也都实现了原子操作<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/9.png"></p></blockquote><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><blockquote><p>代替同步的List</p></blockquote><ul><li>Copy-on-Write 容器线程安全性，在与只要发布一个事实不可变对象，访问对象就不需要进一步修改。</li><li>每次修改创建重新发布一个新的容器副本</li><li>Copy-on-Write 容器迭代器保留一个指向底层基础数组的引用（不会被修改的，所以多个线程可同时迭代）</li><li>每次修改容器复制底层，所以是迭代远大于修改时用</li></ul><blockquote><p>适用于事件通知系统的特征</p></blockquote><ul><li>分发通知时需要迭代调用每个注册的监听器</li><li>注册和注销事件监听器操作员少于接受事件通知</li></ul><h1 id="阻塞队列-生产者–消费者模式"><a href="#阻塞队列-生产者–消费者模式" class="headerlink" title="阻塞队列 生产者–消费者模式"></a>阻塞队列 生产者–消费者模式</h1><blockquote><p>BlockingQueue的方法</p></blockquote><ul><li>可阻塞的put和take  （无界队列 可无限put）</li><li>定时的offer和poll （offer 数据不能添加返回失败状态，从而用灵活的方式处理）</li></ul><blockquote><p>支持 生产者和消费者设计模式 分离了找出和执行的过程</p></blockquote><ul><li>找出需要完成的工作<ul><li>工作放到待完成列表</li></ul></li><li>执行工作</li><li>因为两个过程的处理速率不同</li></ul><blockquote><p>BlockingQueue的生产者和消费者</p></blockquote><ul><li>数据生成，生产者把数据放入队列（不需知道消费者的特征）</li><li>消费者准备处理数据，从队列中获取（不需知道生产者的特征）</li></ul><blockquote><p>线程池和工作队列的组合（后续）</p></blockquote><blockquote><p>开发者会假设消费者处理工作速率大于生产者，所以不设置边界。</p></blockquote><ul><li>需要设计中构建资源管理</li></ul><blockquote><p>BlockingQueue的实现</p></blockquote><ul><li>LinkedBlockingQueue  FIFO队列  先入先出</li><li>ArrayBlockingQueue FIFO队列 </li><li>PriorityBlockingQueue FIFO用优先级排序 ，而不是FIFO</li><li>SynchronousQueue 不是真正的队列 ，不为元素维护存储空间，而是维护一组线程等待把元素加入移除队列。<ul><li>直接交付</li><li>没有存储功能，put get一直阻塞等待另一个线程准备好参与交付</li><li>消费者足够多 适合同步队列</li></ul></li></ul><h2 id="生产者消费者例子–桌面搜索"><a href="#生产者消费者例子–桌面搜索" class="headerlink" title="生产者消费者例子–桌面搜索"></a>生产者消费者例子–桌面搜索</h2><blockquote><p>代理程序 ，扫描本地驱动器的文件建立索引方便搜索<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/10.png"><br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/11.png"></p></blockquote><ul><li>生产者：找出所有文件 put </li><li>消费者：把队列的文件index</li></ul><blockquote><p>多个爬虫和索引建立程序<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/12.png"></p></blockquote><ul><li>消费者线程永远不退出，程序无法终止（后续解决）</li></ul><h2 id="串行线程封闭"><a href="#串行线程封闭" class="headerlink" title="串行线程封闭"></a>串行线程封闭</h2><p>BlockingQueue 确保了一个线程接受转移的对象</p><h2 id="双端队列BlockingDeque-和工作密取（Working-Stealing"><a href="#双端队列BlockingDeque-和工作密取（Working-Stealing" class="headerlink" title="双端队列BlockingDeque 和工作密取（Working Stealing"></a>双端队列BlockingDeque 和工作密取（Working Stealing</h2><blockquote><p>BlockingDeque的目的 工作密取</p></blockquote><ul><li>每个消费者有各自的双端队列，完成了自己双端队列的全部工作，可以从其他消费者双端队列末尾密码获取工作</li><li>比传统模式更高的可伸缩行，不会在单个共享任务队列竞争，大多时候访问自己的双端队列。（访问另一个队列的队尾，更降低了竞争）</li></ul><blockquote><p>使用范围</p></blockquote><ul><li>既是消费者也是生产者（某个工作执行会出现更多的工作）<ul><li>处理一个页面，有更多的页面处理</li><li>垃圾回收堆标记 Working Stealing 高效并行</li><li>工作线程找到新任务单元，放到自己队列的队尾</li></ul></li></ul><h2 id="阻塞和中断方法"><a href="#阻塞和中断方法" class="headerlink" title="阻塞和中断方法"></a>阻塞和中断方法</h2><blockquote><p>阻塞和暂停执行的原因</p></blockquote><ul><li>等待I/O操作结束</li><li>等待获得一个锁</li><li>等待从Thread.sleep方法醒来</li><li>等待另一个线程的计算结果</li></ul><blockquote><p>阻塞的状态</p></blockquote><ul><li>BLOCKED</li><li>WAITING</li><li>TIMED_WAITING</li></ul><blockquote><p>与很长执行时间的普通操作的区别</p></blockquote><ul><li>需要外部不受它控制的事件发生才能回到RUNNABLE状态，并再次被调度执行</li></ul><blockquote><p>Interrupted-Exception</p></blockquote><ul><li>表示该方法是阻塞方法，如果被中断，它将努力提取结束阻塞状态<ul><li>BlockingQueue 的put 和take会抛出 （Check Excepiton)Interrputed Exception </li><li>Thread.sleep</li></ul></li><li>Thread提供interrput方法，用于中断线程和查询线程是否已经被中断，每个线程有个boolean 中断状态</li></ul><blockquote><p>中断的机制</p></blockquote><ul><li>协作机制：一个线程不能强制其他线程停止正在执行的操作而执行其他操作</li><li>A中断B 代表A要求B执行到某个可以暂停的地方—前提是B原因停止（API无特定级别的语义）</li><li>最常用的中断就是取消某个操作。</li></ul><blockquote><p>处理抛出Interrupted-Exception方法</p></blockquote><ul><li>传递InterruptedException<ul><li>根本不捕获该异常</li><li>捕获该异常，执行简单的清理工作在抛出这个异常</li></ul></li><li>恢复中断<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/13.png"></li></ul><blockquote><p>不应该做的事</p></blockquote><ul><li>捕获它不做任何响应</li></ul><h1 id="同步工具类"><a href="#同步工具类" class="headerlink" title="同步工具类"></a>同步工具类</h1><blockquote><p>定义</p></blockquote><ul><li>根据自身状态协调线程的控制流<ul><li>容器类的 阻塞队列 不仅是保存对象容器，还能协调生产者消费者线程的控制流 </li><li>信号量 Semaphore</li><li>栅栏 Barrier</li><li>闭锁 Latch</li></ul></li></ul><h2 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h2><blockquote><p>定义</p></blockquote><ul><li>延迟线程进度直到其达到终止状态</li><li>相当于一扇门，一直关闭没有任何线程能通过。</li></ul><blockquote><p>作用</p></blockquote><ul><li>确保某个计算需要的资源全部初始化。二元闭锁（两个状态）需要R的都在这个闭锁等待</li><li>确保某个服务的依赖服务开启。在启动S服务时，在S依赖的其他服务闭锁等待</li><li>等待直到某个操作的所有参与者（多玩家游戏）</li></ul><blockquote><p>闭锁实现 </p></blockquote><ul><li>CountDownLatch <ul><li>使一个或多个线程等待一组事件发生</li><li>闭锁状态包括一个计数器，初始化为正数，表示需要等待的数量</li><li>countDown方法递减计数器</li><li>计数值非0 await会一直阻塞直到计数值0，或等待中的线程中断，或者等待超时</li></ul></li></ul><p><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/14.png"><br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/15.png"></p><ul><li>两个门<ul><li>开始门：等所有线程创建完毕，开门 计时</li><li>结束门，等待所有任务做完</li></ul></li><li>为了测试n个线程并发执行某个任务的实际 （启动门使得主线程能够同时释放所有工作线程） （结束门使得主线程等待最后一个线程执行完成，而不是顺序等待）</li></ul><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><blockquote><p>定义</p></blockquote><ul><li>也可用作闭锁</li><li>表示一种抽象可生成结果的计算</li><li>通过Callable实现（可生成结果的Runnable）</li><li>三种状态<ul><li>等待运行</li><li>正在运行</li><li>运行完成 （表示计算的所有可能：正常结束、异常结束）</li></ul></li><li>get 阻塞到任务完成状态返回</li></ul><blockquote><p>例子<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/16.png"></p></blockquote><ul><li><p>Preloader 创建一个futureTask 包含从数据库加载产品信息的任务，执行运算的线程</p></li><li><p>构造函数和静态初始化启动线程不是好方法，（所以另外用了start（））</p></li><li><p>需要ProductInfo 可以用get 等待加载完成</p></li><li><p>Callable代表任务可以抛出受检查的和未受检查的异常，任何代码可能抛出error。无论任务代码抛出什么异常，都被封装到ExecutionException 并在get中重新抛出</p></li><li><p>ExecutionException的三种情况</p><ul><li> Callable抛出的受检查异常</li><li> RuntimeExcepiton</li><li> Error</li></ul></li><li><p>首先Preloader会检查已知的受检查异常，并重新抛出他们</p></li><li><p>然后调用launderThrowable抛出<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/17.png"></p></li></ul><h2 id="信号量Semaphore"><a href="#信号量Semaphore" class="headerlink" title="信号量Semaphore"></a>信号量Semaphore</h2><blockquote><p>定义</p></blockquote><ul><li><p>用来控制同时访问某个特定资源、某个操作的操作数量，资源池，容器边界</p></li><li><p>Semaphore信号量通过虚拟的许可,许可数量可指定</p></li><li><p>acquire 阻塞得到许可</p></li><li><p>release 返回一个许可给信号量</p><blockquote><p>特殊情况<br>二值信号量，互斥体（mutex）</p></blockquote></li></ul><blockquote><p>使用范围</p></blockquote><ul><li>资源地，数据库连接池 （我们希望看的是阻塞而不是失败）<br>（blockQueue也可以）</li><li>将任何一个容器变成有界阻塞容器<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/18.png"></li></ul><h2 id="栅栏-Barrier"><a href="#栅栏-Barrier" class="headerlink" title="栅栏 Barrier"></a>栅栏 Barrier</h2><blockquote><p>定义</p></blockquote><ul><li>栅栏（Barrier类似闭锁），阻塞一组线程直到某事件发生。</li></ul><blockquote><p>与闭锁的区别</p></blockquote><ul><li>所有线程必须同时到达栅栏位置才能继续执行<ul><li>几个家庭的 决定在某个地方集合 6点碰头，到了以后等其他人在讨论下一步</li></ul></li><li>闭锁是一次性对象，进入终止状态不能重置</li><li>闭锁用于等待事件，栅栏用于等待其他线程</li></ul><blockquote><p>用途</p></blockquote><ul><li>使一定数量的参与方 反复在栅栏汇聚（并行迭代十分有用）</li><li>程序可以并行，但是需要等到某步骤的所有计算执行完毕进入下一个步骤。</li></ul><blockquote><p>CyclivBarrier过程</p></blockquote><ul><li>线程到达栅栏位置时调用await,阻塞直到所有线程都到达栅栏</li><li>所有线程到达了栅栏 ，栅栏打开，所有线程释放，栅栏重置下次使用</li><li>如果await调用超时，或者await阻塞的线程中断，栅栏被认为打破，所有阻塞的await调用都终止抛出BrokenBarrierException</li><li>成功通过栅栏，awit将为每个线程返回一个唯一的到达索引号</li><li>利用索引“选举”一个领导线程，在下一次的迭代由领导线程执行一些特殊工作。</li></ul><blockquote><p>例子：细胞自动衍生<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/19.png"><br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/20.png"></p></blockquote><ul><li>构造函数根据CPU数量创建栅栏任务</li><li>栅栏任务等所有board计算完  提交新值</li></ul><blockquote><p>另一种形式的栅栏 Exchanger</p></blockquote><ul><li>在栅栏位置交换数据</li><li>一个读缓冲区，一个写缓存区。用Exchanger回合，将满的缓冲区和空的缓冲区交换。（交换次数最低）</li><li>通过Exchanger 安全发布</li></ul><h1 id="构建高效可伸缩的缓存Cache"><a href="#构建高效可伸缩的缓存Cache" class="headerlink" title="构建高效可伸缩的缓存Cache"></a>构建高效可伸缩的缓存Cache</h1><blockquote><p>缓存好处</p></blockquote><ul><li>所有服务器应用程序都会采用，重用之前的计算结果，能有效降低延迟</li><li>提高吞吐量，消耗更多内存</li></ul><h2 id="从HashMap出发，分析并发性缺陷"><a href="#从HashMap出发，分析并发性缺陷" class="headerlink" title="从HashMap出发，分析并发性缺陷"></a>从HashMap出发，分析并发性缺陷</h2><blockquote><p>第一种 HashMap （并发性差）<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/21.png"></p></blockquote><ul><li>用HashMap作为cache,但是HashMap补上线程安全，需要确保两个线程不会同时访问(但是只要一个线程能够执行compute)<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/22.png"></li></ul><blockquote><p>第二种 ConcurrentHashMap （还可能有重复的计算（两个compute 一样）<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/23.png"></p></blockquote><ul><li>存在问题<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/24.png"></li></ul><blockquote><p>第三种 Future<v>替代<v>，检测某个计算是否开始，没有启动就创建futureTask注册到Map，已启动就等待计算结果<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/25.png"></v></v></p></blockquote><ul><li>仍然可能的问题 （概率很小） conput 的if块 是非原子的<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/26.png"></li></ul><blockquote><p>第四种  利用自带的原子putifabsent<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/27.png"></p></blockquote><ul><li>定期扫描缓存清理</li></ul><blockquote><p>因式分解使用缓存<br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/28.png"></p></blockquote><h1 id="小结法则"><a href="#小结法则" class="headerlink" title="小结法则"></a>小结法则</h1><p><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/29.png"><br><img src="/2020/11/08/java-concurrency-in-pratice-part01-base-chap05-basemodule/30.png"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-ToptoDown-chap02:Application-Layer</title>
      <link href="2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/"/>
      <url>2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86">应用层协议原理</a><ul><li><a href="#%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84">体系结构</a></li><li><a href="#%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1">进程通信</a></li><li><a href="#%E5%8F%AF%E4%BE%9B%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%E7%9A%84%E8%BF%90%E8%BE%93%E6%9C%8D%E5%8A%A1">可供应用程序使用的运输服务</a></li><li><a href="#intenet-%E8%BF%90%E8%BE%93%E6%9C%8D%E5%8A%A1">Intenet 运输服务</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE">应用层协议</a></li><li><a href="#%E6%9C%AC%E4%B9%A6%E6%B6%89%E5%8F%8A%E5%BA%94%E7%94%A8-web-http-stmp-dns-p2p">本书涉及应用 Web HTTP STMP DNS P2P</a></li></ul></li><li><a href="#web-%E5%92%8Chttp">WEB 和HTTP</a><ul><li><a href="#http">HTTP</a></li><li><a href="#%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E5%92%8C%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5">非持续连接和持续连接</a><ul><li><a href="#%E9%9D%9E%E6%8C%81%E7%BB%ADhttp">非持续HTTP</a></li><li><a href="#%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E7%9A%84http">持续连接的HTTP</a></li></ul></li><li><a href="#http%E6%8A%A5%E6%96%87">HTTP报文</a><ul><li><a href="#%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87">请求报文</a></li><li><a href="#%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87">响应报文</a></li></ul></li><li><a href="#client-%E5%92%8Cserver%E7%9A%84%E4%BA%A4%E4%BA%92cookie">Client 和Server的交互：cookie</a></li><li><a href="#web%E7%BC%93%E5%AD%98-proxy-server">Web缓存（ proxy server）</a></li><li><a href="#%E6%9D%A1%E4%BB%B6get">条件GET</a></li></ul></li><li><a href="#internet%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6">Internet电子邮件</a><ul><li><a href="#stmp">STMP</a></li><li><a href="#%E5%AF%B9%E6%AF%94http">对比HTTP</a></li><li><a href="#%E9%82%AE%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE">邮件访问协议</a></li></ul></li><li><a href="#dns">DNS</a><ul><li><a href="#dns%E6%8F%90%E4%BE%9B%E7%9A%84%E6%9C%8D%E5%8A%A1">DNS提供的服务</a></li><li><a href="#dns%E5%B7%A5%E4%BD%9C%E6%9C%BA%E7%90%86">DNS工作机理</a><ul><li><a href="#dns%E7%BC%93%E5%AD%98">DNS缓存</a></li></ul></li><li><a href="#dns-%E8%AE%B0%E5%BD%95%E5%92%8C%E6%8A%A5%E6%96%87">DNS 记录和报文</a><ul><li><a href="#dns%E6%8A%A5%E6%96%87">DNS报文</a></li><li><a href="#dns%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%92%E5%85%A5">DNS数据库插入</a></li></ul></li></ul></li><li><a href="#p2p">P2P</a><ul><li><a href="#bittorrent">BitTorrent</a></li></ul></li><li><a href="#%E8%A7%86%E9%A2%91%E6%B5%81">视频流</a><ul><li><a href="#%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF%E5%B9%B3%E5%9D%87%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9A%84%E5%90%9E%E5%90%90%E9%87%8F">重要的是平均端到端的吞吐量</a></li><li><a href="#http%E5%92%8Cdash">HTTP和DASH</a></li><li><a href="#%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91-content-distribution-network-cdn">内容分发网 Content Distribution Network CDN</a><ul><li><a href="#%E9%9B%86%E7%BE%A4%E9%80%89%E6%8B%A9%E7%AD%96%E7%95%A5">集群选择策略</a></li></ul></li></ul></li><li><a href="#tcp-udp%E7%BC%96%E7%A8%8B">TCP UDP编程</a><ul><li><a href="#udp">UDP</a></li><li><a href="#tcp">TCP</a></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98%E5%AE%9E%E9%AA%8C">习题实验</a></li></ul><!-- /TOC --><h1 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h1><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><ul><li>Client-Server </li><li>P2P : BitTorrent 用户到用户的报文不需要通过中间服务器<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/1.png"></li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>发起C 等待S  Socket</p><h2 id="可供应用程序使用的运输服务"><a href="#可供应用程序使用的运输服务" class="headerlink" title="可供应用程序使用的运输服务"></a>可供应用程序使用的运输服务</h2><blockquote><p>传输层协议保证</p></blockquote><ul><li>可靠数据传输：运输层协议提供 TCP 还有不可靠UDP（多媒体）</li><li>吞吐量： 可用吞吐量就是发送进程能项接受进程交付bit的速率</li><li>定时，发送注入套接字的每个bit到接收方不迟于100ms</li><li>安全性</li></ul><h2 id="Intenet-运输服务"><a href="#Intenet-运输服务" class="headerlink" title="Intenet 运输服务"></a>Intenet 运输服务</h2><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/2.png"></p><ul><li>TCP<ul><li>面向连接 全双工 需要拆除连接</li><li>可靠数据传输</li><li>拥塞控制：不一定为通信进程带来好处，为整个Intenet带来 （限制每个TCP连接公平共享网络）</li></ul></li></ul><blockquote><p>安全问题<br>TCP、UDP都无加密传入Socket的数据，可能被中间链路嗅探发现。<br>解决方法<br>TCP的加强版 （Secure Sockets Layer，SSL） （这种强化是在应用层实现的） （实际上是用SSl的API加密数据在传入TCP套接字、收端也是）</p></blockquote><ul><li><p>UDP</p><ul><li>轻量级 最小服务 无连接</li><li>不可靠</li><li>无拥塞控制 （任意速率往下网络层注入数据，实际吞吐量可能小于）</li></ul></li><li><p>不提供服务</p><ul><li>吞吐量和定时保证（自己设计，但是也不能保证）</li></ul></li></ul><blockquote><p>应用协议<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/3.png"></p></blockquote><blockquote><p>注意的是许多防火墙设置阻挡UDP，所以SIP、Skype UDP通信失败就用TCP备份</p></blockquote><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><blockquote><p>有些应用层协议由RFC文档定义</p></blockquote><ul><li>HTTP RFC2616</li></ul><h2 id="本书涉及应用-Web-HTTP-STMP-DNS-P2P"><a href="#本书涉及应用-Web-HTTP-STMP-DNS-P2P" class="headerlink" title="本书涉及应用 Web HTTP STMP DNS P2P"></a>本书涉及应用 Web HTTP STMP DNS P2P</h2><h1 id="WEB-和HTTP"><a href="#WEB-和HTTP" class="headerlink" title="WEB 和HTTP"></a>WEB 和HTTP</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li><p>两个程序：一个Client 一个Server，通过交换HTTP报文会话</p></li><li><p>Web 术语</p><ul><li>Web page 由Object组成</li><li>Object：html jpeg java小程序 视频片段 且能通过URL寻址</li><li>html：多数Web有html文本；html文本通过URL地址引用页面其他对象</li><li>URL：例如<a href="http://www.someschool.edu/someDepartment/picture.gif">http://www.someSchool.edu/someDepartment/picture.gif</a>  <a href="http://www.someschool.edu主机名/">www.someSchool.edu主机名</a> someDepartment/picture.gif路径名</li><li>Web 浏览器：Firefox等 实现了Http的客户端 </li><li>Web Server:实现了HTTP的服务端（存储所有web对象</li></ul></li><li><p>HTTP</p><ul><li>定义了Webclient 向Webserver请求Web页面的方式、以及Server向client传送Web页面的方式</li><li>使用TCP支持运输 ：Client给Server发送TCP连接，建立连接后，Client给Server发HTTP请求并接受HTTP响应报文。（HTTP不必担心报文丢失、恢复的细节，分层的好处）</li><li>Server给Clinet发送被请求的文件，不存储任何Client状态。比如客户几秒几次请求同个Object，Server会重新发送对象</li><li>无状态协议（stateless protocol）</li></ul></li></ul><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/4.png"></p><h2 id="非持续连接和持续连接"><a href="#非持续连接和持续连接" class="headerlink" title="非持续连接和持续连接"></a>非持续连接和持续连接</h2><blockquote><p>单独TCP还是每次就一个，HTTP都支持，默认使用持续</p></blockquote><h3 id="非持续HTTP"><a href="#非持续HTTP" class="headerlink" title="非持续HTTP"></a>非持续HTTP</h3><ol><li>CLient 在80端口 发送给服务器<a href="http://www.someschool.edu的tcp,server/">www.someSchool.edu的TCP，Server</a> Client 建立连接</li><li>Client给Server HTTP请求报文。报文包含了路径名/someDepartment/home.index </li><li>Server 结束，从Ram或磁盘检索出<a href="http://www.someschool.edu/someDepartment/home.index">www.someSchool.edu/someDepartment/home.index</a> ，在HTTP响应报文封装对象发送给Client</li><li>Server进程通知TCP断开该TCP连接。（但是直到TCP确认客户完整收到响应，它才实际中断）</li><li>Client 收到响应报文，报文指出封装的对象是一个html文件，客户从响应报文提取出该文件，检测该html文件，得到10个jepg图形引用</li><li>对每个引用的jpeg重复1~4</li></ol><blockquote><p>从上述看要，一共产生了11个连接。有些Jepg图形可能使用并行的TCP连接（大部分浏览器默认5~10）。用户可以设置最大并行连接数1，这样10个就会一条条串行建立</p></blockquote><ul><li>往返时间：RoundTrip Time RTT ，请求到收到整个文件的时间<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/5.png"></li></ul><h3 id="持续连接的HTTP"><a href="#持续连接的HTTP" class="headerlink" title="持续连接的HTTP"></a>持续连接的HTTP</h3><blockquote><p>非持续连接的问题</p></blockquote><ul><li>非持续连接给WebServer带来难题 （负担大）</li><li>两倍RTT 交付时延 （创建和请求接受）</li></ul><blockquote><p>上面的11个对象通过一个连接传输,服务器发现连接时间间隔超过配置就关闭连接</p></blockquote><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/6.png"></p><blockquote><p>分析报文</p></blockquote><ul><li>普通的ASCII文本写的，容易读懂</li><li>5行，每行换行回车结束，最后一行在加上换行回车</li><li>请求行（一行或者更多），第一行。3个字段：方法字段、URL字段、HTTP版本字段。方法字段：GET POST HEAD PUT DELETE ，大部分是GET</li><li>后续的行称首部行。<ul><li>Host：<a href="http://www.someschool.edu/">www.someschool.edu</a>(虽然已经在TCP连接了 ，但是这是web代理高速缓存所要求的)。</li><li>Connection：close ，该浏览器告诉Server不使用持续连接。</li><li>User-agent：浏览器类型</li><li>Accept-language:想得到该对象的发育版本（如果有的话，不然就发送默认的版本）</li></ul></li></ul><blockquote><p>通用格式<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/7.png"></p></blockquote><blockquote><p>实体体 entity body</p></blockquote><ul><li>POST方法使用</li><li>提交表单常用，如搜索引擎关键词<ul><li>表单请求也常用GET,在请求的URL包含输入的数据 例如：一个表单使用GET 它有两个字段分别填monkeys 和bananas URL:<a href="http://www.someschool.edu/animalsearch">www.someschool.edu/animalsearch</a>? monkeys&amp;bananas </li></ul></li><li>也可向服务器请求Web页面，取决表单字段输入的内容</li></ul><blockquote><p>HEAD 类似GET：当Server收到HEAD，用一个HTTP报文响应，但是不返回请求对象。（用来调试跟踪）</p></blockquote><blockquote><p>PUT:允许用户上传对象到指定的Server上指定的路径。也可被需要向Server上传对象的应用程序使用</p></blockquote><blockquote><p>DELETE:允许用户和应用程序删除Server上的对象</p></blockquote><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/8.png"></p><blockquote><p>分析报文</p></blockquote><ul><li>初始状态行 status line<ul><li>3个字段 版本字段 状态码 相应的状态信息<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/9.png"></li></ul></li><li>6个首部行<ul><li>Connection：close ，该Server告诉Client发送完报文就关闭TCP连接</li><li>Date ：是发送该响应时报文的时候（不是检索 或者对象的修改的时间）</li><li>Server：提示什么服务器产生的 （类似user-agent）</li><li>Last-Modified：指示对象创建或者最后修改的时间日期（对对象缓存非常重要）</li><li>Content-Length：被发送对象的Bytes</li><li>Content-Type：指出entity body的对象类型</li></ul></li><li>实体体 entity body</li></ul><h2 id="Client-和Server的交互：cookie"><a href="#Client-和Server的交互：cookie" class="headerlink" title="Client 和Server的交互：cookie"></a>Client 和Server的交互：cookie</h2><blockquote><p>起因</p></blockquote><pre class="line-numbers language-none"><code class="language-none">Web 站点无状态，但是Server希望识别用户，或限制用户访问，内容和用户身份联系，所以使用了cookie允许站点对用户跟踪<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>组件构成</p></blockquote><ul><li>HTTP响应报文的一个cookie首部行</li><li>HTTP请求报文的一个cookie首部行</li><li>Client端系统保留一个cookie文件，用户浏览器管理</li><li>Web站点的后端数据库</li></ul><blockquote><p>例子</p></blockquote><pre class="line-numbers language-none"><code class="language-none">假设Susan已经访问过eBay站点，它首次和Amazon。com联系，该Web站点产生一个唯一识别码作为索引在后端数据库产生一个表项。接下来Amazon web Server用一个包含set-cookoe的响应对Susan浏览器响应<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/10.png"></p><pre class="line-numbers language-none"><code class="language-none">浏览器收到报文，看到set-cookie在特定的cookie文件中添加一行，包含服务器主机名和对应的自己的识别码，sunan继续浏览Amazon网站，每请求一个Web Page 发往Amazon服务器的每个HTTP请求报文都包含![](计算机网络-ToptoDown-chap02-Application-Layer/11.png)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>示意图<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/12.png"><br>Amazon使用cookie来提供购物车服务</p></blockquote><h2 id="Web缓存（-proxy-server）"><a href="#Web缓存（-proxy-server）" class="headerlink" title="Web缓存（ proxy server）"></a>Web缓存（ proxy server）</h2><blockquote><p>示意图<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/13.png"></p></blockquote><blockquote><p>请求对象<a href="http://www.someschool.edu/campus.gif">www.someschool.edu/campus.gif</a></p></blockquote><ul><li>浏览器创建一个到Web cache的TCP，向其发送HTTP请求</li><li>Web cache搜索本地 有就返回</li><li>没有就打开一个与该对象初始服务器<a href="http://www.someschool.edu的tcp连接./">www.someschool.edu的TCP连接。</a> Web Cache在与Server的TCP连接上发送该对象的请求。</li><li>Web Cache得到该对象，在本地存储一个副本，并向Client发送该副本</li></ul><blockquote><p>通常由ISP购买安装，大学校园网安装一个多个缓存器，浏览器配置为指向它。</p></blockquote><blockquote><p>好处</p></blockquote><ul><li>客户和初始Server的带宽远低于和Web cache的</li><li>请求的东西在Web cache会很快</li><li>大大减少一个机构接入到Intenet的通信量</li></ul><blockquote><p>原始网络<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/14.png"></p></blockquote><ul><li>流量强度： 假设1s15个请求 每个对象的平均长度1Mb<ul><li>局域网的流量强度<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/15.png"></li></ul>  0.15强度大概最多导致数10ms延时<ul><li>接入链路的流量强度<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/16.png"><br>1强度会让时延很大且无限增长</li></ul></li></ul><blockquote><p>解决方法</p></blockquote><ul><li>加链路速率（贵）</li><li>加Web 缓存器<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/17.png"><br>假设命中率是0.4，流量强度就减小到0.6对应延时几十ms和Internet延时比就微不足道了</li></ul><h2 id="条件GET"><a href="#条件GET" class="headerlink" title="条件GET"></a>条件GET</h2><blockquote><p>缓存问题<br>缓存能减少用户感受响应时间,但是可能存放的对象是旧的</p></blockquote><blockquote><p>解决<br>条件GET HTTP的机制来允许缓存器证实对象是最新的</p></blockquote><blockquote><p>步骤 </p></blockquote><ul><li>刚开始给Web server发送请求报文<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/18.png"></li><li>Web响应<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/19.png"></li><li>缓存器本地缓存对象，以及最后修改日期</li><li>一星期后再收到，缓存器发送<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/20.png"></li><li>Server回复<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/21.png"></li></ul><h1 id="Internet电子邮件"><a href="#Internet电子邮件" class="headerlink" title="Internet电子邮件"></a>Internet电子邮件</h1><ul><li>分为user agent 、mail server、Simple Mail Transfer protocol STMP。</li></ul><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/22.png"></p><p>每台邮件服务器即是Server、又是Client （看是收还是发）</p><h2 id="STMP"><a href="#STMP" class="headerlink" title="STMP"></a>STMP</h2><p>TCP底层 25端口</p><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/23.png"></p><blockquote><p>步骤</p></blockquote><ol><li>Alice 调用邮件代理程序，提供BOB的邮件地址，书写并提示用户代理发送报文</li><li>Alice的用户代理把报文发到了它的邮件服务器 ，报文在报文队列里</li><li>Alice的有机物去的SMTP客户端发现了这个报文，创建到Bob邮件服务器的SMTP服务器的TCP </li><li>初始SMTP握手后，SMTP客户端通过TCP连接发送Alice报文</li><li>Bob邮件服务器上 SMTP服务器接收改报文。Bob的邮件服务器将报文放入Bob邮箱</li><li>Bob在之后可以用用户代理阅读</li></ol><blockquote><p>SMTP一般不使用中间服务器（就算离的特别远）</p></blockquote><blockquote><p>SMTP client SMTP Server 的交换报文<br>Client 主机crepes.fr Server 主机 hamburger.edu<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/24.png"></p></blockquote><blockquote><p>发送的报文 （“do you …… how about……”）用一个只包含句号的行给服务器表示报文结束了</p></blockquote><p>Telnet测试可</p><h2 id="对比HTTP"><a href="#对比HTTP" class="headerlink" title="对比HTTP"></a>对比HTTP</h2><ul><li>方式：HTTP 主要是pull protocol ，STMP像是push protocol</li><li>报文类型 ：SMTP每个报文7bitascii形式（不是就自己编码）HTTP不是</li><li>处理文本和图片：HTTP对象封装，SMTP所有报文对象放在一个报文里</li></ul><h2 id="邮件访问协议"><a href="#邮件访问协议" class="headerlink" title="邮件访问协议"></a>邮件访问协议</h2><p>Bob怎么拉报文下来<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/25.png"></p><ul><li>POP</li><li>IMAP</li><li>Web 电子邮件 HTTP</li></ul><h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="DNS提供的服务"><a href="#DNS提供的服务" class="headerlink" title="DNS提供的服务"></a>DNS提供的服务</h2><p>识别主机的方式，主机名或者IP，人类喜欢主机名，路由器喜欢Ip。</p><p>Domain Name System DNS在UDP上 53号端口</p><blockquote><p>DNS 的主要任务。</p></blockquote><ul><li>分层的DNS server 实现分布式数据库</li><li>主机能够查询分布式数据库的应用层协议</li><li>其他协议（HTTP、SMTP、FTP）需求</li></ul><p>通过主机得到Ip的步骤</p><blockquote><p>步骤</p></blockquote><ul><li>同一台主机运行着DNS应用的Client</li><li>抽取URL的主机名 给DNS client</li><li>DNS Client给DNS Server发个包含主机名的请求</li><li>Client最终收到对应主机名的IP</li></ul><blockquote><p>其他服务</p></blockquote><ul><li>主机别名 host aliasing 。规范主机名（</li><li>邮件服务器别名</li><li>负载分配：繁忙的站点被冗余分布在多台服务器上（不同IP）IP集合和同一个规范主机名联系。（会循环IP集合的次序分配）</li></ul><h2 id="DNS工作机理"><a href="#DNS工作机理" class="headerlink" title="DNS工作机理"></a>DNS工作机理</h2><p>Internet只用一个DNS服务器的设计可能有诸多问题</p><ul><li>单点故障</li><li>通信容量</li><li>远距离的集中式数据库</li><li>维护（太庞大了）</li></ul><blockquote><p>设计<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/26.png"></p></blockquote><blockquote><p>决定<a href="http://www.amazon.com的ip/">www.amazon.com的Ip</a></p></blockquote><ul><li>先和根服务器之一联系</li><li>返回顶级域名com的TLD（Top level domain) 服务器的ip，再联系</li><li>返回amazon.com的权威服务器ip，在联系</li><li>返回主机名ip</li></ul><blockquote><p>DNS服务器层次</p></blockquote><ul><li>根DNS：400多个遍及全球，提供TLD服务器的ip</li><li>顶级域DNS：com org net edu ,uk fr(国家相关的)，提供权威DNS服务器ip</li><li>权威DNS： 可以自己建，可以买别人的记录</li></ul><blockquote><p>本地DNS的作用</p></blockquote><ul><li>ISP的提供的一个主机的DNS IP（通常通过DHCP）</li><li>临近本主机</li><li>交互步骤：假设TLD服务器 知道主机的权威DNS服务器IP<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/27.png"></li><li>交互步骤：TLD服务器一般只知道中间磨合DNS服务器，该服务器依次才能知道知道主机的权威DNS服务器IP （递归查询）<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/28.png"></li></ul><h3 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h3><ul><li>收到回答能映射缓存在本地存储器中，（就不需要权威服务器，也能提供 ）</li><li>一般设置2天</li><li>很容易绕过了根DNS</li></ul><h2 id="DNS-记录和报文"><a href="#DNS-记录和报文" class="headerlink" title="DNS 记录和报文"></a>DNS 记录和报文</h2><blockquote><p>DNS服务器存储资源记录 Resource Record</p></blockquote><ul><li>[name,value,type,TTL]<ul><li>TTL决定记录生存时间</li></ul></li><li>type决定 name和Value<ul><li>type=A name是主机名，value是主机对应ip<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/29.png"></li><li>type=NS，name是个域（foo.com),value是个知道如何获得该域权威DNS的 主机名<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/30.png"></li><li>type=CNAME，value是别名为Name的主机对应的规范主机名。<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/31.png"></li><li>type=MX，value是别名为Name的邮件服务器对应的规范主机名。<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/32.png"></li></ul></li></ul><blockquote><p>权威服务器（包含该主机）和非权威服务器的区别</p></blockquote><ul><li>权威服务器只有一条包含类型A的记录</li><li>非权威服务器<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/33.png"></li></ul><h3 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a>DNS报文</h3><blockquote><p>查询和回答一致<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/34.png"></p></blockquote><ul><li>前12字节的首部<ul><li>标识符 16bit 标识查询</li><li>标志 查询、回答？权威？递归？</li><li>四个后面的数量</li></ul></li><li>问题区域<ul><li>查询的信息</li><li>名字字段</li><li>类型字段 A、MX等</li></ul></li><li>回答<ul><li>包含RR </li><li>可以多个（一个主机多IP）</li></ul></li><li>权威区域<ul><li>其他权威服务器的记录</li></ul></li><li>附加区域<ul><li>有帮助的记录</li><li>比如MX请求回答的规范主机名，附加区域会有规范主机名的A记录</li></ul></li></ul><blockquote><p>nslookup</p></blockquote><h3 id="DNS数据库插入"><a href="#DNS数据库插入" class="headerlink" title="DNS数据库插入"></a>DNS数据库插入</h3><blockquote><p>注册域名 XXXX.com需要向机构提供基本和辅助权威DNS服务器的名字和IP<br>dns1.xxxx.com 212.212.212.1 dns2.xxxx.com 212.212.212.2</p></blockquote><blockquote><p>对应的机构将下面两个记录插入TLD com服务器<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/35.png"></p></blockquote><blockquote><p>DDos攻击通过层次结构能有效瓦解</p></blockquote><h1 id="P2P"><a href="#P2P" class="headerlink" title="P2P"></a>P2P</h1><blockquote><p>其中最流行的文件分发协议 BitTorrent</p></blockquote><blockquote><p>CS结构下列情况随着客户数量变大 时延很大<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/36.png"></p></blockquote><blockquote><p>分发步骤</p></blockquote><ul><li>开始只有服务端有文件，为了使 社区的对等方得到文件，接入链路后至少发送该文件bit一次</li><li>对等方会重新分发</li></ul><h2 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h2><blockquote><p>定义</p></blockquote><ul><li><p>参与特定文件转发的所有对等方集合是一个洪流（torrent），一个洪流里面的对等方彼此下载等长度的文件块（chunk） 一般256KB。</p></li><li><p>追踪器 追踪自己在注册<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/37.png"></p></li><li><p>TCP多个近的</p></li></ul><h1 id="视频流"><a href="#视频流" class="headerlink" title="视频流"></a>视频流</h1><h2 id="重要的是平均端到端的吞吐量"><a href="#重要的是平均端到端的吞吐量" class="headerlink" title="重要的是平均端到端的吞吐量"></a>重要的是平均端到端的吞吐量</h2><h2 id="HTTP和DASH"><a href="#HTTP和DASH" class="headerlink" title="HTTP和DASH"></a>HTTP和DASH</h2><blockquote><p>HTTP获取视频，通过缓存字节数超过预先设定就开始播放</p></blockquote><blockquote><p>根据带宽不同 Dynamic Adaptive Streaming over HTTP DASH出现了。通过HTTP GET一次选择不同的块</p></blockquote><h2 id="内容分发网-Content-Distribution-Network-CDN"><a href="#内容分发网-Content-Distribution-Network-CDN" class="headerlink" title="内容分发网 Content Distribution Network CDN"></a>内容分发网 Content Distribution Network CDN</h2><p>CDN有自己的，也可以租借</p><blockquote><p>CDN 操作步骤<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/38.png"><br>内容提供商NetCinema雇佣了第三方CDN KingCDN分发视频。NetCinema的Web网页上，每个视频URL都包含“video”和独特的标识符。 <a href="http://video.netcinema.com/6Y2414V">http://video.netcinema.com/6Y2414V</a></p></blockquote><ul><li>用户访问<a href="http://video.netcinema.com/6Y2414V">http://video.netcinema.com/6Y2414V</a></li><li>主机给video.netcinema.com发送DNS</li><li>本地DNS将该DNS中继到用于NetCinema的权威服务器，服务器观测到video，将请求移交给KingCDN（注意返回给本地DNS的是KingCDn域的主机名 a1105.kingcdn.com</li><li>本地DNS请求给到了KingCDN的专有DNSa1105.kingcdn.com，最终返回指定的CDN服务器IP</li></ul><h3 id="集群选择策略"><a href="#集群选择策略" class="headerlink" title="集群选择策略"></a>集群选择策略</h3><ul><li>物理最近</li><li>流量实时策略 ：（CDN让集群周期向全世界Local DNS发送探测分组（ping或者DNS）问题是大部分LDNS不会响应</li></ul><h1 id="TCP-UDP编程"><a href="#TCP-UDP编程" class="headerlink" title="TCP UDP编程"></a>TCP UDP编程</h1><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><blockquote><p>UDPClient<br>类型 DATA_GRAM<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/39.png"><br>recvfrom 当分组到达该客户套接字，分组数据被放到modifiedMessage</p></blockquote><blockquote><p>UDPServer<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/40.png"><br>recvfrom 等待分组到来</p></blockquote><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><blockquote><p>TCPClient<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/41.png"></p></blockquote><ul><li>connect 执行三次握手</li><li>modifiedSentence 堆积着字符直到回车符结束</li><li>close 执行四次挥手</li></ul><blockquote><p>TCPServer<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/42.png"></p></blockquote><ul><li>serverSocket是欢迎套接字 创建后我们等待和聆听客户敲门<br>1 定义最大请求连接数</li><li>accept 创建一个新套接字 为特定的客户专用</li><li>close 四次挥手</li></ul><p>UDP 服务端回需要 得到IP和端口<br>TCP 服务端直接扔到Socket里面就行</p><h1 id="习题实验"><a href="#习题实验" class="headerlink" title="习题实验"></a>习题实验</h1><blockquote><p>Telnet 到一台Web服务器发送一行多个请求报文，请求报文包括if-modified-since 强迫响应出现304 Not Modified 状态</p></blockquote><p><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/43.png"></p><blockquote><p>whois数据库<br>对给定的域名输入、IP地址，定位响应的注册服务器、whois服务器和DNS服务器<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/44.png"></p></blockquote><blockquote><p>nslookup 来对本地DNS和上面查到的DNS权威服务器查询<br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/45.png"><br><img src="/2020/11/06/ji-suan-ji-wang-luo-toptodown-chap02-application-layer/46.png"></p></blockquote><blockquote><p>dig 探索DNS服务器等级</p></blockquote><pre class="line-numbers language-none"><code class="language-none">C:\Users\scorpin_xia&gt;dig @A.root-servers.net www.baidu.com; &lt;&lt;&gt;&gt; DiG 9.16.8 &lt;&lt;&gt;&gt; @A.root-servers.net www.baidu.com; (2 servers found);; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 4643;; flags: qr rd; QUERY: 1, ANSWER: 0, AUTHORITY: 13, ADDITIONAL: 27;; WARNING: recursion requested but not available;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 4096; COOKIE: 9c0ee9c7fd79e9d9eed96ca35fa7e043c2a6360b013a7839 (good);; QUESTION SECTION:;www.baidu.com.                 IN      A;; AUTHORITY SECTION:com.                    172800  IN      NS      b.gtld-servers.net.com.                    172800  IN      NS      i.gtld-servers.net.com.                    172800  IN      NS      m.gtld-servers.net.com.                    172800  IN      NS      d.gtld-servers.net.com.                    172800  IN      NS      h.gtld-servers.net.com.                    172800  IN      NS      j.gtld-servers.net.com.                    172800  IN      NS      f.gtld-servers.net.com.                    172800  IN      NS      l.gtld-servers.net.com.                    172800  IN      NS      k.gtld-servers.net.com.                    172800  IN      NS      a.gtld-servers.net.com.                    172800  IN      NS      e.gtld-servers.net.com.                    172800  IN      NS      c.gtld-servers.net.com.                    172800  IN      NS      g.gtld-servers.net.;; ADDITIONAL SECTION:a.gtld-servers.net.     172800  IN      AAAA    2001:503:a83e::2:30b.gtld-servers.net.     172800  IN      AAAA    2001:503:231d::2:30c.gtld-servers.net.     172800  IN      AAAA    2001:503:83eb::30d.gtld-servers.net.     172800  IN      AAAA    2001:500:856e::30e.gtld-servers.net.     172800  IN      AAAA    2001:502:1ca1::30f.gtld-servers.net.     172800  IN      AAAA    2001:503:d414::30g.gtld-servers.net.     172800  IN      AAAA    2001:503:eea3::30h.gtld-servers.net.     172800  IN      AAAA    2001:502:8cc::30i.gtld-servers.net.     172800  IN      AAAA    2001:503:39c1::30j.gtld-servers.net.     172800  IN      AAAA    2001:502:7094::30k.gtld-servers.net.     172800  IN      AAAA    2001:503:d2d::30l.gtld-servers.net.     172800  IN      AAAA    2001:500:d937::30m.gtld-servers.net.     172800  IN      AAAA    2001:501:b1f9::30a.gtld-servers.net.     172800  IN      A       192.5.6.30b.gtld-servers.net.     172800  IN      A       192.33.14.30c.gtld-servers.net.     172800  IN      A       192.26.92.30d.gtld-servers.net.     172800  IN      A       192.31.80.30e.gtld-servers.net.     172800  IN      A       192.12.94.30f.gtld-servers.net.     172800  IN      A       192.35.51.30g.gtld-servers.net.     172800  IN      A       192.42.93.30h.gtld-servers.net.     172800  IN      A       192.54.112.30i.gtld-servers.net.     172800  IN      A       192.43.172.30j.gtld-servers.net.     172800  IN      A       192.48.79.30k.gtld-servers.net.     172800  IN      A       192.52.178.30l.gtld-servers.net.     172800  IN      A       192.41.162.30m.gtld-servers.net.     172800  IN      A       192.55.83.30;; Query time: 45 msec;; SERVER: 2001:503:ba3e::2:30#53(2001:503:ba3e::2:30);; WHEN: Sun Nov 08 20:10:43 中国标准时间 2020;; MSG SIZE  rcvd: 866<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part01-Base-chap04-ObjectCombling</title>
      <link href="2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/"/>
      <url>2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/</url>
      
        <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>我们不希望每次内存访问都要分析，希望将现有的安全组件组合成更大规模的组合模式</p><h1 id="设计线程安全的类"><a href="#设计线程安全的类" class="headerlink" title="设计线程安全的类"></a>设计线程安全的类</h1><p>线程安全程序可以将程序所以状态保存在公有静态域，但是修改时难以确保线程安全性。</p><blockquote><p>使用封装技术在不对整个程序分析就可确保一个类是线程安全的</p></blockquote><p>三个基本元素:</p><ul><li>找出构成对象状态的所有变量；</li><li>确定约束状态变量的不变性条件；</li><li>建立对象状态的并发访问管理策略。</li></ul><blockquote><p>状态：二维点就是（x,y),LinkedList的状态就是包括该链表所有节点对象的状态</p></blockquote><blockquote><p>同步策略<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/1.png"><br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/2.png"></p></blockquote><h2 id="推断状态不变性"><a href="#推断状态不变性" class="headerlink" title="推断状态不变性"></a>推断状态不变性</h2><p>通过状态空间取值范围</p><h2 id="依赖状态的操作"><a href="#依赖状态的操作" class="headerlink" title="依赖状态的操作"></a>依赖状态的操作</h2><blockquote><p>不能移除非空队列的元素,基于状态的操作</p></blockquote><blockquote><p>简单方法通过现有库（Blocking Queue 和信号量Semaphore)完成</p></blockquote><h2 id="状态的所有权"><a href="#状态的所有权" class="headerlink" title="状态的所有权"></a>状态的所有权</h2><blockquote><p>容器类通常表现出“所有权分离”的形式，容器有自己的状态，客户代码有容器各个对象的状态。</p></blockquote><blockquote><p>例子Servlet 框架的ServeltContext为Servlet提高类似于Map形式的对象容器服务。可用getAttribute 和setAttribute得到应用程序对象且不需要同步（线程安全）。但是使用保存在ServletContext中的对象,可能需要同步。</p></blockquote><h1 id="实例封闭"><a href="#实例封闭" class="headerlink" title="实例封闭"></a>实例封闭</h1><blockquote><p>将数据封装在对象内部，数据访问限制在对象的方法，从而更容易确保线程在访问数据时总能持有正确的锁</p></blockquote><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/3.png"></p><blockquote><p>其中要确保访问的Person的是线程安全的，不然需要额外的同步（只guard 了 this）</p></blockquote><blockquote><p>类库中的线程封闭用途，很多是将非线程安全的类转换为线程安全的类。比如ArrayList HashMap ，通过包装器工厂方法 Collections.synchronizedList等，包装器将接口中的每个方法都实现为同步方法，调用请求转发到底层容器对象。</p></blockquote><h2 id="Java监视器模式"><a href="#Java监视器模式" class="headerlink" title="Java监视器模式"></a>Java监视器模式</h2><blockquote><p>监视器模式：对任何一个锁对象，只要自始至终都使用该锁对象都可以用来保护对象的状态 例子：Vector 和Hashtable （比较简单）,下面的例子用私有锁mylock保护状态<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/4.png"></p></blockquote><h2 id="例子：车辆追踪"><a href="#例子：车辆追踪" class="headerlink" title="例子：车辆追踪"></a>例子：车辆追踪</h2><p>模型流程</p><ul><li><p>每辆车由String标识，拥有对应的坐标。</p></li><li><p>模型通过一个视图线程和多个执行更新操作的线程共享。视图线程读取车辆名字位置显示在页面。<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/5.png"></p></li><li><p>执行更新操作线程从GPS设备获取数据<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/6.png"></p></li><li><p>总程序<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/7.png"><br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/8.png"></p></li></ul><blockquote><p>虽然MutablePiont不是线程安全的，但追踪类是。  unmodifiableMap只能防止容器对象被修改不能防止修改可变对象（相当于用引用不能变 改引用对象的值）</p></blockquote><p><strong>这样的实现问题</strong>：车辆容器非常大会极大降低性能（deepCopy是synchronized方法，单独很长实际的复制），每次调用getLocation就要复制信息,可能实际更新了位置确没返回。 优点是得到确定的车辆位置快照。</p><h1 id="线程安全的委托"><a href="#线程安全的委托" class="headerlink" title="线程安全的委托"></a>线程安全的委托</h1><blockquote><p>之前的CountingFactorizer的线程安全性委托给AtomicLong</p></blockquote><h2 id="基于委托的车辆追踪"><a href="#基于委托的车辆追踪" class="headerlink" title="基于委托的车辆追踪"></a>基于委托的车辆追踪</h2><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/9.png"></p><blockquote><p>不可变的值可以被自由的共享发布，location返回不需要复制 (线程安全)<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/10.png"><br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/11.png"></p></blockquote><p>优点是，实时的车辆位置视图。（但可能是不一致的 每个车辆那个点可能没来得及更新）</p><blockquote><p>浅拷贝，因为Map的内容不可变，只需要复制Map结构不用复制内容<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/12.png"></p></blockquote><h2 id="独立的状态变量"><a href="#独立的状态变量" class="headerlink" title="独立的状态变量"></a>独立的状态变量</h2><blockquote><p>上面是委托给单个线程安全的状态变量 ,我们可以委托给多个独立的状态变量</p></blockquote><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/13.png"></p><h2 id="不独立的状态变量"><a href="#不独立的状态变量" class="headerlink" title="不独立的状态变量"></a>不独立的状态变量</h2><blockquote><p>两个状态有约束 第一个小于第二个</p></blockquote><blockquote><p>错误方法<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/14.png"><br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/15.png"></p></blockquote><blockquote><p>不能保证set的原子性，可能会出现（5,4）这种错误的范围</p></blockquote><blockquote><p>这时候委托失效，要通过自己的加锁机制</p></blockquote><h2 id="发布状态可变的车辆追踪"><a href="#发布状态可变的车辆追踪" class="headerlink" title="发布状态可变的车辆追踪"></a>发布状态可变的车辆追踪</h2><blockquote><p>发布底层的可变状态</p></blockquote><ul><li>先修改得到可变线程安全的Point</li></ul><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/16.png"></p><blockquote><p>get 一起返回 不然可能碰到x，y不对应</p></blockquote><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/17.png"></p><blockquote><p>只能改变了Map里面的元素</p></blockquote><h1 id="现有的线程安全类添加功能"><a href="#现有的线程安全类添加功能" class="headerlink" title="现有的线程安全类添加功能"></a>现有的线程安全类添加功能</h1><blockquote><p>首先选择重用Java的基础模块</p></blockquote><blockquote><p>假设需要线程安全的链表，他需要提供原子操作（没有就添加 put if absent）同步List类已经实现大部分功能，</p></blockquote><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/18.png"></p><h2 id="客户端加锁机制"><a href="#客户端加锁机制" class="headerlink" title="客户端加锁机制"></a>客户端加锁机制</h2><blockquote><p>对于由Collections.synchronizedList封装的ArrayList，往原始类添加方法，和对类extends都不行，因为客户代码不知道同步封装器工厂方法返回的List对象的类型。</p></blockquote><p><strong>可以扩展类的功能</strong>，但是下面方法不对<br><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/19.png"></p><blockquote><p>使用的不同的锁，putIfAbsent 相当于List的其他操作不是原子的</p></blockquote><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/20.png"></p><h2 id="组合法"><a href="#组合法" class="headerlink" title="组合法"></a>组合法</h2><blockquote><p>为现有类添加原子操作更好的方法</p></blockquote><blockquote><p>都假设链表对象传给构造函数后，客户代码不会在使用这个对象</p></blockquote><p><img src="/2020/11/06/java-concurrency-in-pratice-part01-base-chap04-objectcombling/21.png"></p><h1 id="同步策略文档化"><a href="#同步策略文档化" class="headerlink" title="同步策略文档化"></a>同步策略文档化</h1><ul><li><p>哪些 volatile 、哪些锁 保护哪些 、哪些变量不可变或者封闭在线程中，哪些操作是原子操作</p></li><li><p>GuardBy</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part01-Base-chap03-ObjectSharing</title>
      <link href="2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/"/>
      <url>2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/</url>
      
        <content type="html"><![CDATA[<h1 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h1><blockquote><p>多个线程读写</p></blockquote><blockquote><p>需要保证多个线程对内存写入同步</p></blockquote><p><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/1.png"><br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/2.png"></p><ul><li><p>问题</p><ul><li>可能无限循环，读线程可能永远看不到ready值</li><li>可能输出0，看到了写入ready 的值确没看到写入number的值 “重排序”现象</li><li>主线程首先写入number 没有同步的情况到写入ready</li></ul></li><li><p>Tips</p><ul><li>没有同步的情况下，编译器，处理器可能堆操作执行顺序进行意想不到的调整</li></ul></li></ul><h2 id="失效数据"><a href="#失效数据" class="headerlink" title="失效数据"></a>失效数据</h2><blockquote><p>调用get 任然可能看到失效值<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/3.png"></p></blockquote><h2 id="非原子的64位操作"><a href="#非原子的64位操作" class="headerlink" title="非原子的64位操作"></a>非原子的64位操作</h2><blockquote><p>最低安全性：线程没同步读取，读取 </p></blockquote><blockquote><p>对非volatile的LONG 和double 变量，JVM允许64bit的读写分为两个32bit的操作。读写在不同线程，可能读到某个值的高32bit和另一个的低32bit</p></blockquote><h2 id="加锁和可见性"><a href="#加锁和可见性" class="headerlink" title="加锁和可见性"></a>加锁和可见性</h2><p><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/4.png"></p><blockquote><p>为什么所以线程同一个锁同步，确保B执行锁保护代码时，可以看到线程A之前在同一个同步代码快的所有操作</p></blockquote><h3 id="加锁的意义"><a href="#加锁的意义" class="headerlink" title="加锁的意义"></a>加锁的意义</h3><blockquote><p>不仅仅局限在互斥，还有内存可见性。所有读操作和写操作得到线程必须在同一个锁上同步</p></blockquote><h2 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h2><blockquote><p>弱同步，确保变量更新通知到其他线程。</p></blockquote><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ul><li>编译器和运行时注意这个变量是共享的，不会和其他内存重排序，不会被缓存在寄存器或者其他处理器不可见的地方。</li><li>读取总会返回最新写入的值</li></ul><h3 id="使用领域"><a href="#使用领域" class="headerlink" title="使用领域"></a>使用领域</h3><ul><li>确保状态的可见性</li><li>确保它们引用变量状态的可见性</li><li>标识 重要程序什么周期事件发生（初始化，关闭）</li></ul><p><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/5.png"></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>不足以确保递增原子性conut++</li><li>加锁可以确保，可见性和原子性，volatile只能确保可见性</li></ul><h3 id="需要满足的条件"><a href="#需要满足的条件" class="headerlink" title="需要满足的条件"></a>需要满足的条件</h3><ul><li>对变量的写入操作不依赖变量当前值，或者确保单个线程更新变量值</li><li>变量不和其他变量一起纳入不变性条件</li><li>访问变量时不需要锁</li></ul><h1 id="发布-publish-和逸出-escape"><a href="#发布-publish-和逸出-escape" class="headerlink" title="发布(publish)和逸出(escape)"></a>发布(publish)和逸出(escape)</h1><ul><li><p>发布(publish): 使对象能够在当前作用域之外代码使用。例子，发布到公有的静态变量<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/6.png"></p></li><li><p>逸出(escape)：某个不该发布的对象被发布<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/7.png"></p><blockquote><p>本应私有的变量被发布了（可以修改）</p></blockquote></li></ul><p><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/8.png"></p><blockquote><p>隐含的发布了ThisEscape实例本身（内部类实例包含对ThisEscape实例的隐含引用</p></blockquote><h2 id="安全的对象构造"><a href="#安全的对象构造" class="headerlink" title="安全的对象构造"></a>安全的对象构造</h2><blockquote><p>this引用不能在构造过程escape </p></blockquote><blockquote><p>常见错误：在构造函数注册一个事件监听、或者启动线程</p></blockquote><blockquote><p>解决例子，用私有构造加上工厂方法（factory Method）：只在构造函数返回的时候从线程escape this引用<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/9.png"></p></blockquote><h1 id="线程封闭-（Thread-confinement）"><a href="#线程封闭-（Thread-confinement）" class="headerlink" title="线程封闭 （Thread confinement）"></a>线程封闭 （Thread confinement）</h1><blockquote><p>不共享数据，在单线程内访问数据</p></blockquote><blockquote><p>JDBC(Java Database Connectivity) 的Connection对象</p></blockquote><blockquote><p>Java语言无法强制将对象封闭到某个线程，只有一些机制</p></blockquote><h2 id="ad-hoc线程封闭"><a href="#ad-hoc线程封闭" class="headerlink" title="ad-hoc线程封闭"></a>ad-hoc线程封闭</h2><blockquote><p>完全由程序实现，比较难</p></blockquote><blockquote><p>例子：单个线程对共享的volatile写入，相当于把修改操作封闭在单个线程上</p></blockquote><p><strong>不推荐使用</strong> </p><h2 id="栈封闭"><a href="#栈封闭" class="headerlink" title="栈封闭"></a>栈封闭</h2><blockquote><p>只能通过局部变量才能访问对象</p></blockquote><p><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/10.png"></p><ul><li>基本类型的局部变量，无论如何都不会破坏栈封闭</li><li>实例化一个TreeSet对象，对象引用保存到animals,被封闭在局部变量里面</li></ul><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p>最规范的方法:这个类使线程中某个值与保存值的对象关联。为每个使用该变量的线程存有独立的副本。get总是返回当前执行线程set的最新值</p></blockquote><p><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/11.png"></p><blockquote><p>通过将JDBC连接保存到ThreadLocal对象，每个线程有自己的连接</p></blockquote><blockquote><p>某个频繁执行的操作需要临时对象（缓冲区），又希望避免每次执行重新分配改临时变量</p></blockquote><blockquote><p>概念上ThreadLocal<t> 看成包含了Map&lt;Thread,T&gt;对象</t></p></blockquote><h1 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h1><p>不可变对象一定线程安全</p><blockquote><p>满足条件</p></blockquote><ul><li>对象创建后，状态不可变</li><li>对象的所有域是final类型</li><li>对象正确创建 （this引用无escape)<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/12.png"></li></ul><blockquote><p>不可变的对象和不可变的对象引用有差别</p></blockquote><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>C++ const的受限版本</p><ul><li>除非需要 所有域 都应该私有</li><li>除非需要变化  final</li></ul><h2 id="Volatile发布不可变对象"><a href="#Volatile发布不可变对象" class="headerlink" title="Volatile发布不可变对象"></a>Volatile发布不可变对象</h2><blockquote><p>对相关数据原子操作时，可考虑用不可变类包含这些数据<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/14.png"></p></blockquote><blockquote><p>使用指向不可变容器对象的Volatile类型缓存最新的结果<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/15.png"></p></blockquote><h1 id="安全发布"><a href="#安全发布" class="headerlink" title="安全发布"></a>安全发布</h1><p><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/16.png"></p><h2 id="不正确的发布"><a href="#不正确的发布" class="headerlink" title="不正确的发布"></a>不正确的发布</h2><blockquote><p>可能看到尚未创建完成的对象<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/17.png"></p></blockquote><blockquote><p>其他线程看到的Holder 对象可能是失效值。 某线程第一次读取域读到失效值，第二次读取域得到更新值 就throw Assertion</p></blockquote><h2 id="不可变对象和初始化安全性"><a href="#不可变对象和初始化安全性" class="headerlink" title="不可变对象和初始化安全性"></a>不可变对象和初始化安全性</h2><p>final 发布不可变对象保证初始化安全性</p><ul><li>如果final 类型域指向可变对象，访问这些域指向对象的状态还是需要同步</li></ul><h2 id="安全发布常用"><a href="#安全发布常用" class="headerlink" title="安全发布常用"></a>安全发布常用</h2><p>为了安全地发布对象，对对象的引用和对象的状态必须同时对其他线程可见。正确构造的对象可以通过以下任意方式安全发布</p><ul><li>从静态初始化器初始化对象引用；</li><li>将对对象的引用保存到a volatile field or AtomicReference 中；</li><li>将对对象的引用保存到正确构造的对象的final类型域中；</li><li>将对对象的引用存储到由锁适当保护的域中。</li></ul><blockquote><p>线程安全容器，是通过最后一个条件</p></blockquote><ul><li>将键或值放入a Hashtable, synchronizedMap, o r Concurrent-Map中，安全地将其发布到从映射中检索它的任何线程(无论是直接还是通过迭代器)；</li><li>将元素放在Vector, CopyOnWriteArrayList,CopyOnWrite-<br>ArraySet, synchronizedList, or synchronizedSet，安全地将其发布到从集合中检索它的任何线程；</li><li>将元素放在a BlockingQueue or a ConcurrentLinkedQueue上，可以安全地将其发布给从队列中检索它的任何线程。</li><li>类库中的其他切换机制(如Future和Exchanger)也构成安全发布；</li></ul><blockquote><p>使用静态初始化器通常是发布可以静态构造的对象最简单最安全的方法:公共静态Holder Holder = new Holder(42)；</p></blockquote><blockquote><p>静态初始化器由JVM在类初始化时执行；由于JVM中的内部同步，这种机制可以保证安全地发布以这种方式初始化的任何对象。</p></blockquote><h2 id="事实不可变对象"><a href="#事实不可变对象" class="headerlink" title="事实不可变对象"></a>事实不可变对象</h2><blockquote><p>对象技术可变，但是状态发布后不会改变<br>Effectively Immutable Obeject</p></blockquote><blockquote><p>比如Date 本身可变，可以当做不可变对象使用<br><img src="/2020/11/04/java-concurrency-in-pratice-part01-base-chap03-objectsharing/18.png"></p></blockquote><blockquote><p>如果Date对象值放入Map之后不会改变，synchronizedMap的同步机制就够让Date值安全发布</p></blockquote><h2 id="安全地共享对象（策略）"><a href="#安全地共享对象（策略）" class="headerlink" title="安全地共享对象（策略）"></a>安全地共享对象（策略）</h2><p>每当你获得一个对象的引用时，你应该知道你可以用它做什么。使用前需要获取锁吗？是允许修改它的状态，还是只允许读？许多并发性错误源于未能理解共享对象的这些“参与规则”。发布对象时，应该记录如何访问该对象。</p><blockquote><p>在并发程序中使用和共享对象最有用的策略是:</p></blockquote><ul><li>线程封闭。一个线程限制的对象被一个线程独占和限制，并且可以被它自己的线程修改。</li><li>共享只读。共享只读对象可以由多个线程并发访问，无需额外的同步，但不能由任何线程修改。共享只读对象包括不可变的和事实不可变的对象。</li><li>线程安全共享。线程安全对象在内部执行同步，因此多个线程可以通过其公共接口自由访问它，而无需进一步同步。</li><li>保护对象。只有持有特定的锁，才能访问受保护的对象。受保护对象包括封装在其他线程安全对象中的对象，以及已知由特定锁保护的已发布对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part01-Base-chap02-ThreadSafe</title>
      <link href="2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/"/>
      <url>2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#defination">Defination</a><ul><li><a href="#%E5%85%B1%E4%BA%AB%E5%92%8C%E5%8F%AF%E5%8F%98">共享和可变</a></li><li><a href="#java%E4%B8%BB%E8%A6%81%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6">java主要同步机制</a></li><li><a href="#%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84servlet">无状态的Servlet</a></li></ul></li><li><a href="#%E5%8E%9F%E5%AD%90%E6%80%A7">原子性</a><ul><li><a href="#race-condition--%E7%AB%9E%E6%80%81%E6%9D%A1%E4%BB%B6">Race Condition  （竞态条件）</a></li></ul></li><li><a href="#%E5%8A%A0%E9%94%81%E6%9C%BA%E5%88%B6">加锁机制</a><ul><li><a href="#%E5%86%85%E7%BD%AE%E9%94%81">内置锁</a></li><li><a href="#%E9%87%8D%E5%85%A5">重入</a></li><li><a href="#%E7%94%A8%E9%94%81%E4%BF%9D%E6%8A%A4%E7%8A%B6%E6%80%81">用锁保护状态</a><ul><li><a href="#%E5%B8%B8%E8%A7%81%E5%8A%A0%E9%94%81%E7%BA%A6%E5%AE%9A">常见加锁约定</a></li></ul></li></ul></li><li><a href="#%E6%B4%BB%E8%B7%83%E6%80%A7%E5%92%8C%E6%80%A7%E8%83%BD">活跃性和性能</a></li></ul><!-- /TOC --><h1 id="Defination"><a href="#Defination" class="headerlink" title="Defination"></a>Defination</h1><blockquote><p>如果一个类在从多个线程访问时行为正确，则该类是线程安全的，而不管运行时环境对这些线程的执行进行了什么调度或交错，并且调用代码部分没有额外的同步或其他协调。</p></blockquote><h2 id="共享和可变"><a href="#共享和可变" class="headerlink" title="共享和可变"></a>共享和可变</h2><ul><li>共享：多个线程同时访问</li><li>可变： 变量值生命周期可变</li></ul><h2 id="java主要同步机制"><a href="#java主要同步机制" class="headerlink" title="java主要同步机制"></a>java主要同步机制</h2><ul><li>synchronized：独占</li><li>volatile：类型变量</li><li>Explicit Lock：显示锁</li><li>atomic：原子变量</li></ul><blockquote><p>多个线程访问一个可变状态变量无同步，解决方法</p></blockquote><ul><li>不要在线程间共享状态变量；</li><li>使状态变量不可变；</li><li>在访问状态变量时使用同步。</li></ul><h2 id="无状态的Servlet"><a href="#无状态的Servlet" class="headerlink" title="无状态的Servlet"></a>无状态的Servlet</h2><blockquote><p>无状态： 不包含任何域，也不包含任何对其他类中域的引用。计算的临时状态仅存在线程栈的局部变量，只能由对应线程访问。  下图代表因式分解<br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/1.png"></p></blockquote><blockquote><p>PS:大部分Serlet都是无状态的</p></blockquote><h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><blockquote><p>在原来无状态对象增加一个状态， “ Hit Counter “ 统计处理的请求数量</p></blockquote><blockquote><p>非原子的<br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/2.png"></p></blockquote><blockquote><p>不恰当的执行时序导致不正确的结果，Race Condition</p></blockquote><h2 id="Race-Condition-（竞态条件）"><a href="#Race-Condition-（竞态条件）" class="headerlink" title="Race Condition  （竞态条件）"></a>Race Condition  （竞态条件）</h2><p>正确结果取决于运气</p><blockquote><p>另一个例子：延迟初始化，先检查后执行<br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/3.png"></p></blockquote><blockquote><p>让复合操作变成原子的，可以使用加锁，或者现有的线程安全类<br>如下</p></blockquote><p><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/4.png"></p><blockquote><p>java.util.concurrent.atomic 原子变量类，实现数值和对象引用的原子状态转换</p></blockquote><blockquote><p>实践中，尽量使用现有的线程安全对象</p></blockquote><h1 id="加锁机制"><a href="#加锁机制" class="headerlink" title="加锁机制"></a>加锁机制</h1><blockquote><p>想要更多的状态变量,比如两个相同数值连续请求的因式分解，</p></blockquote><p><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/4.png"></p><blockquote><p>加线程安全对象，但是只能保证读取的时候该变量没改，但是不能保证这两个变量是对应的。</p></blockquote><blockquote><p>当不变性条件涉及多个变量时，更新一个变量时，需要在同一个原子操作对其他变量同时更新</p></blockquote><h2 id="内置锁"><a href="#内置锁" class="headerlink" title="内置锁"></a>内置锁</h2><blockquote><p>java内置机制支持原子性,同步代码块（synchronized Block) </p></blockquote><ul><li>锁的对象引用</li><li>锁保护的代码块</li></ul><blockquote><p>每个Java对象可以用一个实现同步的锁，，进入同步代码块自动获得锁，退出自动释放锁</p></blockquote><blockquote><p>最多一个线程持有这个锁。A参数获得B持有的锁,A必须等待或者阻塞，B永远不释放，A永远等待</p></blockquote><blockquote><p>不建议的方法：服务响应太低，一个在查询的时候其他无法查询<br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/5.png"><br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/6.png"></p></blockquote><h2 id="重入"><a href="#重入" class="headerlink" title="重入"></a>重入</h2><blockquote><p>当某个线程请求一个由其他线程持有的锁，该线程会阻塞。内置锁可重入，自己可以获得自己持有的锁。</p></blockquote><blockquote><p>获取锁操作的粒度是“线程”，而不是调用</p></blockquote><blockquote><p>比如为锁关联计数值和所有者线程。</p></blockquote><blockquote><p>如果不可重入 每个dosomething 方法前会获取Widget的锁,会在super那里卡死<br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/7.png"></p></blockquote><h2 id="用锁保护状态"><a href="#用锁保护状态" class="headerlink" title="用锁保护状态"></a>用锁保护状态</h2><blockquote><p>不是只有写入共享才需同步</p></blockquote><blockquote><p>用锁协调某个变量访问，访问变量的所有位置上都有使用同一个锁</p></blockquote><blockquote><p>对象内置锁和状态 没有必然联系 （还和作用域 比如static  )</p></blockquote><h3 id="常见加锁约定"><a href="#常见加锁约定" class="headerlink" title="常见加锁约定"></a>常见加锁约定</h3><blockquote><p>可变状态封装在对象内部，通过对象内置锁保护</p></blockquote><h1 id="活跃性和性能"><a href="#活跃性和性能" class="headerlink" title="活跃性和性能"></a>活跃性和性能</h1><blockquote><p>之前通过缓存机制提升性能，但是整个service方法同步背离了性能提升，Serlver 需要同时处理多个请求</p></blockquote><p><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/8.png"></p><p>解决方法：</p><blockquote><p><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap02-threadsafe/9.png"></p></blockquote><ul><li>注意点<ul><li>不使用Atomic的类型命中计数器，因为两种同步机制可能会带来混乱</li><li>保证的是LastNumber和LastFactors的对应</li><li>简单性（整个方法同步）和并发（对尽量少的代码同步）的平衡</li><li>执行较长运算的时候不要持有锁</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-concurrency-in-pratice-Part01-Base-chap01-overview</title>
      <link href="2020/11/03/java-concurrency-in-pratice-part01-base-chap01-overview/"/>
      <url>2020/11/03/java-concurrency-in-pratice-part01-base-chap01-overview/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%8A%BF">线程优势</a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E9%A3%8E%E9%99%A9">线程风险</a><ul><li><a href="#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98">线程安全问题</a></li><li><a href="#%E6%B4%BB%E8%B7%83%E6%80%A7%E9%97%AE%E9%A2%98">活跃性问题</a></li><li><a href="#%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98">性能问题</a></li></ul></li><li><a href="#thread-is-everywhere">Thread is everywhere</a></li></ul><!-- /TOC --><h1 id="线程优势"><a href="#线程优势" class="headerlink" title="线程优势"></a>线程优势</h1><ul><li>建模简单：需要同时完成多种类型任务，复杂的工作流</li><li>异步事件处理： 服务器应用程序 多个远端连接，如果没有线程 需要非阻塞IO 比同步IO复杂多了 nio</li><li>响应更灵敏的用户页面：传统的会冻结用户页面</li></ul><h1 id="线程风险"><a href="#线程风险" class="headerlink" title="线程风险"></a>线程风险</h1><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><blockquote><p>定义：永远不发生糟糕的事</p></blockquote><p><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap01-overview/1.png"></p><ul><li><p>先读取、在加1、在赋值<br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap01-overview/2.png"></p></li><li><p>解决方法</p></li></ul><blockquote><p>@GuardedBy 说明同步策略<br><img src="/2020/11/03/java-concurrency-in-pratice-part01-base-chap01-overview/3.png"></p></blockquote><h2 id="活跃性问题"><a href="#活跃性问题" class="headerlink" title="活跃性问题"></a>活跃性问题</h2><blockquote><p>定义：某件正确的事情最终会发生。</p></blockquote><blockquote><p>串行中就是，无意中的无线循环。线程中，比如线程A等待线程B释放其持有的资源，而B永远都不释放。 A就永远等待</p></blockquote><h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><ul><li>吞吐量</li><li>服务时间</li><li>响应时间</li><li>资源消耗</li><li>可伸缩性</li></ul><blockquote><p>例子</p></blockquote><ul><li><p>挂起活跃线程运行另个线程带来的上下文切换（耗费很多开销 保存恢复执行上下文）</p></li><li><p>共享数据，使用的同步机制，抑制编译器优化</p></li></ul><h1 id="Thread-is-everywhere"><a href="#Thread-is-everywhere" class="headerlink" title="Thread is everywhere"></a>Thread is everywhere</h1><ul><li>JVM内部任务创建后台线程，主线程main</li><li>AWT(Abstract Window Toolkit ) Swing </li></ul><blockquote><p>典型模块 </p></blockquote><ul><li><p>Timer  使任务稍后运行，运行一次，或周期运行。计时器是一种方便的机制，用于将任务安排在稍后的时间运行，一次或定期运行。定时器的引入会使顺序程序变得复杂，因为定时器任务是在定时器管理的线程中执行的，而不是在应用程序中。如果定时器任务访问的数据也被其他应用程序线程访问，那么定时器任务不仅必须以线程安全的方式进行访问，访问该数据的任何其他类也必须这样做。<font color="red" font="" size="4">实现这一点最简单的方法是确保TimerTask访问的对象本身是线程安全的，从而将线程安全封装在共享对象中。</font></p></li><li><p>Servlets和JavaServer页面(JSP)。servlets框架旨在处理部署网络应用程序和从远程HTTP客户端发送请求的所有基础架构。到达服务器的请求可能通过一系列过滤器被分派到适当的servlet或JSP。每个servlet代表应用程序逻辑的一个组件，在高容量的网站中，多个客户端可能同时需要同一个servlet的服务。servlet规范要求servlet准备好同时被多个线程调用。换句话说，servlets需要线程安全。即使您可以保证一次只从一个线程调用一个servlet，您在构建web应用程序时仍然需要注意线程安全。servlet通常访问与其他servlet共享的状态信息，例如应用程序范围的对象(存储在ServletContext中)或会话范围的对象(存储在每个客户端的HttpSession中)。当一个小服务程序访问跨小服务程序或请求共享的对象时，它必须适当地协调对这些对象的访问，因为多个请求可能从不同的线程同时访问它们。servlet和JSP，以及servlet过滤器和存储在作用域容器(如ServletContext和HttpSession)中的对象，都必须是线程安全的。</p></li><li><p>远程方法调用。RMI允许您在另一个JVM中运行的对象上调用方法。当您使用RMI调用远程方法时，方法参数被打包(封送)成字节流，并通过网络发送到远程JVM，在那里它们被解包(解封)并传递给远程方法。当RMI代码调用您的远程对象时，调用发生在哪个线程中？你不知道，但它肯定不在你创建的线程中——你的对象在一个由RMI管理的线程中被调用。RMI创建多少线程？同一个远程对象上的同一个远程方法可以在多个RMI线程中同时调用吗？<br>远程对象必须防范两个线程安全风险:正确协调对可能与其他对象共享的状态的访问，以及正确协调对远程对象本身的状态的访问(因为同一对象可能在多个线程中同时被调用)。像servlets一样，RMI对象应该为多个同时调用做好准备，并且必须提供自己的线程安全</p></li><li><p>挥杆和AWT。图形用户界面应用程序本质上是异步的。用户可以随时选择一个菜单项或按下一个按钮，他们希望应用程序会迅速响应，即使它正在做其他事情。Swing和AWT通过创建一个单独的线程来处理用户发起的事件，并更新呈现给用户的图形视图，从而解决了这个问题。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Concurrency </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-ToptoDown-chap01:overview</title>
      <link href="2020/11/01/ji-suan-ji-wang-luo-toptodown-chap01-overview/"/>
      <url>2020/11/01/ji-suan-ji-wang-luo-toptodown-chap01-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="分组交换的时延"><a href="#分组交换的时延" class="headerlink" title="分组交换的时延"></a>分组交换的时延</h1><p><img src="/2020/11/01/ji-suan-ji-wang-luo-toptodown-chap01-overview/1.png"></p><ul><li>节点处理时延: 导向何处</li><li>排队时延：在链路等待传输 （其他分组传输完）</li><li>传输时延：分组以 先到先服务方式传输–最常见，当已经到达的分组传输后，才能传输刚到达的。（取决于分组长度和链路传输速度） 通常ms 到us级别</li><li>传播时延：推向链路 （取决于物理媒体）以及距离，广域网 ms级别</li></ul><blockquote><p>传输的时候，除了排队延时是变量其他都是固定的</p></blockquote><h1 id="各层消息"><a href="#各层消息" class="headerlink" title="各层消息"></a>各层消息</h1><ul><li>应用层：message</li><li>传输层：segment</li><li>网络层：datagram</li></ul><h1 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BR_EDR_RECPTION</title>
      <link href="2020/10/21/br-edr-recption/"/>
      <url>2020/10/21/br-edr-recption/</url>
      
        <content type="html"><![CDATA[<h1 id="接收机"><a href="#接收机" class="headerlink" title="接收机"></a>接收机</h1><h2 id="生成acesscode-wave"><a href="#生成acesscode-wave" class="headerlink" title="生成acesscode wave"></a>生成acesscode wave</h2><p><img src="/2020/10/21/br-edr-recption/1.png"></p><h2 id="Remove-收到的wave-DC"><a href="#Remove-收到的wave-DC" class="headerlink" title="Remove 收到的wave DC"></a>Remove 收到的wave DC</h2><p><img src="/2020/10/21/br-edr-recption/2.png"></p><h2 id="通过跳变检测信号"><a href="#通过跳变检测信号" class="headerlink" title="通过跳变检测信号"></a>通过跳变检测信号</h2><ul><li>用100的窗 检测</li><li>把每100的叠加<br><img src="/2020/10/21/br-edr-recption/3.png"><br><img src="/2020/10/21/br-edr-recption/4.png"></li></ul><h2 id="初始化decodeInfo"><a href="#初始化decodeInfo" class="headerlink" title="初始化decodeInfo"></a>初始化decodeInfo</h2><p><img src="/2020/10/21/br-edr-recption/5.png"></p><h2 id="分步处理每个包"><a href="#分步处理每个包" class="headerlink" title="分步处理每个包"></a>分步处理每个包</h2><h3 id="时间和频率估计补偿"><a href="#时间和频率估计补偿" class="headerlink" title="时间和频率估计补偿"></a>时间和频率估计补偿</h3><ul><li>和第一个符号卷积</li><li>同样把收到的信号和rcV卷积<br><img src="/2020/10/21/br-edr-recption/7.png"></li></ul><ul><li><p>检测前后相位差<br><img src="/2020/10/21/br-edr-recption/9.png"><br><img src="/2020/10/21/br-edr-recption/6.png"></p></li><li><p>计算相位差的互相关 （表示移位后的相似度）<br><img src="/2020/10/21/br-edr-recption/8.png"></p></li><li><p>找到互相关相似度最大的位置 延时 确定延时时间lagTimeDiff =-13927</p></li><li><p>idxTime=-IndexTime+1</p></li><li><p>得到同步后的波型</p></li></ul><ul><li>通过同步后的acesscode的与标准的aceesCode平均相位差算频偏<br><img src="/2020/10/21/br-edr-recption/10.png"></li></ul><ul><li>补足到5个时隙<img src="/2020/10/21/br-edr-recption/12.png"></li></ul><h2 id="Decode-信号"><a href="#Decode-信号" class="headerlink" title="Decode 信号"></a>Decode 信号</h2><ul><li><p>初始化包设置<br><img src="/2020/10/21/br-edr-recption/13.png"></p></li><li><p>地址<br><img src="/2020/10/21/br-edr-recption/15.png"></p></li><li><p>字段长度<br><img src="/2020/10/21/br-edr-recption/14.png"></p></li><li><p>EDR / BR<br><img src="/2020/10/21/br-edr-recption/16.png"></p></li></ul><h2 id="Gfsk解码access-code-packHearLen-和trailerLen"><a href="#Gfsk解码access-code-packHearLen-和trailerLen" class="headerlink" title="Gfsk解码access code packHearLen 和trailerLen"></a>Gfsk解码access code packHearLen 和trailerLen</h2><p><img src="/2020/10/21/br-edr-recption/17.png"></p><h2 id="判断packgettype"><a href="#判断packgettype" class="headerlink" title="判断packgettype"></a>判断packgettype</h2><p><img src="/2020/10/21/br-edr-recption/18.png"></p>]]></content>
      
      
      <categories>
          
          <category> Buletooth </category>
          
          <category> EDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buletooth-OurEDRDecode</title>
      <link href="2020/10/20/buletooth-ouredrdecode/"/>
      <url>2020/10/20/buletooth-ouredrdecode/</url>
      
        <content type="html"><![CDATA[<h1 id="load-data-初始配置"><a href="#load-data-初始配置" class="headerlink" title="load data 初始配置"></a>load data 初始配置</h1><ul><li>采样率、时隙、中心频率、symbol 时间 最小包长<br><img src="/2020/10/20/buletooth-ouredrdecode/1.png"></li></ul><h1 id="边缘检测包头、包尾"><a href="#边缘检测包头、包尾" class="headerlink" title="边缘检测包头、包尾"></a>边缘检测包头、包尾</h1><p>最少包长 64symbol<br><img src="/2020/10/20/buletooth-ouredrdecode/2.png"></p><p><img src="/2020/10/20/buletooth-ouredrdecode/3.png"></p><h1 id="处理包初始化配置"><a href="#处理包初始化配置" class="headerlink" title="处理包初始化配置"></a>处理包初始化配置</h1><p><img src="/2020/10/20/buletooth-ouredrdecode/4.png"></p><h1 id="提取包"><a href="#提取包" class="headerlink" title="提取包"></a>提取包</h1><ul><li>算平均功率<br><img src="/2020/10/20/buletooth-ouredrdecode/5.png"></li></ul><h2 id="相位检测"><a href="#相位检测" class="headerlink" title="相位检测"></a>相位检测</h2><ul><li><p>removeDC<br><img src="/2020/10/20/buletooth-ouredrdecode/6.png"></p></li><li><p>fft<br><img src="/2020/10/20/buletooth-ouredrdecode/7.png"></p></li><li><p>得到频谱<br><img src="/2020/10/20/buletooth-ouredrdecode/8.png"></p></li></ul><ul><li><p>量化到1Mhz 0~101<img src="/2020/10/20/buletooth-ouredrdecode/10.png"><br><img src="/2020/10/20/buletooth-ouredrdecode/9.png"><br>这时候 M级f_offset=0;</p></li><li><p>采样相位漂移补偿（没有真正实施）</p></li><li><p>滤波LPF 0.015*100Mhz=1.5Mhz (变成低通)<br>滤波前后<img src="/2020/10/20/buletooth-ouredrdecode/13.png"></p></li><li><p>得到初始相位差估计（频偏）</p></li></ul><p><img src="/2020/10/20/buletooth-ouredrdecode/14.png"></p><h1 id="同步化"><a href="#同步化" class="headerlink" title="同步化"></a>同步化</h1><p>temp_pack是频率相关<br><img src="/2020/10/20/buletooth-ouredrdecode/16.png"></p><ul><li><p>使用 包头 15~75 symbol ，找符号平均的中心<br><img src="/2020/10/20/buletooth-ouredrdecode/17.png"></p></li><li><p>取150us <img src="/2020/10/20/buletooth-ouredrdecode/18.png"></p></li><li><p>取符号平均作为bits</p></li><li><p>Binary Demod<br><img src="/2020/10/20/buletooth-ouredrdecode/19.png"></p><blockquote><p>移动的找Access code（直到校验通过）<br>得到LAP的EST<br>复原acesscode </p></blockquote></li></ul><blockquote><p>通过acesscode生成的理想GFSK 就是频率 syncword<br><img src="/2020/10/20/buletooth-ouredrdecode/20.png"></p></blockquote><blockquote><p>找到同步位置<br>同步字算平均的频率差值<br><img src="/2020/10/20/buletooth-ouredrdecode/21.png"><br><img src="/2020/10/20/buletooth-ouredrdecode/23.png"></p></blockquote><blockquote><p>matlab 频偏估计<br><img src="/2020/10/20/buletooth-ouredrdecode/24.png"></p></blockquote><h1 id="EDR-demod"><a href="#EDR-demod" class="headerlink" title="EDR demod"></a>EDR demod</h1><p><img src="/2020/10/20/buletooth-ouredrdecode/22.png"></p><blockquote><p>输入EDR sample，平均频偏粗估，rate</p></blockquote><blockquote><p>初始化 同步bit ，其中的ref_seq是 EDR2M  2bit 表示1相位的DPSK调制  24bit变成13bit 定义如下<br><img src="/2020/10/20/buletooth-ouredrdecode/26.png"><br><img src="/2020/10/20/buletooth-ouredrdecode/25.png"></p></blockquote><ul><li><p><font color="red" font="" size="4"> 可能存在错误 rcc 把13的序列变成900sample<br><img src="/2020/10/20/buletooth-ouredrdecode/27.png"><br><img src="/2020/10/20/buletooth-ouredrdecode/28.png"></font></p></li><li><p>上采样方法 fir 1. 补齐法  补同样的序列值 2.后续补0上采样（错误） 3.中间补0和系统函数一样( 对的方法） <br><img src="/2020/10/20/buletooth-ouredrdecode/29.png"><br><img src="/2020/10/20/buletooth-ouredrdecode/30.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Buletooth </category>
          
          <category> EDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buletooth-EDRDecode</title>
      <link href="2020/10/18/buletooth-edrdecode/"/>
      <url>2020/10/18/buletooth-edrdecode/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#bredr-%E6%A0%BC%E5%BC%8F">BR/EDR 格式</a><ul><li><a href="#access-code">Access Code</a></li><li><a href="#packet-header">Packet Header</a></li><li><a href="#payload">Payload</a></li></ul></li><li><a href="#packget--general">packget  general</a></li><li><a href="#%E7%A1%AE%E5%AE%9A%E5%8F%91%E9%80%81%E9%85%8D%E7%BD%AE">确定发送配置</a></li><li><a href="#%E7%A1%AE%E5%AE%9A%E6%B5%8B%E8%AF%95%E5%8F%98%E9%87%8F">确定测试变量</a></li><li><a href="#%E7%94%9F%E6%88%90200packet">生成200packet</a><ul><li><a href="#playload%E4%BD%9C%E4%B8%BAdata%E7%94%9F%E6%88%90buletooth-wave">playload作为data生成Buletooth wave</a><ul><li><a href="#%E7%94%9F%E6%88%90%E5%9C%B0%E5%9D%80%E7%A0%81-%E9%80%9A%E8%BF%87lap-%E4%BB%A5%E5%8F%8Apackettype-dh1-dh3">生成地址码 （通过LAP 以及packetType dh1 dh3)</a></li><li><a href="#%E7%94%9F%E6%88%90-packet-header-%E8%BE%93%E5%85%A5-packettypephymodelogical-logicaltransportaddressheadercontrolbitsuap">生成 packet header (输入 packetType、phyMode、logical LogicalTransportAddress、HeaderControlBits、UAP)</a></li><li><a href="#%E7%A1%AE%E5%AE%9A%E5%8F%91%E9%80%81%E5%90%91%E9%87%8F--%E9%95%BF">确定发送向量  长</a></li><li><a href="#%E6%9E%84%E5%BB%BAplayload-%E8%BE%93%E5%85%A5playload%E6%95%B0%E6%8D%AE--packettypebase-waveconfig-">构建playload (输入playload数据  packetType，base waveConfig )</a></li><li><a href="#packet-header--payload-whiletedata">packet header + payload= whileteData</a></li><li><a href="#%E7%BB%99payload-%E9%83%A8%E5%88%86%E6%B7%BB%E5%8A%A0fec%E5%A6%82%E6%9C%89%E9%9C%80%E8%A6%81">给payload 部分添加FEC（如有需要</a></li><li><a href="#%E7%BB%99header%E6%B7%BB%E5%8A%A013fec">给header添加1/3FEC</a></li><li><a href="#%E7%94%9F%E6%88%90%E5%9F%BA%E5%B8%A6%E4%BF%A1%E5%8F%B7">生成基带信号</a></li></ul></li><li><a href="#%E7%94%9F%E6%88%90%E7%90%86%E6%83%B3%E7%9A%84edrsymbols">生成理想的EDRsymbols</a></li><li><a href="#%E5%8D%87%E4%BD%99%E5%BC%A6%E5%8C%B9%E9%85%8D%E5%9B%9E%E6%9D%A5-6100-%E5%88%B0-69">升余弦匹配回来 6100 到 69</a></li><li><a href="#%E8%A7%A3%E9%99%A4delay">解除delay</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E9%A2%91%E7%8E%87%E5%81%8F%E7%A7%BB">添加频率偏移</a></li><li><a href="#%E6%B7%BB%E5%8A%A0%E5%99%AA%E5%A3%B0">添加噪声</a></li><li><a href="#%E5%88%9D%E5%A7%8B%E9%A2%91%E5%81%8F%E4%BC%B0%E8%AE%A1">初始频偏估计</a></li><li><a href="#%E8%A1%A5%E5%81%BF%E7%AE%97%E5%87%BA%E7%9A%84%E9%A2%91%E5%81%8F">补偿算出的频偏</a></li><li><a href="#remove-gpsk%E7%9A%84-%E5%BE%97%E5%88%B0edr%E7%9A%84wave">Remove GPSK的 得到EDR的wave</a></li><li><a href="#%E5%86%8D%E6%AC%A1%E7%BB%8F%E8%BF%87%E5%8C%B9%E9%85%8D%E6%BB%A4%E6%B3%A2%E5%99%A8-%E5%9C%A8%E6%A0%87%E5%87%86%E5%8C%96">再次经过匹配滤波器 在标准化</a></li><li><a href="#%E8%AE%A1%E7%AE%97devm">计算DEVM</a></li></ul></li></ul><!-- /TOC --><h1 id="BR-EDR-格式"><a href="#BR-EDR-格式" class="headerlink" title="BR/EDR 格式"></a>BR/EDR 格式</h1><h2 id="Access-Code"><a href="#Access-Code" class="headerlink" title="Access Code"></a>Access Code</h2><blockquote><p>每个数据包均以访问码开头。 如果随后是数据包头，则访问代码的长度为72位。 否则，访问码的长度为68位，称为缩短访问码。 访问代码包含以下字段：</p></blockquote><ul><li><p>Preamble: The preamble is a fixed zero-one pattern of four symbols.</p></li><li><p>Sync Word: The sync word is a 64-bit code word derived from the 24-bit lower address part (LAP) of the Bluetooth device address.</p></li><li><p>Trailer: The trailer is a fixed zero-one pattern of four symbols.</p></li></ul><p><img src="/2020/10/18/buletooth-edrdecode/27.png"></p><h2 id="Packet-Header"><a href="#Packet-Header" class="headerlink" title="Packet Header"></a>Packet Header</h2><blockquote><p>标头包含链接控制信息:</p></blockquote><ul><li><p>LT_ADDR: 3-bit logical transport address</p></li><li><p>TYPE: 4-bit type code, which specifies the packet type used for transmission. The value of this field can be ID, NULL, POLL, FHS, HV1, HV2, HV3, DV, EV3, EV4, EV5, 2-EV3, 2-EV5, 3-EV3, 3-EV5, DM1, DH1, DM3, DH3, DM5, DH5, AUX1, 2-DH1, 2-DH3, 2-DH5, 3-DH1, 3-DH3 and 3-DH5. This field determines the number of slots the current packet occupies.</p></li><li><p>FLOW: 1-bit flow control over the asynchronous connection-oriented logical (ACL) transport</p></li><li><p>ARQN: 1-bit acknowledgement indication</p></li><li><p>SEQN: 1-bit sequence number</p></li><li><p>HEC: 8-bit header error check</p></li></ul><p><img src="/2020/10/18/buletooth-edrdecode/28.png"></p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><blockquote><p>有效负载包括可选的有效负载头，有效负载主体和可选的CRC<br><img src="/2020/10/18/buletooth-edrdecode/29.png"></p></blockquote><h1 id="packget-general"><a href="#packget-general" class="headerlink" title="packget  general"></a>packget  general</h1><p><img src="/2020/10/18/buletooth-edrdecode/30.png"></p><h1 id="确定发送配置"><a href="#确定发送配置" class="headerlink" title="确定发送配置"></a>确定发送配置</h1><ul><li>发送EDR2/3M</li><li>packetType</li><li>初始频偏</li><li>initialFre </li><li>maxFreqDift (漂移是晶振老化率决定的)</li></ul><h1 id="确定测试变量"><a href="#确定测试变量" class="headerlink" title="确定测试变量"></a>确定测试变量</h1><ul><li><p>根据Mode、packetType确定 传输的bytes、DEVMBlocks、slots时隙、头部bytes<br>滚降滤波器、<br><img src="/2020/10/18/buletooth-edrdecode/1.png"></p></li><li><p><img src="/2020/10/18/buletooth-edrdecode/2.png"></p></li><li><p>调制顺序<br><img src="/2020/10/18/buletooth-edrdecode/3.png"></p></li><li><p>其中同步符号长度是11 8DPSK用3bit表示symbol，syncSequenceLen=33 <img src="/2020/10/18/buletooth-edrdecode/4.png"></p><blockquote><p>一个时隙625us 来算采样点，一个symbol 1us<br>DER初始下标 从GI之后</p></blockquote></li><li><p>创建PN序列属性；length （bytes To bit)<br><img src="/2020/10/18/buletooth-edrdecode/6.png"></p></li><li><p>确定packget数   滤波器span代表截断符号数量（实际滤波器不能是无限窗）<br><img src="/2020/10/18/buletooth-edrdecode/5.png"></p></li><li><p>创建仿真噪声和相位</p></li></ul><h1 id="生成200packet"><a href="#生成200packet" class="headerlink" title="生成200packet"></a>生成200packet</h1><ul><li>创建随机的playload Pn</li></ul><h2 id="playload作为data生成Buletooth-wave"><a href="#playload作为data生成Buletooth-wave" class="headerlink" title="playload作为data生成Buletooth wave"></a>playload作为data生成Buletooth wave</h2><ul><li><p>初始化包模式，一个包的playload bit <img src="/2020/10/18/buletooth-edrdecode/7.png"></p></li><li><p>确定UAP  （upper address part）  LAP （lower address part）<br><img src="/2020/10/18/buletooth-edrdecode/8.png"></p></li><li><p>如果是EDR 得到GI以及不同的 sync 5us<br><img src="/2020/10/18/buletooth-edrdecode/9.png"></p></li></ul><h3 id="生成地址码-（通过LAP-以及packetType-dh1-dh3"><a href="#生成地址码-（通过LAP-以及packetType-dh1-dh3" class="headerlink" title="生成地址码 （通过LAP 以及packetType dh1 dh3)"></a>生成地址码 （通过LAP 以及packetType dh1 dh3)</h3><blockquote><p>一系列操作得到同步word 64bit <img src="/2020/10/18/buletooth-edrdecode/10.png"></p></blockquote><ul><li>info Seq</li><li>PN overlay sequence</li></ul><blockquote><p>得到前缀、尾部 组成access code<br><img src="/2020/10/18/buletooth-edrdecode/11.png"></p></blockquote><h3 id="生成-packet-header-输入-packetType、phyMode、logical-LogicalTransportAddress、HeaderControlBits、UAP"><a href="#生成-packet-header-输入-packetType、phyMode、logical-LogicalTransportAddress、HeaderControlBits、UAP" class="headerlink" title="生成 packet header (输入 packetType、phyMode、logical LogicalTransportAddress、HeaderControlBits、UAP)"></a>生成 packet header (输入 packetType、phyMode、logical LogicalTransportAddress、HeaderControlBits、UAP)</h3><ul><li><p>得到type<img src="/2020/10/18/buletooth-edrdecode/12.png"></p></li><li><p>构建头 <img src="/2020/10/18/buletooth-edrdecode/13.png"></p></li></ul><h3 id="确定发送向量-长"><a href="#确定发送向量-长" class="headerlink" title="确定发送向量  长"></a>确定发送向量  长</h3><p><img src="/2020/10/18/buletooth-edrdecode/14.png"> 625us</p><h3 id="构建playload-输入playload数据-packetType，base-waveConfig"><a href="#构建playload-输入playload数据-packetType，base-waveConfig" class="headerlink" title="构建playload (输入playload数据  packetType，base waveConfig )"></a>构建playload (输入playload数据  packetType，base waveConfig )</h3><ul><li><p>得到设备地址48bit UAP 8bit并构建crc 初始填充0 得到16bit<br><img src="/2020/10/18/buletooth-edrdecode/15.png"></p></li><li><p>playload头部  EDR16bit<br><img src="/2020/10/18/buletooth-edrdecode/16.png"></p></li><li><p>加上data的头部  之前data 11bytes 88bit  88+16=104bit<br><img src="/2020/10/18/buletooth-edrdecode/17.png"></p></li><li><p>在加上根据CRC初始条件的CRC校验 16bit 120bit</p></li></ul><h3 id="packet-header-payload-whileteData"><a href="#packet-header-payload-whileteData" class="headerlink" title="packet header + payload= whileteData"></a>packet header + payload= whileteData</h3><h3 id="给payload-部分添加FEC（如有需要"><a href="#给payload-部分添加FEC（如有需要" class="headerlink" title="给payload 部分添加FEC（如有需要"></a>给payload 部分添加FEC（如有需要</h3><p><img src="/2020/10/18/buletooth-edrdecode/18.png"></p><h3 id="给header添加1-3FEC"><a href="#给header添加1-3FEC" class="headerlink" title="给header添加1/3FEC"></a>给header添加1/3FEC</h3><p><img src="/2020/10/18/buletooth-edrdecode/19.png"></p><h3 id="生成基带信号"><a href="#生成基带信号" class="headerlink" title="生成基带信号"></a>生成基带信号</h3><ul><li><p>前面由由 accessCode headerFEC组成 GPSK组成<br><img src="/2020/10/18/buletooth-edrdecode/20.png"></p></li><li><p>edr Packet 由 同步序列 payloadFEC 和尾部组成</p></li><li><p>根据DER 方式决定k 2M 2 3M 3 填充到k的整数倍  </p></li><li><p>把edr Packet用变成3bit表示一位形势 相当于 159bit 变成53 double</p></li><li><p>初始相位 0 然后后续根据前面53double 根据相位旋转 变成53 复数代表相位<br><img src="/2020/10/18/buletooth-edrdecode/21.png"></p></li><li><p>加滤波器的窗 53+8 =61 61根据</p></li><li><p>根据采样率生成过滤波器的 得到6100个点 ，在标准化</p></li><li><p>最后把GPSK +GI + 标准化后的DPSK点 放入 625us里面 当前19200</p></li></ul><p><img src="/2020/10/18/buletooth-edrdecode/22.png"></p><h2 id="生成理想的EDRsymbols"><a href="#生成理想的EDRsymbols" class="headerlink" title="生成理想的EDRsymbols"></a>生成理想的EDRsymbols</h2><ul><li>包持续时间<br><img src="/2020/10/18/buletooth-edrdecode/23.png"></li><li>得到包含窗的（也是之前放入的点）</li><li>EDR的理想Wave</li></ul><h2 id="升余弦匹配回来-6100-到-69"><a href="#升余弦匹配回来-6100-到-69" class="headerlink" title="升余弦匹配回来 6100 到 69"></a>升余弦匹配回来 6100 到 69</h2><p><img src="/2020/10/18/buletooth-edrdecode/24.png"></p><h2 id="解除delay"><a href="#解除delay" class="headerlink" title="解除delay"></a>解除delay</h2><p><img src="/2020/10/18/buletooth-edrdecode/25.png"></p><h2 id="添加频率偏移"><a href="#添加频率偏移" class="headerlink" title="添加频率偏移"></a>添加频率偏移</h2><ul><li>漂移率 最大漂移1000</li><li>根据漂移率算出每个采样点的漂移</li><li>每个漂移加上固定频偏 （第一个图 固定频偏400k导致后续频偏估计错误）<br><img src="/2020/10/18/buletooth-edrdecode/26.png"><br>第二个图为加上40k固定频率和漂流的结果）<br><img src="/2020/10/18/buletooth-edrdecode/33.png"></li></ul><h2 id="添加噪声"><a href="#添加噪声" class="headerlink" title="添加噪声"></a>添加噪声</h2><h2 id="初始频偏估计"><a href="#初始频偏估计" class="headerlink" title="初始频偏估计"></a>初始频偏估计</h2><ul><li><p>用基带信号header部分 <img src="/2020/10/18/buletooth-edrdecode/37.png"></p></li><li><p>算每个角度和以及他们之间的相差的比例 ，unwarp当检测到相位跳变pi时，就自动纠正（加 减pi）<br><img src="/2020/10/18/buletooth-edrdecode/32.png"></p></li><li><p>把正负差的相位的所有sample平均 在乘采样率 就是频偏估计<br><img src="/2020/10/18/buletooth-edrdecode/34.png"></p></li></ul><h2 id="补偿算出的频偏"><a href="#补偿算出的频偏" class="headerlink" title="补偿算出的频偏"></a>补偿算出的频偏</h2><p><img src="/2020/10/18/buletooth-edrdecode/35.png"></p><ul><li>补偿用算的相位<br><img src="/2020/10/18/buletooth-edrdecode/36.png"></li></ul><h2 id="Remove-GPSK的-得到EDR的wave"><a href="#Remove-GPSK的-得到EDR的wave" class="headerlink" title="Remove GPSK的 得到EDR的wave"></a>Remove GPSK的 得到EDR的wave</h2><p><img src="/2020/10/18/buletooth-edrdecode/38.png"></p><h2 id="再次经过匹配滤波器-在标准化"><a href="#再次经过匹配滤波器-在标准化" class="headerlink" title="再次经过匹配滤波器 在标准化"></a>再次经过匹配滤波器 在标准化</h2><p><img src="/2020/10/18/buletooth-edrdecode/39.png"><br><img src="/2020/10/18/buletooth-edrdecode/40.png"></p><h2 id="计算DEVM"><a href="#计算DEVM" class="headerlink" title="计算DEVM"></a>计算DEVM</h2><p><img src="/2020/10/18/buletooth-edrdecode/41.png"></p><ul><li>输入理想的符号（psk调制后直接经过匹配滤波器，在标准化，在匹配滤波回来的值）</li><li>和接受的符号共轭得到Q 、差值得到E</li><li><img src="/2020/10/18/buletooth-edrdecode/42.png"></li><li>50symbol一个Block</li><li>计算Block的采样频率错误，记录频率漂移</li><li><img src="/2020/10/18/buletooth-edrdecode/43.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Buletooth </category>
          
          <category> EDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buletooth-dqsk_demod</title>
      <link href="2020/10/16/buletooth-dqsk-demod/"/>
      <url>2020/10/16/buletooth-dqsk-demod/</url>
      
        <content type="html"><![CDATA[<h1 id="base-configuration"><a href="#base-configuration" class="headerlink" title="base configuration"></a>base configuration</h1><h1 id="package-detect"><a href="#package-detect" class="headerlink" title="package detect"></a>package detect</h1><ul><li>获取所有包的start end  总包数</li><li>BDR % BDR payload offset (126) =reamble (4) + access code (64) + tail (4) + packet header (54)<br>% Note 5 symbol of guard not included in this offset</li><li>总sameple=126* 采样符号数</li></ul><h1 id="对每个-ACP-功率估计"><a href="#对每个-ACP-功率估计" class="headerlink" title="对每个 ACP 功率估计"></a>对每个 ACP 功率估计</h1><h2 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h2><ul><li><p>解调、滤波  tmep——pack iq_comp 是结果</p></li><li><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2></li></ul><p>得到 帧头、频率漂移、ACC估计、</p><h2 id="EDR"><a href="#EDR" class="headerlink" title="EDR"></a>EDR</h2><ul><li>输入帧头偏移加上BDR前缀偏移、输入信号的频率误差、时间误差、rate</li></ul><blockquote><p>对于增强数据速率数据包，同步序列开始时的符号定时应在数据包报头最后一个GFSK符号的符号定时的s以内。同步序列的长度为11秒(11个DPSK符号)，由一个参考符号(任意相位)后跟十个DPSK符号组成。DPSK符号之间的相位变化(如图6.11所示)应为<br><img src="/2020/10/16/buletooth-dqsk-demod/1.png"></p></blockquote><ul><li><p>同步序列和相位初始化</p></li><li><p>对序列同步序列1/4pi DPSK  24符号得到 1+12个参考</p></li><li><p>通过同步序列得到基带的采样点序列</p></li><li><p>RRC_filter得到Z(t)<img src="/2020/10/16/buletooth-dqsk-demod/2.png"></p></li><li><p>理想的延时<br><img src="/2020/10/16/buletooth-dqsk-demod/3.png"></p></li><li><p>每个符号1us 20个同步</p></li><li><p>真实的相位延时和同步</p></li><li><p>根据相位最大值判断 是哪种 4/pi DPSK是哪种REF</p></li><li><p>得到平均符号 和 acc</p></li><li><p>得到drift</p></li><li><p>根据DPSK 找每个符号对应的相差最大值的相位记录 1<del>8 到3bit 000</del> 111</p></li><li><p>卷积（变成1 -1 来卷积</p></li><li><p>算出 从第几个符号开始同步</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Buletooth </category>
          
          <category> EDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap12-Advanced-Data-Structures</title>
      <link href="2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/"/>
      <url>2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/</url>
      
        <content type="html"><![CDATA[<h1 id="自上而下-伸展树"><a href="#自上而下-伸展树" class="headerlink" title="自上而下 伸展树"></a>自上而下 伸展树</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/1.png"></p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/2.png"></p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/3.png"></p><blockquote><p>和自下而上的伸展树一样保持了摊还界O(logN)</p></blockquote><h1 id="红黑树（AVL-变种）"><a href="#红黑树（AVL-变种）" class="headerlink" title="红黑树（AVL 变种）"></a>红黑树（AVL 变种）</h1><p>图解</p><blockquote><p><a href="https://www.cnblogs.com/skywang12345/p/3245399.html">https://www.cnblogs.com/skywang12345/p/3245399.html</a></p></blockquote><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/41.png"></p><blockquote><p>性质 也是二叉查找树</p></blockquote><ul><li>每个节点 黑色或者红色</li><li>根是黑色</li><li>节点是红，子节点必须是黑 （可以是黑色父、黑色子）</li><li>从一个节点到一个null引用，每一条路径需要有相同数目的黑色节点 </li></ul><blockquote><p>结论<br>红黑树最高高度为2log(N+1)</p></blockquote><blockquote><p>证明</p></blockquote><pre class="line-numbers language-none"><code class="language-none">证明：红黑树的高度为O(lgn)实际上，一颗有n个内部节点的红黑树的高度至多为2lg(n+1)。我们设一个节点x的黑高为hb(x)。先来证明以任一节点x为根的子树中至少包含2^(hb(x)-1) -1个内部节点，使用归纳法：①如果x的高度为0，那么x是叶结点(nil)，且以x为根结点的子树至少包含2^(1-1) -1=0个内部节点，符合结论。②假设x的高度为k时(k&gt;=1)，以x为根节点的子树至少包含2^(hb(x)-1)-1个内部节点。③对于x的高度为k+1的红黑树，我们考虑它的两个子树，它的两个子树的高度为k，那么满足②号条件，两个子树至少包含了2^(hb(x)-1)-1个内部节点，所以以x为根的树至少包含了(2^(hb(x)-1)-1)+(2^(hb(x)-1)-1)+1=2^(hb(x))-1个内部节点，因此得证。 对于高度为h的红黑树，根据性质4我们不难发现在每一条路径上，至少有一半以上的黑色节点，否则必定有两个红色节点会相邻。所以树的黑高至少为h/2。所以根据上面已证明的结论，有n&gt;=2(h/2 - 1)-1，所以有：h&lt;=2lg(n+1)。得证。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>红色是双圆圈<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/4.png"></p><blockquote><p>插入是困难的，新项作为树叶插入树中。黑色一定违反条件4，必须涂成红色，父节点是黑色，插入完成。父节点是红色，违反条件3，我们需要颜色的改变和树的旋转</p></blockquote><h2 id="自底向上的插入"><a href="#自底向上的插入" class="headerlink" title="自底向上的插入"></a>自底向上的插入</h2><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/5.png"></p><blockquote><p>如果 S也是红色的，就比较复杂，需要上滤</p></blockquote><ul><li>分为三种情况  <ul><li>情况一、 z的叔节点y是红色，其中z为要调整的节点(下同)：<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/39.png"><br>其中，单纯旋转没办法解决 所以我们扔给上面循环来解决</li><li>情况二、z的叔节点y是黑色的且z是一个右孩子<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/40.png"><br>其中，单纯旋转没办法解决 所以我们扔给上面循环来解决<br>转换到情况三</li><li>情况三、z的叔节点y是黑色的且z是一个左孩子<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/42.png"><br>①染色：通过将21染黑和26染红，我们可以解决性质4，但是却让原本26-39这条路径上少了一个黑色节点，一定会破坏性质5；于是我们接下来借助旋转<br>②左旋：为么右旋在这里能够解决26-39路线上少一个黑色节点的问题，而且能够保证红黑颜色性质。</li></ul></li></ul><h2 id="自顶向下的插入红黑树"><a href="#自顶向下的插入红黑树" class="headerlink" title="自顶向下的插入红黑树"></a>自顶向下的插入红黑树</h2><blockquote><p>看到两个红儿子就改成黑色，把父亲改成红色，如果父亲是根就改成黑色</p></blockquote><blockquote><p>如果此时父亲的父亲是红色 的 那么就利用之前的旋转<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/7.png"></p></blockquote><blockquote><p>插入45<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/4.png"> <img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/8.png"></p></blockquote><blockquote><p>红黑树一般平衡的很好 和AVL一样 ，插入开销少，实际的旋转少。</p></blockquote><blockquote><p>实际上实现很复杂，需要大量不同的旋转，子树是空的，根的特殊情况。两个标记节点，一个是根，一个是nullNode（null引用）。 </p></blockquote><blockquote><p>根标记存放负无穷和真正的根右链<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/9.png"></p></blockquote><blockquote><p>把item 作为参数传递，而不是记录旋转类型，因为期望很少的插入</p></blockquote><h2 id="自顶向下的删除红黑树"><a href="#自顶向下的删除红黑树" class="headerlink" title="自顶向下的删除红黑树"></a>自顶向下的删除红黑树</h2><blockquote><p>红色树叶删除是简单的，黑色树叶可能破坏性质4，解决办法保证从上到下的树叶删除是黑的<br>(Data-Structures-and-Algorithms-chap12-Advanced-Data-Structures/10.png)</p></blockquote><h1 id="treap树"><a href="#treap树" class="headerlink" title="treap树"></a>treap树</h1><blockquote><p>最简单的二叉查找树，像跳跃表用随机数给期望时间O（logN）性能，和非平衡查找树一样</p></blockquote><blockquote><p>每一项存储左链、右链、优先级（由建立节点时间指定，任意节点优先级至少和父节点一样大<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/11.png"></p></blockquote><blockquote><p>树根据优先级得到N!的排列而不是根据项</p></blockquote><blockquote><p>nullNode 优先级无限大，随机优先级用共享Random生成</p></blockquote><blockquote><p>插入：作为树叶插入后，把它沿着treap树向上旋转直到他满足优先级<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/12.png"><br>删除：找到被删除的项 把它优先级增加到无限大，在沿着低优先级的儿子向下旋转<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/13.png"></p></blockquote><h1 id="后缀数组和后缀树"><a href="#后缀数组和后缀树" class="headerlink" title="后缀数组和后缀树"></a>后缀数组和后缀树</h1><blockquote><p>数据处理基本问题 文本T找到模式P的位置</p></blockquote><ul><li>存在能匹配P的T的子串吗</li><li>P在T中出现了多少次</li><li>P在T中出现的所有位置</li></ul><blockquote><p>时间至少是O（T），也确实有若干O（T）解法</p></blockquote><blockquote><p>问题，T是固定的，针对不同的模式P有频繁的查询，比如邮件信息。</p></blockquote><blockquote><p>这时候可以把T预处理成比较好的形式，使每次独立查询效率变高，用显著小于T的规模时间（或者T的规模对数时间），与T无关依赖于P的长度</p></blockquote><blockquote><p>后缀数组和后缀树（听上去不一样，其实上一样，基本是等价的，用空间换时间）</p></blockquote><h2 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h2><blockquote><p>后缀数组,T所以后缀有序排列所组成的数组。1-N 、2-N 、3-N ……<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/14.png"></p></blockquote><blockquote><p>存储看上去需要平方级空间，它对1~N 的 每个长度都存储了一个字符串。Java不一定如此。<strong>Java字符串 维护一个字符数组以及一个开头和结尾索引实现 通过subString，额外的内存需求只是新子串的索引</strong>,但是这样也用了太多空间，常用只保存后缀在后缀数组的起始下标。</p></blockquote><blockquote><p>模式P出现 他必然是某个后缀的前缀 。对后缀数组做折半查找足以确定模式P是否在文本。</p></blockquote><blockquote><p>折半只有可能出现停在P 或者P在两个中间，它是大值的前缀<br>查询时间 O(PlogT) ，P是每步开销造成的</p></blockquote><blockquote><p>出现次数可以通过Longest Common Prefix,LCP加速 到O(P +logT)  后一个是前一个的<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/15.png"></p></blockquote><blockquote><p>后缀数组的主要开销在排序，以及可能的LCP，可能会到 O(N^2LogN)</p></blockquote><h2 id="后缀树"><a href="#后缀树" class="headerlink" title="后缀树"></a>后缀树</h2><p>存在字典树（buffman 树）里面，但是那样浪费了很多空间，压缩单个分支变成  （压缩字典树）</p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/16.png"></p><blockquote><p>只使用线性空间的方法</p></blockquote><ul><li>叶节点存储后缀起始下标</li><li>内部节点存储根到盖内部节点匹配公共字符个数 ，（字母深度）<blockquote><p>如下，字母深度1 代表下面所以节点的公共串”a”,字母深度3 代表下面所以节点的公共串”ana” 字母深度2 代表下面所以得公共串”na”</p></blockquote></li></ul><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/17.png"></p><blockquote><p>中序遍历来得到后缀  数组和LCP数组 对比下图<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/18.png"></p></blockquote><blockquote><p>LCP方法： 如果后缀节点加上父节点字母深度等于N，将祖父节点作为LCP。否则用父节点的字母深度做作为LCP<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/19.png"></p></blockquote><blockquote><p>后缀数组和LCP数组唯一定义后缀树</p></blockquote><h2 id="后缀树和后缀数组解决的问题"><a href="#后缀树和后缀数组解决的问题" class="headerlink" title="后缀树和后缀数组解决的问题"></a>后缀树和后缀数组解决的问题</h2><ul><li>找T中最长子串：找最大字母深度的内节点 代表最大的LCP,可推广到至少K遍的最长子串</li><li>找两个字符串的最长公共子串：T1#T2 ，#是两个字符串中都不存在的值 ，O（N）算法  可以推广到总长度为N的k个支持串</li><li>找模式P出现的次数：假设后缀树增加了记录沿着内部节点向下的路径</li><li>找指定长度L》1的最常见子串：返回字母深度至少为L的结点中规模最大的结点</li></ul><h2 id="线性构造后缀数组-后缀的方法"><a href="#线性构造后缀数组-后缀的方法" class="headerlink" title="线性构造后缀数组 后缀的方法"></a>线性构造后缀数组 后缀的方法</h2><h3 id="CD3"><a href="#CD3" class="headerlink" title="CD3"></a>CD3</h3><p>最坏 O(N)</p><blockquote><p>分治法</p></blockquote><ul><li>选择后缀的一个样本集 A</li><li>递归把样本集A排序</li><li>利用当前有序的后缀样本集A将 剩下的后缀集合B排序</li></ul><blockquote><p>例子 用ABRACADAbRA计算后缀数组<br>约定<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/26.png"></p></blockquote><ul><li><p>步骤1 映射排序 填充0防止边界<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/20.png"></p></li><li><p>步骤2 分三组  每组由N/3符号组成  S0、S1、S2后缀组成S的后缀  ，如果递归 三个后缀再归并，结果是O(NlogN),计算两个后缀分组，利用信息计算第三个后缀分组。<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/21.png"></p></li></ul><blockquote><p>$代表填充字符<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/22.png"></p></blockquote><blockquote><p>S0对应的后缀<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/23.png"><br>这些后缀是 0、3、6、9的位置</p></blockquote><blockquote><p>同理可以看出 S1 S2的后缀位置</p></blockquote><ul><li>步骤3： 将S1 S2 接起率递归计算后缀数。<blockquote><p>可以用三趟基数排序来线性完成<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/27.png"></p></blockquote></li></ul><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/24.png"><br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/25.png"></p><blockquote><p>第一排是S1S2 字符排序他应该在的位置<br>第二排、第三排是 后缀数组</p></blockquote><ul><li>步骤四 对S0计算后缀  SA代表后缀数组<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/26.png"></li></ul><blockquote><p>两趟基数排序做步骤4：第一趟在S1[i=&gt;] 第二趟 S0[i]</p></blockquote><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/28.png"></p><blockquote><p>对S1 S2 后缀分级<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/29.png"><br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/30.png"></p></blockquote><blockquote><p>两趟基数排序得到S0 以及S1、S2组合的后缀数组 一共两个 之后再归并。</p></blockquote><ul><li>步骤5 归并两个后缀 O（N)<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/31.png"></li></ul><blockquote><p>两种情况</p></blockquote><ul><li>1.比较S0 S1首字母，不一样匹配结束，不然就看后缀</li><li>2.比较S0 S2的元素 最大比较前两个字母 </li></ul><p>比较0 10 都是A 接着比较1 11  11是空 所以10在前面</p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/32.png"></p><p>情况1，比较0 7 都是A 接着比较1 8  8是小 所以7在前面</p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/33.png"></p><p>比较0 5 都是A 接着比较1 6  ，S1 和S0元素比较 不能直接比较结果 ，只能直接比较字符，下标1 包含B，下标6包含D,下标1胜，进入下一级</p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/34.png"></p><p>同样的比较 3 5 找不到结果就直接比较<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/35.png"></p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/36.png"></p><p>结果<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/37.png"></p><p>T(N)=T(2N/3)+O(N) 花费O（N）时间</p><h3 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a>倍增</h3><blockquote><p>倍增算法的主要思想 ：对于一个后缀Suffix[i],如果想直接得到Rank比较困难，但是我们可以对每个字符开始的长度为2k的字符串求出排名，k从0开始每次递增1(每递增1就成为一轮)，当2k大于Len时，所得到的序列就是Rank，而SA也就知道了。O(logLen)枚举k</p></blockquote><blockquote><p>设每一轮得到的序列为rank(注意r是小写，最终后缀排名Rank是大写)。有一个很美妙的性质就出现了！第k轮的rank可由第k - 1轮的rank快速得来!</p></blockquote><blockquote><p>设SubStr(i, len)为从第i个字符开始，长度为len的字符串我们可以把第k轮SubStr(i, 2k)看成是一个由SubStr(i, 2k−1)和SubStr(i + 2k−1, 2k−1)拼起来的东西。类似rmq算法，这两个长度而2k−1的字符串是上一轮遇到过的！当然上一轮的rank也知道！</p></blockquote><blockquote><p>每一趟rank 排序用基数排序<br><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/47.png"></p></blockquote><h4 id="LCP"><a href="#LCP" class="headerlink" title="LCP"></a>LCP</h4><blockquote><p>Heigth[i] : 表示Suffix[SA[i]]和Suffix[SA[i - 1]]的最长公共前缀，也就是排名相邻的两个后缀的最长公共前缀<br>H[i] : 等于Height[Rank[i]]，也就是后缀Suffix[i]和它前一名的后缀的最长公共前缀<br>而两个排名不相邻的最长公共前缀定义为排名在它们之间的Height的最小值。</p></blockquote><blockquote><p>H[i] ≥ H[i - 1] - 1!<br>如果上面这个性质是对的，那我们可以按照H[1]、H[2]……H[Len]的顺序进行计算，那么复杂度就降为O(N)了！<br>让我们尝试一下证明这个性质 : 设Suffix[k]是排在Suffix[i - 1]前一名的后缀，则它们的最长公共前缀是H[i - 1]。都去掉第一个字符，就变成Suffix[k + 1]和Suffix[i]。如果H[i - 1] = 0或1,那么H[i] ≥ 0显然成立。否则，H[i] ≥ H[i - 1] - 1(去掉了原来的第一个,其他前缀一样相等)，所以Suffix[i]和在它前一名的后缀的最长公共前缀至少是H[i - 1] - 1。</p></blockquote><h1 id="k-d-树"><a href="#k-d-树" class="headerlink" title="k-d 树"></a>k-d 树</h1><blockquote><p>问题出现：广告公司拥有一个数据库，需要为某些客户生成邮寄标签。 比如年龄在34<del>49 年收入在100000</del>150000美元的人，<strong>二维范围查询</strong>。在一维情况下，改问题可以借助于简单的递归算法 通过二叉查找</p></blockquote><blockquote><p>二维查找树（two-dimensional search tree)   2-d树<br>奇数层按第一个关键词排列，偶数层第二个关键词排列。</p></blockquote><blockquote><p>重复元放在右分支</p></blockquote><ul><li>算法分析<br>平均高度O（logN） 最坏O（N）</li></ul><h1 id="配对堆"><a href="#配对堆" class="headerlink" title="配对堆"></a>配对堆</h1><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/38.png"></p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="12-3-修改伸展树-支持对k项最小查询"><a href="#12-3-修改伸展树-支持对k项最小查询" class="headerlink" title="12.3 修改伸展树 支持对k项最小查询"></a>12.3 修改伸展树 支持对k项最小查询</h2><pre class="line-numbers language-none"><code class="language-none">为每个节点合并一个附加字段，以指示其子树的大小。 这些领域是易于在展开期间进行更新。 在跳过列表中很难做到这一点。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-6-红黑树高度证明"><a href="#12-6-红黑树高度证明" class="headerlink" title="12.6 红黑树高度证明"></a>12.6 红黑树高度证明</h2><p>如上 </p><h2 id="12-7-AVL树和红黑树的转换"><a href="#12-7-AVL树和红黑树的转换" class="headerlink" title="12.7 AVL树和红黑树的转换"></a>12.7 AVL树和红黑树的转换</h2><pre class="line-numbers language-none"><code class="language-none">如果非根节点的高度为偶数且其父代高度为奇数，则将其着色为红色，否则为黑色。并非所有的红黑树都是AVL树（因为最深的红黑树比最深的AVL更深树）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="12-1-线性时间LCP"><a href="#12-1-线性时间LCP" class="headerlink" title="12.1 线性时间LCP"></a>12.1 线性时间LCP</h2><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/43.png"></p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/44.png"></p><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/45.png"></p><p>思路：线性时间的LCP 就是要避免重复比较</p><blockquote><p>从最长的位置开始和它之前的一个位置比较</p></blockquote><blockquote><p>保留h因为 如果当前和上面一个有h个公共，下一个和上面的至少有h-1个公共</p></blockquote><p><img src="/2020/10/15/data-structures-and-algorithms-chap12-advanced-data-structures/46.png"></p><pre class="line-numbers language-none"><code class="language-none">sa[5]=7 rank[7]=5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap011-Amortized Analysis</title>
      <link href="2020/10/14/data-structures-and-algorithms-chap011-amortized-analysis/"/>
      <url>2020/10/14/data-structures-and-algorithms-chap011-amortized-analysis/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%80%BB%E4%BD%93%E6%8F%8F%E8%BF%B0">总体描述</a></li><li><a href="#%E7%AE%80%E5%8D%95%E9%97%AE%E9%A2%98%E6%80%9D%E8%B7%AF">简单问题思路</a></li><li><a href="#%E4%BA%8C%E9%A1%B9%E9%98%9F%E5%88%97">二项队列</a></li></ul><!-- /TOC --><h1 id="总体描述"><a href="#总体描述" class="headerlink" title="总体描述"></a>总体描述</h1><blockquote><p>长时间运行每次操作花费时间 （Amortized time bound)</p></blockquote><blockquote><p>本章分析 </p></blockquote><ul><li>二项队列</li><li>斜堆</li><li>斐波那契堆</li><li>伸展树</li></ul><h1 id="简单问题思路"><a href="#简单问题思路" class="headerlink" title="简单问题思路"></a>简单问题思路</h1><p><img src="/2020/10/14/data-structures-and-algorithms-chap011-amortized-analysis/1.png"></p><blockquote><p>暴力法也可以计算，更好的是间接求解，小猫相距100码 每分钟20码 总共花了5分钟，妈妈速度不变，总距离500。</p></blockquote><blockquote><p>摊还计算经常用的类似思路，位势</p></blockquote><h1 id="二项队列"><a href="#二项队列" class="headerlink" title="二项队列"></a>二项队列</h1><p><img src="/2020/10/14/data-structures-and-algorithms-chap011-amortized-analysis/3.png"></p><blockquote><p>build 二项队列的是O(N)<br><img src="/2020/10/14/data-structures-and-algorithms-chap011-amortized-analysis/2.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buletooth5.2-base</title>
      <link href="2020/10/14/buletooth5-2-base/"/>
      <url>2020/10/14/buletooth5-2-base/</url>
      
        <content type="html"><![CDATA[<h1 id="Different-Core"><a href="#Different-Core" class="headerlink" title="Different Core"></a>Different Core</h1><p><img src="/2020/10/14/buletooth5-2-base/1.png"></p><h1 id="Rate-Core-EDR"><a href="#Rate-Core-EDR" class="headerlink" title="Rate Core EDR"></a>Rate Core EDR</h1><p><img src="/2020/10/14/buletooth5-2-base/2.png"></p><h1 id="总体描述"><a href="#总体描述" class="headerlink" title="总体描述"></a>总体描述</h1><p><img src="/2020/10/14/buletooth5-2-base/3.gif"></p><blockquote><p>两种形式 BR(basic rate) 和 LE(low energy)</p></blockquote><p>频率范围是2.400-2.4835 GHz。</p><ul><li>basic Rate <ul><li>BR 721.2kb/s</li><li>EDR 2.1Mb/s</li><li>802.11amp 54mb/s</li></ul></li><li>LE<ul><li>2m/s phy</li><li>等时连接 和 无连接 等时传输</li></ul></li></ul><h1 id="BR-EDR"><a href="#BR-EDR" class="headerlink" title="BR/EDR"></a>BR/EDR</h1><p>跳频收发，多个调频载波</p><h1 id="BR-EDR-generic-packet-structure"><a href="#BR-EDR-generic-packet-structure" class="headerlink" title="BR/EDR generic packet structure"></a>BR/EDR generic packet structure</h1><p><img src="/2020/10/14/buletooth5-2-base/3.png"></p><ul><li><strong>Channel access code</strong>: 所有包都有。这用于识别特定物理信道上的通信，并排除或忽略不同物理信道上碰巧使用物理邻近的相同射频载波的数据包。</li><li><strong>Packet Header</strong>: 大多数包有。BR/EDR数据包结构中没有直接表示或包含与物理链路相关的信息的字段。该信息由包头中携带的逻辑传输地址(LT_ADDR)和信道接入码(CAC)的组合所隐含。BR/EDR数据包报头还携带部分链路控制(LC)协议，该协议在每个逻辑传输上运行(除了在每个逻辑传输上运行共享LC协议的ACL和SCO传输)。</li></ul><ul><li><p><strong>GI or SYNC</strong>：增强数据速率(EDR)分组在有效载荷之前具有保护时间和同步序列。这是用于调制方案的物理层改变的字段。</p></li><li><p><strong>The payload header</strong>：有效负载报头存在于支持多个逻辑链路的逻辑传输上的所有数据包中。有效载荷报头包括用于路由有效载荷的逻辑链路标识符字段，以及指示有效载荷主体长度的字段。一些包类型还在包有效载荷的末尾包括一个循环冗余校验，用于检测接收到的包中的大多数错误。当AES-CCM加密启用时，ACL数据包在循环冗余校验之前包含一个消息完整性检查(MIC)。 EDR数据包在循环冗余校验后有一个尾部。</p></li><li><p> <strong>payload body</strong> ：用于传输用户数据。该数据的解释取决于逻辑传输和逻辑链路标识符。对于ACL逻辑传输，链路管理器协议(LMP)消息和L2CAP信号与来自应用程序的一般用户数据一起在数据包有效负载主体中传输。</p></li></ul><h1 id="BR-EDR-physical-channels"><a href="#BR-EDR-physical-channels" class="headerlink" title="BR/EDR physical channels"></a>BR/EDR physical channels</h1><p>在BR/EDR核心系统中，对等设备使用共享物理信道进行通信。为了实现这一点，它们的收发器需要同时调谐到相同的PHY频率，并且它们需要在彼此的标称范围内。</p><ul><li><p>其中两个物理通道：the basic piconet channel and adapted piconet channel，用于连接的设备之间的通信，并且与特定的微微网相关联。</p></li><li><p>其他BR/EDR物理信道用于发现(查询扫描信道)和连接(寻呼扫描信道)蓝牙设备。设备使用同步扫描物理信道来获得关于无连接从属广播物理链路的定时和频率信息，或者恢复当前微微网时钟</p></li><li><p>蓝牙设备在任何给定时间只能使用一个蓝牙/EDR物理信道。为了支持多个并发操作，该器件在通道之间使用时分复用。这样，蓝牙设备似乎在几个微微网中同时工作，并且是可发现和可连接的。</p></li><li><p>每当蓝牙设备与物理信道的定时、频率和接入码同步时，它就被称为“连接”到该信道(无论它是否主动参与信道上的通信)。蓝牙规范假设设备在任何时候都只能连接到一个物理信道。高级设备可能能够同时连接到一个以上的物理通道，但规范并不认为这是可能的</p></li></ul><h2 id="basic-piconet-channel"><a href="#basic-piconet-channel" class="headerlink" title="basic piconet channel"></a>basic piconet channel</h2><ul><li><p>基本微微网信道用于正常操作期间连接的设备之间的通信</p></li><li><p>基本微微网信道的特征在于通过PHY信道跳跃的伪随机序列。跳跃序列对于微微网是唯一的，并且由主设备的蓝牙设备地址确定。跳频序列中的相位由主机的蓝牙时钟决定。所有参与微微网的蓝牙设备都与信道在时间和空间上同步。</p></li><li><p>信道被分成时隙，其中每个时隙对应于一个PHY跳频。连续跳跃对应于不同的PHY跳跃频率。时隙根据微微网主设备的蓝牙时钟进行编号。分组由参与微微网的蓝牙设备发送，该微微网排列成从时隙边界开始。每个包以信道接入码开始，信道接入码来自微微网主设备的蓝牙设备地址。</p></li><li><p>基本微微网信道可以由任意数量的蓝牙设备共享，仅受微微网主设备上可用资源的限制。只有一个设备是微微网主设备，所有其他设备都是微微网从设备。所有通信都在主设备和从设备之间进行。微微网信道上的从属设备之间没有直接通信。然而，微微网内可以支持的逻辑传输的数量是有限制的。这意味着，虽然共享一个信道的蓝牙设备的数量没有理论上的限制，但是可以主动参与与主设备交换数据的这些设备的数量是有限的。</p></li></ul><h2 id="Adapted-piconet-channel"><a href="#Adapted-piconet-channel" class="headerlink" title="Adapted piconet channel"></a>Adapted piconet channel</h2><p>适配的微微网信道在两个方面不同于基本微微网信道。首先，从机发射的频率与它的主机在前一次发射中使用的频率相同。换句话说，频率不会在主数据包和后续从数据包之间重新计算。第二，适配的微微网信道可以基于少于全部79个频率。许多频率可以通过被标记为“未使用”而被排除在跳跃模式之外。其余79个频率包括在内。这两个序列是相同的，除了每当基本伪随机跳频序列选择一个未使用的频率时，它被从已使用的集合中选择的一个替代所代替。所使用的频率集合可以在相同的适配微微网信道上的不同物理链路之间变化。</p><h2 id="Inquiry-scan-channel"><a href="#Inquiry-scan-channel" class="headerlink" title="Inquiry scan channel"></a>Inquiry scan channel</h2><p>为了发现设备，使用了查询扫描通道。可发现设备在其查询扫描通道上监听查询请求，然后发送对该请求的响应。为了让设备发现其他设备，它以伪随机方式迭代(跳跃)所有可能的查询扫描信道频率，在每个频率上发送查询请求并监听任何响应。</p><blockquote><p>调频 慢<br>并使用接入码来区分使用不同物理信道的两个共处一地的设备偶尔占用相同的射频。</p></blockquote><h2 id="Page-scan-channel"><a href="#Page-scan-channel" class="headerlink" title="Page scan channel"></a>Page scan channel</h2><p>寻呼扫描信道使用从扫描设备的蓝牙设备地址导出的访问码来识别信道上的通信。寻呼扫描信道使用比基本和适配微微网信道的跳频速率更慢的跳频速率。跳跃选择算法使用扫描设备的蓝牙设备时钟作为输入。</p><blockquote><p>使用其寻呼扫描信道的设备保持被动，直到它从另一个蓝牙设备接收到寻呼请求。这由页面扫描通道访问码来识别。然后，这两个设备将按照页面过程建立连接。寻呼过程成功结束后，两个设备都切换到基本微微网信道，其特征是寻呼设备为主设备。</p></blockquote><h1 id="Commnnications"><a href="#Commnnications" class="headerlink" title="Commnnications"></a>Commnnications</h1><h2 id="PICONET-topology"><a href="#PICONET-topology" class="headerlink" title="PICONET topology"></a>PICONET topology</h2><p>任何时候使用蓝牙/EDR控制器创建链路，它都在微微网的上下文中。每条链路连接两个设备，称为“主设备”和“从设备”。<strong>微微网由单个主设备(称为微微网的主设备)和链接到它的所有从设备(称为微微网中的从设备)组成</strong>。连接的BR/EDR设备通过与公共时钟同步和跳频序列在同一物理信道上通信。公共(微微网)时钟与微微网的主设备的蓝牙时钟相同，并且跳跃序列是从主设备的时钟和主设备的蓝牙设备地址导出的(不同的跳跃序列可以用于不同的从设备)。</p><p><img src="/2020/10/14/buletooth5-2-base/4.png"></p><blockquote><p>展示了一个示例拓扑，展示了下面描述的许多体系结构特性。设备A是以设备B、C、D、E为从的微微网中的主设备(用阴影区表示，称为微微网A)。示出了另外三个微微网:a)一个以设备F为主设备(称为微微网F)和设备E、G、H为从设备的微微网，b)一个以设备D为主设备(称为微微网D)和设备J为从设备的微微网，以及c)一个以设备M为主设备(称为微微网M)和设备E为从设备、多个设备N为从设备的微微网。</p></blockquote><blockquote><p>在微微网A中有两个物理信道。设备B和C使用基本微微网物理信道(由蓝色外壳表示)，因为它们不支持自适应跳频。设备D和E能够支持自适应跳频，并且正在使用自适应微微网物理信道(由红色外壳表示)。设备A能够自适应跳频，并根据哪个从设备被寻址，在两个物理信道上以时分复用为基础工作。</p></blockquote><blockquote><p>微微网D和微微网F都只使用一个基本的微微网物理信道(分别由青色和品红色外壳表示)。在微微网D的情况下，这是因为设备J不支持自适应跳频模式。虽然设备D支持自适应跳频，但它不能在这个微微网中使用它。在微微网F中，设备F不支持自适应跳频，因此不能在这个微微网中使用。</p></blockquote><blockquote><p>微微网M(由橙色外壳表示)使用自适应微微网物理信道上的无连接从属广播物理链路向包括E和N在内的许多从属设备发送简档广播数据</p></blockquote><blockquote><p>设备K显示在与其他设备相同的位置。它目前不是微微网的成员，但它向其他蓝牙设备提供服务。它当前正在侦听其查询扫描物理通道(由绿色外壳表示)，等待来自另一个设备的查询请求。</p></blockquote><blockquote><p>设备L显示在与其他设备相同的位置。它当前不是微微网的成员，但是当前正在监听它的同步扫描物理信道(由棕色外壳表示)，等待来自另一个设备的同步训练。</p></blockquote><h2 id="OPERATIONAL-PROCEDURES-AND-MODES"><a href="#OPERATIONAL-PROCEDURES-AND-MODES" class="headerlink" title="OPERATIONAL PROCEDURES AND MODES"></a>OPERATIONAL PROCEDURES AND MODES</h2><blockquote><p>蓝牙设备的典型操作模式是连接到其他蓝牙设备(在微微网中)，并与这些蓝牙设备交换数据。由于蓝牙是一种自组织无线通信技术，因此有许多操作过程可以形成微微网，以便进行后续通信。过程和模式应用于体系结构中的不同层，因此设备可以同时参与多个这些过程和模式。</p></blockquote><h3 id="Inquiry-discovering-procedure"><a href="#Inquiry-discovering-procedure" class="headerlink" title="Inquiry (discovering) procedure"></a>Inquiry (discovering) procedure</h3><blockquote><p>蓝牙设备使用查询过程来发现附近的设备，或者被其本地的设备发现。调查程序是不对称的。试图找到附近其他设备的蓝牙设备被称为查询设备，并主动发送查询请求。可被发现的蓝牙设备被称为可发现设备，并监听这些查询请求并发送响应。查询过程为查询请求和响应使用特殊的物理通道。查询设备和可发现设备都可能已经连接到微微网中的其他蓝牙设备。任何花费在查询或占用查询扫描物理信道上的时间都需要与现有逻辑传输上的服务质量承诺的需求相平衡。尽管在查询和查询响应信息的交换过程中可能会考虑存在一个临时物理链路，但是查询过程并不使用物理信道之上的任何体系结构层。</p></blockquote><h3 id="Paging-connecting-procedure"><a href="#Paging-connecting-procedure" class="headerlink" title="Paging (connecting) procedure"></a>Paging (connecting) procedure</h3><p>用于形成连接的过程是非对称的，并且要求一个蓝牙设备执行寻呼(连接)过程，而另一个蓝牙设备是可连接的(寻呼扫描)。该过程是有针对性的，因此寻呼过程仅由一个指定的蓝牙设备响应。</p><h3 id="Connected-mode"><a href="#Connected-mode" class="headerlink" title="Connected mode"></a>Connected mode</h3><p>通过BR/EDR控制器成功连接后，两个设备都连接到一个微微网物理信道，设备之间有一条物理链路，并且有默认的ACL-C、ACL-U、ASBC和ASB-U逻辑链路。其中两条链路(ACL-C和ASB-C)传输LMP控制协议，对于链路管理器上面的层是不可见的。ACL-U链路传输L2CAP信令协议和任何多路复用的L2CAP尽力而为信道。ASB-U链路传输广播给微微网上所有从站的L2CAP信道。通常指的是默认的ACL逻辑传输，可以通过上下文来解析，但通常指的是默认的ACL-U逻辑链路。</p><h1 id="BR-EDR-Controller"><a href="#BR-EDR-Controller" class="headerlink" title="BR/EDR Controller"></a>BR/EDR Controller</h1><h2 id="SCOPE"><a href="#SCOPE" class="headerlink" title="SCOPE"></a>SCOPE</h2><blockquote><p>蓝牙设备工作在未经许可的2.4 GHz ISM(工业科学医学)频段。跳频收发器用于对抗干扰和衰落。定义了两种调制模式。一种强制模式，称为基本速率，使用整形的二进制调频调制来最小化收发器的复杂性。一种称为增强数据速率的可选模式使用PSK调制，有两种变体:π/4-DQPSK和8DPSK。所有调制模式的符号速率为1兆字节/秒。基本速率的总空中数据速率为1兆字节/秒，使用8DPSK的增强数据速率为2兆字节/秒，使用8DPSK的增强数据速率为3兆字节/秒。</p></blockquote><blockquote><p>两种模式都使用时分双工(TDD)方案。该规范定义了蓝牙无线电对基本速率和增强数据速率模式的要求。</p></blockquote><h2 id="Fre"><a href="#Fre" class="headerlink" title="Fre"></a>Fre</h2><p><img src="/2020/10/14/buletooth5-2-base/5.png"></p><h2 id="BR"><a href="#BR" class="headerlink" title="BR"></a>BR</h2><h3 id="modulation-characteristics"><a href="#modulation-characteristics" class="headerlink" title="modulation characteristics"></a>modulation characteristics</h3><blockquote><p>FSK调制是载波的频率随信息符号成正比的一种调制方式，当发送信息符号1时发射频率向上搬移fdHz，当发送信息符号-1时发射频率向下搬移fdHz。频率的突发切换会引起较大的带外频谱旁瓣，为了减小瞬时相变进而减小带外辐射一般将信息符号先预调制滤波器再进行频率调制。<br><img src="/2020/10/14/buletooth5-2-base/6.png"></p></blockquote><p><img src="/2020/10/14/buletooth5-2-base/7.png"></p><blockquote><p>调制是GFSK(高斯频移键控)，带宽比特周期乘积BT=0.5。调制指数应在0.28和0.35之间。二进制1应由正频率偏差表示，二进制0应由负频率偏差表示。符号定时应小于20 ppm。</p></blockquote><blockquote><p>对于蓝牙协议，调制指数在0.28-0.35之间， 据上面公式可以求出其峰值频率偏移在140kHz到175kHz之间。调制指数反映了一个比特时间内允许的相位变化量。</p></blockquote><blockquote><p>不考虑调制成型滤波器情况下，可以看出当调制指数为0.5时，一个码元符号信号相位变化pi/2；当调制指数为1时，一个码元符号信号相位变化pi。<br><img src="/2020/10/14/buletooth5-2-base/8.png"></p></blockquote><h3 id="数据包的最大频偏"><a href="#数据包的最大频偏" class="headerlink" title="数据包的最大频偏"></a>数据包的最大频偏</h3><p><img src="/2020/10/14/buletooth5-2-base/9.png"></p><h2 id="EDR"><a href="#EDR" class="headerlink" title="EDR"></a>EDR</h2><blockquote><p>增强数据速率模式的一个关键特征是数据包中的调制模式发生了变化。[第二卷]第二部分第6.1节中定义的接入码和数据包报头以1兆字节/秒的基本速率传输。GFSK调制模式，而后续的同步序列、有效载荷和尾部序列使用增强数据速率PSK调制模式传输。</p></blockquote><h3 id="modulation-characteristics-1"><a href="#modulation-characteristics-1" class="headerlink" title="modulation characteristics"></a>modulation characteristics</h3><blockquote><p>在接入码和包头传输期间，应使用基本速率GFSK调制模式。在同步序列、有效载荷和尾部序列的传输过程中，应使用数据速率为2 Mb/s或可选的3 Mb/s的PSK型调制。以下小节说明了该传输的PSK调制。</p></blockquote><blockquote><p>为2 Mb/s传输定义的PSK调制格式应为π/4旋转差分编码四进制相移键控(π/4-DQPSK)。为3 Mb/s传输定义的PSK调制格式应为差分编码8进制相移键控(8DPSK)。调制应采用平方根升余弦脉冲整形，以产生等效的低通信息承载信号v(t)。变送器的输出应为带通信号，可表示为<br><img src="/2020/10/14/buletooth5-2-base/10.png"></p></blockquote><h4 id="Diff-phase"><a href="#Diff-phase" class="headerlink" title="Diff phase"></a>Diff phase</h4><blockquote><p>对于M进制调制，二进制数据流{bn}，n=1，2，3，…N，应映射到相应的复值信号点序列{Sk}，k=1，2，…N/log2(M)。M=4适用于2 Mb/s，M=8适用于3 Mb/s。如表3.4和表3.5所示，应采用灰色编码。如果二进制数据流的长度N不是log2(M)的整数倍，则序列{Sk}的最后一个符号应通过在适当的长度上附加数据零来形成。信号点Sk应由下式定义:<br><img src="/2020/10/14/buletooth5-2-base/11.png"></p></blockquote><blockquote><p>对于2 Mb/s传输，二进制输入bk和相位φk之间的关系应在表3.4中定义，对于3 Mb/s传输，在表3.5中定义。<br><img src="/2020/10/14/buletooth5-2-base/12.png"></p></blockquote><h4 id="pulse"><a href="#pulse" class="headerlink" title="pulse"></a>pulse</h4><blockquote><p>低通等效信息承载信号v(t)应根据下式产生<br><img src="/2020/10/14/buletooth5-2-base/13.png"><br>其中符号周期T应为1秒</p></blockquote><blockquote><p>对应于脉冲整形滤波器的平方根升余弦脉冲p(t)的频谱P(f)为:<br><img src="/2020/10/14/buletooth5-2-base/14.png"></p></blockquote><h4 id="ACC-RMD-DEVM"><a href="#ACC-RMD-DEVM" class="headerlink" title="ACC (RMD DEVM )"></a>ACC (RMD DEVM )</h4><blockquote><p>调制精度的测量利用跟踪载波频率漂移的差分误差矢量幅度(DEVM)。附录C给出了DEVM的定义以及DEVM均方根和峰值测量的推导</p></blockquote><blockquote><p>DEVM应在同步序列和数据包的有效载荷部分进行测量，而不是在尾部符号进行测量。对于每个调制方法和每个测量载波频率，DEVM测量在总共200个不重叠的块上进行，其中每个块包含50个符号。</p></blockquote><blockquote><p>根据[第二卷]第二部分第6.9节和[第二卷]第二部分第6.10节的定义，传输的数据包应为每种调制方法支持的最长数据包类型。</p></blockquote><blockquote><p>DEVM是用平方根升余弦滤波器测量的，滚降为0.4，3 dB带宽为500千赫。</p></blockquote><ul><li>RMS DEVM<br>对于π/4-DQPSK，任何测量块的均方根DEVM不得超过0.20，对于8DPSK，不得超过0.13。</li><li>99% DEVM<br>99% DEVM(定义为99%测量符号的DEVM值较低的DEVM值)对于π/4-DQPSK不得超过0.30，对于8DPSK不得超过0.20。</li><li>Peak DEVM<br>π/4-DQPSK的峰值DEVM不得超过0.35，8DPSK不得超过0.25。</li></ul><h4 id="发送频谱"><a href="#发送频谱" class="headerlink" title="发送频谱"></a>发送频谱</h4><p><img src="/2020/10/14/buletooth5-2-base/15.png"></p><h4 id="频率误差容忍"><a href="#频率误差容忍" class="headerlink" title="频率误差容忍"></a>频率误差容忍</h4><p><img src="/2020/10/14/buletooth5-2-base/16.png"></p><h4 id="APPENDIX-C-估计差分机的感知误差（DEVM）"><a href="#APPENDIX-C-估计差分机的感知误差（DEVM）" class="headerlink" title="APPENDIX C 估计差分机的感知误差（DEVM）"></a>APPENDIX C 估计差分机的感知误差（DEVM）</h4><p><img src="/2020/10/14/buletooth5-2-base/17.png"></p><blockquote><p>接受估计DEVM<br><img src="/2020/10/14/buletooth5-2-base/18.png"></p></blockquote><blockquote><p>RMS DEVM<br><img src="/2020/10/14/buletooth5-2-base/19.png"></p></blockquote><blockquote><p>PEAK DEVM<br><img src="/2020/10/14/buletooth5-2-base/20.png"></p></blockquote><h1 id="Baseband-Specifcation"><a href="#Baseband-Specifcation" class="headerlink" title="Baseband Specifcation"></a>Baseband Specifcation</h1><h2 id="General-Description-包头"><a href="#General-Description-包头" class="headerlink" title="General Description (包头)"></a>General Description (包头)</h2><blockquote><p>BR<br><img src="/2020/10/14/buletooth5-2-base/21.png"></p></blockquote><blockquote><p>EDR<br><img src="/2020/10/14/buletooth5-2-base/22.png"></p></blockquote><h3 id="BLUETOOTH-CLOCK"><a href="#BLUETOOTH-CLOCK" class="headerlink" title="BLUETOOTH CLOCK"></a>BLUETOOTH CLOCK</h3><blockquote><p>每个蓝牙设备都应该有一个本机时钟，该时钟应该来自自由运行的参考时钟。可以向参考时钟添加偏移，以使本机时钟与其他非蓝牙系统同步。为了与其他蓝牙设备同步，使用了偏移，当将其添加到本机时钟时，提供相互同步的临时蓝牙时钟。需要注意的是，蓝牙时钟和一天中的时间没有关系；因此，它可以被初始化为任何值。这个钟大约有一天的周期。如果时钟是用计数器实现的，则需要一个28位的计数器，该计数器应该以228-1的速度循环。最低有效位(LSB)应以312.5 μs为单位(即半个时隙)，时钟速率为3.2千赫。</p></blockquote><p><img src="/2020/10/14/buletooth5-2-base/23.png"></p><blockquote><p>蓝牙系统中有四个重要的周期:312.5 μs、625 μs、1.25 ms、1.28s；这些周期分别对应于定时器位CLK0、CLK1、CLK2和CLK12，</p></blockquote><h3 id="蓝牙设备寻址"><a href="#蓝牙设备寻址" class="headerlink" title="蓝牙设备寻址"></a>蓝牙设备寻址</h3><blockquote><p>蓝牙设备寻址应为每个蓝牙设备分配一个唯一的48位蓝牙设备地址(ADDR)。该地址应为根据第8.2节(“通用地址”)创建的48位扩展唯一标识符(EUI-48)。</p></blockquote><p><img src="/2020/10/14/buletooth5-2-base/24.png"></p><h3 id="ACCESS-CODES"><a href="#ACCESS-CODES" class="headerlink" title="ACCESS CODES"></a>ACCESS CODES</h3><blockquote><p>在蓝牙系统中，物理信道上的所有传输都以接入码开始。<br>定义了三种不同的访问代码，</p></blockquote><ul><li>DAC设备访问代码、</li><li>CAC通道访问代码、</li><li>IAC查询访问代码</li></ul><h2 id="PHYSICAL-CHANNEL"><a href="#PHYSICAL-CHANNEL" class="headerlink" title="PHYSICAL CHANNEL"></a>PHYSICAL CHANNEL</h2><blockquote><p>主设备和从设备交替传输时，使用时分双工方案，见图2.1。数据包开始应与插槽开始对齐。数据包可能会超过五个时隙。<br><img src="/2020/10/14/buletooth5-2-base/25.png"></p></blockquote><h1 id="GENERAL-FORMAT"><a href="#GENERAL-FORMAT" class="headerlink" title="GENERAL FORMAT"></a>GENERAL FORMAT</h1><h2 id="BR-1"><a href="#BR-1" class="headerlink" title="BR"></a>BR</h2><blockquote><p>访问码是72或68位，报头是54位。有效载荷范围从零到最大2790位。定义了不同的数据包类型。一个数据包可能只包含:缩短的接入码(参见6.5.1.1部分)、接入码和包头、接入码、包头和有效载荷。<br><img src="/2020/10/14/buletooth5-2-base/26.png"></p></blockquote><h2 id="EDR-1"><a href="#EDR-1" class="headerlink" title="EDR"></a>EDR</h2><blockquote><p>接入码和包报头在格式和调制方面与基本速率包相同。增强数据速率数据包在包头后有一个保护时间和同步序列。有效载荷后面是两个尾部符号。第6.6节中定义了保护时间、同步序列和拖车。<br><img src="/2020/10/14/buletooth5-2-base/27.png"></p></blockquote><h2 id="位序"><a href="#位序" class="headerlink" title="位序"></a>位序</h2><p>X=3 b0b1b2=110</p><h2 id="ACESS-CODE"><a href="#ACESS-CODE" class="headerlink" title="ACESS CODE"></a>ACESS CODE</h2><blockquote><p>每个包都以一个访问码开始。如果有一个包头，访问码是72位长，否则访问码是68位长，被称为缩短访问码。缩短的访问代码不包含尾部。该接入码用于同步、DC偏移补偿和识别。访问码标识物理信道上交换的所有数据包:在同一物理信道上发送的所有数据包前面都有相同的访问码。在该设备的接收机中，滑动相关器与接入码相关，并在超过阈值时触发。该触发信号用于确定接收时序。缩短的访问码用于寻呼和查询。在这种情况下，接入码本身被用作信令消息，并且既不存在报头也不存在有效载荷。<br><img src="/2020/10/14/buletooth5-2-base/28.png"></p></blockquote><blockquote><p>CAC由前导码、同步字和尾部组成，总长度为72位。当用作没有报头的独立消息时，DAC和IAC不包括尾部位，长度为68位。</p></blockquote><blockquote><p>types<br><img src="/2020/10/14/buletooth5-2-base/29.png"></p></blockquote><blockquote></blockquote><h2 id="同步字"><a href="#同步字" class="headerlink" title="同步字"></a>同步字</h2><blockquote><p>同步字是基于一个(64，30)删除的分组码和一个64位全长度伪随机噪声序列的叠加(逐位异或)。删除代码保证了基于不同地址的同步字之间的大汉明距离()。PN序列改善了接入码的自相关特性。以下步骤描述了同步字的生成方式:</p></blockquote><ol><li>Generate information sequence;</li><li> XOR this with the “information covering” part of the PN overlay<br>sequence;</li><li> Generate the codeword;</li><li> XOR the codeword with all 64 bits of the PN overlay sequence;</li></ol><p><img src="/2020/10/14/buletooth5-2-base/30.png"></p><h3 id="伪随机噪声序列生成"><a href="#伪随机噪声序列生成" class="headerlink" title="伪随机噪声序列生成"></a>伪随机噪声序列生成</h3><h2 id="包头"><a href="#包头" class="headerlink" title="包头"></a>包头</h2><p><img src="/2020/10/14/buletooth5-2-base/31.png"></p><blockquote><p>包括HEC在内的总报头由18位组成，见图6.8，并以1/3的前向纠错率(未显示，但在第7.4节中有描述)进行编码，产生54位报头。LT_ADDR和类型字段应首先发送LSB。</p></blockquote><h1 id="playload-format"><a href="#playload-format" class="headerlink" title="playload format"></a>playload format</h1><blockquote><p>在有效载荷中，区分了两个字段:同步数据字段和异步数据字段。ACL数据包只有异步数据</p></blockquote><blockquote><p>在仅在基本速率模式下受支持的SCO中，同步数据字段具有固定长度，仅由同步数据主体部分组成。没有有效负载标头。在基本速率电子稳定控制系统中，同步数据字段由两部分组成:同步数据体和循环冗余码。没有有效负载标头。在增强型数据速率电子稳定控制系统中，同步数据字段由五个部分组成:保护时间、同步序列、同步数据体、循环冗余码和尾部。没有有效负载标头。</p></blockquote><blockquote><p>1.增强的数据速率保护时间。对于增强的数据速率分组，保护时间被定义为从报头的最后一个GFSK符号的结尾开始，到同步序列的参考符号的开头结束的时间段。保护时间的长度应在4.75秒和5.25秒之间。</p></blockquote><blockquote><p>2.增强数据速率同步序列对于增强数据速率数据包，同步序列开始时的符号定时应在数据包报头最后一个GFSK符号的符号定时的s内。同步序列的长度为11秒(11个DPSK符号)，由一个参考符号(任意相位)后跟十个DPSK符号组成。DPSK符号之间的相位变化(如图6.11所示)应为<br><img src="/2020/10/14/buletooth5-2-base/32.png"></p></blockquote><blockquote><p>Sref是参考符号。ϕ1是参考符号和第一DPSK符号S1之间的相位变化。ϕk是第k-1个符号Sk-1和第k个符号Sk之间的相位变化</p></blockquote><blockquote><p>注意:同步序列可以通过使用调制器将数据与生成同步序列的位预挂起来生成。对于π/4-DQPSK，用于产生同步序列的比特序列是0，1，1，1，0，1，1，1，0，1，1，1，1，1，1，0，1，0，1，0，1，0，1，0，1。对于8DPSK，用于生成同步序列的比特序列是0，1，0，1，1，1，0，1，0，1，1，0，1，0，1，1，1，1，1，1，1，0，1，0，1，0，0，1，0，0，1，0，1，0。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Buletooth </category>
          
          <category> EDR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fpga-base</title>
      <link href="2020/10/12/fpga-base/"/>
      <url>2020/10/12/fpga-base/</url>
      
        <content type="html"><![CDATA[<h1 id="过程时序控制"><a href="#过程时序控制" class="headerlink" title="过程时序控制"></a>过程时序控制</h1><h2 id="延迟控制"><a href="#延迟控制" class="headerlink" title="延迟控制#"></a>延迟控制#</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">a<span class="token operator">=</span><span class="token number">#5</span> b<span class="token punctuation">;</span>等价于<span class="token keyword">begin</span>temp<span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token number">#5</span> a<span class="token operator">=</span>temp<span class="token punctuation">;</span> <span class="token comment">//过5ns后赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件控制-posedge、negedge"><a href="#事件控制-posedge、negedge" class="headerlink" title="事件控制 posedge、negedge"></a>事件控制 posedge、negedge</h2><p>posedge、negedge</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">@r rega<span class="token operator">=</span>regb <span class="token comment">//寄存器r 的变化控制</span>@（<span class="token keyword">posedge</span> clock） <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="隐含事件-always"><a href="#隐含事件-always" class="headerlink" title="隐含事件 always@(*)"></a>隐含事件 always@(*)</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token operator">===</span> <span class="token important">always</span>    y<span class="token operator">=</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> d<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">myfunction</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="电平敏感控制-wait"><a href="#电平敏感控制-wait" class="headerlink" title="电平敏感控制 wait"></a>电平敏感控制 wait</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">begin</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token operator">!</span>enable<span class="token punctuation">)</span> <span class="token number">#10</span> a<span class="token operator">=</span>b<span class="token punctuation">;</span><span class="token number">#10</span> c<span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内部时序的等价与repeat"><a href="#内部时序的等价与repeat" class="headerlink" title="内部时序的等价与repeat"></a>内部时序的等价与repeat</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">a<span class="token operator">=</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> @ <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> b<span class="token punctuation">;</span><span class="token comment">//等价于</span><span class="token keyword">begin</span>tmp<span class="token operator">=</span>b<span class="token punctuation">;</span>@<span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当clk上升沿结束</span>@<span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> a<span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="语句块-并行执行-fork-join-串行执行-begin-end"><a href="#语句块-并行执行-fork-join-串行执行-begin-end" class="headerlink" title="语句块 并行执行:(fork join )  串行执行:(begin end)"></a>语句块 并行执行:(fork join )  串行执行:(begin end)</h2><h1 id="结构化"><a href="#结构化" class="headerlink" title="结构化"></a>结构化</h1><h2 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h2><p>初始化</p><h2 id="always"><a href="#always" class="headerlink" title="always"></a>always</h2><p>仿真一直执行</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always </span>#half_period arg<span class="token operator">=~</span>arg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="任务和函数"><a href="#任务和函数" class="headerlink" title="任务和函数"></a>任务和函数</h2><ul><li>函数返回一个值 任务不返回</li><li>函数需要输入参数input，但是没有out inout，任务不一定</li><li>函数目的通过返回的一个值来响应输入，任务是支持多个目标，计算多个值</li><li>函数无任何时间控制语句 #、@、wait</li></ul><h1 id="层次化"><a href="#层次化" class="headerlink" title="层次化"></a>层次化</h1><h2 id="模块化和模块例化"><a href="#模块化和模块例化" class="headerlink" title="模块化和模块例化"></a>模块化和模块例化</h2><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">ffnand</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>qbar<span class="token punctuation">,</span>preset<span class="token punctuation">,</span>clear<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">output</span> q<span class="token punctuation">,</span>qbar<span class="token punctuation">;</span> <span class="token keyword">input</span> preset<span class="token punctuation">,</span>clear<span class="token punctuation">;</span><span class="token keyword">nand</span> <span class="token function">g1</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>qbar<span class="token punctuation">,</span>preset<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//例化两个nand门</span>      <span class="token function">g2</span><span class="token punctuation">(</span>qbar<span class="token punctuation">,</span>q<span class="token punctuation">,</span>clear<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span class="token keyword">module</span> ffnand_wave<span class="token punctuation">;</span><span class="token keyword">wire</span> out1<span class="token punctuation">,</span> out2<span class="token punctuation">;</span>         <span class="token keyword">reg</span> in1<span class="token punctuation">,</span> in2<span class="token punctuation">;</span>             <span class="token keyword">parameter</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>ffnand <span class="token function">ff</span><span class="token punctuation">(</span>out1<span class="token punctuation">,</span>out2<span class="token punctuation">,</span>in1<span class="token punctuation">,</span>in2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">initial</span> <span class="token keyword">begin</span>   #d in1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> in2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   #d in1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   #d in2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   #d in2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h1><blockquote><p>一般分为三种类型：</p></blockquote><ul><li>Moore型状态机：下一状态只由当前状态决定，即次态=f(现状，输入)，输出=f（现状）；( 输入决定状态转移)</li><li>Mealy型状态机：下一状态不但与当前状态有关，还与当前输入值有关，即次态=f(现状，输入)，输出=f（现状，输入）；</li><li>混合型状态机。( 输入输出决定状态转移)</li></ul><h1 id="计数器模块化设计"><a href="#计数器模块化设计" class="headerlink" title="计数器模块化设计"></a>计数器模块化设计</h1><p><img src="/2020/10/12/fpga-base/1.png"></p><h1 id="LES-LUT"><a href="#LES-LUT" class="headerlink" title="LES LUT"></a>LES LUT</h1><p>LEs :logic Elements；逻辑单bai元，和计du算FPGA的门数有关：<br>1 LUT4（四输入查找zhi表）dao＋DFF（D触发器）== 1 LE(Altera)</p>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi-LSIG</title>
      <link href="2020/10/08/wifi-lsig/"/>
      <url>2020/10/08/wifi-lsig/</url>
      
        <content type="html"><![CDATA[<h1 id="detect-packaget"><a href="#detect-packaget" class="headerlink" title="detect packaget"></a>detect packaget</h1><ul><li><p>L-STF 0.8us的序列 10次 带宽40M采样率40M 0.8us的sampleLength为 0.8us/(1/40M)=32 </p></li><li><p>LenLTSF=32*10=320</p></li><li><p>利用相关峰值来找到检测包，得到包起点</p></li><li><p>LSTF 利用两个相邻码元相位差 估计频偏 ，然后修正<br><img src="/2020/10/08/wifi-lsig/1.png"><br><img src="/2020/10/08/wifi-lsig/2.png"></p></li><li><p>LSTF~LLTF相关峰值提取时间同步估计</p></li><li><p>利用LLTF给出细频偏</p></li></ul><h1 id="信道估计、噪声"><a href="#信道估计、噪声" class="headerlink" title="信道估计、噪声"></a>信道估计、噪声</h1><ul><li><p>先解调，幅度算信道估计</p></li><li><p>平均算噪声</p></li></ul><h1 id="检测格式-Lsig-HTsig"><a href="#检测格式-Lsig-HTsig" class="headerlink" title="检测格式 Lsig~ HTsig"></a>检测格式 Lsig~ HTsig</h1>]]></content>
      
      
      <categories>
          
          <category> wifi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap010-Algorithms-technique</title>
      <link href="2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/"/>
      <url>2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95">贪婪算法</a><ul><li><a href="#%E8%B0%83%E5%BA%A6%E9%97%AE%E9%A2%98">调度问题</a><ul><li><a href="#%E5%8D%95%E5%A4%84%E7%90%86%E5%99%A8">单处理器</a></li><li><a href="#%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8">多处理器</a></li></ul></li><li><a href="#huffman-%E7%BC%96%E7%A0%81-%E4%BF%A1%E6%81%AF%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81">Huffman 编码 （信息压缩编码）</a></li><li><a href="#%E8%BF%91%E4%BC%BC%E8%A3%85%E7%AE%B1">近似装箱</a><ul><li><a href="#%E8%81%94%E6%9C%BA%E7%AE%97%E6%B3%95">联机算法</a></li><li><a href="#%E8%84%B1%E6%9C%BA%E7%AE%97%E6%B3%95">脱机算法</a></li></ul></li></ul></li><li><a href="#%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95divide-and-conquer">分治算法(divide and conquer)</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4">运行时间</a></li><li><a href="#%E6%9C%80%E8%BF%91%E7%82%B9%E9%97%AE%E9%A2%98">最近点问题</a></li><li><a href="#%E9%80%89%E6%8B%A9%E9%97%AE%E9%A2%98">选择问题</a></li><li><a href="#%E7%AE%97%E6%B3%95%E6%94%B9%E8%BF%9B%E4%B8%A4%E4%B8%AAn%E4%BD%8D%E6%95%B0%E5%AD%97%E7%9B%B8%E4%B9%98%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95">算法改进（两个N位数字相乘、矩阵乘法）</a><ul><li><a href="#%E4%B8%A4%E4%B8%AAn%E4%BD%8D%E6%95%B0%E5%AD%97%E7%9B%B8%E4%B9%98">两个N位数字相乘</a></li><li><a href="#%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95">矩阵乘法</a></li></ul></li></ul></li><li><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a><ul><li><a href="#%E7%94%A8%E8%A1%A8%E4%BB%A3%E6%9B%BF%E9%80%92%E5%BD%92">用表代替递归</a><ul><li><a href="#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%E4%BE%8B%E5%AD%90">斐波那契数列例子</a></li><li><a href="#%E9%80%92%E6%8E%A8%E5%85%B3%E7%B3%BB%E5%BC%8F%E4%BE%8B%E5%AD%90">递推关系式例子</a></li></ul></li><li><a href="#%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AE%89%E6%8E%92">矩阵乘法的顺序安排</a><ul><li><a href="#catalan%E6%95%B0">Catalan数</a></li><li><a href="#%E6%9C%80%E4%BC%98%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">最优二叉查找树</a></li></ul></li><li><a href="#%E6%89%80%E6%9C%89%E7%82%B9%E5%AF%B9%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%9D%E7%A6%BB">所有点对的最短距离</a></li></ul></li><li><a href="#%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%AE%97%E6%B3%95">随机化算法</a><ul><li><a href="#%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90">随机数生成</a></li><li><a href="#%E8%B7%B3%E8%B7%83%E8%A1%A8">跳跃表</a></li><li><a href="#%E7%B4%A0%E6%80%A7%E6%B5%8B%E8%AF%95%E5%A4%A7%E6%95%B0prime">素性测试（大数prime)</a></li></ul></li><li><a href="#%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95">回溯算法</a><ul><li><a href="#%E6%94%B6%E8%B4%B9%E5%85%AC%E8%B7%AF%E9%87%8D%E5%BB%BA%E9%97%AE%E9%A2%98">收费公路重建问题</a></li><li><a href="#%E5%8D%9A%E5%BC%88%E6%A0%91">博弈树</a></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#101-%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6%E5%B7%A5%E4%BD%9C%E5%B9%B3%E5%9D%87%E6%9C%80%E5%B0%8F%E5%AE%8C%E6%88%90">10.1 多处理器作业调度工作平均最小完成</a></li><li><a href="#102-%E4%BD%9C%E4%B8%9A-%E5%AE%8C%E6%88%90%E6%9C%80%E5%A4%A7%E5%8C%96-%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95">10.2 作业 完成最大化 (贪婪算法)</a></li><li><a href="#103-huffman%E7%BC%96%E7%A0%81">10.3 huffman编码</a></li><li><a href="#106-huffman%E7%AE%97%E6%B3%95%E5%9C%A8%E6%9C%89%E5%BA%8F%E6%97%B6-%E5%8F%AA%E9%9C%80%E8%A6%81on%E6%97%B6%E9%97%B4">10.6 huffman算法在有序时 只需要O(N)时间</a></li><li><a href="#1017-%E6%9C%80%E8%BF%91%E7%82%B9%E7%AE%97%E6%B3%95%E5%88%86%E6%B2%BB">10.17 最近点算法（分治）</a></li><li><a href="#1031-%E6%9C%80%E5%B0%91%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">10.31 最少矩阵乘法 （动态规划）</a></li><li><a href="#1032-%E6%9C%80%E4%BC%98%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">10.32 最优二叉查找树</a></li><li><a href="#1041%E6%94%B6%E8%B4%B9%E5%85%AC%E8%B7%AF%E9%87%8D%E5%BB%BA%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95">10.41收费公路重建（回溯算法）</a></li></ul></li></ul><!-- /TOC --><h1 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h1><p>在每个阶段选择最好的 （局部最优）</p><ul><li>找零钱<br>这里说的某种性质就是：可换的硬币的单位（或者称 面值）是 c 的幂，也就是 c0，c1，… ，ck ,其中整数 c&gt;1，k&gt;=1</li></ul><blockquote><p>这里需要强调一点： 硬币面值满足上面的性质时贪心算法一定能产生最优解，但是不满足时，也有可能有最优解。比如，面值为1，5，10，20，50，100时，贪心找零也一定有最优解。</p></blockquote><ul><li>交通</li></ul><h2 id="调度问题"><a href="#调度问题" class="headerlink" title="调度问题"></a>调度问题</h2><h3 id="单处理器"><a href="#单处理器" class="headerlink" title="单处理器"></a>单处理器</h3><blockquote><p>作业平均完成时间最小， （考虑非预占调度：开始一个作业，就必须完成 ）</p></blockquote><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/1.png"></p><ul><li>1号调度：（15+23+26+36）/4=25</li><li>2号调度：（3+11+21+36）/4=71/4=17.75</li></ul><blockquote><p>这个结果说明操作系统调度程序一般优先级赋予更短作业</p></blockquote><h3 id="多处理器"><a href="#多处理器" class="headerlink" title="多处理器"></a>多处理器</h3><blockquote><p>作业平均完成时间最小</p></blockquote><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/2.png"><br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/3.png"></p><blockquote><p>最小完成时间<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/4.png"></p></blockquote><h2 id="Huffman-编码-（信息压缩编码）"><a href="#Huffman-编码-（信息压缩编码）" class="headerlink" title="Huffman 编码 （信息压缩编码）"></a>Huffman 编码 （信息压缩编码）</h2><h2 id="近似装箱"><a href="#近似装箱" class="headerlink" title="近似装箱"></a>近似装箱</h2><blockquote><p>把物品装到最少的箱子里</p></blockquote><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/5.png"></p><h3 id="联机算法"><a href="#联机算法" class="headerlink" title="联机算法"></a>联机算法</h3><blockquote><p>很容易看出，联机装箱不存在最优，因为不知道何时结束。<img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/6.png">，前面的M个小项可以装到 M/2个箱子里，但是后面的M个大箱，都要占一个箱子</p></blockquote><blockquote><p>任意联机算法至少使用4/3最优箱子</p></blockquote><blockquote><p>下面是三种简单算法保证箱子不多于两倍的最优</p></blockquote><ul><li>下项适合算法 （next fit)<ul><li>处理任何物品，检查能否装进刚刚物品的同一个箱子</li><li>绝不超过两倍最优，但是有许多达到差不多2倍</li><li>O(N)完成</li></ul></li><li>首项适合算法（first fit)<ul><li>扫描之前的箱子有没有可以放入的地方<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/7.png"></li><li><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/8.png">，大量均匀分布的时候，first fit 比最优多20%，完全可以接受</li><li>一般是O(N^2) 可以是O(NlogN)</li></ul></li><li>最佳适合算法 （best fit）<ul><li>不是找到第一个可以放的，而是找最满的存放位置<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/9.png"></li><li>由于一般的坏情况是一样的，所以不会有什么改善</li><li>一般是O(N^2) 可以是O(NlogN)</li></ul></li></ul><h3 id="脱机算法"><a href="#脱机算法" class="headerlink" title="脱机算法"></a>脱机算法</h3><blockquote><p>将各项物品排序，把最大的放在最前面，然后在用首次适合或者最近适合算法</p></blockquote><ul><li><p>首次适合递减算法（first fit decreasing）</p><ul><li><p>所有权重大于1/3的项放入前M个，其余物品的项数最多为M-1(前面M个箱子每箱最多两个，一定小于M-1物品，不然就被放进去了）</p></li><li><p>M个最优，首次适合不超过 （4M+1)/3<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/10.png"></p></li><li><p>均匀输入 期望θ(根号M)</p></li></ul></li></ul><h1 id="分治算法-divide-and-conquer"><a href="#分治算法-divide-and-conquer" class="headerlink" title="分治算法(divide and conquer)"></a>分治算法(divide and conquer)</h1><ul><li>分：递归解决较小的问题</li><li>治：从子问题的解构建原问题的解</li></ul><blockquote><p>传统上至少两个递归调用才叫分治算法</p></blockquote><blockquote><p>最大子序和O(NlogN) 、树遍历、归并排序和快速排序</p></blockquote><h2 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h2><blockquote><p>T(N)=2T(N/2)+O(N) 每个问题是原问题的一半加上O(N)的附加工作  解为O(NlogN)</p></blockquote><h2 id="最近点问题"><a href="#最近点问题" class="headerlink" title="最近点问题"></a>最近点问题</h2><p>找一对距离最近的点（x1,y1) (x2,y2)</p><ul><li>一般方法 算N(N-1)个距离</li><li>先按x排序O(NlogN), 把点集分一半 Pl、Pr 那么最小距离只有Dl、Dr、Dc两个点集的最小<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/12.png"></li></ul><blockquote><p>计算dc</p></blockquote><ul><li><p>蛮力，计算在最小距离的中心带<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/11.png"></p></li><li><p>计算 y之前的距离<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/13.png"></p></li></ul><blockquote><p>问题是 y坐标还需要排序, O(Nlog^2N),可以保留两个表，按照x排序和y排序的 P Q 每次传入的是Pl Ql</p></blockquote><h2 id="选择问题"><a href="#选择问题" class="headerlink" title="选择问题"></a>选择问题</h2><p>找第k个最小元素</p><ul><li>五数中值法 选枢纽元<ul><li>N个元素分成 N/5组 5个元素的组，忽略剩余元素</li><li>找每组的中值  N/5个中值</li><li>找N/5个中值的中值 作为枢纽元</li></ul></li><li>这样的快速选择方法运行时间为O(N)</li></ul><h2 id="算法改进（两个N位数字相乘、矩阵乘法）"><a href="#算法改进（两个N位数字相乘、矩阵乘法）" class="headerlink" title="算法改进（两个N位数字相乘、矩阵乘法）"></a>算法改进（两个N位数字相乘、矩阵乘法）</h2><h3 id="两个N位数字相乘"><a href="#两个N位数字相乘" class="headerlink" title="两个N位数字相乘"></a>两个N位数字相乘</h3><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/14.png"></p><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/15.png"></p><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/16.png"></p><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/17.png"></p><blockquote><p>很少使用，对于小的N开销大，对大的N有更好的算法，分治策略 体现</p></blockquote><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>一般情况 O(N^3)</p><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/18.png"></p><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/19.png"></p><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/20.png"></p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="用表代替递归"><a href="#用表代替递归" class="headerlink" title="用表代替递归"></a>用表代替递归</h2><h3 id="斐波那契数列例子"><a href="#斐波那契数列例子" class="headerlink" title="斐波那契数列例子"></a>斐波那契数列例子</h3><blockquote><p>编译器常常不能正确对待递归，需要把递归写成非递归，让后者把子问题答案系统记录在一个表内。</p></blockquote><blockquote><p>低效的斐波那契递归<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/21.png"></p></blockquote><blockquote><p>低效理由  指数增长的时间<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/23.png"></p></blockquote><blockquote><p>线性时间的非递归<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/22.png"></p></blockquote><h3 id="递推关系式例子"><a href="#递推关系式例子" class="headerlink" title="递推关系式例子"></a>递推关系式例子</h3><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/24.png"></p><blockquote><p>同样的低效递归<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/25.png"></p></blockquote><blockquote><p>O(N^2)的非递归 可以很简单变为O(N) 保存上次计算结果不用每次计算<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/26.png"></p></blockquote><h2 id="矩阵乘法的顺序安排"><a href="#矩阵乘法的顺序安排" class="headerlink" title="矩阵乘法的顺序安排"></a>矩阵乘法的顺序安排</h2><blockquote><p>不同的顺序相差10倍 <img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/27.png"></p></blockquote><h3 id="Catalan数"><a href="#Catalan数" class="headerlink" title="Catalan数"></a>Catalan数</h3><blockquote><p>指数增长， 对于大的N 穷举搜索不可能，<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/28.png"></p></blockquote><blockquote><p>最优次数<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/29.png"><br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/30.png"></p></blockquote><h3 id="最优二叉查找树"><a href="#最优二叉查找树" class="headerlink" title="最优二叉查找树"></a>最优二叉查找树</h3><blockquote><p>总存取时间期望最小<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/31.png"></p></blockquote><blockquote><p>三种可能的二叉查找树（注意是二叉查找）<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/32.png"><br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/33.png"></p></blockquote><ul><li>第一个树 是贪婪算法，（如果不是二叉查找树，可以用Huffman）</li><li>第二个树 理想平衡查找树，但是 他们都不是最优，可以看到第三个树，</li></ul><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/34.png"></p><ul><li>动态规划  可以看到 每深一层 后面的所有概率就需要加一次<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/35.png"></li></ul><blockquote><p>迭代过程  第一次算a<del>a的最佳，第二次算a</del>am最佳（C12=min((C11+C32+∑12),(C10+C22+∑12)=min(0.22+0+0.4),(0+0.18+0.4)=0.58,三次算a~and 的最佳依次类推<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/36.png"></p></blockquote><h2 id="所有点对的最短距离"><a href="#所有点对的最短距离" class="headerlink" title="所有点对的最短距离"></a>所有点对的最短距离</h2><h1 id="随机化算法"><a href="#随机化算法" class="headerlink" title="随机化算法"></a>随机化算法</h1><blockquote><p>对于作业程序，只能判断一半的程序</p></blockquote><blockquote><p>算法的运行时间不依赖特定的输入，只依赖于所出现的随机数。快速排序选枢纽元</p></blockquote><blockquote><p>对任意输入，程序运行有一个期望时间，而不是最坏最好、平均</p></blockquote><h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><blockquote><p>伪随机 满足大部分随机数统计性质</p></blockquote><blockquote><p>真正的随机要像硬币，一枚硬币抛完是正面，第二枚抛正面的概率还是1/2</p></blockquote><blockquote><p>第一种：线性模同余  x0就是Seed （不能是0）<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/37.png"></p></blockquote><ul><li><p>Lehmer建议选 M=2^31-1 对这个数据 取A=48271 也为了快捷算余数</p></li><li><p>调试一个使用 随机数的程序 最好置 x0=1使得总是出现相同的随机序列</p></li><li><p>返回一个（0,1）可以通过/M得到 </p></li></ul><blockquote><p>下面程序有溢出问题<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/38.png"></p></blockquote><ul><li>可以用Long 但是会减慢计算速度 ，可以用小trick<img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/39.png"></li></ul><blockquote><p>不是所有库都那么好，很多基于以下的发生器，这些发生器总是在奇偶之间交替x，容易在低k位产生2^K循环，（Java 和 Unix使用 drand48 48bit线性同余 只返回高32 避免 低阶bit循环<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/40.png"></p></blockquote><blockquote><p>需要大量独立 无关联的密码系统 用java.security.SecureRandom 好一点</p></blockquote><h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><blockquote><p>O(logN)期望时间支持查找插入</p></blockquote><blockquote><p>简单链表、链接链表<img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/41.png"><br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/42.png"><br>相当于折半查找，但是插入是个问题</p></blockquote><blockquote><p>定义每个点的链数为阶数  跳跃表里面1/2的一阶节点 1/2^i 个i阶节点，插入的时候，我们按照这个概率分布随机选择节点节点，比如抛硬币直到正面作为其阶数<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/44.png"></p></blockquote><h2 id="素性测试（大数prime"><a href="#素性测试（大数prime" class="headerlink" title="素性测试（大数prime)"></a>素性测试（大数prime)</h2><blockquote><p>给出测试素性的多项式时间算法，如果判定不是素数，那一定不是素数，是素数，有极大的可能是素数，不依赖于输入</p></blockquote><blockquote><p>费马定理<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/45.png"></p></blockquote><blockquote><p>验证素数方法 检验2^N-1==1(mod N)满足 这个等式不是素数的  最小N=341,但是这样总是有固定的数逃过检测 </p></blockquote><blockquote><p>我们可以随机A 存在一些数但是还是有大部分A选择他们可以骗过算法，这些数叫<strong>Carnichael数</strong>，不是素数但是对所有与N互素的0&lt;A&lt;N, 都满足A^(N-1)=1( mod N)。这样的数最小是561</p></blockquote><blockquote><p>定理2：<img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/46.png"></p></blockquote><blockquote><p>同时满足这两个，已经证明对于任意大的N 至多(N-9)/4是错误的 ，运行50次独立随机试验，出错概率不会超过1/4^50 =2^-100</p></blockquote><h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><blockquote><p>穷举搜索的巧妙实现</p></blockquote><h2 id="收费公路重建问题"><a href="#收费公路重建问题" class="headerlink" title="收费公路重建问题"></a>收费公路重建问题</h2><p>N个点,可以算出D=N（N-1)/2个距离</p><ul><li><p>开始时 D=15 说明 N=6  将10从D中删除<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/47.png"></p></li><li><p>剩下最大的距离是8 x2=2 或者 x5=8 都可以，这是对称的，不影响解<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/48.png"></p></li><li><p>7的D剩下最大的 x4=7 x2=3 ，然后计算其他的距离x6-x4、x5-x4 是不是也在D中，发现x4、x2都满足，那先选择x4 后面可以回溯<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/49.png"></p></li><li><p>之后 MaxD=6 x3=6或 x2=4 但是对于两种情况，D里面都没解，回溯到之前，选择x2=3而不是x4=7<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/51.png"></p></li><li><p>继续在x4=6 x3=4 之间选择，这时候 只有x4=6是可能的<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/52.png"></p></li><li><p>之后只有最后一个点 刚好使得D为空集<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/53.png"></p></li><li><p>决策树<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/54.png"></p></li></ul><blockquote><p>实现思路<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/55.png"></p></blockquote><ul><li>初始化  X1=0 Xn=MaxD  第一个插入点 对称，无所谓在哪，然后开始回溯 从2~n-2<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/56.png"></li></ul><h2 id="博弈树"><a href="#博弈树" class="headerlink" title="博弈树"></a>博弈树</h2><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="10-1-多处理器作业调度工作平均最小完成"><a href="#10-1-多处理器作业调度工作平均最小完成" class="headerlink" title="10.1 多处理器作业调度工作平均最小完成"></a>10.1 多处理器作业调度工作平均最小完成</h2><p>作业排序然后 一个个分配给处理器</p><h2 id="10-2-作业-完成最大化-贪婪算法"><a href="#10-2-作业-完成最大化-贪婪算法" class="headerlink" title="10.2 作业 完成最大化 (贪婪算法)"></a>10.2 作业 完成最大化 (贪婪算法)</h2><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/58.png"></p><blockquote><p>思路 通过排序每次安排收益最大的到固定时间 </p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap10</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem10_2 * @Author: Wibur * @Description: * @Date: Created in 14:23 2020/10/9 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem10_2</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">getMostBenefit</span><span class="token punctuation">(</span><span class="token class-name">HomeWork</span><span class="token punctuation">[</span><span class="token punctuation">]</span> h<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxEndTime<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>h<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endTime<span class="token operator">&gt;</span>maxEndTime<span class="token punctuation">)</span><span class="token punctuation">{</span>                maxEndTime<span class="token operator">=</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endTime<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrTime<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxEndTime<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endTime<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arrTime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    arrTime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                    <span class="token comment">//s.append(h[i]);</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrTime<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>arrTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HomeWork</span><span class="token punctuation">[</span><span class="token punctuation">]</span> h<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HomeWork</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HomeWork</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HomeWork</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HomeWork</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HomeWork</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HomeWork</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Problem10_2</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem10_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getMostBenefit</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HomeWork</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomeWork</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> cost<span class="token punctuation">;</span>    <span class="token keyword">int</span> endTime<span class="token punctuation">;</span>    <span class="token class-name">HomeWork</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> endTime<span class="token punctuation">,</span><span class="token keyword">int</span> cost<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cost<span class="token operator">=</span>cost<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>endTime<span class="token operator">=</span>endTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">HomeWork</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cost<span class="token punctuation">,</span>h<span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-3-huffman编码"><a href="#10-3-huffman编码" class="headerlink" title="10.3 huffman编码"></a>10.3 huffman编码</h2><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/57.png"></p><h2 id="10-6-huffman算法在有序时-只需要O-N-时间"><a href="#10-6-huffman算法在有序时-只需要O-N-时间" class="headerlink" title="10.6 huffman算法在有序时 只需要O(N)时间"></a>10.6 huffman算法在有序时 只需要O(N)时间</h2><pre class="line-numbers language-none"><code class="language-none">维护两个队列Q1和Q2。 Q1将按排序顺序存储单节点树，而Q2将按排序顺序存储多节点树。将初始的单节点树放在Q1上，首先使最小的权重树排队。最初，Q2为空。检查Q1和Q2的每一个的前两个条目，并使两个最小的条目出队。 （这需要轻松实现ADT的扩展。）合并树并将结果放在Q2的末尾。继续此步骤，直到Q1为空，并且Q2中只剩下一棵树。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-17-最近点算法（分治）"><a href="#10-17-最近点算法（分治）" class="headerlink" title="10.17 最近点算法（分治）"></a>10.17 最近点算法（分治）</h2><blockquote><p>三种算法</p></blockquote><ul><li>暴力法，计算每个点之间距离</li><li>分治法，左右 中间用x优化（中间部分可以优化 带）</li><li>分治法， 左右 中间用x、y优化 选择点数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap10</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">chap09<span class="token punctuation">.</span>graph2<span class="token punctuation">.</span></span><span class="token class-name">AbstractVertex</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Pipe</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Probelem10_17 * @Author: Wibur * @Description:最近点算法 分治 * @Date: Created in 19:57 2020/10/9 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Probelem10_17</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrX<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>pArrX<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Random</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> upBound<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> downBound<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pArrX<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>upBound<span class="token operator">-</span>downBound<span class="token punctuation">)</span><span class="token operator">+</span>downBound<span class="token punctuation">;</span>            pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>upBound<span class="token operator">-</span>downBound<span class="token punctuation">)</span><span class="token operator">+</span>downBound<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrY<span class="token punctuation">;</span>        pArrY<span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span>pArrX<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CmpPointX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>pArrY<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CmpPointY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d<span class="token operator">=</span><span class="token function">distance</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Probelem10_17</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Probelem10_17</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getMinDistance</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getMinDistanceByX</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getMinDistanceByXY</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span>pArrY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getMinDistanceByXY</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrX<span class="token punctuation">,</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrY<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getMinDistanceByXY</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getMinDistanceByXY</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrX<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">distance</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> center<span class="token operator">=</span><span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> dLeftMin<span class="token operator">=</span><span class="token function">getMinDistanceByXY</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span>left<span class="token punctuation">,</span>center<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> dRightMin<span class="token operator">=</span><span class="token function">getMinDistanceByXY</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span>center<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> dCenterMin<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dLeftMin<span class="token punctuation">,</span>dRightMin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> centerX<span class="token operator">=</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>center<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>pArrX<span class="token punctuation">[</span>center<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> t<span class="token punctuation">;</span>        <span class="token keyword">int</span> leftInCenter<span class="token punctuation">,</span>rightInCenter<span class="token punctuation">;</span>        <span class="token comment">//下标遍历到左边第二个即可，第一个没意义，还可能导致leftInCenter=-1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>leftInCenter <span class="token operator">=</span> center<span class="token punctuation">;</span> leftInCenter <span class="token operator">&gt;</span><span class="token number">0</span> <span class="token punctuation">;</span> leftInCenter<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>centerX <span class="token operator">-</span> pArrX<span class="token punctuation">[</span>leftInCenter<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&gt;</span> dCenterMin<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>rightInCenter <span class="token operator">=</span> center<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> rightInCenter <span class="token operator">&lt;</span>right <span class="token punctuation">;</span> rightInCenter<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>rightInCenter<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> centerX <span class="token operator">&gt;</span> dCenterMin<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span>leftInCenter<span class="token punctuation">,</span>center<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">CmpPointY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span>center<span class="token punctuation">,</span>rightInCenter<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CmpPointY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> center<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span>leftInCenter <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> center<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>right <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">-</span>pArrX<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">&gt;</span>dCenterMin<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                t<span class="token operator">=</span><span class="token function">distance</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&lt;</span>dCenterMin<span class="token punctuation">)</span><span class="token punctuation">{</span>                    dCenterMin<span class="token operator">=</span>t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dCenterMin<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getMinDistanceByX</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrX<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getMinDistanceByX</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getMinDistanceByX</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrX<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">distance</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> dLeftMin<span class="token operator">=</span><span class="token function">getMinDistanceByX</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span>left<span class="token punctuation">,</span><span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> dRightMin<span class="token operator">=</span><span class="token function">getMinDistanceByX</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">,</span><span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> dCenterMin<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dLeftMin<span class="token punctuation">,</span>dRightMin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> centerX<span class="token operator">=</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">+</span>pArrX<span class="token punctuation">[</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> t<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span>left <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>centerX<span class="token operator">-</span>pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">&gt;</span>dCenterMin<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>right<span class="token operator">+</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>right <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">-</span>centerX<span class="token operator">&gt;</span>dCenterMin<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                t<span class="token operator">=</span><span class="token function">distance</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&lt;</span>dCenterMin<span class="token punctuation">)</span><span class="token punctuation">{</span>                    dCenterMin<span class="token operator">=</span>t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dCenterMin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getMinDistance</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArrX<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> minD<span class="token operator">=</span><span class="token class-name">Double</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">double</span> t<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>pArrX<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> pArrX<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token operator">=</span><span class="token function">distance</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pArrX<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&lt;</span>minD<span class="token punctuation">)</span>                    minD<span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minD<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token class-name">Point</span> pArrX<span class="token punctuation">,</span> <span class="token class-name">Point</span> pArrX1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">.</span>x<span class="token operator">-</span>pArrX1<span class="token punctuation">.</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>pArrX<span class="token punctuation">.</span>y<span class="token operator">-</span>pArrX1<span class="token punctuation">.</span>y<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CmpPointX</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p1<span class="token punctuation">,</span> <span class="token class-name">Point</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CmpPointY</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p1<span class="token punctuation">,</span> <span class="token class-name">Point</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y<span class="token punctuation">,</span>p2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-31-最少矩阵乘法-（动态规划）"><a href="#10-31-最少矩阵乘法-（动态规划）" class="headerlink" title="10.31 最少矩阵乘法 （动态规划）"></a>10.31 最少矩阵乘法 （动态规划）</h2><blockquote><p>有一个最优(大范围）用最优（小范围）迭代的表达式</p></blockquote><ul><li>分布迭代法 </li><li>动态规划法：注意下标处理的细节<br><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/30.png"></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap10</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem10_31 * @Author: Wibur * @Description: 最少矩阵乘法 （动态规划） * @Date: Created in 11:36 2020/10/11 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem10_31</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> upBound<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>upBound<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Problem10_31</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem10_31</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">minMutiply</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span> <span class="token punctuation">[</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastChange<span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">optMatrix</span><span class="token punctuation">(</span> nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> lastChange <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> m<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"    "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> lastChange<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"    "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//public static void optMatrix(int []c,)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> INFINITY <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token comment">/**     * Compute optimal ordering of matrix multiplication.     * c contains the number of columns for each of the n matrices.     * c[ 0 ] is the number of rows in matrix 1.     * The minimum number of multiplications is left in m[ 1 ][ n ].     * Actual ordering is computed via another procedure using lastChange.     * m and lastChange are indexed starting at 1, instead of 0.     * Note: Entries below main diagonals of m and lastChange     * are meaningless and uninitialized.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">optMatrix</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> c<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> lastChange <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> c<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> left<span class="token operator">++</span> <span class="token punctuation">)</span>            m<span class="token punctuation">[</span> left <span class="token punctuation">]</span><span class="token punctuation">[</span> left <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">)</span>   <span class="token comment">// k is right - left</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;=</span> n <span class="token operator">-</span> k<span class="token punctuation">;</span> left<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// For each position</span>                <span class="token keyword">int</span> right <span class="token operator">=</span> left <span class="token operator">+</span> k<span class="token punctuation">;</span>                m<span class="token punctuation">[</span> left <span class="token punctuation">]</span><span class="token punctuation">[</span> right <span class="token punctuation">]</span> <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">long</span> thisCost <span class="token operator">=</span> m<span class="token punctuation">[</span> left <span class="token punctuation">]</span><span class="token punctuation">[</span>  i <span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> right <span class="token punctuation">]</span>                            <span class="token operator">+</span> c<span class="token punctuation">[</span> left <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> c<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> c<span class="token punctuation">[</span> right <span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span> thisCost <span class="token operator">&lt;</span> m<span class="token punctuation">[</span> left <span class="token punctuation">]</span><span class="token punctuation">[</span> right <span class="token punctuation">]</span> <span class="token punctuation">)</span>  <span class="token comment">// Update min</span>                    <span class="token punctuation">{</span>                        m<span class="token punctuation">[</span> left <span class="token punctuation">]</span><span class="token punctuation">[</span> right <span class="token punctuation">]</span> <span class="token operator">=</span> thisCost<span class="token punctuation">;</span>                        lastChange<span class="token punctuation">[</span> left <span class="token punctuation">]</span><span class="token punctuation">[</span> right <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minMutiply</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">minMutiply</span><span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minMutiply</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">C</span><span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">C</span><span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token class-name">C</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">*</span><span class="token class-name">C</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> minM<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>right <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token operator">=</span><span class="token function">minMutiply</span><span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">minMutiply</span><span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">C</span><span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token class-name">C</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token class-name">C</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&lt;</span>minM<span class="token punctuation">)</span><span class="token punctuation">{</span>                minM<span class="token operator">=</span>tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minM<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-32-最优二叉查找树"><a href="#10-32-最优二叉查找树" class="headerlink" title="10.32 最优二叉查找树"></a>10.32 最优二叉查找树</h2><p><img src="/2020/10/03/data-structures-and-algorithms-chap010-algorithms-technique/35.png"></p><ul><li>分布迭代法 </li><li>动态规划法：注意下标处理的细节</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap10</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName BestSearhTree * @Author: Wibur * @Description: * @Date: Created in 21:44 2020/10/12 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BestSearhTree</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0.22f</span><span class="token punctuation">,</span><span class="token number">0.18f</span><span class="token punctuation">,</span><span class="token number">0.20f</span><span class="token punctuation">,</span><span class="token number">0.05f</span><span class="token punctuation">,</span><span class="token number">0.25f</span><span class="token punctuation">,</span><span class="token number">0.02f</span><span class="token punctuation">,</span><span class="token number">0.08f</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastChange<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">minSearchTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>m<span class="token punctuation">,</span>lastChange<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> m<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"    "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> lastChange<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"    "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> INFINITY <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">minSearchTree</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastChange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>c<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//k=right-left</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span>n<span class="token operator">-</span>k <span class="token punctuation">;</span> left<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> right<span class="token operator">=</span>left<span class="token operator">+</span>k<span class="token punctuation">;</span>                m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>INFINITY<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">float</span> tmp<span class="token operator">=</span><span class="token function">getM</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">getM</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">sum</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&lt;</span>m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        lastChange<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                        m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">getM</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&gt;</span>right<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-41收费公路重建（回溯算法）"><a href="#10-41收费公路重建（回溯算法）" class="headerlink" title="10.41收费公路重建（回溯算法）"></a>10.41收费公路重建（回溯算法）</h2><blockquote><p>如何回溯，恢复回溯后的数据</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap10</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">chap04<span class="token punctuation">.</span></span><span class="token class-name">Problem4_11</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem10_41 * @Author: Wibur * @Description:收费公路重建 * @Date: Created in 10:06 2020/10/13 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem10_41</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distance<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">//不能放重复的值</span><span class="token comment">//        TreeSet&lt;Integer&gt; bts=new TreeSet&lt;&gt;();</span><span class="token comment">//        initialProcessTree(bts,distance);</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initialProcessList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token function">getLength</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result<span class="token operator">=</span><span class="token function">turnPike</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>list<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">turnPike</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deleteMax</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        x<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">deleteMax</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">remove</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">place</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>list<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> distance<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dmax<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> found<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>distance<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        dmax<span class="token operator">=</span><span class="token function">findMax</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isInDistanceForAll</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>distance<span class="token punctuation">,</span>dmax<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>dmax<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>left<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            found<span class="token operator">=</span><span class="token function">place</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>distance<span class="token punctuation">,</span>n<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>found<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>left<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    distance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    distance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>found <span class="token operator">&amp;&amp;</span> <span class="token function">isInDistanceForAll</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>distance<span class="token punctuation">,</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            x<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>left<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            found<span class="token operator">=</span><span class="token function">place</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>distance<span class="token punctuation">,</span>n<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>found<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>left<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    distance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    distance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> found<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isInDistanceForAll</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> distance<span class="token punctuation">,</span><span class="token keyword">int</span> dmax<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftHigh<span class="token operator">=</span>left<span class="token punctuation">;</span>        <span class="token keyword">int</span> rightHigh<span class="token operator">=</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>left<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>distance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                leftHigh<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>distance<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                rightHigh<span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>leftHigh<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            distance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>rightHigh<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            distance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>dmax<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxindex<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&gt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>                max<span class="token operator">=</span>tmp<span class="token punctuation">;</span>                maxindex<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">deleteMax</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxindex<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&gt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>                    max<span class="token operator">=</span>tmp<span class="token punctuation">;</span>                    maxindex<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>maxindex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initialProcessList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>distance<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initialProcessTree</span><span class="token punctuation">(</span><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> bts<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distance<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>distance<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>distance<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> a<span class="token operator">=</span><span class="token number">1.0f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> b<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1.0f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> c<span class="token operator">=</span><span class="token operator">-</span>distance<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//返回最接近的rint floor 向上去整  ceil向下</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi6-concept</title>
      <link href="2020/09/30/wifi6-concept/"/>
      <url>2020/09/30/wifi6-concept/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>专注于密集用户场景，之前协议 根据<img src="/2020/09/30/wifi6-concept/wifi6-concept%5C1.png">,SNR不变加带宽就加吞吐。ax的设计思想和传统不一样，同带宽情况下</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>协议兼容性：802.11ax要求与以往的802.11a/b/h/n/ac都进行兼容，这也证明了其是第二款同时能工作在2.4G和5G频段下的协议（802.11ac仅工作在5G频段）。故在其数据帧结构和MAC接入协议上，都需要兼容设计，以便于传统协议兼容。</p></li><li><p>更好的节能性，用以增加移动设备的续航能力。</p></li><li><p>更高的传输速率以及覆盖范围：在802.11ax中，更高的速率分别体现在PHY层和MAC层的改进上，其具体改进包含如下：</p><ul><li>提供更高阶的编码组合（MCS10和MCS11）。其中主要是QAM-1024的引入，在802.11ac中，最高阶是256QAM。</li><li>在相同带宽下，802.11ax采用点数更多的FFT（即原始的FFT的4倍大小）。FFT点数越多，说明其子载波数越多，以及子载波的带宽也就越小（带宽从312.5kHz降到78.125kHz。其对应的symbol时间也增加了4倍），从而可以覆盖更远的范围。（覆盖范围与相干带宽有关。只要信道的带宽小于相干带宽的话，那么就是平坦衰落，信号不会受到多径的影响。所以越小的信道带宽，可以覆盖更远的范围）<br><img src="/2020/09/30/wifi6-concept/wifi6-concept%5C2.png"></li><li>引入上行MU-MIMO。在802.11ac中，协议只规定了下行的MU-MIMO。上行还是单个节点独立传输的，而在802.11ax中，上下行都需要支持MU-MIMO。<br><img src="/2020/09/30/wifi6-concept/wifi6-concept%5C3.png"></li><li>引入OFDMA技术。802.11ax设计中参考了LTE中OFDMA的使用，可以让多个用户通过不同子载波资源同时接入信道，提高信道的利用率。不过因为802.11是一个分布式接入的场景，所以802.11ax中的OFDMA实际是比LTE中复杂度要低一些。<br><img src="/2020/09/30/wifi6-concept/wifi6-concept%5C4.png"></li></ul></li></ul><h1 id="OFMDA"><a href="#OFMDA" class="headerlink" title="OFMDA"></a>OFMDA</h1><p><img src="/2020/09/30/wifi6-concept/wifi6-concept%5C4.png"></p><ul><li>OFDM：用户是通过不同时间</li><li>OFDMA：用户通过RU（Resource unit）块</li></ul><h2 id="RU"><a href="#RU" class="headerlink" title="RU"></a>RU</h2><ul><li><p><img src="/2020/09/30/wifi6-concept/wifi6-concept%5C5.png"> </p><ul><li>CBW20 相当于9个人竞争占据全部信道 一个人 26个载波 26*9=234&lt;256</li></ul></li><li><p><img src="/2020/09/30/wifi6-concept/wifi6-concept%5C6.png"> </p><ul><li>DC保护：以中心子载波为核心，一共有7个子载波作为DC保护的，即DC的保护带宽一共是7*78.125kHz=546.875kHz，与原来的一个DC保护（即312.5kHz）是比较接近的。</li><li>Guard Sub-carriers：保护子载波这里指的是信道之间的保护子载波了（比如20MHz信道之间的保护），如上图所示，其选取了左边的6个子载波以及右边的5个子载波作为保护，这点设计是和802.11a的载波设计是一样的，只是子载波的带宽不一样而已。</li><li>Null Sub-carriers：在一些早期的书里面，比如《MIMO-OFDM Wireless Communications with MATLAB》，其中是将Guard Sub-carriers和Null Sub-carriers等价看待的。不过在802.11ax中，Null子载波是指的RU之间的保护间隔，一般是1个子载波。<br><img src="/2020/09/30/wifi6-concept/wifi6-concept%5C7.png"> </li></ul></li><li><p>子载波<br>  <img src="/2020/09/30/wifi6-concept/wifi6-concept%5C8.png"> </p></li></ul><h1 id="上行随机接入（TF，TF-R）"><a href="#上行随机接入（TF，TF-R）" class="headerlink" title="上行随机接入（TF，TF-R）"></a>上行随机接入（TF，TF-R）</h1>]]></content>
      
      
      <categories>
          
          <category> wifi6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi6-simulation</title>
      <link href="2020/09/29/wifi6-simulation/"/>
      <url>2020/09/29/wifi6-simulation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WIFI5-chap2-PHY</title>
      <link href="2020/09/22/wifi5-chap2-phy/"/>
      <url>2020/09/22/wifi5-chap2-phy/</url>
      
        <content type="html"><![CDATA[<h1 id="802-11a"><a href="#802-11a" class="headerlink" title="802.11a"></a>802.11a</h1><h2 id="SIG"><a href="#SIG" class="headerlink" title="SIG"></a>SIG</h2><p>本身通过 BPSK 1/2rate 二进制卷积码（BCC)(其后是交织) ，为了接受最大</p><p><img src="/2020/09/22/wifi5-chap2-phy/1.png"></p><ul><li>速率field（调制和编码）</li><li>Length(八进制被传输数据量) </li><li>保留bit （以后用） </li><li>校验码 （前17bit 偶校验）</li><li>尾bit 6位  0（ 清空编码器和解码器）</li></ul><h2 id="DATA"><a href="#DATA" class="headerlink" title="DATA"></a>DATA</h2><p>一组码元流 每个码元长4us 3.2us OFDM码元、0.8us循环前缀</p><ul><li><p>服务字段   16bit 前7bit扰码器初始化，与解扰器同步。7 bit 设置为0，以便估计接收机扰码器初始状态。 其余9bit保留位，也是0</p></li><li><p>数据字段 </p></li><li><p>尾bit 6bit 0</p></li><li><p>802.11n 127bit 帧同步  </p></li></ul><h2 id="分组编码"><a href="#分组编码" class="headerlink" title="分组编码"></a>分组编码</h2><p>先按照上面的协议产生STF、LTF、SIG 在按照下面对数据字段编码</p><p><img src="/2020/09/22/wifi5-chap2-phy/2.png"></p><ul><li><p>数据bit前面是服务字段，后面6尾部0bit，</p></li><li><p>对整个扩展字段绕码，</p></li><li><p>之后经过1/2rate的 BCC （卷积编码器），编码器限制 长度7</p></li><li><p>已经编码的数据分组有一定数量bit，每组与两个排列进行分组交织。</p></li><li><p>交织器后 调制 </p></li><li><p>插入导频子载波</p></li></ul><h2 id="接受过程"><a href="#接受过程" class="headerlink" title="接受过程"></a>接受过程</h2><ul><li><p>等待一个信号超过阈值启动分组接受。 4us 接受功率大于-82dbm 大于90% (一般会多5~10)</p></li><li><p>处理短训练码 设置AGC、初始化频率纠错和初始定时</p></li><li><p>处理长训练码 得到更精确的频率纠正和定时获取，信道估计</p></li><li><p>接下来4us SIG，接收机遵循和数据相同的码元处理，只是不用解扰器，SIGbit没有被绕码，获取SIGbit，判断校验，错误就恢复空闲，正确，安装信息速率和长度配置。</p></li><li><p>数组字段 如下 去掉GI FFT，用信道估计均衡子载波数据。4个导频子载波来用于相位旋转纠错、频率偏移和码元定时纠错<br><img src="/2020/09/22/wifi5-chap2-phy/3.png"></p></li><li><p>从最近的星座点到权衡信号的bit概率解映射子载波数据、之后解交织器</p></li></ul><h2 id="HT-MF码"><a href="#HT-MF码" class="headerlink" title="HT MF码"></a>HT MF码</h2><h3 id="非HT"><a href="#非HT" class="headerlink" title="非HT"></a>非HT</h3><p>多个发送天线的单个空间流。 传统前导码是单个流，同样的信号可能导致无意的波束成形，而且 L-STF 用于AGC 功率变换大 也会导致饱和</p><blockquote><p>循环移位<br>问题：破除单个空间流与从不同天线传输的信号相关性 破除<br><img src="/2020/09/22/wifi5-chap2-phy/4.png"></p></blockquote><p>前面部分类型</p><h3 id="HT"><a href="#HT" class="headerlink" title="HT"></a>HT</h3><h4 id="HT-SIG1-HT-SIG2"><a href="#HT-SIG1-HT-SIG2" class="headerlink" title="HT-SIG1 HT-SIG2"></a>HT-SIG1 HT-SIG2</h4><p><img src="/2020/09/22/wifi5-chap2-phy/6.png"></p><ul><li><p>HT-SIG1</p><ul><li>MCS 调制编码方案  0<del>7 单流 …… 24</del>31四流 32只用在40MHZ</li><li>CBW 20/40 </li><li>16 bit长度域</li></ul></li><li><p>HT-SIG2</p><ul><li><p>平滑bit （可能削弱信道估计，设为0通知接收机只用未平滑信道估计）</p></li><li><p>非探测bit 0代表发送的是探测分组 （收集Tx波束成形信息、和链路适应信道状态）</p></li><li><p>聚合bit 代表带个MPDU 扩展空间流bit、与Tx波束成型有关</p></li><li><p>两个STBCbit代表 操作维度<br><img src="/2020/09/22/wifi5-chap2-phy/7.png"><br><img src="/2020/09/22/wifi5-chap2-phy/8.png"></p></li><li><p>FEC编码 0 代表BCC 1LDPC</p></li><li><p>短GIbit</p></li><li><p>保留bit 默认1</p></li><li><p>CRC 保护前32位 （HT-SIG1 0<del>23 HT-SIG2 0</del>9<br><img src="/2020/09/22/wifi5-chap2-phy/9.png"></p></li></ul></li></ul><p>通过阈值 旋转 区分 传统服务字段和HT-SIG<br><img src="/2020/09/22/wifi5-chap2-phy/5.png"></p><h4 id="HT-STF"><a href="#HT-STF" class="headerlink" title="HT-STF"></a>HT-STF</h4><p>HT-STF 添加额外字段 得到MIMO更精确的AGC </p><h4 id="HT-LTF"><a href="#HT-LTF" class="headerlink" title="HT-LTF"></a>HT-LTF</h4><p>由正交映射矩阵生成，HT长训练频率矩阵乘以正交映射矩阵的一个值</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>可以用 低密度奇偶校验 替代BCC （二进制卷积码）</p><h1 id="VHT"><a href="#VHT" class="headerlink" title="VHT"></a>VHT</h1><h2 id="VHT-SIG"><a href="#VHT-SIG" class="headerlink" title="VHT-SIG"></a>VHT-SIG</h2><p><img src="/2020/09/22/wifi5-chap2-phy/12.png"></p><h1 id="STBC-空时块编码"><a href="#STBC-空时块编码" class="headerlink" title="STBC 空时块编码"></a>STBC 空时块编码</h1><p>2<em>2 的AP  1</em>1的设备</p><p>单一发送天线设备输出功率17dbm  同样输出功率天线的两个天线 就是14dbm，STBC需要额外的信道估计长训练</p>]]></content>
      
      
      <categories>
          
          <category> wifi5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap09-Graph</title>
      <link href="2020/09/22/data-structures-and-algorithms-chap09-graph/"/>
      <url>2020/09/22/data-structures-and-algorithms-chap09-graph/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#graph-definition">Graph Definition</a><ul><li><a href="#%E4%BE%8B%E5%AD%90">例子</a></li><li><a href="#%E5%9B%BE%E8%A1%A8%E7%A4%BA">图表示</a></li></ul></li><li><a href="#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F">拓扑排序</a></li><li><a href="#%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95">最短路径算法</a><ul><li><a href="#%E6%97%A0%E6%9D%83%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-%E5%8F%AF%E4%BB%A5%E6%8A%8A%E6%89%80%E6%9C%89%E6%9D%83%E8%B5%8B%E5%80%BC%E4%B8%BA1">无权最短路径 （可以把所有权赋值为1）</a></li><li><a href="#%E6%9C%89%E6%9D%83%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84">有权最短路径</a><ul><li><a href="#%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95">贪婪算法</a></li></ul></li><li><a href="#%E5%85%B7%E6%9C%89%E8%B4%9F%E8%BE%B9%E5%80%BC%E7%9A%84%E5%9B%BE">具有负边值的图</a></li><li><a href="#%E6%97%A0%E5%9C%88%E5%9B%BE">无圈图</a></li><li><a href="#%E6%89%80%E6%9C%89%E7%82%B9%E5%AF%B9%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84">所有点对最短路径</a></li><li><a href="#%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E4%BE%8B%E5%AD%90%E8%AF%8D%E6%A2%AF%E4%B8%80%E7%B3%BB%E5%88%97%E5%8D%95%E5%AD%97%E6%AF%8D%E6%9B%BF%E6%8D%A2-">最短路径例子（词梯，一系列单字母替换 ）</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E6%B5%81%E9%97%AE%E9%A2%98">网络流问题</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98">简单最大流问题</a></li><li><a href="#%E8%B4%AA%E5%A9%AA%E7%AE%97%E6%B3%95%E7%9A%84%E9%97%AE%E9%A2%98">贪婪算法的问题</a></li></ul></li><li><a href="#%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">最小生成树</a><ul><li><a href="#prime%E7%AE%97%E6%B3%95">Prime算法</a></li><li><a href="#%E6%9C%80%E5%B0%8F%E7%9A%84%E8%BE%B9">最小的边</a></li></ul></li><li><a href="#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2">深度优先搜索</a></li></ul><!-- /TOC --><h1 id="Graph-Definition"><a href="#Graph-Definition" class="headerlink" title="Graph Definition"></a>Graph Definition</h1><ul><li>G=(V,E) 由  vertex Edge组成</li><li>顶点 :vertex </li><li>边 Edge ,边 由 点对(v1,v2)决定 ，点对有序有向图。</li><li>边可以 还有 weight</li><li>路径 PATH v1、v2、……、vn  length长 N-1<ul><li>环：顶点到顶点的边  路径0（特殊情况 ，一般讨论无环）</li><li>简单路径 所以顶点互异（无环的，第一个节点可以和最后一个节点相同）</li></ul></li><li>圈：长度至少为1的路径 v1=vn (无向图的边需要互异)</li><li>DAG：有向无圈图 DAG （direction acyclic graph）</li><li>连通的：无向图每一点到其他店都有一条路径</li><li>强连通的: 有向图每一点到其他店都有一条路径</li><li>弱连通的：有向图去掉方向每一点到其他店都有一条路径</li><li>完全图：每一对顶点间都有存在一条边的图</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>航空系统，每个机场是一个顶点、边代表一个直达航线，边的权可以是距离、费用、时间等等。 </p><h2 id="图表示"><a href="#图表示" class="headerlink" title="图表示"></a>图表示</h2><p><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/1.png"></p><ul><li><p>直接表示法，用二维数组ture、flase。如果有权，可以置数组置为权 ，不存在的边可以用无穷大或者0表示,空间需求 (V^2)</p></li><li><p>如果图是稠密，E=(V^2) ,可以直接表示法(占大量空间)</p></li></ul><ul><li><p>街道 四个方向 E=4*V  稀疏的 用邻接表示法<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/2.png"></p></li><li><p>邻接表示法实现</p><ul><li>key比如String,Value  Arraylist 存放 邻接表</li><li>每个邻接表 作为Vetex类保存</li></ul></li></ul><h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><blockquote><p>有向无圈图 的排序 （顶点的排序）<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/3.png"><br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/4.png"></p></blockquote><ul><li><p>简单实现</p><ul><li>顶点V的入度（indegree）为边 (V1,V)的条数</li><li>每次找0边点、然后把连接的都去除</li><li>继续往下</li></ul></li><li><p>技巧实现 队列<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/5.png"></p></li></ul><h1 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h1><p>需要注意确定最短路径的时候是否有负值圈，有的话可以无限循环</p><p><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/6.png"></p><h2 id="无权最短路径-（可以把所有权赋值为1）"><a href="#无权最短路径-（可以把所有权赋值为1）" class="headerlink" title="无权最短路径 （可以把所有权赋值为1）"></a>无权最短路径 （可以把所有权赋值为1）</h2><blockquote><p>目的:找到顶点S与其他节点的最短距离</p></blockquote><p>找路径为0的路<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/7.png"><br>找路径1、2的路<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/8.png"></p><blockquote><p>这就是广度优先搜索，按层处理<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/9.png"></p></blockquote><p>队列实现：把currDist顶点入队，然后遍历（队列的特殊先，先入队的处理完在在继续遍历）<br>是不是可以 解说了<br>用了邻接表 运行时间O(E+V)<br>    <img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/10.png"></p><h2 id="有权最短路径"><a href="#有权最短路径" class="headerlink" title="有权最短路径"></a>有权最短路径</h2><h3 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h3><blockquote><p>分阶段求解问题，每个阶段都把它当做最好的处理。但是不一定总是成功</p></blockquote><pre class="line-numbers language-none"><code class="language-none">找零钱，大部分人首先25美分、然后一角、5分、1分、 假设有12分币，要找15分的零钱贪婪算法会选择 一个12分 三个一分，事实上1角加5分是最少的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>实现<ul><li>选择v1作为开始 开始找所有点的最小<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/11.png"></li><li>遍历v1和最近的v4<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/12.png"></li><li>遍历v2 (找邻接的unkown的点，计算路径 小于已知就不替换)选取v5、v3<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/13.png"></li><li>然后是v7、v6 所以都已知了<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/14.png"></li></ul></li></ul><p>只要没有负边这个算法 总能实现 O(E+V^2) </p><ul><li>边是稠密的 算法基本最优</li><li>边是O(V),算法就太慢了，可以用优先队列，顶点的选择是deleteMin</li></ul><h2 id="具有负边值的图"><a href="#具有负边值的图" class="headerlink" title="具有负边值的图"></a>具有负边值的图</h2><p>有权结合无权</p><h2 id="无圈图"><a href="#无圈图" class="headerlink" title="无圈图"></a>无圈图</h2><blockquote><p>模拟方案运行 哪个最短<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/15.png"></p></blockquote><blockquote><p>转换成事件节点图<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/16.png"></p></blockquote><blockquote><p>通过事件节点图 算出最早、最晚、松弛时间<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/17.png"></p></blockquote><p><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/18.png"></p><p><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/19.png"></p><h2 id="所有点对最短路径"><a href="#所有点对最短路径" class="headerlink" title="所有点对最短路径"></a>所有点对最短路径</h2><h2 id="最短路径例子（词梯，一系列单字母替换-）"><a href="#最短路径例子（词梯，一系列单字母替换-）" class="headerlink" title="最短路径例子（词梯，一系列单字母替换 ）"></a>最短路径例子（词梯，一系列单字母替换 ）</h2><p>无权最短路径问题</p><h1 id="网络流问题"><a href="#网络流问题" class="headerlink" title="网络流问题"></a>网络流问题</h1><blockquote><p>定义</p></blockquote><ul><li>流Cvw代表最大容量。</li><li>s，发射点 t 收点 sink.</li><li>不是收点和发点的，总流入=总流出</li><li>最大流问题 s~t的最大流量<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/20.png"></li></ul><blockquote><p>如何证明最大流是5，看容量，s有容量4、2的边离开它，t容量3和3的进入它，所以最大流可能也是6不是5。</p></blockquote><p>切分图，看两个分区交界，(a c)、(d t)总容量5 具有最小总容量的切分给出最大流的上界<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/21.png"></p><h2 id="简单最大流问题"><a href="#简单最大流问题" class="headerlink" title="简单最大流问题"></a>简单最大流问题</h2><p>G容量图，Gr残余图 （代表每条边还能添加多少流）Gf是我们的目标流图，给目标路径加流发现没有路径时停止</p><p>初始<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/22.png"></p><p>给s b d t 加两个流<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/23.png"></p><p>给s a c t 加两个流<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/24.png"></p><p>给s a d t 加1个流 算法结束<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/25.png"></p><p>算法停止，看到t的入口2+3 所以最大流是5</p><h2 id="贪婪算法的问题"><a href="#贪婪算法的问题" class="headerlink" title="贪婪算法的问题"></a>贪婪算法的问题</h2><p>选择错了，次优解<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/26.png"></p><p>添加相反方向允许撤销。<br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/27.png"><br><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/28.png"> </p><p>在研究中 很难</p><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/29.png"> </p><h2 id="Prime算法"><a href="#Prime算法" class="headerlink" title="Prime算法"></a>Prime算法</h2><p><img src="/2020/09/22/data-structures-and-algorithms-chap09-graph/30.png"> </p><p>和最短路径一样</p><h2 id="最小的边"><a href="#最小的边" class="headerlink" title="最小的边"></a>最小的边</h2><h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap08-Disjoint set classs</title>
      <link href="2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/"/>
      <url>2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB">等价关系</a></li><li><a href="#%E5%8A%A8%E6%80%81%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB">动态等价关系</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84">基本结构</a></li><li><a href="#%E7%81%B5%E5%B7%A7%E6%B1%82%E5%B9%B6-union">灵巧求并 (union)</a></li><li><a href="#%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9find">路径压缩（find）</a></li><li><a href="#%E5%BA%94%E7%94%A8-%E8%BF%B7%E5%AE%AB">应用 （迷宫）</a></li></ul><!-- /TOC --><h1 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h1><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/1.png"></p><h1 id="动态等价关系"><a href="#动态等价关系" class="headerlink" title="动态等价关系"></a>动态等价关系</h1><blockquote><p>S={5个元素}，定义一个等价关系。25对元素，每一对有关系或者没关系。我们需要快速推断关系</p></blockquote><blockquote><p>一个a属于S的<strong>等价类</strong> 是S的一个子集，包含所有和a有等价关系的元素。S的每个成员恰好出现在一个等价类。</p></blockquote><blockquote><p>输入最初 N个集合类 ，每个集合含有一个元素 ，关系是false（非自反），这些集合<strong>不相交</strong></p></blockquote><blockquote><p>两种操作</p></blockquote><ul><li>find：返回给定元素集合（等价类）名字</li><li>添加操作 添加关系a~b：先看a、b是否有关系（find 看在不在一个等价类) 不在的话 求并，两个等价类合成一个新等价类。</li></ul><blockquote><p>动态算法</p></blockquote><ul><li>联机：find 给出答案算法才进行 (口试)</li><li>脱机：(笔试)</li></ul><h1 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h1><p>数组存放 s[i]=-1</p><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/2.png"></p><p>Union<br><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/3.png"></p><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/4.png"></p><p>find(x) 与x深度有关，返回x的根 最坏O(N)</p><p>Union O(1)</p><h1 id="灵巧求并-union"><a href="#灵巧求并-union" class="headerlink" title="灵巧求并 (union)"></a>灵巧求并 (union)</h1><ul><li>以大小求并 小子树 是大子树的子树<br><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/5.png"></li></ul><p>对比之前<br><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/6.png"></p><p>最坏结果  平均O(1)union  O(LogN) find<br><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/7.png"></p><ul><li>按高度合并</li></ul><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/8.png"></p><h1 id="路径压缩（find）"><a href="#路径压缩（find）" class="headerlink" title="路径压缩（find）"></a>路径压缩（find）</h1><p>如果find很多，对find改进</p><p>让每个点父节点 等于根</p><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/9.png"></p><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/10.png"></p><p>与大小Union兼容 ，和高度不兼容 ，因为压缩路径改变高</p><h1 id="应用-（迷宫）"><a href="#应用-（迷宫）" class="headerlink" title="应用 （迷宫）"></a>应用 （迷宫）</h1><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/11.png"></p><p>让开始和结束通就好，不断的随机选择 两个元素拆墙</p><p><img src="/2020/09/21/data-structures-and-algorithms-chap08-disjoint-set-classs/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIFI5-simulation</title>
      <link href="2020/09/21/wifi5-simulation/"/>
      <url>2020/09/21/wifi5-simulation/</url>
      
        <content type="html"><![CDATA[<h1 id="wlanVHTConfig"><a href="#wlanVHTConfig" class="headerlink" title="wlanVHTConfig"></a>wlanVHTConfig</h1><p>cfgVHT = wlanVHTConfig creates a configuration object that initializes parameters for an IEEE® 802.11™ VHT PPDU.</p><ul><li><p>ChannelBandwidth — Channel bandwidth of PPDU transmission<br>‘CBW80’ (default) | ‘CBW20’ | ‘CBW40’ | ‘CBW160’</p></li><li><p>NumUsers — Number of users<br>1 (default) | 2 | 3 | 4</p></li><li><p>UserPositions — User positions<br>[0 1] (default) | vector of integers</p></li></ul><p>仅当您将NumUsers属性指定为大于1的值时，此属性才适用</p><ul><li><p>NumTransmitAntennas — Number of transmit antennas<br>1 (default) | positive integer</p></li><li><p>PreVHTCyclicShifts — Cyclic shift values of additional transmit antennas-75 (default) | integer in the interval [–200, 0] | row vector</p></li></ul><pre class="line-numbers language-none"><code class="language-none">波形的VHT前场的附加发射天线的循环移位值（以纳秒为单位）。前八个天线使用[1]的表21-10中指定的循环移位值。依存关系 要启用此属性，请将NumTransmitAntennas属性设置为大于8的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>NumSpaceTimeStreams —时空流的数量 1（默认）| [1，8]中的整数|区间[1，4]中的整数向量<pre class="line-numbers language-none"><code class="language-none">传输中的时空流数，指定为以下值之一： 示例：[1 3 2]是三用户传输中每个用户的时空流数量。 注意 此属性的元素之和不得超过八个。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>SpatialMapping —空间映射方案<br>‘直接’（默认）| “哈达玛” | ‘傅里叶’| “自定义” <pre class="line-numbers language-none"><code class="language-none">依存关系 仅当将NumTransmitAntennas和NumSpaceTimeStreams属性设置为相同的值时，默认值“ Direct”才适用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>波束成形—启用波束成形 true或1（默认）|假或0 <pre class="line-numbers language-none"><code class="language-none">依存关系：仅当NumUsers属性设置为1且SpatialMapping属性设置为“自定义”时，此属性才适用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>STBC —启用STBC <pre class="line-numbers language-none"><code class="language-none">false或0（默认）|真或1 启用PPDU数据字段的时空块编码（STBC），指定为数字或逻辑值1（true）或0（false）。 STBC在分配的天线之间传输数据流的多个副本。 当将此属性设置为0（假）时，STBC不会应用于数据字段。时空流的数量等于空间流的数量。 当将此属性设置为1（true）时，STBC应用于数据字段。时空流的数量是空间流的数量的两倍。 有关更多信息，请参见第22.3.10.9.4节。 依存关系 仅当NumUsers属性为1时，此属性才适用。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>MCS —用于传输的调制和编码方案<br>0（默认）|区间[0，9]中的整数|整数向量 </li></ul><pre class="line-numbers language-none"><code class="language-none">用于传输的调制和编码方案，指定为以下值之一： [0，9]中的整数，当NumUsers属性为1时适用 NumUsers属性大于1时，在[0，9]区间中的整数的1×NumUsers向量。 下表显示了每个有效MCS值的调制类型和编码率： MCS调制编码率 0二进制相移键控（BPSK）1/2 1正交相移键控（QPSK）1/2 2个QPSK 3/4 3 16点正交调幅（16-QAM）1/2 4 16-QAM 3/4 5 64-QAM 2/3 6 64-QAM 3/4 7 64-QAM 5/6 8 256-QAM 3/4 9 256-QAM 5/6 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ChannelCoding — FEC编码类型<br>‘密件抄送’（默认）| “ LDPC” |向量的元胞数组|字符串单元格数组</li></ul><pre class="line-numbers language-none"><code class="language-none">VHT-Data字段的前向纠错（FEC）编码类型，指定为以下值之一： “ LDPC” –低密度奇偶校验（LDPC）编码适用于传输中的所有用户 'BCC'–二进制卷积编码（BCC）适用于传输中的所有用户 包含值“ LDPC”和“ BCC”的1×NumUsers单元格数组，其中第k个元素指定用户k的信道编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>APEPLength-APEP长度<br>1024（默认）|非负整数|非负整数的向量</li></ul><pre class="line-numbers language-none"><code class="language-none">聚合的MPDU（A-MPDU）帧前（EOF）填充（APEP）长度，以字节为单位。 当NumUsers属性为1时，将此属性指定为间隔[0，2^20 – 1]中的非负整数。 当NumUsers属性的值不是1时，将此属性指定为间隔[0，22^0 – 1]中的整数的1×NumUsers向量。 对于空数据包（NDP），将此属性设置为0。 wlanVHTConfig对象使用此属性来确定数据字段中OFDM符号的数量。有关更多信息，请参见[1]的表21-1。 注意 该对象仅支持聚合数据传输<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PSDULength — PSDU长度<br>区间[0，2^20 – 1]中的整数|区间[0，2^20–1]中的整数向量</li></ul><pre class="line-numbers language-none"><code class="language-none">该属性是只读的。 物理层会聚过程（PLCP）服务数据单元（PSDU）的长度（以字节为单位），指定为以下值之一： 当NumUsers属性为1时适用的间隔为[0，220 – 1]的整数。值0对应于空数据包（NDP）。 NumUsers属性大于1时，在[0，220 – 1]范围内的整数向量。 一个空数组，适用于未定义此属性的情况，例如，当属性值集无效时。 wlanVHTConfig对象根据APEPLength属性的值和其他与编码有关的属性来计算此属性。此计算的详细信息在[1]的21.4.3节中指定。 示例：[1035 4150]是wlanVHTConfig对象的PSDU长度向量，其中NumUsers属性为2，MCS属性为[0 3]。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>GuardInterval —保护间隔（循环前缀）持续时间<br>‘长’（默认）| ‘短</p></li><li><p>GroupID-组标识号<br>63（默认）|区间[0，63]中的整数</p></li></ul><pre class="line-numbers language-none"><code class="language-none">组标识号，以[0，63]间隔中的整数指定。 依存关系 值0和63仅在将NumUsers属性设置为1时适用。间隔[1，62]中的值仅在将NumUsers属性设置为1以外的值时适用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>PartialAID — PSDU接收机简写<br>275（默认值）|区间[0，511]中的整数 </li></ul><pre class="line-numbers language-none"><code class="language-none">PSDU接收者的缩写指示，指定为[0，511]间隔中的整数。 对于上行链路传输，部分标识号是基本服务集标识符（BSSID）的后九位。 对于下行链路传输，部分标识号是将关联ID与它的服务AP的BSSID组合在一起的标识符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/09/21/wifi5-simulation/1.png"></p><h1 id="HE-SU-HE-EXT-SU-HE-MU-HE-TB"><a href="#HE-SU-HE-EXT-SU-HE-MU-HE-TB" class="headerlink" title="HE-SU  HE-EXT-SU HE-MU HE-TB"></a>HE-SU  HE-EXT-SU HE-MU HE-TB</h1><p><img src="/2020/09/21/wifi5-simulation/2.png"></p><h1 id="Recovery-and-analyze-802-11-a-802-11n-802-11ac-802-11ax"><a href="#Recovery-and-analyze-802-11-a-802-11n-802-11ac-802-11ax" class="headerlink" title="Recovery and analyze 802.11 a 802.11n 802.11ac 802.11ax"></a>Recovery and analyze 802.11 a 802.11n 802.11ac 802.11ax</h1><p>检测，解码和分析波形中的多个数据包。该示例可以解码OFDM非HT，非HT复制，HT，VHT [1]，HE MU，HE SU和HE ER SU [2]数据包格式。</p><p>该示例提供了检测到的数据包的摘要，并显示了所选数据包的MAC内容，错误向量幅度（EVM），功率和信令信息</p><p>接收器除了信道带宽外不知道任何传输参数，并通过解码数据包的前导字段来检索这些参数。这些测量针对检测到的数据包显示： </p><ul><li><p>频谱和时域样本。 </p></li><li><p>信令字段内容。 </p></li><li><p>HE波形的资源单元和用户信息。 </p></li><li><p>均衡数据符号的星座。 </p></li><li><p>信令字段的EVM。 </p></li><li><p>每个数据子载波的EVM在空间流和符号上平均。 </p></li><li><p>每个数据符号的EVM在空间流和子载波上平均。 </p></li><li><p>MAC帧内容：A-MPDU分解状态，地址1，地址2，帧检查序列（FCS）和帧类型。 </p></li></ul><p>openExample(‘wlan/AnalyzePacketsExample’)</p><h1 id="wifi5WaveGeneration"><a href="#wifi5WaveGeneration" class="headerlink" title="wifi5WaveGeneration"></a>wifi5WaveGeneration</h1><h1 id="wifi4WaveGeneration"><a href="#wifi4WaveGeneration" class="headerlink" title="wifi4WaveGeneration"></a>wifi4WaveGeneration</h1><p><img src="/2020/09/21/wifi5-simulation/18.png"></p><p><img src="/2020/09/21/wifi5-simulation/19.png"></p><blockquote><p>常用定义<br><img src="/2020/09/21/wifi5-simulation/20.png"></p></blockquote><p>PSDU 意义<br><img src="/2020/09/21/wifi5-simulation/3.png"></p><p>PreHTCyclicShift<br>前四个 用802.11的表 </p><p>多的天线用这个设置值<br><img src="/2020/09/21/wifi5-simulation/4.png"></p><blockquote><p>AggregatedMPDU</p></blockquote><pre class="line-numbers language-none"><code class="language-none">MAC协议数据单元（MPDU）聚合指示符，指定为数字或逻辑1（真）或0（假）。要指定生成的数据包使用MPDU聚合，请将此属性设置为1（true）。 依存关系 当您将MCS属性设置为0时，此属性不适用 数据类型：逻辑<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>RecommendSmoothing</p></blockquote><pre class="line-numbers language-none"><code class="language-none">建议对通道估计进行平滑处理，将其指定为数字或逻辑1（true）或0（false）。 如果频率曲线在整个通道中均不变化，则接收器将此属性设置为1（true）。在这种情况下，建议将频域平滑作为信道估计的一部分。 如果频率曲线在整个通道上变化，则接收器将此属性设置为0（假）。在这种情况下，不建议将频域平滑作为信道估计的一部分。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成wlanLSTF"><a href="#生成wlanLSTF" class="headerlink" title="生成wlanLSTF"></a>生成wlanLSTF</h2><ul><li>先验证属性正确</li><li>HT或者VHT （not leagcy)</li><li>根据协议设置空间移位的值（超出部分自己设置）</li><li>获取带宽</li><li>getOFDM配置<ul><li>根据（空间流设置以及是不是传统码决定空时流）</li><li>根据带宽得到FFTLen，和多少个20Mhz信道numSC  64*numSC<br><img src="/2020/09/21/wifi5-simulation/5.png"></li><li>得到子载波直接的旋转<br><img src="/2020/09/21/wifi5-simulation/6.png"></li><li>得到CP的LEN</li><li>传统的STF（非HT VHT） 保护6个前载波，中间的 载波 5个后载波，加上 -21 -7 7 21 0</li><li>得到归一化因子  （可能不用）<br><img src="/2020/09/21/wifi5-simulation/9.png"></li><li>得到每组的在算出所有组的载波</li><li>计算出所有目标idx<br><img src="/2020/09/21/wifi5-simulation/7.png"></li><li>存入结构体<br><img src="/2020/09/21/wifi5-simulation/8.png"></li></ul></li><li>获得lstf的序列 （12个子载波）<br><img src="/2020/09/21/wifi5-simulation/10.png"></li><li>算出lstfMIMO（40Mhz 2×2MIMO 变成128×1×2的矩阵</li><li>根据发送天线数量算不同天线移位值（比如 -200ns , -200ns/(1/(40M)=-8<br><img src="/2020/09/21/wifi5-simulation/11.png"></li><li>移位过程<ul><li>k= -64~63</li><li>用IDFT的移位性质</li></ul></li><li>进行OFDM调制 <ul><li>先进行ifftshift来还原 之前k是从-64 63 0~128</li><li>再Ifft</li><li>看需不需要循环前缀</li></ul></li><li>叠加2.5个周期并乘系数<br><img src="/2020/09/21/wifi5-simulation/9.png"></li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><blockquote><p>初步时间估计<br>STF和短训练码的互相关性可以获取峰值获取，初始时间估计<br><img src="/2020/09/21/wifi5-simulation/14.png"></p></blockquote><p>延时会影响这个<br><img src="/2020/09/21/wifi5-simulation/15.png"></p><blockquote><p>AGC、分组检测<br>因为重复了10个码元，可以将0.8us短码元和前一个码元相关（自相关），用于分组检测，相关值超过一定阈值就检测到一个分组。这个值还可以用来设置AGC（相对于互相关）被证明是更好的</p></blockquote><h2 id="生成wlanLLTF"><a href="#生成wlanLLTF" class="headerlink" title="生成wlanLLTF"></a>生成wlanLLTF</h2><ul><li><p>先验证属性正确</p></li><li><p>HT或者VHT （not leagcy)</p></li><li><p>根据协议设置空间移位的值（超出部分自己设置）</p></li><li><p>获取带宽</p></li><li><p>getOFDM配置</p><ul><li>根据（空间流设置以及是不是传统码决定空时流）</li><li>根据带宽得到FFTLen，和多少个20Mhz信道numSC  64*numSC<br><img src="/2020/09/21/wifi5-simulation/5.png"></li><li>得到子载波直接的旋转<br><img src="/2020/09/21/wifi5-simulation/6.png"></li><li>得到CP的LEN</li><li>传统的STF（非HT VHT） 保护6个前载波，中间的 载波 5个后载波，加上 -21 -7 7 21 0</li><li>得到归一化因子  （可能不用）<br><img src="/2020/09/21/wifi5-simulation/9.png"></li><li>得到每组的在算出所有组的载波</li><li>计算出所有目标idx<br><img src="/2020/09/21/wifi5-simulation/7.png"></li><li>存入结构体<br><img src="/2020/09/21/wifi5-simulation/8.png"></li></ul></li><li><p>获得lltf的序列 （48个子载波）<br><img src="/2020/09/21/wifi5-simulation/13.png"></p></li><li><p>算出lstfMIMO（40Mhz 2<em>2MIMO 变成128</em>1*2的矩阵 算上两个20Mhz频段之间旋转</p></li><li><p>根据发送天线数量算不同天线移位值（比如 -200ns , -200ns/(1/(40M)=-8<br><img src="/2020/09/21/wifi5-simulation/11.png"></p></li><li><p>移位过程</p><ul><li>k= -64~63</li><li>用IDFT的移位性质</li><li>对第二个天线发送的移位</li></ul></li><li><p>进行OFDM调制 </p><ul><li>先进行ifftshift来还原 之前k是从-64 63 0~128</li><li>再Ifft</li><li>看需不需要循环前缀</li></ul></li><li><p>1.6us的循环前缀加上2个3.2us的长训练码元<br><img src="/2020/09/21/wifi5-simulation/16.png"></p></li><li><p>归一化因子<br><img src="/2020/09/21/wifi5-simulation/17.png"></p><h2 id="生成wlanLSIG"><a href="#生成wlanLSIG" class="headerlink" title="生成wlanLSIG"></a>生成wlanLSIG</h2></li></ul><p><img src="/2020/09/21/wifi5-simulation/26.png"></p><ul><li>计算数据字段的OFDM符号数<ul><li>获取MCS 对应的数值</li><li>计算数据符号数和填充空白数目<br><img src="/2020/09/21/wifi5-simulation/21.png"><br><img src="/2020/09/21/wifi5-simulation/22.png"></li><li>总符号数等于数据符号数加上<br><img src="/2020/09/21/wifi5-simulation/23.png"></li><li>加上GI的时间，算出总采样数、发送时间4us*总符号</li><li>速率默认设置为6MBit/s<br><img src="/2020/09/21/wifi5-simulation/24.png"></li><li>得到length<br><img src="/2020/09/21/wifi5-simulation/25.png"></li><li>化成24bit表示</li><li>BCC卷积、交织</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">    交织器从其本质上来说就是一种实现最大限度的改变信息结构而不改变信息内容的器件。从传统上来 讲就是使信道传输过程中所突发产生集中的错误最大限度的分散 化。　　假定由一些4比特组成的消息分组，把4个相继分组中的第1个比特取出来，并让这4个第1比特组 成一个新的4比特分组，称作第一帧，4个消息分组中的比特2～4，也作同样处理。然后依次传送第1比特组成的帧，第2比特组成的帧，……。在传输期间，帧2丢失，如果没有交 织，那就会丢失某一整个消息分组，但采用了交织，仅每个消息分组的第2比特丢失，再利用信道编码， 全部分组中的消息仍能得以恢复，这就是 交织技术的基本原理。概括地说，交织就是把码字的b个比特分散到n个帧中，以改变比特间的邻近关系， 因此n值越大， 传输特性越好，但 传输时延也越大，所以在实际使用中必须作折衷考虑。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>先验证属性正确</li><li>HT或者VHT （not leagcy)</li><li>根据协议设置空间移位的值（超出部分自己设置）</li><li>获取带宽</li><li>getOFDM配置<ul><li>根据（空间流设置以及是不是传统码决定空时流）</li><li>根据带宽得到FFTLen，和多少个20Mhz信道numSC  64*numSC<br><img src="/2020/09/21/wifi5-simulation/5.png"></li><li>得到子载波直接的旋转<br><img src="/2020/09/21/wifi5-simulation/6.png"></li><li>得到CP的LEN</li><li>传统的STF（非HT VHT） 保护6个前载波，中间的 载波 5个后载波，加上 -21 -7 7 21 0</li><li>得到归一化因子  （可能不用）<br><img src="/2020/09/21/wifi5-simulation/9.png"></li><li>得到每组的在算出所有组的载波</li><li>计算出所有目标idx<br><img src="/2020/09/21/wifi5-simulation/7.png"></li><li>存入结构体<br><img src="/2020/09/21/wifi5-simulation/8.png"></li></ul></li><li>获得lltf的序列 （12个子载波）<br><img src="/2020/09/21/wifi5-simulation/13.png"></li><li>算出lstfMIMO（40Mhz 2<em>2MIMO 变成128</em>1*2的矩阵 算上两个20Mhz频段之间旋转</li><li>根据发送天线数量算不同天线移位值（比如 -200ns , -200ns/(1/(40M)=-8<br><img src="/2020/09/21/wifi5-simulation/11.png"></li><li>移位过程<ul><li>k= -64~63</li><li>用IDFT的移位性质</li><li>对第二个天线发送的移位</li></ul></li><li>进行OFDM调制 <ul><li>先进行ifftshift来还原 之前k是从-64 63 0~128</li><li>再Ifft</li><li>看需不需要循环前缀</li></ul></li><li>1.6us的循环前缀加上2个3.2us的长训练码元<br><img src="/2020/09/21/wifi5-simulation/16.png"></li><li>归一化因子<br><img src="/2020/09/21/wifi5-simulation/17.png"></li></ul><h1 id="根据SIG-VHT-SIGA配置-cfgRx"><a href="#根据SIG-VHT-SIGA配置-cfgRx" class="headerlink" title="根据SIG VHT-SIGA配置 cfgRx"></a>根据SIG VHT-SIGA配置 cfgRx</h1><blockquote><p>配置之前<br><img src="/2020/09/21/wifi5-simulation/27.png"></p></blockquote><blockquote><p>配置之后<br><img src="/2020/09/21/wifi5-simulation/28.png"></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wifi5-VHT</title>
      <link href="2020/09/21/wifi5-vht/"/>
      <url>2020/09/21/wifi5-vht/</url>
      
        <content type="html"><![CDATA[<h1 id="信道"><a href="#信道" class="headerlink" title="信道"></a>信道</h1><ul><li><p>增加了144信道</p></li><li><p>可以选择 80+80<br><img src="/2020/09/21/wifi5-vht/1.png"></p></li></ul><ul><li>80mhz 256fft  14空 （前6 后5 中3）8个导频 234data</li></ul><ul><li>160mhz 512fft 两个 80mhz组成 486data</li></ul><h1 id="Single-user-SU-VHT-packet-structure"><a href="#Single-user-SU-VHT-packet-structure" class="headerlink" title="Single user (SU) VHT packet structure"></a>Single user (SU) VHT packet structure</h1><p><img src="/2020/09/21/wifi5-vht/2.png"></p><h1 id="VHT-format-preamble"><a href="#VHT-format-preamble" class="headerlink" title="VHT format preamble"></a>VHT format preamble</h1><p><img src="/2020/09/21/wifi5-vht/3.png"></p><p>MF前导码 相同  ，和HT概念 差不多 主要增加了 VHT-LTF 对导频子载波跟踪和、VHT-SIG-B、增加 MU-MIMO的支持</p><h1 id="VHT格式前导的VHT部分"><a href="#VHT格式前导的VHT部分" class="headerlink" title="VHT格式前导的VHT部分"></a>VHT格式前导的VHT部分</h1><h2 id="VHT-SIGA"><a href="#VHT-SIGA" class="headerlink" title="VHT-SIGA"></a>VHT-SIGA</h2><p><img src="/2020/09/21/wifi5-vht/4.png"></p><ul><li><p>BW 2bit </p></li><li><p>STBC 与n不同 VHT分组 STBC 空时流 只能是空间流两倍</p></li><li><p>组ID的主要用途是用于MU包（见14.4节）。</p></li><li><p>组ID和部分援助ID字段对于VHT来说是新的。组ID的主要用途是用于MU包（见14.4节）。在发往AP的SU包中，组ID被设置为0。如果AP向其sta之一发送SU包，则组ID设置为63。在任何其他SU包格式中，组ID被设置为63。</p></li><li><p>部分援助ID,SU中包括部分援助ID以向PHY提供较早的指示，以便PHY可以确定它是否是分组的预期接收者。MAC用标识STA的值来配置PHY。当PHY接收到部分辅助字段不为零且与配置值不匹配的分组时，它可以比设备等待MAC地址的接收更早地终止接收。这样可以节省少量的电力。</p></li><li><p>Short GI 0 0.8us 1 0.4us</p></li><li><p>Nsym 使用短且NSYMOD 10=9，则此位设置为1<br><img src="/2020/09/21/wifi5-vht/5.png"></p></li><li><p>Coding bit 0:BCC 1:LDPC</p></li><li><p>LPDPC extra采用LDPC编码，在编码过程中加入额外的符号，LDPC额外的OFDM符号比特被设置为1。否则，该位设置为0。</p></li><li><p>MCS:和空间流分开了<br><img src="/2020/09/21/wifi5-vht/6.png"></p></li><li><p>Beamformed如图7.7所示，只有一个比特与发射波束形成有关，而在802.11n HT-SIG中有三个。在802.11ac中，我们只拥有波束形成的VHT-SIG-A2。如果将波束形成转向矩阵应用于波形，则设置为1，否则设置为0。不需要确定信道延迟扩展。由于波束形成可能导致相邻子载波之间的相位不连续，因此当波束形成比特设置为1时，应用平滑时需要小心</p></li><li><p>CRC 和tail 和之前一样</p></li></ul><h2 id="VHT-STF-VHT-LTF"><a href="#VHT-STF-VHT-LTF" class="headerlink" title="VHT-STF VHT-LTF"></a>VHT-STF VHT-LTF</h2><p>like before</p><h2 id="VHT-SIG-B"><a href="#VHT-SIG-B" class="headerlink" title="VHT SIG B"></a>VHT SIG B</h2><p>虽然VHT-SIG-B的主要用途是在MU分组中用信令发送特定于用户的信息，但它仍然被包括在所有分组中以维护VHT分组的单一统一前导格式。然而，对于SU，接收机不需要处理VHT-SIG-B。</p>]]></content>
      
      
      <categories>
          
          <category> wifi5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi5-study-Basic VHT Data Recovery Steps</title>
      <link href="2020/09/20/wifi5-study/"/>
      <url>2020/09/20/wifi5-study/</url>
      
        <content type="html"><![CDATA[<p> HT20时：(MCS0-MCS7) 6.5M、13M、19.5M、26M、39M、52M、58.5M、65M、 (MCS8-MCS15) 13M、26M、39M、52M、78M、104M、117M、130M </p><p> HT40时：(MCS0-MCS7) 13.5M。<br> 27M、40.5M、54M、81M、108M、121.5M、135M (MCS8-MCS15) 27M、54M、81M、108M、162M、216M、243M、270M。</p><p> <img src="/2020/09/20/wifi5-study/1.png"></p><p> AWGN又称加性高斯白噪声(Additive White Gaussian Noise)</p><p>码率即有效数据和发出的数据的比率)</p><p><img src="/2020/09/20/wifi5-study/2.png"><br> <a href="https://www.eefocus.com/test-measurement/294493/r0">https://www.eefocus.com/test-measurement/294493/r0</a></p><p> ind = wlanFieldIndices（cfg）返回ind，该结构包含组成基带物理层会聚过程协议数据单元（PPDU）波形的各个组成部分的开始和结束索引<br><img src="/2020/09/20/wifi5-study/3.png"></p><blockquote><p>QAM<br><a href="https://www.zhihu.com/question/278998195/answer/404624352">https://www.zhihu.com/question/278998195/answer/404624352</a></p></blockquote><h1 id="OFDM"><a href="#OFDM" class="headerlink" title="OFDM"></a>OFDM</h1><blockquote><p><a href="https://blog.csdn.net/wordwarwordwar/article/details/79605916">https://blog.csdn.net/wordwarwordwar/article/details/79605916</a></p></blockquote><blockquote><p>理想波特 2Baud/hz</p></blockquote><blockquote></blockquote><p>即基带上一个OFDM symbol的发送时间正好发送一个一次谐波的完整波形。在一个OFDM symbol的时间内（即66.67us)，靠近中间的两个一次谐波传输一个完整波形，再靠外一点的两个二次谐波传输两个完整波形，以此类推至最外面的两个300次谐波传输了300个完整的波形。在这66.67us内，600个子载波互相正交，其上分别承载了600个复数信号。</p><blockquote><p>在10MHz信道上，1ms的子帧共传输14个OFDM symbol【不是15个，留空给CP了】，每一个OFDM symbol携带600个复数信息，因此：在10MHz信道上，1ms的子帧共传输14个OFDM symbol【不是15个，留空给CP了】，每一个OFDM symbol携带600个复数信息，因此：</p></blockquote><ul><li>从整个系统来看，波特率为600<em>14</em>2/1ms = 16.8MBaud，占据带宽10MHz，因此带宽利用率为16.8MBaud/10MHz = 1.68Baud/Hz，接近2Baud/Hz的理想情况。</li><li>单从OFDM一个symbol来看，波特率为600<em>2/66.7us = 18MBaud，占据带宽600</em>15kHz=9MHz【不考虑边界子载波带外问题】，因此其带宽利用率为18MBaud/9MHz=2Baud/Hz，符合上面的讨论。</li></ul><p><img src="/2020/09/20/wifi5-study/4.png"></p><p>IFFT实现OFDM<br><img src="/2020/09/20/wifi5-study/5.png"></p>]]></content>
      
      
      <categories>
          
          <category> wifi5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi4-chap02-PHY</title>
      <link href="2020/09/20/wifi4-chap02-phy/"/>
      <url>2020/09/20/wifi4-chap02-phy/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#ofdmorthogonal-frequency-division-mutiplexing">OFDM（orthogonal Frequency division mutiplexing）</a><ul><li><a href="#ofdm%E9%99%90%E5%88%B6">OFDM限制</a></li></ul></li><li><a href="#mimosdm-%E5%9F%BA%E7%A1%80">MIMO/SDM 基础</a><ul><li><a href="#siso">SISO</a></li><li><a href="#mimo">MIMO</a></li><li><a href="#sdm%E7%A9%BA%E5%88%86%E5%A4%8D%E7%94%A8">SDM(空分复用)</a></li><li><a href="#80211n%E4%BC%A0%E6%92%AD%E6%A8%A1%E5%9E%8B">802.11n传播模型</a><ul><li><a href="#%E4%BF%A1%E9%81%93%E6%A8%A1%E5%9E%8B%E7%94%B1%E8%84%89%E5%86%B2%E5%93%8D%E5%BA%94%E5%86%B3%E5%AE%9Asiso">信道模型由脉冲响应决定（SISO）</a></li><li><a href="#%E5%9C%A8mimo%E4%B8%8B">在MIMO下</a></li><li><a href="#%E5%A4%9A%E6%99%AE%E5%8B%92%E6%A8%A1%E5%9E%8B">多普勒模型</a></li><li><a href="#%E7%89%A9%E7%90%86%E5%B1%82%E6%8D%9F%E4%BC%A4">物理层损伤</a><ul><li><a href="#%E7%9B%B8%E4%BD%8D%E5%99%AA%E5%A3%B0">相位噪声</a></li><li><a href="#pa-%E5%8A%9F%E7%8E%87%E6%94%BE%E5%A4%A7%E5%99%A8%E7%9A%84%E9%9D%9E%E7%BA%BF%E6%80%A7">PA 功率放大器的非线性</a></li><li><a href="#%E8%B7%AF%E5%BE%84%E6%8D%9F%E5%A4%B1">路径损失</a></li></ul></li></ul></li><li><a href="#%E6%8E%A5%E6%94%B6%E6%9C%BA%E8%AE%BE%E7%BD%AE">接收机设置</a></li><li><a href="#ml%E6%8E%A5%E6%94%B6">ML接收</a></li></ul></li><li><a href="#80211ag-ofdm%E5%85%BC%E5%AE%B9">802.11a/g OFDM兼容</a><ul><li><a href="#80211a">802.11a</a><ul><li><a href="#stf">STF</a></li><li><a href="#ltf">LTF</a></li><li><a href="#sig">SIG</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%AD%97%E6%AE%B5">数据字段</a></li><li><a href="#%E5%88%86%E7%BB%84%E7%BC%96%E7%A0%81">分组编码</a></li><li><a href="#%E6%8E%A5%E5%8F%97%E8%BF%87%E7%A8%8B">接受过程</a></li></ul></li><li><a href="#ht%E5%88%86%E7%BB%84">HT分组</a><ul><li><a href="#mf%E5%89%8D%E5%AF%BC%E7%A0%81-%E9%9D%9Eht%E9%83%A8%E5%88%86-%E4%B8%8E%E5%89%8D%E9%9D%A2%E7%B1%BB%E4%BC%BC">MF前导码 非HT部分 与前面类似</a></li><li><a href="#ht%E9%83%A8%E5%88%86">HT部分</a><ul><li><a href="#ht-sig1-ht-sig2">HT-SIG1 HT-SIG2</a></li><li><a href="#ht-stf">HT-STF</a></li><li><a href="#ht-ltf">HT-LTF</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%AD%97%E6%AE%B5-1">数据字段</a><ul><li><a href="#%E7%A0%81%E5%85%83%E6%95%B0">码元数</a></li><li><a href="#%E6%89%B0%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81">扰码和编码</a></li><li><a href="#%E6%B5%81%E8%A7%A3%E6%9E%90-%E8%BD%AE%E6%B5%81-%E5%8F%91%E7%BB%99-%E7%A9%BA%E9%97%B4%E6%B5%81nss">流解析 （轮流 发给 空间流NSS</a></li><li><a href="#%E4%BA%A4%E7%BB%87-iss-nss">交织 （ISS 《=NSS）</a></li><li><a href="#%E8%B0%83%E5%88%B6%E6%98%A0%E5%B0%84">调制映射</a></li><li><a href="#%E5%AF%BC%E9%A2%91%E5%AD%90%E8%BD%BD%E6%B3%A2">导频子载波</a></li></ul></li></ul></li><li><a href="#%E6%8E%A5%E5%8F%97%E6%9C%BA">接受机</a></li></ul></li></ul></li><li><a href="#ht%E7%9A%84">HT的</a><ul><li><a href="#40mhz%E4%BF%A1%E9%81%93">40MHZ信道</a><ul><li><a href="#40mhz%E4%BF%A1%E9%81%93%E8%AE%BE%E8%AE%A1">40mhz信道设计</a></li><li><a href="#%E4%B8%A4%E4%B8%AA%E7%BC%96%E7%A0%81%E5%99%A8">两个编码器</a></li></ul></li><li><a href="#20mhz-%E9%A2%9D%E5%A4%96-%E6%95%B0%E6%8D%AE%E5%AD%90%E8%BD%BD%E6%B3%A2">20MHZ 额外 数据子载波</a></li><li><a href="#mcs-modulation-and-coding-scheme-%E7%A9%BA%E9%97%B4%E6%B5%81-%E7%A0%81%E7%8E%87">MCS Modulation and coding scheme 空间流 码率</a></li><li><a href="#greenfield-gf-%E5%89%8D%E5%AF%BC%E7%A0%81%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BC%A0%E7%BB%9F-ofdm">GreenField GF 前导码（不支持传统 OFDM）</a></li><li><a href="#%E7%9F%AD%E4%BF%9D%E6%8A%A4%E9%97%B4%E9%9A%94">短保护间隔</a></li></ul></li><li><a href="#%E9%99%84%E5%BD%95">附录</a><ul><li><a href="#%E4%BF%A1%E9%81%93%E5%88%86%E9%85%8D">信道分配</a></li><li><a href="#mcs">MCS</a></li><li><a href="#%E6%B3%A2%E5%BD%A2%E5%8F%82%E6%95%B0">波形参数</a></li></ul></li><li><a href="#%E6%96%B0%E7%89%B9%E6%80%A7">新特性</a><ul><li><a href="#%E6%8E%A5%E5%8F%97%E5%88%86%E9%9B%86--mrc-%E6%9C%80%E5%A4%A7%E6%AF%94%E5%90%88%E5%B9%B6">接受分集  MRC (最大比合并)</a></li><li><a href="#%E7%A9%BA%E9%97%B4%E6%89%A9%E5%B1%95-se">空间扩展 SE</a></li><li><a href="#%E7%A9%BA%E6%97%B6%E5%9D%97%E7%BC%96%E7%A0%81-stbc">空时块编码 STBC</a></li><li><a href="#ldpc">LDPC</a></li></ul></li></ul><!-- /TOC --><h1 id="OFDM（orthogonal-Frequency-division-mutiplexing）"><a href="#OFDM（orthogonal-Frequency-division-mutiplexing）" class="headerlink" title="OFDM（orthogonal Frequency division mutiplexing）"></a>OFDM（orthogonal Frequency division mutiplexing）</h1><p>不同子载波传输<br><img src="/2020/09/20/wifi4-chap02-phy/1.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/2.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/3.png"></p><p>基本取样 20MHZ，64位FFT/IFFT，△f=20000/64=312.5khz。64子载波，-32 -31 …… -1 0 1  中 52个是合成载波  -26 …… -1 1 25 26 最低的6个子载波 直流子载波 最高的子载波不用 。</p><p>1/20M=0.05us  每0.05us发送一个样本点 0.05us*64=3.2us<br>周期T=3.2us  + GI(guard interval)0.8us 防止码间干扰 ISI</p><h2 id="OFDM限制"><a href="#OFDM限制" class="headerlink" title="OFDM限制"></a>OFDM限制</h2><ul><li>峰均比要小</li><li>对载波频率偏置和相位噪声较高敏感</li></ul><h1 id="MIMO-SDM-基础"><a href="#MIMO-SDM-基础" class="headerlink" title="MIMO/SDM 基础"></a>MIMO/SDM 基础</h1><h2 id="SISO"><a href="#SISO" class="headerlink" title="SISO"></a>SISO</h2><p>通信系统表示<br><img src="/2020/09/20/wifi4-chap02-phy/4.png"></p><p>SISO示意图<br><img src="/2020/09/20/wifi4-chap02-phy/5.png"></p><p>接收机解调<br><img src="/2020/09/20/wifi4-chap02-phy/6.png"></p><h2 id="MIMO"><a href="#MIMO" class="headerlink" title="MIMO"></a>MIMO</h2><p><img src="/2020/09/20/wifi4-chap02-phy/8.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/7.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/9.png"></p><h2 id="SDM-空分复用"><a href="#SDM-空分复用" class="headerlink" title="SDM(空分复用)"></a>SDM(空分复用)</h2><p>系统最少数据速率增加量为Min(Tx,Rx,空间流)</p><p><img src="/2020/09/20/wifi4-chap02-phy/10.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/12.png"></p><p>不能无限增加天线 需要H矩阵非奇异</p><h2 id="802-11n传播模型"><a href="#802-11n传播模型" class="headerlink" title="802.11n传播模型"></a>802.11n传播模型</h2><h3 id="信道模型由脉冲响应决定（SISO）"><a href="#信道模型由脉冲响应决定（SISO）" class="headerlink" title="信道模型由脉冲响应决定（SISO）"></a>信道模型由脉冲响应决定（SISO）</h3><p><img src="/2020/09/20/wifi4-chap02-phy/14.png"></p><h3 id="在MIMO下"><a href="#在MIMO下" class="headerlink" title="在MIMO下"></a>在MIMO下</h3><h3 id="多普勒模型"><a href="#多普勒模型" class="headerlink" title="多普勒模型"></a>多普勒模型</h3><p>发射机和接收机 之间移动的人 会引起信道变化</p><h3 id="物理层损伤"><a href="#物理层损伤" class="headerlink" title="物理层损伤"></a>物理层损伤</h3><h4 id="相位噪声"><a href="#相位噪声" class="headerlink" title="相位噪声"></a>相位噪声</h4><p>发射、接收都加上了 相位噪声</p><h4 id="PA-功率放大器的非线性"><a href="#PA-功率放大器的非线性" class="headerlink" title="PA 功率放大器的非线性"></a>PA 功率放大器的非线性</h4><p>失真影响发射机 Tx的EVM（误差矢量幅度），增加接收机误差率<br><img src="/2020/09/20/wifi4-chap02-phy/15.png"></p><h4 id="路径损失"><a href="#路径损失" class="headerlink" title="路径损失"></a>路径损失</h4><p><img src="/2020/09/20/wifi4-chap02-phy/16.png"></p><h2 id="接收机设置"><a href="#接收机设置" class="headerlink" title="接收机设置"></a>接收机设置</h2><p>ZF 迫零算法</p><p>MMSE 最小均方差 (better)</p><p><img src="/2020/09/20/wifi4-chap02-phy/17.png"></p><h2 id="ML接收"><a href="#ML接收" class="headerlink" title="ML接收"></a>ML接收</h2><p>计算复杂</p><h1 id="802-11a-g-OFDM兼容"><a href="#802-11a-g-OFDM兼容" class="headerlink" title="802.11a/g OFDM兼容"></a>802.11a/g OFDM兼容</h1><h2 id="802-11a"><a href="#802-11a" class="headerlink" title="802.11a"></a>802.11a</h2><p><img src="/2020/09/20/wifi4-chap02-phy/18.png"></p><ul><li>STF 短训练字段 初始时间同步、初始频率偏移估计</li><li>LTF 长训练字段 信道估计、精确时间同步、频率偏移估计</li><li>SIG 信令字段 分组速率、长度等</li></ul><p><img src="/2020/09/20/wifi4-chap02-phy/19.png"></p><h3 id="STF"><a href="#STF" class="headerlink" title="STF"></a>STF</h3><p>10个 0.8us短训练码元<br><img src="/2020/09/20/wifi4-chap02-phy/21.png"><br>只用了12个子载波</p><p>64位 IFFT =3.2us 序列  产生了0.8us周期 所以重复2.5周期就行</p><p><img src="/2020/09/20/wifi4-chap02-phy/20.png"></p><h3 id="LTF"><a href="#LTF" class="headerlink" title="LTF"></a>LTF</h3><p>两个3.2us长训练码元  1.6us循环前缀 （长训练码元后半)<br><img src="/2020/09/20/wifi4-chap02-phy/23.png"></p><h3 id="SIG"><a href="#SIG" class="headerlink" title="SIG"></a>SIG</h3><p><img src="/2020/09/20/wifi4-chap02-phy/22.png"></p><p>3.2us OFDM码 和0.8us循环前缀 </p><p><img src="/2020/09/20/wifi4-chap02-phy/24.png"></p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ul><li>服务字段（扰码器）、</li><li>数据字段  每个数据码元4us 3.2usOFDM、0.8CUR,和LTF、SIG一样波形使用52子载波 根据SIG速率信息调制到48子载波上，4个子载波 做相位、频率跟踪训练的导频</li></ul><p><img src="/2020/09/20/wifi4-chap02-phy/23.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/26.png"></p><h3 id="分组编码"><a href="#分组编码" class="headerlink" title="分组编码"></a>分组编码</h3><p><img src="/2020/09/20/wifi4-chap02-phy/25.png"></p><p>调制格式，(对载波调制)  ： BPSK、qPSK、16QAM</p><h3 id="接受过程"><a href="#接受过程" class="headerlink" title="接受过程"></a>接受过程</h3><p><img src="/2020/09/20/wifi4-chap02-phy/27.png"></p><h2 id="HT分组"><a href="#HT分组" class="headerlink" title="HT分组"></a>HT分组</h2><p><img src="/2020/09/20/wifi4-chap02-phy/28.png"></p><h3 id="MF前导码-非HT部分-与前面类似"><a href="#MF前导码-非HT部分-与前面类似" class="headerlink" title="MF前导码 非HT部分 与前面类似"></a>MF前导码 非HT部分 与前面类似</h3><h3 id="HT部分"><a href="#HT部分" class="headerlink" title="HT部分"></a>HT部分</h3><h4 id="HT-SIG1-HT-SIG2"><a href="#HT-SIG1-HT-SIG2" class="headerlink" title="HT-SIG1 HT-SIG2"></a>HT-SIG1 HT-SIG2</h4><p><img src="/2020/09/20/wifi4-chap02-phy/29.png"></p><ul><li>前7bit MCS 调制编码方案 <ul><li>（BPSK、……、64QAM)（0~76） code RATE  1/2、2/3/、3/4、5/6   </li><li> MCS 0<del>7 单流、8</del>15 双流、16<del>23 3流 24</del>31 4流 32只用40MHZ</li></ul></li></ul><p>通过 阈值区分 传统  和HT MF</p><p><img src="/2020/09/20/wifi4-chap02-phy/30.png"></p><h4 id="HT-STF"><a href="#HT-STF" class="headerlink" title="HT-STF"></a>HT-STF</h4><p>同样空间流、不同发送天线 需要大循环移位解除信号相关性<br><img src="/2020/09/20/wifi4-chap02-phy/32.png"></p><h4 id="HT-LTF"><a href="#HT-LTF" class="headerlink" title="HT-LTF"></a>HT-LTF</h4><p>同样空间流、不同发送天线 需要大循环移位解除信号相关性<br><img src="/2020/09/20/wifi4-chap02-phy/33.png"></p><h4 id="数据字段-1"><a href="#数据字段-1" class="headerlink" title="数据字段"></a>数据字段</h4><p><img src="/2020/09/20/wifi4-chap02-phy/34.png"></p><h5 id="码元数"><a href="#码元数" class="headerlink" title="码元数"></a>码元数</h5><p><img src="/2020/09/20/wifi4-chap02-phy/35.png"></p><h5 id="扰码和编码"><a href="#扰码和编码" class="headerlink" title="扰码和编码"></a>扰码和编码</h5><h5 id="流解析-（轮流-发给-空间流NSS"><a href="#流解析-（轮流-发给-空间流NSS" class="headerlink" title="流解析 （轮流 发给 空间流NSS"></a>流解析 （轮流 发给 空间流NSS</h5><h5 id="交织-（ISS-《-NSS）"><a href="#交织-（ISS-《-NSS）" class="headerlink" title="交织 （ISS 《=NSS）"></a>交织 （ISS 《=NSS）</h5><h5 id="调制映射"><a href="#调制映射" class="headerlink" title="调制映射"></a>调制映射</h5><p>交织输出的bit流 映射到 复数星座点</p><h5 id="导频子载波"><a href="#导频子载波" class="headerlink" title="导频子载波"></a>导频子载波</h5><p>-21 -7 1 21</p><h3 id="接受机"><a href="#接受机" class="headerlink" title="接受机"></a>接受机</h3><p><img src="/2020/09/20/wifi4-chap02-phy/31.png"></p><h1 id="HT的"><a href="#HT的" class="headerlink" title="HT的"></a>HT的</h1><p>之前的关键特色  MIMO SDM</p><h2 id="40MHZ信道"><a href="#40MHZ信道" class="headerlink" title="40MHZ信道"></a>40MHZ信道</h2><p>128个子载波 保护带 左边 6个空 右边 5个空 中间 3个空 -1 0 1 ，<br>6个导频 来更精确跟踪相位 </p><h3 id="40mhz信道设计"><a href="#40mhz信道设计" class="headerlink" title="40mhz信道设计"></a>40mhz信道设计</h3><p>相邻结合  NPrimary_ch=36 Secondary=1 代表 36+1*4 次信道</p><h3 id="两个编码器"><a href="#两个编码器" class="headerlink" title="两个编码器"></a>两个编码器</h3><p><img src="/2020/09/20/wifi4-chap02-phy/36.png"></p><h2 id="20MHZ-额外-数据子载波"><a href="#20MHZ-额外-数据子载波" class="headerlink" title="20MHZ 额外 数据子载波"></a>20MHZ 额外 数据子载波</h2><p>最左 和最右各拿两个 </p><h2 id="MCS-Modulation-and-coding-scheme-空间流-码率"><a href="#MCS-Modulation-and-coding-scheme-空间流-码率" class="headerlink" title="MCS Modulation and coding scheme 空间流 码率"></a>MCS Modulation and coding scheme 空间流 码率</h2><p><img src="/2020/09/20/wifi4-chap02-phy/37.png"></p><p>PER packet error rate,错包率</p><h2 id="GreenField-GF-前导码（不支持传统-OFDM）"><a href="#GreenField-GF-前导码（不支持传统-OFDM）" class="headerlink" title="GreenField GF 前导码（不支持传统 OFDM）"></a>GreenField GF 前导码（不支持传统 OFDM）</h2><h2 id="短保护间隔"><a href="#短保护间隔" class="headerlink" title="短保护间隔"></a>短保护间隔</h2><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="信道分配"><a href="#信道分配" class="headerlink" title="信道分配"></a>信道分配</h2><p>每个信道号 5MHZ 以下都是center频率</p><p>2.4G  1,2   2412,2417 </p><p>5G 36、40、……、64 5180~ 5320</p><p>5G  100<del>140 5500</del>5700<br>    149~165 5745</p><h2 id="MCS"><a href="#MCS" class="headerlink" title="MCS"></a>MCS</h2><p><img src="/2020/09/20/wifi4-chap02-phy/39.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/40.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/41.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/42.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/43.png"></p><h2 id="波形参数"><a href="#波形参数" class="headerlink" title="波形参数"></a>波形参数</h2><p><img src="/2020/09/20/wifi4-chap02-phy/44.png"></p><h1 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h1><h2 id="接受分集-MRC-最大比合并"><a href="#接受分集-MRC-最大比合并" class="headerlink" title="接受分集  MRC (最大比合并)"></a>接受分集  MRC (最大比合并)</h2><blockquote><p>接收机的天线数量大于发送信号空间流数量，分集级数增加量等于接受天线和发送空间流数量差。</p></blockquote><p><img src="/2020/09/20/wifi4-chap02-phy/47.png"></p><p>MIMO 改善 SNR</p><h2 id="空间扩展-SE"><a href="#空间扩展-SE" class="headerlink" title="空间扩展 SE"></a>空间扩展 SE</h2><blockquote><p>较多天线发送较少空间流</p></blockquote><h2 id="空时块编码-STBC"><a href="#空时块编码-STBC" class="headerlink" title="空时块编码 STBC"></a>空时块编码 STBC</h2><blockquote><p>发送分集，考虑 AP2<em>2  设备1</em>1  Ap到设备 下行线2<em>1STBC<br>设备到AP上行线1</em>2MRC</p></blockquote><p>两组数据取样经过编码 两个天线两个码元周期<br><img src="/2020/09/20/wifi4-chap02-phy/45.png"></p><blockquote><p>2<em>1 STBC PER1%性能比1</em>1高5.5db，比SE高4db，比MRC少4db<br>相对MRC STBC有3db功率代价</p></blockquote><p><img src="/2020/09/20/wifi4-chap02-phy/46.png"></p><p><img src="/2020/09/20/wifi4-chap02-phy/47.png"></p><blockquote><p>发射机框图<br><img src="/2020/09/20/wifi4-chap02-phy/48.png"></p></blockquote><blockquote><p>字段<br><img src="/2020/09/20/wifi4-chap02-phy/49.png"></p></blockquote><blockquote><p>长度计算<br><img src="/2020/09/20/wifi4-chap02-phy/50.png"></p></blockquote><h2 id="LDPC"><a href="#LDPC" class="headerlink" title="LDPC"></a>LDPC</h2><p>三种长度 648bit、1296bit、1944bit，信息bit根据MCS码率</p><p>数据分组长度越长 有效码率越大</p><p>不需要交织</p><p>与BCC比较<br><img src="/2020/09/20/wifi4-chap02-phy/51.png"></p>]]></content>
      
      
      <categories>
          
          <category> wifi4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wifi4-chap01-backGround</title>
      <link href="2020/09/20/wifi4-chap01-background/"/>
      <url>2020/09/20/wifi4-chap01-background/</url>
      
        <content type="html"><![CDATA[<h1 id="802-11-发展"><a href="#802-11-发展" class="headerlink" title="802.11 发展"></a>802.11 发展</h1><p>PHY 物理层</p><p>MAC层 通用媒体接入控制</p><p>802.11LLC+802.11MAC =链路层   802.11PHY=物理层<br><img src="/2020/09/20/wifi4-chap01-background/1.png"></p><p>1997最初三种PHY：红外线、2.4GHZ调频扩频 FHSS 2.4G 直接序列扩频 DSSS</p><p>802.11a OFDM 引入 但是要在5G，2001，2.4G可以用OFDM<br><img src="/2020/09/20/wifi4-chap01-background/2.png"></p><h1 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h1><p>BSS、ESS、DS</p><p><img src="/2020/09/20/wifi4-chap01-background/3.png"></p><blockquote><p><a href="https://forum.huawei.com/enterprise/zh/thread-318127-1-1.html">https://forum.huawei.com/enterprise/zh/thread-318127-1-1.html</a></p></blockquote><h1 id="802-11n特性"><a href="#802-11n特性" class="headerlink" title="802.11n特性"></a>802.11n特性</h1><p>MIMO 空分复用 40MHZ</p><p><img src="/2020/09/20/wifi4-chap01-background/4.png"><br><img src="/2020/09/20/wifi4-chap01-background/5.png"></p>]]></content>
      
      
      <categories>
          
          <category> wifi4 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap07-Sorting</title>
      <link href="2020/09/15/data-structures-and-algorithms-chap07-sorting/"/>
      <url>2020/09/15/data-structures-and-algorithms-chap07-sorting/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序</a><ul><li><a href="#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90">算法分析</a></li></ul></li><li><a href="#%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F%E7%9A%84%E5%AE%9A%E7%90%86">简单排序的定理</a></li><li><a href="#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F%E5%A2%9E%E9%87%8F%E5%BA%8F%E5%88%97%E6%8E%92%E5%BA%8F">希尔排序（增量序列排序）</a><ul><li><a href="#%E5%B8%8C%E5%B0%94%E5%A2%9E%E9%87%8F">希尔增量</a></li><li><a href="#hibbard%E5%A2%9E%E9%87%8F">Hibbard增量</a></li></ul></li><li><a href="#%E5%A0%86%E6%8E%92%E5%BA%8F">堆排序</a></li><li><a href="#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E6%9C%80%E5%B0%8F%E6%AF%94%E8%BE%83%E6%AC%A1%E6%95%B0">归并排序 （最小比较次数）</a><ul><li><a href="#%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%88%86%E6%9E%90">算法时间分析</a></li><li><a href="#%E6%80%BB%E7%BB%93">总结</a></li></ul></li><li><a href="#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a><ul><li><a href="#%E9%80%89%E5%8F%96%E6%9E%A2%E7%BA%BD%E5%85%83">选取枢纽元</a></li><li><a href="#%E5%88%86%E5%89%B2%E6%96%B9%E6%B3%95">分割方法</a></li><li><a href="#%E5%B0%8F%E6%95%B0%E7%BB%84">小数组</a></li><li><a href="#%E5%88%86%E6%9E%90">分析</a></li></ul></li><li><a href="#%E9%80%89%E6%8B%A9kth-min%E7%9A%84%E5%B9%B3%E5%9D%87on%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9">选择Kth Min的平均O(N)算法 （快速选择）</a></li><li><a href="#%E6%8E%92%E5%BA%8F%E4%B8%8B%E5%B1%8A">排序下届</a></li><li><a href="#%E9%80%9A%E8%BF%87%E4%BF%A1%E6%81%AF%E9%87%8F%E5%86%B3%E5%AE%9A%E4%B8%8B%E5%B1%8A">通过信息量决定下届</a></li><li><a href="#%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F%E6%A1%B6%E6%8E%92%E5%BA%8F%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5">线性时间排序：桶排序、基数排序（特殊情况）</a></li><li><a href="#%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F">外部排序</a></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#7173-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">7.1~7.3 插入排序</a></li><li><a href="#74710-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">7.4~7.10 希尔排序</a></li><li><a href="#711714-%E5%A0%86%E6%8E%92%E5%BA%8F">7.11~7.14 堆排序</a></li><li><a href="#715718-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">7.15~7.18 归并排序</a></li><li><a href="#719722-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F1">7.19~7.22 快速排序1</a></li><li><a href="#719722-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F2">7.19~7.22 快速排序2</a></li><li><a href="#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F-%E6%A1%B6%E6%8E%92%E5%BA%8F">基数排序 桶排序</a></li></ul></li></ul><!-- /TOC --><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/1.png"></p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><pre><code>如果事先比较有序，运行时间比较快，平均O(N^2),和逆序数有关，如果逆序数O(N),插入也是线性时间</code></pre><h1 id="简单排序的定理"><a href="#简单排序的定理" class="headerlink" title="简单排序的定理"></a>简单排序的定理</h1><blockquote><p>定理1：N个互异数 数组平均逆序数 N(N-1)/4</p></blockquote><blockquote><p>定理2：通过交换相邻元素进行的任何排序平均都是下界是N^2</p></blockquote><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/2.png"></p><h1 id="希尔排序（增量序列排序）"><a href="#希尔排序（增量序列排序）" class="headerlink" title="希尔排序（增量序列排序）"></a>希尔排序（增量序列排序）</h1><p>使用序列 h1、h2、……、ht增量序列 只要h1=1 任何增量序列都ok。</p><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/3.png"></p><h2 id="希尔增量"><a href="#希尔增量" class="headerlink" title="希尔增量"></a>希尔增量</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/4.png"></p><p>最坏O(N^2) ,增量都是偶数</p><h2 id="Hibbard增量"><a href="#Hibbard增量" class="headerlink" title="Hibbard增量"></a>Hibbard增量</h2><p>最坏O(N^(3/2))<br>1、3、7、……、2^k-1</p><p>还有新的,平均O(N^(7/6)),也经常使用在大量输入</p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>先O(N)建立堆，然后 N次DeleteMin, O(NlogN),但是用了一个附加数组。 回避数组的方法，使用删除堆最后的最后一个元素存放，这样是递减的 可以用MAX堆 </p><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/5.png"></p><ul><li>算法分析<ul><li>最多 2N(logN) - O(N) 比较 </li><li>平均 2N(logN) - O(NloglogN)</li></ul></li></ul><h1 id="归并排序-（最小比较次数）"><a href="#归并排序-（最小比较次数）" class="headerlink" title="归并排序 （最小比较次数）"></a>归并排序 （最小比较次数）</h1><p>合并两个有序的表，递归排序表的前半段和后半段</p><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/6.png"></p><h2 id="算法时间分析"><a href="#算法时间分析" class="headerlink" title="算法时间分析"></a>算法时间分析</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/7.png"><br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/8.png"></p><p>叠加 约分 得到<br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/9.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>最坏运行时间O(NlogN),需要线性附加内存，把数组拷到临时数组最终还要拷贝回来，根据比较元素和数组开销（与语言有关）</code></pre><ul><li><p>java</p><ul><li>泛型排序（Comparator),元素比较昂贵（不内嵌），移动元素省时，引用赋值。标准库泛型排序的方法</li><li>标准库基本类型用快速排序，少的多的数据移动</li></ul></li><li><p>C++</p><ul><li>移动昂贵，编译器内嵌比较，用快速排序</li></ul></li></ul><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/10.png"></p><h2 id="选取枢纽元"><a href="#选取枢纽元" class="headerlink" title="选取枢纽元"></a>选取枢纽元</h2><p>无论什么枢纽元都可以，但是有好有坏</p><ul><li><p>错误方法：选第一个元素 ，输入随机无所谓，要是有序的，就是O(N^2)</p></li><li><p>安全方法：随机数，开销可能比较大</p></li><li><p>三数中值法： 左1 、 右1 、中心 三数取中值 （比较好)</p></li></ul><h2 id="分割方法"><a href="#分割方法" class="headerlink" title="分割方法"></a>分割方法</h2><p>有几种，这种能有好结果</p><p>将枢纽元和最后一位交换，i 指向第一个，j倒数第二个</p><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/11.png"></p><p>假设都不相等，i在j左边 ,i找大元素 j找小元素然后停止</p><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/12.png"></p><p>考虑相等情况，相等要交换吗？ 要的，不停止，想象一下容易产生不平衡数组。从而退化到O(N^2)</p><h2 id="小数组"><a href="#小数组" class="headerlink" title="小数组"></a>小数组</h2><p>小数组 N《=20 快速排序不如插入排序，由于排序是递归的，这种情况经常发生。使用这种策略能提高15%</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>c是选取枢纽元时间<br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/13.png"></p><ul><li><p>最坏情况</p><ul><li>枢纽元一直是最小元素<br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/14.png"></li></ul></li><li><p>最好</p><ul><li>枢纽元一直是中间元素<br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/15.png"></li></ul></li><li><p>平均</p><ul><li>枢纽元平均每个都有可能<br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/16.png"><br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/17.png"></li></ul></li></ul><p>都是通过递归求和得到的</p><h1 id="选择Kth-Min的平均O-N-算法-（快速选择）"><a href="#选择Kth-Min的平均O-N-算法-（快速选择）" class="headerlink" title="选择Kth Min的平均O(N)算法 （快速选择）"></a>选择Kth Min的平均O(N)算法 （快速选择）</h1><p>步骤</p><ol><li>&lt;=cuttoff 小数组用插入排序 ，返回Kth Min</li><li>选枢纽元</li><li>像快排一样，做一次操作。</li><li>K《S1的元素个数 肯定就在S1里面 quickFind(S1,k) 反之 quickFind(S2,k-s1.length-1)</li></ol><h1 id="排序下届"><a href="#排序下届" class="headerlink" title="排序下届"></a>排序下届</h1><p>决策树，每一种算法都可以用决策树表示</p><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/18.png"></p><p>Ω(NlogN)</p><ul><li>定理一：深度是d 最多2^d片叶子 显然</li></ul><ul><li>定理二：最坏log(N!)比较 </li></ul><p>下届 Ω(NlogN) Ω(代表下届)</p><h1 id="通过信息量决定下届"><a href="#通过信息量决定下届" class="headerlink" title="通过信息量决定下届"></a>通过信息量决定下届</h1><ul><li>任意寻找最小元至少N-1次比较 一次比较只能一个单元信息</li><li>同时找最大最小 需要2N-2信息量 至多N/2能出两个信息量 （比小的小 比大的大）需要[3N/2]-2次比较 </li></ul><h1 id="线性时间排序：桶排序、基数排序（特殊情况）"><a href="#线性时间排序：桶排序、基数排序（特殊情况）" class="headerlink" title="线性时间排序：桶排序、基数排序（特殊情况）"></a>线性时间排序：桶排序、基数排序（特殊情况）</h1><ul><li>桶排序<br>知道输入数据小于M的正整数组成，使用M大小的数组（桶），读入一个数A count[A]++ 之后扫描M数组 得到结果 。</li><li>基数排序<br>值域 0<del>999 中10个数字 （0</del>B^p-1)，不能桶排  太多桶了。可以几趟桶排，运行时间 O(p(N+b)) 下图 p3 b 10<br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/19.png"></li></ul><blockquote><p>基数排序应用 字符串排序，假设字符串同样长度，对每个字符使用桶。</p></blockquote><ul><li>计数基数排序<br>  不用ArrayList数组</li></ul><h1 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h1><pre><code>装不进内存，内存能直接寻址，希尔排序的a[i]、a[i-hk],堆排序a[i]、a[i*2+1] 快速排序的三数中值法啊a[left] a[right] a[center]，但是磁盘读取只能顺序访问,数据就算刚好在磁盘上，还要移动</code></pre><p>最简单的就是归并</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="7-1-7-3-插入排序"><a href="#7-1-7-3-插入排序" class="headerlink" title="7.1~7.3 插入排序"></a>7.1~7.3 插入排序</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/20.png"></p><blockquote><p>1:如下</p></blockquote><blockquote><p>2:O(N) 因为不会交换</p></blockquote><blockquote><p>3:存在于a [i]和a [i + k]之间的逆序被删除。 这表明至少有一个逆序是删除。 对于每个k -1个元素a [i + 1]，a [i + 2]，…，a [i + k-1]，最多两个反演<br>可以通过交换删除。 最大值为2（k − 1）+ 1 = 2k − 1。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap07</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Stream</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyInsertSort * @Author: Wibur * @Description: * @Date: Created in 18:58 2020/9/17 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInsertSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Anytype</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Anytype</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Anytype</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span> k <span class="token operator">&gt;</span>j<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Anytype</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Anytype</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">void</span> <span class="token function">insertSort1</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Anytype</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//先将int数组转换为数值流</span>        <span class="token class-name">IntStream</span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//流中的元素全部装箱，转换为流 ----&gt;int转为Integer</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerStream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将流转换为数组</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> integerStream<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertSort1</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token operator">:</span>integers             <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意第二种实现，比较简洁。通过直接移动来看，找到对应在赋值。而不是通过交换，二叉堆类似想法。 少交换</p><h2 id="7-4-7-10-希尔排序"><a href="#7-4-7-10-希尔排序" class="headerlink" title="7.4~7.10 希尔排序"></a>7.4~7.10 希尔排序</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/21.png"></p><blockquote><p>7.4: 如下</p></blockquote><blockquote><p>7.5~7.8:略</p></blockquote><blockquote><p>7.9:a O(NlogN) 没交换 增量 LogN </p></blockquote><blockquote><p>7.9:b 很容易证明，在hk排序之后，没有元素比hk距离其更远<br>正确的位置。 因此，如果对于常数c，增量满足hk + 1≤chk，则意味着O（log N）增量，则界限为O（N log N）。</p></blockquote><blockquote><p>7.10<br><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/22.png"><br>（a）不，因为连续的增量仍然有可能共享一个公因子。 一个例子<br>是序列1、3、9、21、45，h(t + 1) = 2(ht) + 3。<br>（b）是的，因为连续的增量是相对素数。 运行时间变为O（N3 / 2）。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap07</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Stream</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyShellSort * @Author: Wibur * @Description: * @Date: Created in 20:57 2020/9/17 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyShellSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Anytype</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Anytype</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> shell<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>shell<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">=</span>shell<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">,</span>i<span class="token operator">=</span>shell<span class="token punctuation">[</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">?</span>j<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">+=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Anytype</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> l<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> k<span class="token punctuation">;</span> l<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span> <span class="token punctuation">;</span> l<span class="token operator">-=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>l<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//先将int数组转换为数值流</span>        <span class="token class-name">IntStream</span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//流中的元素全部装箱，转换为流 ----&gt;int转为Integer</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerStream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将流转换为数组</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> integerStream<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">shellSort</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token operator">:</span>integers        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-11-7-14-堆排序"><a href="#7-11-7-14-堆排序" class="headerlink" title="7.11~7.14 堆排序"></a>7.11~7.14 堆排序</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/23.png"></p><blockquote><p>7.11 如下</p></blockquote><blockquote><p>7.12 任何输入 堆排序的比较时间都是O(NLogN)</p></blockquote><blockquote><p>7.13 顺序输入时候</p></blockquote><blockquote><p>7.14 如下<br>注意：low 到 high  本质上是 0 ~ high-low的二叉堆</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap06</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyBinaryHeap * @Author: Wibur * @Description: * @Date: Created in 11:06 2020/9/14 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBinaryHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_SIZE<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token class-name">MyBinaryHeap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">MyBinaryHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyBinaryHeap</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">buildHeap</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">++</span>currentSize<span class="token operator">&gt;=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">enlargeArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> child<span class="token operator">=</span>currentSize<span class="token punctuation">;</span>        <span class="token comment">//arr[child]=x;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>child<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token punctuation">;</span>child<span class="token operator">=</span>child<span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>child<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">deleteMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnderflowException</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AnyType</span> x<span class="token operator">=</span><span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>currentSize<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//arr[0]=arr[1];</span>        <span class="token function">procolateDown</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currentSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        currentSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">procolateDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AnyType</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> child<span class="token punctuation">;</span>        <span class="token keyword">int</span> hole<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> hole <span class="token operator">=</span> i<span class="token punctuation">;</span>hole<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;=</span>currentSize <span class="token punctuation">;</span>hole<span class="token operator">=</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>            child<span class="token operator">=</span>hole<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                child<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>hole<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>hole<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildHeap</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> high<span class="token operator">=</span><span class="token function">getHighBit</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newArr<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>newArr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        currentSize<span class="token operator">=</span>newArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> currentSize<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">procolateDown</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getHighBit</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> high<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>length<span class="token operator">&gt;&gt;</span>high<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>            high<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> high<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">AnyType</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enlargeArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldArr<span class="token operator">=</span>arr<span class="token punctuation">;</span>        arr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>oldArr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>oldArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> numItems <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token class-name">MyBinaryHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBinaryHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> <span class="token number">37</span> <span class="token punctuation">)</span> <span class="token operator">%</span> numItems <span class="token punctuation">)</span>            h<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numItems<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> h<span class="token punctuation">.</span><span class="token function">deleteMin</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> i <span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Oops! "</span> <span class="token operator">+</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> newArr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>newArr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            newArr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1024</span><span class="token operator">-</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">MyBinaryHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBinaryHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-15-7-18-归并排序"><a href="#7-15-7-18-归并排序" class="headerlink" title="7.15~7.18 归并排序"></a>7.15~7.18 归并排序</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/24.png"></p><blockquote><p>7.15 如下</p></blockquote><blockquote><p>7.16 如下</p></blockquote><blockquote><p>7.17 所有输入都一样 因为都是一样的比较 和赋值次数</p></blockquote><blockquote><p>7.18 略</p></blockquote><h2 id="7-19-7-22-快速排序1"><a href="#7-19-7-22-快速排序1" class="headerlink" title="7.19~7.22 快速排序1"></a>7.19~7.22 快速排序1</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/25.png"></p><blockquote><p>7.19 如下代码</p></blockquote><blockquote><p>7.20 a:赋值少了很多 但还是O(logN*N)比较。b:多了O(NLogN)交换<br>    c:也是平均O(NogN) 只要pivot不差</p></blockquote><blockquote><p>7.21 </p></blockquote><pre class="line-numbers language-none"><code class="language-none">（a）如果选择第一个元素作为枢轴，则运行时间会退化为二次方两种情况。 对于随机输入，它仍然是O（N log N）。（b）同样的结果适用于这一关键选择。（c）如果选择一个随机元素，则所有输入的运行时间为预期的O（N log N），如果出现非常差的随机数，则存在O（N2）最坏的情况。 但是，有一个发生这种情况的机会几乎可以忽略不计。 第10章讨论了随机哲学。（d）这是一条危险的道路； 这取决于密钥的分配。 对于许多发行版，例如均匀，性能平均为O（N log N）。 对于偏斜的分布，例如输入{1、2、4、8、16、32、64，... 。 。 ，}枢轴将一直很糟糕，二次方运行时间，与输入的顺序无关。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>7.22 </p></blockquote><pre class="line-numbers language-none"><code class="language-none">（a）O（N log N），因为枢轴将完美分割。（b）必须使用哨兵来确保i和j不会超出终点。 运行时间将是（N2），因为分区步骤会将除枢轴外的所有内容都放到S1中，因为我要等到它碰到后才会停下来定点。（c）再次需要使用前哨来停止j。 这也是（N2），因为分区是不平衡。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/25.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap07</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">IntStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Stream</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyQuickSort * @Author: Wibur * @Description: * @Date: Created in 14:50 2020/9/20 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> CUT_OFF<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Anytype</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Anytype</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span>  <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Anytype</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Anytype</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token operator">&gt;</span>CUT_OFF<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Anytype</span> prviot<span class="token operator">=</span><span class="token class-name">Medium3</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">,</span>j<span class="token operator">=</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//注意在先++在运算 防止 arr[i]==a[j] 无限循环</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>prviot<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>prviot<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token class-name">MyInsertSort</span><span class="token punctuation">.</span><span class="token function">insertSort1</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Anytype</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Anytype</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Anytype</span> <span class="token class-name">Medium3</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> center<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>center<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>center<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>center<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>center<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>center<span class="token punctuation">,</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Anytype</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Anytype</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> indexX<span class="token punctuation">,</span> <span class="token keyword">int</span> indexY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Anytype</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>indexX<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>indexX<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>indexY<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>indexY<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//先将int数组转换为数值流</span>        <span class="token class-name">IntStream</span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//流中的元素全部装箱，转换为流 ----&gt;int转为Integer</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerStream <span class="token operator">=</span> stream<span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将流转换为数组</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> integerStream<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token operator">:</span>integers        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-19-7-22-快速排序2"><a href="#7-19-7-22-快速排序2" class="headerlink" title="7.19~7.22 快速排序2"></a>7.19~7.22 快速排序2</h2><p><img src="/2020/09/15/data-structures-and-algorithms-chap07-sorting/26.png"></p><blockquote><p>7.23<br>是的，但不会减少随机输入的平均运行时间。 使用三位数中位数<br>分区减少了平均运行时间，因为它使分区在<br>平均。</p></blockquote><h2 id="基数排序-桶排序"><a href="#基数排序-桶排序" class="headerlink" title="基数排序 桶排序"></a>基数排序 桶排序</h2><blockquote><p>对于字符串</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap07</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadixSort</span><span class="token punctuation">{</span>            <span class="token comment">/*     * Radix sort an array of Strings     * Assume all are all ASCII     * Assume all have length bounded by maxLen     */</span>     <span class="token comment">//方法1 适用于不同length 位置从后往前</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLen <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> BUCKETS <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>                <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>wordsByLength <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span> maxLen <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span> BUCKETS <span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordsByLength<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>            wordsByLength<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>            buckets<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> s <span class="token operator">:</span> arr <span class="token punctuation">)</span>            wordsByLength<span class="token punctuation">[</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordList <span class="token operator">:</span> wordsByLength <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> s <span class="token operator">:</span> wordList <span class="token punctuation">)</span>                arr<span class="token punctuation">[</span> idx<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>                <span class="token keyword">int</span> startingIndex <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> maxLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos<span class="token operator">--</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            startingIndex <span class="token operator">-=</span> wordsByLength<span class="token punctuation">[</span> pos <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> startingIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                buckets<span class="token punctuation">[</span> arr<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span> pos <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        idx <span class="token operator">=</span> startingIndex<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> thisBucket <span class="token operator">:</span> buckets <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> s <span class="token operator">:</span> thisBucket <span class="token punctuation">)</span>                    arr<span class="token punctuation">[</span> idx<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>                                thisBucket<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/*     * Radix sort an array of Strings     * Assume all are all ASCII     * Assume all have same length     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSortA</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> stringLen <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> BUCKETS <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">[</span>BUCKETS<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BUCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>            buckets<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> stringLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos<span class="token operator">--</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> s <span class="token operator">:</span> arr <span class="token punctuation">)</span>                buckets<span class="token punctuation">[</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span> pos <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> thisBucket <span class="token operator">:</span> buckets <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> s <span class="token operator">:</span> thisBucket <span class="token punctuation">)</span>                    arr<span class="token punctuation">[</span> idx<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>                                thisBucket<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>           <span class="token comment">/*     * Counting radix sort an array of Strings     * Assume all are all ASCII     * Assume all have same length     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">countingRadixSort</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> stringLen <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> BUCKETS <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span> <span class="token class-name">N</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> in <span class="token operator">=</span> arr<span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> out <span class="token operator">=</span> buffer<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> stringLen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos<span class="token operator">--</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span> BUCKETS <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                count<span class="token punctuation">[</span> in<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span> pos <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">&lt;=</span> BUCKETS<span class="token punctuation">;</span> b<span class="token operator">++</span> <span class="token punctuation">)</span>                count<span class="token punctuation">[</span> b <span class="token punctuation">]</span> <span class="token operator">+=</span> count<span class="token punctuation">[</span> b <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                out<span class="token punctuation">[</span> count<span class="token punctuation">[</span> in<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span> pos <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>                          <span class="token comment">// swap in and out roles</span>            <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> tmp <span class="token operator">=</span> in<span class="token punctuation">;</span>            in <span class="token operator">=</span> out<span class="token punctuation">;</span>            out <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                   <span class="token comment">// if odd number of passes, in is buffer, out is arr; so copy back</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> stringLen <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                out<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> LEN <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> LEN<span class="token punctuation">;</span> <span class="token comment">// 3 + r.nextInt( 7 ); // between 3 and 9 characters</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>                str <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token string">'a'</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span> <span class="token number">26</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            lst<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span> lst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span> lst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span> lst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span> lst<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        lst<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span> arr1 <span class="token punctuation">)</span><span class="token punctuation">;</span>        lst<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span> arr2 <span class="token punctuation">)</span><span class="token punctuation">;</span>        lst<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span> arr3 <span class="token punctuation">)</span><span class="token punctuation">;</span>        lst<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span> arr4 <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span> arr1 <span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Elapsed: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span> end <span class="token operator">-</span> start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">countingRadixSort</span><span class="token punctuation">(</span> arr2<span class="token punctuation">,</span> LEN <span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Elapsed: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span> end <span class="token operator">-</span> start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">radixSort</span><span class="token punctuation">(</span> arr3<span class="token punctuation">,</span> LEN <span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Elapsed: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span> end <span class="token operator">-</span> start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">radixSortA</span><span class="token punctuation">(</span> arr4<span class="token punctuation">,</span> LEN <span class="token punctuation">)</span><span class="token punctuation">;</span>        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Elapsed: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span> end <span class="token operator">-</span> start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>arr1<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> arr2<span class="token punctuation">[</span> i <span class="token punctuation">]</span>  <span class="token punctuation">)</span> <span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"OOPS!!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wifi6-Rate-Caculate</title>
      <link href="2020/09/13/wifi6-rate-caculate/"/>
      <url>2020/09/13/wifi6-rate-caculate/</url>
      
        <content type="html"><![CDATA[<h1 id="基本速率概念"><a href="#基本速率概念" class="headerlink" title="基本速率概念"></a>基本速率概念</h1><blockquote><p>速率=一次数据量/传输时间</p></blockquote><p>一次传输数据量 就是Symbol QAM每个子载波调制，一起传</p><p><img src="/2020/09/13/wifi6-rate-caculate/1.png"></p><p>802.11n提出 减少<br><img src="/2020/09/13/wifi6-rate-caculate/2.png"></p><p>wifi6 是4倍的OFDM符号时间<br><img src="/2020/09/13/wifi6-rate-caculate/3.png"></p><h1 id="编码率（保证有效）"><a href="#编码率（保证有效）" class="headerlink" title="编码率（保证有效）"></a>编码率（保证有效）</h1><p>802.11n之前是不支持MIMO-OFDM 最高编码3/4  MIMO-OFDM<br><img src="/2020/09/13/wifi6-rate-caculate/4.png"></p><h1 id="频分多路（FDM-一个信道-多个子信道"><a href="#频分多路（FDM-一个信道-多个子信道" class="headerlink" title="频分多路（FDM) 一个信道 多个子信道"></a>频分多路（FDM) 一个信道 多个子信道</h1><blockquote><p>802.11a之后支持OFDM<br><img src="/2020/09/13/wifi6-rate-caculate/5.png"></p></blockquote><blockquote><p>802.11ax之后支持OFDMA 单一信道在分多个正交信道<br><img src="/2020/09/13/wifi6-rate-caculate/6.png"></p></blockquote><p>所有 FDM的802.11协议，最小子载波带宽312.5khz，20MHZ 就有64个载波，原因只有48个传输。 OFMA 载波到234个.</p><p><img src="/2020/09/13/wifi6-rate-caculate/7.png"><br>频宽加倍 不一定子载波加倍 ，因为实际使用子信道加起来没那么多</p><h1 id="如何调制-决定一次运输速率"><a href="#如何调制-决定一次运输速率" class="headerlink" title="如何调制 决定一次运输速率"></a>如何调制 决定一次运输速率</h1><p><img src="/2020/09/13/wifi6-rate-caculate/8.png"></p><h1 id="如何发送-Spatial-Streams-（MIMO）"><a href="#如何发送-Spatial-Streams-（MIMO）" class="headerlink" title="如何发送 Spatial Streams （MIMO）"></a>如何发送 Spatial Streams （MIMO）</h1><p>空间流数，说白点就是使用多少根天线发送和接收数据。就是多输入多输出技术</p><p><img src="/2020/09/13/wifi6-rate-caculate/9.png"></p><h1 id="最终计算"><a href="#最终计算" class="headerlink" title="最终计算"></a>最终计算</h1><p>速率=一次传输量/传输时间</p><p>一次传输量=一个Symbol=子载波个数<em>子载波编码数</em>子载波编码率*空间流数（MIMO）</p><p>传输时间=Symbol Time</p><p>WiFi6使用80MHz信道，1024-QAM可以产生600Mb / s的理论单流数据速率，这个速率是如何得到的？ 一个空间流</p><p><img src="/2020/09/13/wifi6-rate-caculate/11.png"></p><p>根据上文内容查表可得</p><ul><li>子载波个数：980</li><li>子载波编码数：10</li><li>编码率：5/6</li><li>空间流：1</li><li>GI防护时间800ns</li></ul><p>R11AX = 10×980×5/6×78125×12.8/(12.8+0.8)<br>        =600,490,196 bits/s<br>        =600Mbs</p><ul><li>子载波个数：234</li><li>子载波编码数：8</li><li>编码率：5/6</li><li>载波频率：312.5K</li><li>空间流：1</li><li>GI防护时间400ns</li></ul><p>计算11AC 80M Bandwidth、1个空间流的最大理论速率。</p><p>R11AC = 8×234×5/6×312500×3.2/ (3.2+0.4)</p><p>=4333333333.33</p><p>=433Mbits/s</p>]]></content>
      
      
      <categories>
          
          <category> wifi6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap06-priorty_queue_heap</title>
      <link href="2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/"/>
      <url>2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/</url>
      
        <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><ul><li>打印机，一般是队列，想优先处理某个 比如一个1000页，其他就几页</li><li>操作系统调度，某些作业优先权</li></ul><blockquote><p>和一般队列对比：入队出队。对应优先队列插入和删除最小<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/1.png"></p></blockquote><h1 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h1><ul><li>链表<ul><li>表头插入O(1),O(N)删除</li><li>维护有序O(1)删除，O(N)插入</li></ul></li><li>二叉树<ul><li>平均O(LogN)，但是插入随机，删除不是，不平衡</li></ul></li></ul><h1 id="二叉堆-binary-heap"><a href="#二叉堆-binary-heap" class="headerlink" title="二叉堆(binary heap)"></a>二叉堆(binary heap)</h1><p>最快O(logN)</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/2.png"></p><blockquote><p>可使用数组实现<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/3.png"></p></blockquote><ul><li>特点<ul><li>i 的左儿子在2i 右儿子在2i+1 父亲在i/2</li><li>Comparable对象数组，和堆大小数字</li></ul></li></ul><h2 id="堆序性质"><a href="#堆序性质" class="headerlink" title="堆序性质"></a>堆序性质</h2><p>最小元在根上</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><blockquote><p>插入<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/4.png"><br>上溢法</p></blockquote><blockquote><p>实现：从下置上，循环比较。注意将数组0空的好处，放入x用于插入最小值的跳出循环<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/6.png"></p></blockquote><blockquote><p>DeleteMin<br>堆少了一个元素 最后一个元素必须移走<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/5.png"><br>下滤法</p></blockquote><blockquote><p>实现：把根结点置空，将小的结点替代，直到放入找到小于的位置，当偶数时。节点不总是有两个儿子，简单的方法时检测在最后放入一个备用值，奇数时用不到，偶数时可用<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/7.png"></p></blockquote><p>最坏O(LogN)</p><h2 id="其他堆操作"><a href="#其他堆操作" class="headerlink" title="其他堆操作"></a>其他堆操作</h2><p>最小元堆的序信号很少，上述操作无法知道元素都在什么地方,下三个都是最坏O(logN)</p><blockquote><p>decreaseKey(p,△)（降低关键字的值）<br>对系统管理员有效，上溢，使他们的程序最高优先运行</p></blockquote><blockquote><p>increaseKey(p,△) （增加关键词的值）<br>增加位置p的项，下滤，降低过多消耗CPU时间进程优先级</p></blockquote><blockquote><p>delete(删除)<br>先decreaseKey(p,无穷大), 在deleMin()</p></blockquote><blockquote><p>buildHeap<br>N项输入，N个insert  平均O(N) 一般可以直接将N项放入树，然后对节点下溢<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/8.png"><br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/9.png"><br>虚线的大小就是运行时间，所有节点高度和，易得O(N)</p></blockquote><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="选择问题"><a href="#选择问题" class="headerlink" title="选择问题"></a>选择问题</h2><blockquote><p>找出一个集合第K个元素,第一章算法 1A:简单排序O(N^2)和 1B:读k排序,在读入每个元素排序插入 O(N*k) K最差取N/2</p></blockquote><blockquote><p>6A: Build Heap 然后执行K次deleteMin 总的最差O(N+kLogN)<br>if K=O(N/LogN) 就是O(N) 大于的K就是O(klogN)</p></blockquote><p>对于K=N运行程序，在元素离开堆的时候记录值，实际上已经对输入以O(NlogN)来排序</p><blockquote><p>6B:同1B 维持一个k个最大元素集合，小于第K个最大（堆的最小）<br>buildHeap O(K) 检测O(N-K) 处理O(logK) 总时间O(K+(N-K)logK)=O(Nlogk)</p></blockquote><h2 id="事件模拟"><a href="#事件模拟" class="headerlink" title="事件模拟"></a>事件模拟</h2><p>银行排队到k个出纳员</p><h1 id="d-堆"><a href="#d-堆" class="headerlink" title="d-堆"></a>d-堆</h1><p>树变浅了,insert O(log<sub>d</sub> N),DeleteMin  O(dLog<sub>d</sub> N)</p><p>可以看做主存装不下，加上的,特别是2的N次方 可以用位移<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/10.png"></p><h1 id="左式堆（为了Merge"><a href="#左式堆（为了Merge" class="headerlink" title="左式堆（为了Merge)"></a>左式堆（为了Merge)</h1><h1 id="斜堆（自适应左式堆）"><a href="#斜堆（自适应左式堆）" class="headerlink" title="斜堆（自适应左式堆）"></a>斜堆（自适应左式堆）</h1><h1 id="二项队列-也是Merge"><a href="#二项队列-也是Merge" class="headerlink" title="二项队列 (也是Merge)"></a>二项队列 (也是Merge)</h1><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/11.png"></p><p>高度k的二项树节点2^k次方，深度d节点C<sub>k</sub><sup>d</sup> 例如 B4 d=2 C42=6</p><p>大小13的优先队列可以表示成1101  用B3 B2 B0</p><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/12.png"></p><blockquote><p>合并过程 H2 的0是H3的部分， H1、H2都有1变成高度2 三个高度2，取一个到2 其他合并成3 </p></blockquote><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/12.png"></p><p>删除最小<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/13.png"></p><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/14.png"></p><p>删除值<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/15.png"></p><h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><p>PriorityQueue<br><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/16.png"></p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="6-1-Insert和FindMin-都能常数吗？"><a href="#6-1-Insert和FindMin-都能常数吗？" class="headerlink" title="6.1 Insert和FindMin 都能常数吗？"></a>6.1 Insert和FindMin 都能常数吗？</h2><p>可以,比如链表直接插入 维护一个最小值 但是会影响deleteMin</p><h2 id="6-2-二叉堆插入-以及直接建立O-N"><a href="#6-2-二叉堆插入-以及直接建立O-N" class="headerlink" title="6.2 二叉堆插入 以及直接建立O(N)"></a>6.2 二叉堆插入 以及直接建立O(N)</h2><p>分别利用insert 和buildHeap</p><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/17.png"></p><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/18.png"></p><h2 id="6-3-对6-2-3次deleteMin"><a href="#6-3-对6-2-3次deleteMin" class="headerlink" title="6.3 对6.2 3次deleteMin"></a>6.3 对6.2 3次deleteMin</h2><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/19.png"></p><h2 id="6-4-不完全二叉树数组表示"><a href="#6-4-不完全二叉树数组表示" class="headerlink" title="6.4 不完全二叉树数组表示"></a>6.4 不完全二叉树数组表示</h2><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/20.png"></p><ul><li>a: 两个附加层，一层多N 两层多2N 一个多3N 4N数组</li><li>b: 深度d 节点总数最多为2<sup>d+1</sup>-1  2<sup>2logN+1</sup> =2N^2= O（N^2)</li><li>c: O(N^4.1)</li><li>d: 深度N  2<sup>N+1</sup> O(2^N)</li></ul><h2 id="6-5-二叉堆实现"><a href="#6-5-二叉堆实现" class="headerlink" title="6.5 二叉堆实现"></a>6.5 二叉堆实现</h2><ul><li>实现注意<ul><li>Remove异常抛出的可以继承RuntimeExpection 这样就处理了</li><li>插入将头空出,表大小为2*length+1</li><li>buildHeap</li></ul></li></ul><h2 id="6-6-堆大小"><a href="#6-6-堆大小" class="headerlink" title="6.6 堆大小"></a>6.6 堆大小</h2><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/21.png"></p><p>2^(h+1)-1 -2^(h-2) +2</p><h2 id="6-7-证明buildHeap-比较上界"><a href="#6-7-证明buildHeap-比较上界" class="headerlink" title="6.7 证明buildHeap 比较上界"></a>6.7 证明buildHeap 比较上界</h2><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/22.png"></p><p>证明：</p><ul><li><p>所有节点总高度 = 根节点高度 + 左子树所有节点高度 + 右子树所有节点高度</p></li><li><p>高度=点个数-点个数的二进制表示的一的个数<br>例如：15-（1111） =15 -4 =1</p></li><li><p>L+R=N-1 </p></li></ul><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/23.png"></p><h2 id="6-12-Buildheap-和-一项项插入对比"><a href="#6-12-Buildheap-和-一项项插入对比" class="headerlink" title="6.12 Buildheap 和 一项项插入对比"></a>6.12 Buildheap 和 一项项插入对比</h2><p>仿真表明，线性时间算法不仅在最坏情况的输入上而且在随机数据上都更快。</p><h2 id="6-13-将二分查找应用在Deletemin"><a href="#6-13-将二分查找应用在Deletemin" class="headerlink" title="6.13 将二分查找应用在Deletemin"></a>6.13 将二分查找应用在Deletemin</h2><p><img src="/2020/09/12/data-structures-and-algorithms-chap06-priorty-queue-heap/24.png"></p><p>（a）如果将堆组织为（最小）堆，则从根的孔开始，通过最小子集找到一条通往叶子的路径。要求大致进行log N比较。要找到移动孔的正确位置，请对对数N个元素执行二进制搜索。这需要O（log log N）比较。 </p><p>（b）找到最小子路径，在log N − log log N级后停止。此时，很容易确定孔是应放置在停止点上方还是下方。如果它走到下面，则继续查找路径，但是仅对路径上最后一个日志log N个元素执行二进制搜索，以进行日志N +日志log N的比较。否则，对第一个日志N-日志N个元素执行二进制搜索。二分查找最多进行log log N个比较，而路径查找仅取log N-log log N，因此在这种情况下的总数为logN。因此，最坏的情况是第一种情况。 </p><p>（c）可以将边界改进为log N + log ∗ N + O（1），其中log ∗ N是逆阿克曼函数（请参阅第8章）。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wifi-detail-1</title>
      <link href="2020/09/03/wifi-detail-1/"/>
      <url>2020/09/03/wifi-detail-1/</url>
      
        <content type="html"><![CDATA[<h1 id="802-11"><a href="#802-11" class="headerlink" title="802.11"></a>802.11</h1><h1 id="四种主要物理组件"><a href="#四种主要物理组件" class="headerlink" title="四种主要物理组件"></a>四种主要物理组件</h1><h2 id="工作站（Station"><a href="#工作站（Station" class="headerlink" title="工作站（Station)"></a>工作站（Station)</h2><p>构建网络的主要目的是为了在工作站间传送数据。所谓工作站，是指配备无线网络接口的计算设备。</p><h2 id="接入点（Access-Point）"><a href="#接入点（Access-Point）" class="headerlink" title="接入点（Access Point）"></a>接入点（Access Point）</h2><p>802.11网络所使用的帧必须经过转换，方能被传递至其他不同类型的网络。具备无线至有线的桥接功能的设备称为接入点，接入点的功能不仅于此，但桥接最为重要。</p><h2 id="无线媒介（Wireless-Medium）"><a href="#无线媒介（Wireless-Medium）" class="headerlink" title="无线媒介（Wireless Medium）"></a>无线媒介（Wireless Medium）</h2><p>802.11标准以无线媒介在工作站之间传递帧。其所定义的物理层不只是一种，802.11最初标准化了两种射频物理层以及一种红外线物理层。</p><h2 id="分布式系统（Distribution-System）"><a href="#分布式系统（Distribution-System）" class="headerlink" title="分布式系统（Distribution System）"></a>分布式系统（Distribution System）</h2><p>当几个接入点串联以覆盖较大区域时，彼此之间必须相互通信以掌握移动式工作站的行踪。分布式系统属于802.11的逻辑组件，负责将帧转送至目的地。</p>]]></content>
      
      
      <categories>
          
          <category> wifi6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap05-Hash</title>
      <link href="2020/09/02/data-structures-and-algorithms-chap05-hash/"/>
      <url>2020/09/02/data-structures-and-algorithms-chap05-hash/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%80%E8%88%AC%E6%83%B3%E6%B3%95">一般想法</a></li><li><a href="#%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0">散列函数</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81">解决冲突</a><ul><li><a href="#%E5%88%86%E7%A6%BB%E9%93%BE%E6%8E%A5%E6%B3%95">分离链接法</a></li><li><a href="#%E6%97%A0%E9%93%BE%E8%A1%A8%E6%95%A3%E5%88%97">无链表散列</a><ul><li><a href="#%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B%E6%B3%95">线性探测法</a></li><li><a href="#%E5%B9%B3%E6%96%B9%E6%8E%A2%E6%B5%8B">平方探测</a><ul><li><a href="#%E5%AE%9E%E7%8E%B0">实现</a></li></ul></li><li><a href="#%E5%8F%8C%E6%95%A3%E5%88%97">双散列</a></li></ul></li></ul></li><li><a href="#%E5%86%8D%E6%95%A3%E5%88%97">再散列</a></li><li><a href="#%E6%A0%87%E5%87%86%E5%BA%93%E6%95%A3%E5%88%97">标准库散列</a></li><li><a href="#%E6%9C%80%E5%9D%8Fo1%E7%9A%84%E6%95%A3%E5%88%97%E8%A1%A8">最坏O(1)的散列表</a><ul><li><a href="#%E5%AE%8C%E7%BE%8E%E6%95%A3%E5%88%97%E6%89%80%E6%9C%89%E9%A1%B9%E4%BC%98%E5%85%88%E7%9F%A5%E9%81%93">完美散列(所有项优先知道)</a></li><li><a href="#%E5%B8%83%E8%B0%B7%E9%B8%9F%E6%95%A3%E5%88%97-%E5%85%81%E8%AE%B8%E5%8A%A8%E6%80%81%E6%8F%92%E5%85%A5%E5%88%A0%E9%99%A4%E9%80%89%E6%8B%A9%E7%9A%84%E5%8A%9B%E9%87%8F">布谷鸟散列 （允许动态插入删除，选择的力量）</a></li><li><a href="#%E8%B7%B3%E6%88%BF%E5%AD%90%E6%95%A3%E5%88%97%E6%94%B9%E8%BF%9B%E7%BB%8F%E5%85%B8%E7%BA%BF%E6%80%A7%E6%8E%A2%E6%B5%8B">跳房子散列（改进经典线性探测)</a></li></ul></li><li><a href="#%E9%80%9A%E7%94%A8%E6%95%A3%E5%88%97%E6%B3%95%E9%80%9A%E7%94%A8%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0">通用散列法（通用散列函数）</a><ul><li><a href="#%E6%A2%85%E6%A3%AE%E7%B4%A0%E6%95%B0mersenne">梅森素数（Mersenne）</a></li></ul></li><li><a href="#%E5%8F%AF%E6%89%A9%E6%95%A3%E5%88%97">可扩散列</a></li><li><a href="#%E5%BA%94%E7%94%A8">应用</a></li><li><a href="#%E5%90%84%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%B3%A8%E6%84%8F%E7%82%B9">各类实现注意点</a><ul><li><a href="#%E5%88%86%E7%A6%BB%E6%95%A3%E5%88%97%E5%AE%9E%E7%8E%B0%E6%B3%A8%E6%84%8F">分离散列实现注意</a></li><li><a href="#%E5%B9%B3%E6%96%B9%E6%8E%A2%E6%B5%8B%E5%AE%9E%E7%8E%B0%E6%B3%A8%E6%84%8F">平方探测实现注意</a></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#51-%E8%AE%A1%E7%AE%97%E5%90%84%E7%A7%8D%E6%95%A3%E5%88%97%E8%A1%A8">5.1 计算各种散列表</a></li><li><a href="#52-51%E7%9A%84%E5%86%8D%E6%95%A3%E5%88%97">5.2 5.1的再散列</a></li><li><a href="#53-%E5%86%B2%E7%AA%81%E8%AE%A1%E7%AE%97">5.3 冲突计算</a></li><li><a href="#54-%E5%88%86%E7%A6%BB%E6%95%A3%E5%88%97%E9%93%BE%E8%A1%A8%E7%9A%84%E7%A8%80%E7%96%8F%E9%97%AE%E9%A2%98">5.4 分离散列链表的稀疏问题</a></li><li><a href="#56%E5%B9%B3%E6%96%B9%E6%8E%A2%E6%B5%8B-isempty-%E8%83%BD%E9%80%9A%E8%BF%87currentsize%E5%88%A4%E6%96%AD%E5%90%97">5.6平方探测 IsEmpty 能通过currentSize判断吗</a></li><li><a href="#57%E5%B9%B3%E6%96%B9%E6%8E%A2%E6%B5%8B%E6%8F%92%E5%85%A5%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%9D%9E%E6%B4%BB%E8%B7%83%E5%85%83%E7%B4%A0">5.7平方探测插入第一个非活跃元素</a></li><li><a href="#58-%E7%AB%8B%E6%96%B9%E6%8E%A2%E6%B5%8B%E4%B8%8E%E5%B9%B3%E6%96%B9%E6%8E%A2%E6%B5%8B">5.8 立方探测与平方探测</a></li><li><a href="#59-%E6%AF%8F%E6%AC%A1%E5%BE%AA%E7%8E%AF%E9%83%BD%E7%94%A8keylength%E5%80%BC%E5%BE%97%E5%90%97">5.9 每次循环都用key.length()值得吗</a></li><li><a href="#510-%E5%90%84%E7%A7%8D%E6%8E%A2%E6%B5%8B%E5%AF%B9%E6%AF%94">5.10 各种探测对比</a></li><li><a href="#511-%E7%94%A8%E6%96%B0%E7%9A%84%E5%86%B2%E7%AA%81%E5%87%BD%E6%95%B0%E5%87%8F%E8%BD%BB%E4%BA%8C%E6%AC%A1%E8%81%9A%E9%9B%86">5.11 用新的冲突函数减轻二次聚集</a></li><li><a href="#512-%E7%B1%BB%E5%86%85%E5%90%AB%E6%95%A3%E5%88%97%E5%80%BC%E6%9C%89%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98">5.12 类内含散列值有效的问题</a></li><li><a href="#513-m%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%92%8Cn%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9B%B8%E4%B9%98-%E8%BE%B9%E8%AE%A1%E7%AE%97%E8%BE%B9%E6%8E%92%E5%BA%8F">5.13 M多项式和N多项式相乘 边计算边排序</a></li><li><a href="#514-%E6%8F%8F%E8%BF%B0%E9%81%BF%E5%85%8D%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%A3%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%87%E7%A8%8B%E5%86%85%E5%AD%98%E6%B6%88%E8%80%97%E4%B8%BA%E4%BB%A3%E4%BB%B7">5.14 描述避免初始化散列表的过程（内存消耗为代价）</a></li><li><a href="#515-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%90%E4%B8%B2%E5%8C%B9%E9%85%8D">5.15 字符串子串匹配</a></li><li><a href="#516-%E8%A7%A3%E9%87%8A%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%81%E8%AE%B8java7-%E5%85%81%E8%AE%B8switch%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2-%E5%A6%82%E4%BD%95%E6%8A%8A%E6%95%A3%E5%88%97%E8%A1%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0">5.16 解释编译器允许java7 允许Switch处理字符串 （如何把散列表来实现）</a></li><li><a href="#518-%E7%AC%AC%E4%B8%80%E7%AB%A0%E5%AD%97%E8%B0%9C%E4%BC%98%E5%8C%96">5.18 第一章字谜优化</a></li><li><a href="#519-%E4%BA%8C%E6%AC%A1%E8%81%9A%E9%9B%86%E6%8F%92%E5%85%A5%E6%9C%9F%E6%9C%9B%E8%AE%A1%E7%AE%97">5.19 二次聚集插入期望计算</a></li><li><a href="#520-%E5%AE%9E%E7%8E%B0map">5.20 实现Map</a></li><li><a href="#522-%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E4%B8%8D%E7%AD%89%E5%BC%8F%E8%AF%81%E6%98%8E">5.22 马尔科夫不等式证明</a></li><li><a href="#523%E8%B7%B3%E6%88%BF%E5%AD%90%E6%95%A3%E5%88%97%E7%9A%84%E6%8F%92%E5%85%A5%E5%86%8D%E6%95%A3%E5%88%97%E6%A6%82%E7%8E%87">5.23跳房子散列的插入再散列概率</a></li><li><a href="#524-%E5%B8%83%E8%B0%B7%E9%B8%9F%E5%AE%9E%E7%8E%B0-%E5%A4%9A%E6%95%A3%E5%88%97-%E5%8D%95%E8%A1%A8">5.24 布谷鸟实现 （多散列 单表）</a></li><li><a href="#525-%E5%B8%83%E8%B0%B7%E9%B8%9F%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%A8%E5%A4%9A%E6%95%A3%E5%88%97%E6%8B%86%E5%88%86%E8%A1%A8%E8%AE%A9%E8%A1%A8%E5%92%8Chash%E5%87%BD%E6%95%B0%E4%B8%80%E5%AF%B9%E4%B8%80">5.25 布谷鸟实现（多表多散列，拆分表，让表和Hash函数一对一）</a></li><li><a href="#527-%E5%8F%AF%E6%89%A9%E6%95%A3%E5%88%97%E8%AE%A1%E7%AE%97">5.27 可扩散列计算</a></li></ul></li></ul><!-- /TOC --><h1 id="一般想法"><a href="#一般想法" class="headerlink" title="一般想法"></a>一般想法</h1><ul><li>查找一般是对于关键词，将其映射到0~tablesize-1 适当的地方</li><li>接下来就如何<ul><li>寻找均匀的散列函数</li><li>冲突时该做的事</li><li>确定散列表大小</li></ul></li></ul><h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>表大小通常素数，在随机整数输入的情况下，会分布均匀</p><p>通常关键词是字符串</p><ul><li>第一种：简单的字符串Ascii或者Unicode相加<ul><li>如果表大小很大10007 8字符0~1016 不均匀<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/1.png"></li></ul></li><li>第二种：假设至少3字符 26字母+空格 27^3=17576 看起来均匀，但是英文不是随机的 实际只有2851种结果<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/2.png"></li><li>第三种 Horner法则<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/3.png"><br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/4.png"><br>为了计算简单通常不使用所有字符作为关键字</li></ul><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><h2 id="分离链接法"><a href="#分离链接法" class="headerlink" title="分离链接法"></a>分离链接法</h2><p> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/5.png"></p><p>冲突插入的放在最前面（最可能访问）</p><ul><li><p>装填因子（load factor）λ 表元素个数和表大小的比。链表的平均长度也是λ</p></li><li><p>所以不成功查找，需要考察平均λ个节点。成功查找需遍历1+λ/2个链表：由下说明，在N个元素的散列表以及M个链表。其他节点的概率 (N-1)/M (相当又找到这N-1个)，因为假设M比较大，平均一半其他节点被搜索到</p></li><li><p>分离链接法一般法就是使 λ=1，超过的话就rehash</p></li></ul><h2 id="无链表散列"><a href="#无链表散列" class="headerlink" title="无链表散列"></a>无链表散列</h2><p>由于分离链接需要分配新链表需要时间，需要有第二种数据结构实现</p><h3 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h3><p>典型的f(i)=i f是i的线性函数<br> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/6.png"></p><ul><li><p>一次聚集问题： 可能表相对空 但是在一堆块中任何块都需要很久插入</p></li><li><p>预期探测次数 不成功查找和插入一致 1/2(1+1/(1-λ)^2) 成功 1/2(1+1/(1-λ))</p></li><li><p>λ从0到当前值直接变化<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/7.png"><br>公式好于线性探测。</p></li><li><p>减低聚集的更随机算法<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/8.png"><br>λ=0.75 插入预计8.5次，λ=2.5 插入平均2.5次探测</p></li></ul><h3 id="平方探测"><a href="#平方探测" class="headerlink" title="平方探测"></a>平方探测</h3><p>典型的f(i)=i^2</p><p> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/9.png"></p><ul><li>平方探测表填充超过一半，或者表大小不是素数在填充超过一半之前（素数重要）</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p> 删除不能执行，因为该单元可能已经有冲突了，元素绕过他存在别处，如上图89</p><p> 数组情况</p><ul><li>null</li><li>非null 且isActive=true</li><li>非null 且isActive=false</li></ul><p>25~28 平方检测快速法 f(i)=f(i-1)+2i-1  相当于f(i)=i^2</p><p>23测试顺序很重要</p><p> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/10.png"></p><h3 id="双散列"><a href="#双散列" class="headerlink" title="双散列"></a>双散列</h3><p>新的问题出现 二次聚集</p><p>f(i)=i<em>hash2(x), 在距离 hash2(x)、2</em>hash2(x)……探测，hash2函数不能是0 </p><blockquote><p>hash2(x)=R-(x mod R) R为小于tablesize 的素数<br> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/11.png"></p></blockquote><ul><li>如果表大小不是素数，唯一备选位置就可能被使用了</li></ul><ul><li>平方探测和双散列，各有优点。实践中平方探测更快，因为对于字符串这些关键字散列函数相当耗时</li></ul><h1 id="再散列"><a href="#再散列" class="headerlink" title="再散列"></a>再散列</h1><blockquote><p>到了一半，再散列，花费时间很长O（N），但是次数比较少，N/2insert一次Rehashing<br> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/12.png"></p></blockquote><ul><li>策略1：表一半再散列</li><li>策略2：插入失败再散列</li><li><font color="red,font" size="4">策略3：途中（middle-of-the-road）：表达到一个装填因子再散列（好的实现，the best）</font></li></ul><blockquote><p>线性探测再散列<br> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/13.png"></p></blockquote><blockquote><p>分离链接再散列<br> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/14.png"></p></blockquote><h1 id="标准库散列"><a href="#标准库散列" class="headerlink" title="标准库散列"></a>标准库散列</h1><blockquote><p>HashSet、HashMap。HashSet 的关键字必须实现Hashcode和equals(显然)，他们通常是分离链接散列</p></blockquote><blockquote><p>如果是否有序无关，用这些类很好 如4.8三种映射</p></blockquote><ul><li>key单词长度，value长度所有集合。单词长度处理顺序不重要可以用HashMap</li><li>key为一个代表，value具有该代表的所有单词。代表只是中介值，无所谓可以用HashMap</li><li>key为一个单词，关键词是与单词只有一个字母不同的所有单词。除非我们想依次打印，也可以是HashMap</li></ul><blockquote><p>通常HashMap优于TreeMap,都可以接受时可以用接口Map来计时</p></blockquote><blockquote><p>闪存散列代码，避免对不变的对象重新计算Hash,(还是利用Honer多项式计算，用31是因为好计算32-1 i*31=(i &lt;&lt; 5) - i)<br> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/15.png"></p></blockquote><h1 id="最坏O-1-的散列表"><a href="#最坏O-1-的散列表" class="headerlink" title="最坏O(1)的散列表"></a>最坏O(1)的散列表</h1><blockquote><p>合理装填因子和散列函数 插入、删除、查找都是O(1)。假设散列函数良好，最坏情形的期望。</p></blockquote><blockquote><p>分离链接来说，λ=1，变成球盒问题，N个球均匀随机放在N个盒子，装球最多盒子球的期望 θ（LogN/loglogN)、探测散列最长期望类似</p></blockquote><blockquote><p>事先知道N的值在插入过程重新排列，得到最差O（1）的情形</p></blockquote><h2 id="完美散列-所有项优先知道"><a href="#完美散列-所有项优先知道" class="headerlink" title="完美散列(所有项优先知道)"></a>完美散列(所有项优先知道)</h2><blockquote><p>N个球放入M=N^2个盒子，没任何盒子装超过一个球的概率不小于1/2</p></blockquote><p>证明：一共有N(N-1)/2对冲突，冲突最多N(N-1)/2对，冲突概率是1/M 所以最大为N(N-1)/2N^2=1/2</p><p>但是不能那么大的M，只用N个盒子，用散列表解决盒子冲突，根据每个位置的项数决定二级散列表</p><p> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/17.png"></p><blockquote><p>N个球放入M=N个盒子的主散列表，二级散列表容量期望最多为2N</p></blockquote><p>证明：冲突最多期望N(N-1)/2N,加上项数总个数N，所以总的二级空间需求量超过4N概率最多是1/2</p><h2 id="布谷鸟散列-（允许动态插入删除，选择的力量）"><a href="#布谷鸟散列-（允许动态插入删除，选择的力量）" class="headerlink" title="布谷鸟散列 （允许动态插入删除，选择的力量）"></a>布谷鸟散列 （允许动态插入删除，选择的力量）</h2><blockquote><p>科学家证明：如果随机选择两个盒子，投入比较空的那个，最大盒子容量仅仅是θ（loglogN）</p></blockquote><p>一次查找最多访问两次表，找到删除也简单（不需懒惰删除）</p><blockquote><p>示意图<br>    <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/18.png"><br>  <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/19.png"><br>   <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/20.png"><br>    <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/21.png"></p></blockquote><blockquote><p>可以看出函数选的不好，表再大都没用</p></blockquote><p>阻碍插入循环的概率多大，λ《0.5是很低，若干次替换检测到可以重新用心的散列。</p><blockquote><p>用三个四个表扩展，或者一个项数多个关键词</p></blockquote><p> <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/22.png"></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>  <img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/23.png"></p><blockquote><p>重点理解插入</p></blockquote><ul><li>基本计划：存在返回，满载扩展，正常情况的插入<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/24.png"></li><li>正常情况的插入：rehashs跟踪再散列次数，基本逻辑和经典方法不一样，检测任何有效位置是否是空的，放在第一个空的位置，不然就替换其中一个已经存在的。<ul><li>出现的问题：替换第一项实验表现不好</li><li>替换最后一项实验表现不好</li><li>按序列替换（第一次hash0,第二次hash1……）表现不好</li><li>随机替换表现不好，特别是两个散列时容易循环</li></ul></li></ul><blockquote><p>新的重新随机替换方法，不试图替换最后一项，太多替换就尝试新的散列函数，太多再散列就扩展表。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> MAX_LOAD <span class="token operator">=</span> <span class="token number">0.40</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALLOWED_REHASHES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> rehashes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">insertHelper1</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> x <span class="token punctuation">)</span>   <span class="token punctuation">{</span>       <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_LIMIT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>              <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>       <span class="token punctuation">{</span>           <span class="token keyword">int</span> lastPos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> pos<span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> COUNT_LIMIT<span class="token punctuation">;</span> count<span class="token operator">++</span> <span class="token punctuation">)</span>           <span class="token punctuation">{</span>               <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numHashFunctions<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   pos <span class="token operator">=</span> <span class="token function">myhash</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span> array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>                   <span class="token punctuation">{</span>                       array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                       currentSize<span class="token operator">++</span><span class="token punctuation">;</span>                       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>               <span class="token comment">// none of the spots are available. Kick out a random one</span>               <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">do</span>               <span class="token punctuation">{</span>                   pos <span class="token operator">=</span> <span class="token function">myhash</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span> numHashFunctions <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span> pos <span class="token operator">==</span> lastPos <span class="token operator">&amp;&amp;</span> i<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">AnyType</span> tmp <span class="token operator">=</span> array<span class="token punctuation">[</span> lastPos <span class="token operator">=</span> pos <span class="token punctuation">]</span><span class="token punctuation">;</span>               array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>               x <span class="token operator">=</span> tmp<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">++</span>rehashes <span class="token operator">&gt;</span> ALLOWED_REHASHES <span class="token punctuation">)</span>           <span class="token punctuation">{</span>               <span class="token function">expand</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Make the table bigger</span>               rehashes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span>               <span class="token function">rehash</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="跳房子散列（改进经典线性探测"><a href="#跳房子散列（改进经典线性探测" class="headerlink" title="跳房子散列（改进经典线性探测)"></a>跳房子散列（改进经典线性探测)</h2><blockquote><p>现代体系中探测相邻单元产生的位置和额外探测比，前者更重要，线性探测仍然重要，甚至是最佳</p></blockquote><blockquote><p>跳房子散列：用事先确定对底层体系最优常数。给探测序列最大长度加上界，给出常数最坏，和布谷鸟一样查询并行化。 </p></blockquote><blockquote><p>思路：给一个探测上界，用额外Hop数组维护。Max_dist=4。hop[6]= 1000 代表pos6只有一项散列值6。hop[7]=1100代表pos7、pos8都是散列值7的项。<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/25.png"></p></blockquote><p>Max_dist&lt;=32就只用32位整数空间，</p><blockquote><p>插入9 线性探测是要到13 超过了max_dist 所以找Hop[10] 没有Hash=10的候选 ，Hash[11] 有候选<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/26.png"></p></blockquote><blockquote><p>插入6 要到pos14<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/27.png"><br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/28.png"></p></blockquote><h1 id="通用散列法（通用散列函数）"><a href="#通用散列法（通用散列函数）" class="headerlink" title="通用散列法（通用散列函数）"></a>通用散列法（通用散列函数）</h1><p>性质：</p><ul><li>各项均匀分布</li><li>常数时间计算（与表个数无关）</li></ul><blockquote><p>定义1，通用族H，任意两个不同项冲突概率至多1/M，加入N项后至多N/M或者λ</p></blockquote><blockquote><p>定义2，通用族H，任意K对不同项冲突概率至多1/M^k，加入N项后至多N/M或者λ</p></blockquote><blockquote><p>简单通用散列函数 大整数映射到0<del>M-1<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/29.png"><br><font color="red,font" size="4"><br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/30.png"><br>证明：x&gt;y 使H(x)=H(y). (ax+b)mod p=(ay+b)mod p 就有冲突，将他们相减a(x-y)=0(mod p),p需要整除a或者(x-y)但是P是素数，且a和(x-y)属于（1</font></del>p-1) 他们相乘等于素数不可能。一共有r p个值，s p-1个值 p(p-1)对。冲突的概率为 r=s(mod M) 至多(p-1)/M<br> </p></blockquote><h2 id="梅森素数（Mersenne）"><a href="#梅森素数（Mersenne）" class="headerlink" title="梅森素数（Mersenne）"></a>梅森素数（Mersenne）</h2><p>由上可以选择任何计算有利的素数 P=2^31-1 2^5-1 2^61-1.乘以这样的p可以用位运算和减法完成。取模运算也可以用位移运算和加法完成</p><blockquote><p>mod 法则</p></blockquote><ul><li>结合律<ul><li>((a+b) mod p + c)mod p = (a + (b+c) mod p) mod p</li><li>((a×b) mod p × c)mod p = (a * (b×c) mod p) mod p</li></ul></li><li>交换律<ul><li>(a + b) mod p = (b+a) mod p</li><li>(a × b) mod p = (b × a) mod p</li></ul></li><li>分配律<ul><li>((a +b)mod p × c) mod p = ((a × c) mod p + (b × c) mod p) mod p</li><li>(a×b) mod c=(a mod c × b mod c) mod c</li><li>(a+b) mod c=(a mod c+ b mod c) mod c</li><li>(a-b) mod c=(a mod c- b mod c) mod c</li></ul></li></ul><blockquote><p>卡特-韦格曼Trick。r=y(mod p)。 y除以(p+1),y=q’(p+1)+r’,两边同时取mod   所以r=q’+r’(mod p)</p></blockquote><blockquote><p>当x = 2 ^ n(n为自然数)时，a % x = a &amp; (x - 1)。显然<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/31.png"></p></blockquote><h1 id="可扩散列"><a href="#可扩散列" class="headerlink" title="可扩散列"></a>可扩散列</h1><blockquote><p>数据不再主存里面，任意时刻有N个记录存储。 最多可以把M个记录放在一个磁盘，对于前面的散列需要O(N)次磁盘</p></blockquote><blockquote><p>可扩散列，可以用两次磁盘访问执行，如下D是bit数，按照第四章的B树，每个树叶最多M个袁术，数据前2bit相等</p></blockquote><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/46.png"></p><blockquote><p>性能： 目录大小期望O(N^(1+1/M)/M) M太小 主存装不下 就需要第二次磁盘<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/47.png"></p></blockquote><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul><li>符号表</li><li>图论</li><li>游戏程序转移表</li><li>错误拼写</li><li>缓存</li></ul><h1 id="各类实现注意点"><a href="#各类实现注意点" class="headerlink" title="各类实现注意点"></a>各类实现注意点</h1><h2 id="分离散列实现注意"><a href="#分离散列实现注意" class="headerlink" title="分离散列实现注意"></a>分离散列实现注意</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">想要初始化使用的常量 要设为类常量<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFUALT_TABLE_SIZE <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//注意这边必须要static</span>素数检测的快速版<span class="token comment">//Mark</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">*</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>清空只是把空间清空，szie<span class="token operator">=</span><span class="token number">0</span>，结果不变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="平方探测实现注意"><a href="#平方探测实现注意" class="headerlink" title="平方探测实现注意"></a>平方探测实现注意</h2><p>分占用的和实际的大小<br>占用的来计算λ</p><p>插入、删除、查询都是先找到位置<br>位置+=1 、3 、5……相当于 +1 +4 +9</p><p>重复的代码抽象成函数</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="5-1-计算各种散列表"><a href="#5-1-计算各种散列表" class="headerlink" title="5.1 计算各种散列表"></a>5.1 计算各种散列表</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/32.png"></p><p>a分离散列:  1-4371  3-6173、1323 4-4344 9-1989、9679、4199</p><p>b线性探测：1-4371 3-1323 4-6173 5-4344 9-4199 0-9679 2-1989</p><p>c平方探测：1-4371 3-1323 4-6173 9-4199 5-4344 0-9679 7-1989</p><p><font color="red" font="" size="4">d第二散列：1:1-4371 3-1323 4-6173 9-4199 7-4344 5-9679 不能插入1989无限循环</font></p><h2 id="5-2-5-1的再散列"><a href="#5-2-5-1的再散列" class="headerlink" title="5.2 5.1的再散列"></a>5.2 5.1的再散列</h2><p>表大小10 扩充到大于20最近素数23 （或者19） 然后替换散列函数重新计算</p><h2 id="5-3-冲突计算"><a href="#5-3-冲突计算" class="headerlink" title="5.3 冲突计算"></a>5.3 冲突计算</h2><pre><code>直接加上一个冲突因子就行</code></pre><h2 id="5-4-分离散列链表的稀疏问题"><a href="#5-4-分离散列链表的稀疏问题" class="headerlink" title="5.4 分离散列链表的稀疏问题"></a>5.4 分离散列链表的稀疏问题</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/33.png"></p><blockquote><p>假设一个阈值p=0~1 小于等于该阈值，就再散列更小的，比如0.4 原来是2N Table大小  有X项，经过一些删除后    变成了2pN项 然后就散列到N大小，里面有2pN项，那么经过2N-2pN次插入在散列成2N项的表，或者pN次删除在散列成N/2大小的表 。P的取值呢，如果是均匀插入和删除，2N-2pN=pN p=2/3.</p></blockquote><p>插入更多 就增加p, 反之减少p为了保证尽可能少的Rehasing</p><h2 id="5-6平方探测-IsEmpty-能通过currentSize判断吗"><a href="#5-6平方探测-IsEmpty-能通过currentSize判断吗" class="headerlink" title="5.6平方探测 IsEmpty 能通过currentSize判断吗"></a>5.6平方探测 IsEmpty 能通过currentSize判断吗</h2><p>不可以,有占用不活跃的值</p><h2 id="5-7平方探测插入第一个非活跃元素"><a href="#5-7平方探测插入第一个非活跃元素" class="headerlink" title="5.7平方探测插入第一个非活跃元素"></a>5.7平方探测插入第一个非活跃元素</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/34.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findPos1</span><span class="token punctuation">(</span><span class="token class-name">Anytype</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token function">myHash</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> offset<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//加上判断是不是</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isActivate</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>theList<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pos<span class="token operator">+=</span>offset<span class="token punctuation">;</span>            offset<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&gt;=</span>theList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                pos<span class="token operator">-=</span>theList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果删除的单元格数量很少，那么我们将花费额外的时间来判断活跃<br>不太可能被发现的元素。 如果删除的单元格数量很大，那么我们可能会有所改进。</p><h2 id="5-8-立方探测与平方探测"><a href="#5-8-立方探测与平方探测" class="headerlink" title="5.8 立方探测与平方探测"></a>5.8 立方探测与平方探测</h2><pre class="line-numbers language-none"><code class="language-none">立方探测和平方探测有改进吗？没有因为平方探测可以在表一半的时候保证可以插入，立方不可以。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-9-每次循环都用key-length-值得吗"><a href="#5-9-每次循环都用key-length-值得吗" class="headerlink" title="5.9 每次循环都用key.length()值得吗"></a>5.9 每次循环都用key.length()值得吗</h2><p>用局部变量在外面 会优化一点，影响不大</p><h2 id="5-10-各种探测对比"><a href="#5-10-各种探测对比" class="headerlink" title="5.10 各种探测对比"></a>5.10 各种探测对比</h2><ul><li><p>单独的链式哈希处理需要使用链接，这会花费一些内存和标准<br>实现对内存分配例程的调用的方法，通常比较昂贵。</p></li><li><p> 线性的探测很容易实现，但是随着负载系数的增加，性能会严重下降，因为<br>主要聚集。 </p></li><li><p>二次探测仅难于实现，并且可以在实践中表现良好。 如果表占用大于1/2，则插入可能会失败，但这不太可能。即使是这样，这样的插入也是是否昂贵的。 </p></li><li><p>双重哈希消除了一次二次聚集，但是第二个哈希函数的计算可能会很昂贵。 </p></li><li><p>Gonnet和Baeza-Yates<br>比较几种哈希策略； 他们的结果表明，二次探测是最快的方法。</p></li></ul><h2 id="5-11-用新的冲突函数减轻二次聚集"><a href="#5-11-用新的冲突函数减轻二次聚集" class="headerlink" title="5.11 用新的冲突函数减轻二次聚集"></a>5.11 用新的冲突函数减轻二次聚集</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/35.png"></p><p>相当于双散列中的函数取新的哈希,计算相对</p><h2 id="5-12-类内含散列值有效的问题"><a href="#5-12-类内含散列值有效的问题" class="headerlink" title="5.12 类内含散列值有效的问题"></a>5.12 类内含散列值有效的问题</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/35.png"></p><p>只要Employ对象的值不变或者没有重新散列</p><h2 id="5-13-M多项式和N多项式相乘-边计算边排序"><a href="#5-13-M多项式和N多项式相乘-边计算边排序" class="headerlink" title="5.13 M多项式和N多项式相乘 边计算边排序"></a>5.13 M多项式和N多项式相乘 边计算边排序</h2><p>a:实现</p><p>思路：</p><ul><li>链表实现，计算一项插入一项</li><li>可以先HashMap 然后将冲突的合并 在排序</li></ul><p>b:如果多项式结果只有O(M+N)项，对比先将MN项算出来在排序去重，边计算边排序的好处。</p><p>去重节省大量计算量，MN排序O(MN×Log(MN)) 和O((M+N)*log(M+N)。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap05</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem5_13 * @Author: Wibur * @Description:链表实现多项式乘法 * @Date: Created in 21:04 2020/9/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem5_13</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span> <span class="token function">mutilpy_Ployn</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Items</span><span class="token punctuation">&gt;</span></span> l1<span class="token punctuation">,</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Items</span><span class="token punctuation">&gt;</span></span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Items</span><span class="token punctuation">&gt;</span></span> l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Items</span> i <span class="token operator">:</span> l1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Items</span> j <span class="token operator">:</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Items</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span>a <span class="token operator">=</span> i<span class="token punctuation">.</span>a <span class="token operator">*</span> j<span class="token punctuation">.</span>a<span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span>n <span class="token operator">=</span> i<span class="token punctuation">.</span>n <span class="token operator">+</span> j<span class="token punctuation">.</span>n<span class="token punctuation">;</span>                <span class="token function">insert</span><span class="token punctuation">(</span>l3<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>a<span class="token punctuation">,</span> tmp<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Items</span><span class="token punctuation">&gt;</span></span> l3<span class="token punctuation">,</span> <span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Items</span><span class="token punctuation">&gt;</span></span> l3Iterator <span class="token operator">=</span> l3<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Items</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Items</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Items</span> cur<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l3Iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">.</span>n <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>cur <span class="token operator">=</span> l3Iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>n <span class="token operator">==</span> tmp<span class="token punctuation">.</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>a <span class="token operator">+=</span> tmp<span class="token punctuation">.</span>a<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    l3Iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l3Iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l3Iterator<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            l3Iterator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            l3Iterator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem5_13</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Problem5_13</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Items</span><span class="token punctuation">&gt;</span></span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Items</span><span class="token punctuation">&gt;</span></span> l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>l2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span> l3 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">mutilpy_Ployn</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Items</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> a<span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token class-name">Items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Items</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-14-描述避免初始化散列表的过程（内存消耗为代价）"><a href="#5-14-描述避免初始化散列表的过程（内存消耗为代价）" class="headerlink" title="5.14 描述避免初始化散列表的过程（内存消耗为代价）"></a>5.14 描述避免初始化散列表的过程（内存消耗为代价）</h2><p>给每个Hashtable槽，附加额外的成员变量，whereOnStack,弄另一个栈，当插入一个槽时，将地址push进去，引用在顶部</p><h2 id="5-15-字符串子串匹配"><a href="#5-15-字符串子串匹配" class="headerlink" title="5.15 字符串子串匹配"></a>5.15 字符串子串匹配</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/38.png"></p><blockquote><p>a:<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/37.png"></p></blockquote><blockquote><p>b:<br>滑动：先计算k再滑动N次</p></blockquote><blockquote><p>c:如果tableSize M很大（散列值很大）冲突最大为N(N-1) /M M是散列值的最大数  N就是串长</p></blockquote><blockquote><p>d:实现<br>先计算出第一串递归计算后面的串</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap05</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem5_15 * @Author: Wibur * @Description:长输入字符串中短字符串的匹配（通过Hash值）  * @Date: Created in 14:22 2020/9/8 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem5_15</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> <span class="token function">hashNumChar</span><span class="token punctuation">(</span><span class="token class-name">String</span>  strN<span class="token punctuation">,</span><span class="token keyword">int</span> offset<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> hash<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hash<span class="token operator">=</span>hash<span class="token operator">*</span><span class="token number">31</span><span class="token operator">+</span>strN<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> hash<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">hashCharPow</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>             a<span class="token operator">*=</span><span class="token number">31</span><span class="token punctuation">;</span>             i<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">circleHash</span><span class="token punctuation">(</span><span class="token class-name">String</span> strN<span class="token punctuation">,</span><span class="token keyword">int</span> curHash<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">{</span>         curHash<span class="token operator">=</span>curHash<span class="token operator">-</span><span class="token function">hashCharPow</span><span class="token punctuation">(</span>strN<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>endIndex<span class="token operator">-</span>startIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         curHash<span class="token operator">=</span>curHash<span class="token operator">*</span><span class="token number">31</span><span class="token operator">+</span>strN<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> curHash<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">quickHashPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> strN<span class="token punctuation">,</span><span class="token class-name">String</span> subStr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> curHash<span class="token operator">=</span><span class="token function">hashNumChar</span><span class="token punctuation">(</span>strN<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> aimHash<span class="token operator">=</span><span class="token function">hashNumChar</span><span class="token punctuation">(</span>subStr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>strN<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curHash<span class="token operator">==</span>aimHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i <span class="token operator">-</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             curHash<span class="token operator">=</span><span class="token function">circleHash</span><span class="token punctuation">(</span>strN<span class="token punctuation">,</span>curHash<span class="token punctuation">,</span>i <span class="token operator">-</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> strN<span class="token operator">=</span><span class="token string">"qwrtqtetgsddfcxfdsf"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> subStr<span class="token operator">=</span><span class="token string">"tqt"</span><span class="token punctuation">;</span>        <span class="token class-name">Problem5_15</span> p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Problem5_15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">quickHashPattern</span><span class="token punctuation">(</span>strN<span class="token punctuation">,</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>e:算出的hashval没有取余，已经可以保证hashval相同串就相同了，42到46行逐个比较串的值操作省去最坏运行时间就是O（N+K）。</p></blockquote><blockquote><p>f:待续<br>动态规划</p></blockquote><h2 id="5-16-解释编译器允许java7-允许Switch处理字符串-（如何把散列表来实现）"><a href="#5-16-解释编译器允许java7-允许Switch处理字符串-（如何把散列表来实现）" class="headerlink" title="5.16 解释编译器允许java7 允许Switch处理字符串 （如何把散列表来实现）"></a>5.16 解释编译器允许java7 允许Switch处理字符串 （如何把散列表来实现）</h2><p>就是Hash值，然后在对比</p><h2 id="5-18-第一章字谜优化"><a href="#5-18-第一章字谜优化" class="headerlink" title="5.18 第一章字谜优化"></a>5.18 第一章字谜优化</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/39.png"></p><p>A:如下<br>B:如下</p><p>C:递归散列函数 快一点<br>D:折半找子串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ClassName Problem5_18 * @Author: Wibur * @Description:问题描述：输入是由一些字母和单词构成的二维数组，目标是找出字谜中的单词，这些单词可以是水平、垂直或沿对角线以任何方向放置。 *   编写一个程序求解字谜游戏问题 *   t h i s b     找出 this、two、fat、that *   w a t s h *   o a h g m *   f g d t w *   i u y h g * @Date: Created in 15:47 2020/9/9 * @Versuin: 1.0 */</span><span class="token keyword">enum</span> <span class="token class-name">Dir</span> <span class="token punctuation">{</span> UP<span class="token punctuation">,</span> DOWN<span class="token punctuation">,</span> LEFT<span class="token punctuation">,</span> RIGHT<span class="token punctuation">,</span> LEFT_UP<span class="token punctuation">,</span>RIGHT_UP<span class="token punctuation">,</span> LEFT_DOWN<span class="token punctuation">,</span>RIGHT_DOWN <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem5_18</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"this"</span><span class="token punctuation">,</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"fat"</span><span class="token punctuation">,</span><span class="token string">"that"</span><span class="token punctuation">,</span><span class="token string">"dgf"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> twoDimensionalChar<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">findWordsHash</span><span class="token punctuation">(</span>twoDimensionalChar<span class="token punctuation">,</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findWordsHashB</span><span class="token punctuation">(</span>twoDimensionalChar<span class="token punctuation">,</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//B方法：把前缀加上</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">findWordsHashB</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aim<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> aimHashTable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aim<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> valueList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aimHashTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>aim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>valueList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>aim<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> aim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> prefixStr<span class="token operator">=</span>aim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>prefixStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    aimHashTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>prefixStr<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//ArrayList&lt;Character&gt; characterList=new ArrayList&lt;&gt;();</span>        <span class="token class-name">StringBuffer</span> stringBuffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//source[0][0]='f';</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">.</span>length <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>LEFT_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>RIGHT_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token generics"><span class="token punctuation">&lt;</span>source<span class="token punctuation">.</span>length<span class="token operator">&amp;</span><span class="token operator">&amp;</span>l<span class="token punctuation">&gt;</span></span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span>l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>LEFT_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span>l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>RIGHT_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">A</span>方法：直接暴力匹配  <span class="token class-name">O</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token operator">*</span><span class="token class-name">C</span><span class="token punctuation">)</span>      <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">findWordsHash</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aim<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> aimHashTable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aim<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aimHashTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>aim<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//ArrayList&lt;Character&gt; characterList=new ArrayList&lt;&gt;();</span>        <span class="token class-name">StringBuffer</span> stringBuffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//source[0][0]='f';</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">.</span>length <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>LEFT_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>RIGHT_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token generics"><span class="token punctuation">&lt;</span>source<span class="token punctuation">.</span>length<span class="token operator">&amp;</span><span class="token operator">&amp;</span>l<span class="token punctuation">&gt;</span></span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span>l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>LEFT_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span>l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">Dir</span><span class="token punctuation">.</span>RIGHT_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aimHashTable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span>  <span class="token keyword">void</span> <span class="token function">putPosIntoValue</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> aimHashTable<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token class-name">Dir</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token operator">=</span>aimHashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            value<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            aimHashTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuffer</span> valueItems<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valueItems<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\npos ROW:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" COL:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" DIR:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" LENGTH:"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        value<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>valueItems<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem5_18</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem5_18</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-19-二次聚集插入期望计算"><a href="#5-19-二次聚集插入期望计算" class="headerlink" title="5.19 二次聚集插入期望计算"></a>5.19 二次聚集插入期望计算</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/40.png"></p><blockquote><p>a: 不成功查找就等于探测 </p></blockquote><blockquote><p>b: 成功查找等于 不成功的在平均积分  </p></blockquote><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/41.png"></p><h2 id="5-20-实现Map"><a href="#5-20-实现Map" class="headerlink" title="5.20 实现Map"></a>5.20 实现Map</h2><p>注意点 ：重写Hascode 和equals 来实现put</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap05</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem5_20 * @Author: Wibur * @Description: * @Date: Created in 22:06 2020/9/10 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem5_20</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"13"</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"33"</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"23"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span><span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">QuadraticProbingHashTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span><span class="token class-name">Value</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">QuadraticProbingHashTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span><span class="token class-name">Value</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Value</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//Value value=new Value();</span>        <span class="token class-name">Object</span> value<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span> <span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span> keyValueEntry <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Value</span><span class="token punctuation">)</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> keyValueEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span><span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token class-name">Key</span> key<span class="token punctuation">;</span>    <span class="token class-name">Value</span> value<span class="token punctuation">;</span>    <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span><span class="token class-name">Value</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token operator">=</span>key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">=</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Key</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Value</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Value</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span>   <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//return this.hashCode()==obj.hashCode();</span>        <span class="token keyword">return</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Entry</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">,</span><span class="token class-name">Value</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-22-马尔科夫不等式证明"><a href="#5-22-马尔科夫不等式证明" class="headerlink" title="5.22 马尔科夫不等式证明"></a>5.22 马尔科夫不等式证明</h2><p><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/43.png"></p><blockquote><p>a<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/42.png"></p></blockquote><blockquote><p>b<br>定理5.2<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/44.png"><br>证明 设X为任意一个盒子的球的数量，Ex=1/N;P(X&gt;=2)&lt;=1/2N 求至少一个盒子大于等于2个球的概率，总共N个球概率为P(Y&gt;=2)&lt;=1/2<br>得证</p></blockquote><blockquote><p>c<br><img src="/2020/09/02/data-structures-and-algorithms-chap05-hash/45.png"><br>X为二级散列表容量，对任意的a,P(X&lt;=a)&gt;=EX/a 取a=1 </p></blockquote><h2 id="5-23跳房子散列的插入再散列概率"><a href="#5-23跳房子散列的插入再散列概率" class="headerlink" title="5.23跳房子散列的插入再散列概率"></a>5.23跳房子散列的插入再散列概率</h2><p>λ=0.5，附近MaxDIST都满了 概率 0.5^MaxDIST</p><h2 id="5-24-布谷鸟实现-（多散列-单表）"><a href="#5-24-布谷鸟实现-（多散列-单表）" class="headerlink" title="5.24 布谷鸟实现 （多散列 单表）"></a>5.24 布谷鸟实现 （多散列 单表）</h2><ul><li>注意点<ul><li>重散列注意清空size在插入</li><li>插入策略，重复插入一定次数后选择新的散列函数<ul><li>当全部散列函数满了,选择哪个替代（随机法）</li><li>每次都依次替代（非满时也是，会容易造成表很大，因为任意rehash和expand</li></ul></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap05</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyCuckooHashTable * @Author: Wibur * @Description: * @Date: Created in 9:28 2020/9/12 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCuckooHashTable</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DEFUALT_SZIE <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> MAX_LOAD <span class="token operator">=</span> <span class="token number">0.40</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> COUNT_LIMIT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> RESH_HASH_ALLOW <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rehashNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashFamily</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> hashFamily<span class="token punctuation">;</span>    <span class="token class-name">MyCuckooHashTable</span><span class="token punctuation">(</span><span class="token class-name">HashFamily</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> hf<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>hf<span class="token punctuation">,</span> DEFUALT_SZIE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyCuckooHashTable</span><span class="token punctuation">(</span><span class="token class-name">HashFamily</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> hf<span class="token punctuation">,</span> <span class="token keyword">int</span> defualtSzie<span class="token punctuation">)</span> <span class="token punctuation">{</span>        hashFamily <span class="token operator">=</span> hf<span class="token punctuation">;</span>        <span class="token function">allocateArray</span><span class="token punctuation">(</span>defualtSzie<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">makeClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentSize <span class="token operator">&gt;=</span> arr<span class="token punctuation">.</span>length <span class="token operator">*</span> MAX_LOAD<span class="token punctuation">)</span>            <span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">insertHelper2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">insertHelper1</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> funLength <span class="token operator">=</span> hashFamily<span class="token punctuation">.</span><span class="token function">getNumberOfFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastPos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT_LIMIT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> funLength<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pos <span class="token operator">=</span> <span class="token function">myHash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                        currentSize<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">do</span>                <span class="token punctuation">{</span>                    lastPos <span class="token operator">=</span> <span class="token function">myHash</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span> funLength <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span> lastPos<span class="token operator">==</span>pos <span class="token operator">&amp;&amp;</span> j<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">AnyType</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span> lastPos <span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span> lastPos <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                x <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>rehashNum <span class="token operator">&gt;</span> RESH_HASH_ALLOW<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rehashNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span>                <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">insertHelper2</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> x <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_LIMIT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> COUNT_LIMIT<span class="token punctuation">;</span> count<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">myHash</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> count <span class="token operator">%</span> hashFamily<span class="token punctuation">.</span><span class="token function">getNumberOfFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">AnyType</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span> pos <span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> tmp <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    x <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">++</span>rehashNum <span class="token operator">&gt;</span> RESH_HASH_ALLOW <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">expand</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Make the table bigger</span>                rehashNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                <span class="token function">rehash</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token function">findPos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        currentSize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hashFamily<span class="token punctuation">.</span><span class="token function">generateNewFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rehash</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">/</span>MAX_LOAD<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token keyword">int</span> newLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldArr<span class="token operator">=</span>arr<span class="token punctuation">;</span>        <span class="token function">allocateArray</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AnyType</span> item<span class="token operator">:</span>oldArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>               <span class="token function">insert</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findPos</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> pos<span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token operator">=</span>hashFamily<span class="token punctuation">.</span><span class="token function">getNumberOfFunctions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pos<span class="token operator">=</span><span class="token function">myHash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> pos<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">myHash</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pos<span class="token operator">=</span>hashFamily<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token operator">%=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>            pos<span class="token operator">+=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">findPos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">allocateArray</span><span class="token punctuation">(</span> <span class="token keyword">int</span> defualtSzie<span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token function">nextPrime</span><span class="token punctuation">(</span>defualtSzie<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">)</span>            <span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> currentSize<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makeClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        currentSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        rehashNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> cumulative <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> NUMS <span class="token operator">=</span> <span class="token number">2000000</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> GAP  <span class="token operator">=</span>   <span class="token number">37</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> ATTEMPTS <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Checking... (no more output means success)"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> att  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> att <span class="token operator">&lt;</span> ATTEMPTS<span class="token punctuation">;</span> att<span class="token operator">++</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"ATTEMPT: "</span> <span class="token operator">+</span> att <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MyCuckooHashTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">H</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCuckooHashTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringHashFamily</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> GAP<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> GAP <span class="token punctuation">)</span> <span class="token operator">%</span> NUMS <span class="token punctuation">)</span>                <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> GAP<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> GAP <span class="token punctuation">)</span> <span class="token operator">%</span> NUMS <span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"OOPS!!! "</span> <span class="token operator">+</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMS<span class="token punctuation">;</span> i<span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">)</span>                <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMS<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span> <span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Find fails "</span> <span class="token operator">+</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMS<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"OOPS!!! "</span> <span class="token operator">+</span>  i  <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            cumulative <span class="token operator">+=</span> endTime <span class="token operator">-</span> startTime<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">&gt;</span> NUMS <span class="token operator">*</span> <span class="token number">4</span> <span class="token punctuation">)</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"LARGE CAPACITY "</span> <span class="token operator">+</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Total elapsed time is: "</span> <span class="token operator">+</span> cumulative <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-25-布谷鸟实现（多表多散列，拆分表，让表和Hash函数一对一）"><a href="#5-25-布谷鸟实现（多表多散列，拆分表，让表和Hash函数一对一）" class="headerlink" title="5.25 布谷鸟实现（多表多散列，拆分表，让表和Hash函数一对一）"></a>5.25 布谷鸟实现（多表多散列，拆分表，让表和Hash函数一对一）</h2><ul><li>注意点<ul><li>这样少冲突，速度快，之前一个表散列函数很容易冲突</li><li>本质上只是算法变了，把数组拆分</li><li>扩散策略，采用顺序替换，即各个表满了后，从第一个开始替换</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap05</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyCukooHashTableClassic * @Author: Wibur * @Description: * @Date: Created in 16:30 2020/9/12 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCukooHashTableClassic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_TABLE_SIZE <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> MAX_LOAD <span class="token operator">=</span> <span class="token number">0.49</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ALLOWED_REHASHES <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rehashes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashFamily</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> hashFunctions<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> numHashFunctions<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AnyType</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> array<span class="token punctuation">;</span> <span class="token comment">// The array of elements</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> subTableSize<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> subTableStarts<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyCukooHashTableClassic</span><span class="token punctuation">(</span> <span class="token class-name">HashFamily</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> hf <span class="token punctuation">)</span>    <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span> hf<span class="token punctuation">,</span> DEFAULT_TABLE_SIZE <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyCukooHashTableClassic</span><span class="token punctuation">(</span> <span class="token class-name">HashFamily</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> hf<span class="token punctuation">,</span> <span class="token keyword">int</span> size <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            hashFunctions <span class="token operator">=</span> hf<span class="token punctuation">;</span>            numHashFunctions <span class="token operator">=</span> hf<span class="token punctuation">.</span><span class="token function">getNumberOfFunctions</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            subTableSize <span class="token operator">=</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span> size <span class="token operator">/</span> numHashFunctions <span class="token punctuation">)</span><span class="token punctuation">;</span>            subTableStarts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span> numHashFunctions <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numHashFunctions<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                subTableStarts<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> subTableSize<span class="token punctuation">;</span>            <span class="token function">allocateArray</span><span class="token punctuation">(</span> subTableSize <span class="token operator">*</span> numHashFunctions <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">doClear</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> x <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">contains</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> currentSize <span class="token operator">&gt;=</span> array<span class="token punctuation">.</span>length <span class="token operator">*</span> MAX_LOAD <span class="token punctuation">)</span>                <span class="token function">expand</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span>  <span class="token function">insertHelper1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">insertHelper1</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_LIMIT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> which <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> COUNT_LIMIT<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> which<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> which <span class="token operator">==</span> numHashFunctions <span class="token punctuation">)</span>                    which <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">myhash</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> which <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                    currentSize<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">AnyType</span> tmp <span class="token operator">=</span> array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                x <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> rehashes<span class="token operator">++</span> <span class="token operator">&gt;=</span> ALLOWED_REHASHES <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">expand</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                rehashes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                <span class="token function">rehash</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">myhash</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> which <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> hashVal <span class="token operator">=</span> hashFunctions<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> which <span class="token punctuation">)</span><span class="token punctuation">;</span>            hashVal <span class="token operator">%=</span> subTableSize<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> hashVal <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>                hashVal <span class="token operator">+=</span> subTableSize<span class="token punctuation">;</span>            <span class="token keyword">return</span> hashVal <span class="token operator">+</span> subTableStarts<span class="token punctuation">[</span> which <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expand</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rehash</span><span class="token punctuation">(</span> numHashFunctions <span class="token operator">*</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span> array<span class="token punctuation">.</span>length <span class="token operator">/</span> MAX_LOAD  <span class="token operator">/</span> numHashFunctions <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//System.out.println( "NEW HASH FUNCTIONS " + array.length );</span>            hashFunctions<span class="token punctuation">.</span><span class="token function">generateNewFunctions</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rehash</span><span class="token punctuation">(</span> array<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span> <span class="token keyword">int</span> newLength <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//   System.out.println( "REHASH: " + array.length + " " + newLength + " " + currentSize );</span>            <span class="token class-name">AnyType</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> oldArray <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token comment">// Create a new double-sized, empty table</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> newLength <span class="token operator">!=</span> array<span class="token punctuation">.</span>length <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                subTableSize <span class="token operator">=</span> newLength <span class="token operator">/</span> numHashFunctions<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numHashFunctions<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                    subTableStarts<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> subTableSize<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">allocateArray</span><span class="token punctuation">(</span> newLength <span class="token punctuation">)</span><span class="token punctuation">;</span>            currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// Copy table over</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> str <span class="token operator">:</span> oldArray <span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> str <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>                    <span class="token function">insert</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Gets the size of the table.         * @return number of items in the hash table.         */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> currentSize<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Gets the length (potential capacity) of the table.         * @return length of the internal array in the hash table.         */</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">capacity</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Method that searches two places.         * @param x the item to search for.         * @return the position where the search terminates, or -1 if not found.         */</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">findPos</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> x <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numHashFunctions<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">myhash</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token keyword">return</span> pos<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Remove from the hash table.         * @param x the item to remove.         * @return true if item was found and removed         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> x <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">findPos</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> pos <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                array<span class="token punctuation">[</span> pos <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                currentSize<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> pos <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Find an item in the hash table.         * @param x the item to search for.         * @return the matching item.         */</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> x <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">findPos</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Make the hash table logically empty.         */</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">doClear</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doClear</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>                array<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Internal method to allocate array.         * @param arraySize the size of the array.         */</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">allocateArray</span><span class="token punctuation">(</span> <span class="token keyword">int</span> arraySize <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            array <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span> arraySize <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Internal method to find a prime number at least as large as n.         * @param n the starting number (must be positive).         * @return a prime number larger than or equal to n.         */</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextPrime</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span> n <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">)</span>                <span class="token punctuation">;</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * Internal method to test if a number is prime.         * Not an efficient algorithm.         * @param n the number to test.         * @return the result of the test.         */</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Simple main</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> args <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">MyCukooHashTableClassic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">H</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCukooHashTableClassic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">StringHashFamily</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//HashSet&lt;String&gt; t = new HashSet&lt;&gt;( );</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Checking... (no more output means success)"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> NUMS <span class="token operator">=</span> <span class="token number">2000000</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> GAP  <span class="token operator">=</span>   <span class="token number">37</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> GAP<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> GAP <span class="token punctuation">)</span> <span class="token operator">%</span> NUMS <span class="token punctuation">)</span>                <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> GAP<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token punctuation">(</span> i <span class="token operator">+</span> GAP <span class="token punctuation">)</span> <span class="token operator">%</span> NUMS <span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"OOPS!!! "</span> <span class="token operator">+</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMS<span class="token punctuation">;</span> i<span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">)</span>                <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMS<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span> <span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Find fails "</span> <span class="token operator">+</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUMS<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span> <span class="token string">""</span><span class="token operator">+</span>i <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"OOPS!!! "</span> <span class="token operator">+</span>  i  <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Elapsed time: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"H size is: "</span> <span class="token operator">+</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Array size is: "</span> <span class="token operator">+</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理文本测试</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>             scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span> <span class="token string">"src/chap05/all_data.txt"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">String</span> oneLine <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>             <span class="token keyword">while</span><span class="token punctuation">(</span> scan<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 words<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> oneLine <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span> oneLine <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">if</span><span class="token punctuation">(</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"OOPS!!! SIZE MISMATCH "</span> <span class="token operator">+</span>                         words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token class-name">String</span> s <span class="token operator">:</span> words <span class="token punctuation">)</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span> s <span class="token punctuation">)</span> <span class="token punctuation">)</span>                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"OOPS!! COULDN'T FIND "</span> <span class="token operator">+</span> s <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"H size is: "</span> <span class="token operator">+</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"Array size is: "</span> <span class="token operator">+</span> <span class="token class-name">H</span><span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token class-name">IOException</span> e <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> scan <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span>                scan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-27-可扩散列计算"><a href="#5-27-可扩散列计算" class="headerlink" title="5.27 可扩散列计算"></a>5.27 可扩散列计算</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-base-file</title>
      <link href="2020/08/17/linux-base-file/"/>
      <url>2020/08/17/linux-base-file/</url>
      
        <content type="html"><![CDATA[<h1 id="所有者"><a href="#所有者" class="headerlink" title="所有者"></a>所有者</h1><p>一般为文件的创建者，谁创建了该文件，就天然的成为该文件的所有者</p><p>用ls ‐ahl命令可以看到文件的所有者</p><p>也可以使用chown 用户名 文件名来修改文件的所有者</p><h1 id="文件所在组"><a href="#文件所在组" class="headerlink" title="文件所在组"></a>文件所在组</h1><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组</p><p>用ls ‐ahl命令可以看到文件的所有组</p><p>也可以使用chgrp 组名 文件名来修改文件所在的组</p><h1 id="其它组"><a href="#其它组" class="headerlink" title="其它组"></a>其它组</h1><p>除开文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p>ls -l中显示的内容如下：</p><p>1</p><blockquote><p>-rwxrw-r‐-1 root root 1213 Feb 2 09:39 abc</p></blockquote><ul><li><p>第一个字符代表文件（-）、目录（d），链接（l）- 10个字符确定不同用户能对文件干什么</p></li><li><p>其余字符每3个一组（rwx），读（r）、写（w）、执行（x）</p></li><li><p>第一组rwx：文件所有者的权限是读、写和执行</p></li><li><p>第二组rw-：与文件所有者同一组的用户的权限是读、写但不能执行</p></li><li><p>第三组r–：不与文件所有者同组的其他用户的权限是读不能写和执行</p></li></ul><p>也可用数字表示为：r=4，w=2，x=1  因此rwx=4+2+1=7</p><ul><li><p>1 表示连接的文件数</p></li><li><p>root 表示用户</p></li><li><p>root表示用户所在的组</p></li><li><p>1213 表示文件大小（字节）</p></li><li><p>Feb 2 09:39 表示最后修改日期</p></li><li><p>abc 表示文件名</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> File </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-command-used</title>
      <link href="2020/08/13/linux-command-used/"/>
      <url>2020/08/13/linux-command-used/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c">ls <span class="token operator">/</span>dev<span class="token operator">/</span> <span class="token operator">|</span> grep <span class="token string">"ttyUSB"</span> <span class="token comment">//在结果找含ttyUSB</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">find <span class="token punctuation">.</span> <span class="token operator">-</span>name <span class="token string">"*.c"</span> <span class="token operator">|</span> xargs grep <span class="token string">"hab_status"</span> <span class="token comment">//找到含hab_status的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">tar <span class="token operator">-</span>jxvf <span class="token operator">*</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>bz <span class="token operator">-</span>C <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment">//解压到***</span>tar <span class="token operator">-</span>zxvf <span class="token operator">*</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span>C <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment">//解压到**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.想要把正常输出信息和错误信息输出到分别的文件中，可以用：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">make xxx <span class="token number">1</span><span class="token operator">&gt;</span>build_output_normal<span class="token punctuation">.</span>txt <span class="token number">2</span><span class="token operator">&gt;</span>build_output_error<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.输入密码登录无法进入工作桌面的解决方法</p><pre class="line-numbers language-none"><code class="language-none">（1）ctrl+alt+f1 ,切换到tty1,输入管理员帐号和密码（2）sudo rm -rf .Xauthority*（3）sudo reboot   //重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.利用 mount 指令解决 Read-only file system的问题</p><pre class="line-numbers language-none"><code class="language-none">mount -o remount rw /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.端口占用 和连接梳理</p><pre class="line-numbers language-none"><code class="language-none">netstat  -anp  | grep   端口号 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>shell如何输出每一行的最后几个字符（转）<br>输出每一行的最后几个字符， 可以借助于awk，以及substr函数，awk没有分隔符时$0表示每一行</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cat test.txt |awk  '{print substr($0,length($0)-n)}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中的n表示字符长度，如果要输出每行最后10个字符，就把n改为10。</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>Nodepad </p><blockquote><p>‘d(\d\d) 查找 ‘dxx xx代表数字  替换’d\1+1  \1代表搜索的数字结果 </p></blockquote><blockquote><p>搜索特殊字符 需要 [(\d\d) 匹配[xx xx代表数字</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Command </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cleancode-chap03-functions</title>
      <link href="2020/08/06/cleancode-chap03-functions/"/>
      <url>2020/08/06/cleancode-chap03-functions/</url>
      
        <content type="html"><![CDATA[<h1 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h1><p>看下面两个函数</p><p><img src="/2020/08/06/cleancode-chap03-functions/1.png"><br><img src="/2020/08/06/cleancode-chap03-functions/2.png"></p><p>太多事发生，太多不同的层级抽象。奇怪的字符串和函数调用，混合双重嵌套、标识控制的if语句，不一而足</p><p><img src="/2020/08/06/cleancode-chap03-functions/3.png"></p><h1 id="短小"><a href="#短小" class="headerlink" title="短小"></a>短小</h1><p>再次重构</p><p><img src="/2020/08/06/cleancode-chap03-functions/4.png"></p><p>函数缩进不该多于一层或两层。</p><h1 id="只做一件事"><a href="#只做一件事" class="headerlink" title="只做一件事"></a>只做一件事</h1><h1 id="每个函数一个抽象层级"><a href="#每个函数一个抽象层级" class="headerlink" title="每个函数一个抽象层级"></a>每个函数一个抽象层级</h1><p>3-1的问题：getHtml较高抽象级，PathParser.render(pagePath) 中间抽象层、.append(“\n)较低抽象层</p><p>自顶而下。<br>每个函数后面跟着位于下一抽象层级函数。</p><h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p><img src="/2020/08/06/cleancode-chap03-functions/5.png"></p><p>问题：</p><ul><li>太长了</li><li>不止做了一个事</li><li>违反单一权责原则（Single Responsibility Principle,SRP),因为有好几个修改的理由</li><li>开放闭合原则，添加新类型就需要修改</li></ul><p>用抽象工厂解决</p><p><img src="/2020/08/06/cleancode-chap03-functions/6.png"></p><h1 id="使用描述性名称"><a href="#使用描述性名称" class="headerlink" title="使用描述性名称"></a>使用描述性名称</h1><p>一致命名</p><h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> CleanCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cleancode-chap02-meaningfulDefinition</title>
      <link href="2020/08/05/cleancode-chap02-meaningfuldefinition/"/>
      <url>2020/08/05/cleancode-chap02-meaningfuldefinition/</url>
      
        <content type="html"><![CDATA[<h1 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h1><pre><code>变量、函数、参数、类、包、目录 jar、war等等</code></pre><h1 id="名副其实"><a href="#名副其实" class="headerlink" title="名副其实"></a>名副其实</h1><pre><code>名称需要注解 补充就不是名副其实</code></pre><p><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/1.png"></p><h2 id="修改前"><a href="#修改前" class="headerlink" title="修改前"></a>修改前</h2><p><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/2.png"></p><p>问题</p><ul><li>theList 是什么类型的东西 </li><li>theList 零下标的意义</li><li>值4的意义</li><li>我怎么使用返回的类型</li></ul><h2 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h2><pre><code>我们是具体扫雷游戏，0小标是状态位，4是代表已标记的状态值</code></pre><p><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/3.png"></p><h2 id="进一步修改"><a href="#进一步修改" class="headerlink" title="进一步修改"></a>进一步修改</h2><pre><code>不用int表示单元格 ，写一个名副其实的函数</code></pre><p><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/4.png"></p><h1 id="避免误导"><a href="#避免误导" class="headerlink" title="避免误导"></a>避免误导</h1><pre><code>别用accountList代表一组账户，除非它是List类型，可以用bunchOfAccounts accountGroup。提防使用不同之处小的名称，**注意1和O**和0 l</code></pre><h1 id="做有意义的区分"><a href="#做有意义的区分" class="headerlink" title="做有意义的区分"></a>做有意义的区分</h1><h2 id="a1、a2-aN-纯属误导"><a href="#a1、a2-aN-纯属误导" class="headerlink" title="a1、a2\aN 纯属误导"></a>a1、a2\aN 纯属误导</h2><p><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/5.png"></p><h2 id="废话没有意义"><a href="#废话没有意义" class="headerlink" title="废话没有意义"></a>废话没有意义</h2><p>Product类 和 ProductData类</p><h2 id="废话都是冗余"><a href="#废话都是冗余" class="headerlink" title="废话都是冗余"></a>废话都是冗余</h2><p>Variable 永远不改出现再变量名，Table 不该出现再表。NameString 不比Name好，Name不可能是浮点数</p><p>无法区分调用什么</p><ul><li>getActiveAccount()</li><li>getActiveAccounts()</li><li>getActiveAccountInfo()</li></ul><h1 id="使用读出来的名称"><a href="#使用读出来的名称" class="headerlink" title="使用读出来的名称"></a>使用读出来的名称</h1><p><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/6.png"></p><h1 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h1><ul><li>单字母名称和数字常量问题，很难再一大篇文字找出来</li><li>单字母名称用于短方法的本地变量。</li><li>名称长短对应作用域</li><li>变量常量多次使用要给他好搜索的名称<br><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/7.png"></li></ul><h1 id="避免编码名称"><a href="#避免编码名称" class="headerlink" title="避免编码名称"></a>避免编码名称</h1><h1 id="避免思维映射"><a href="#避免思维映射" class="headerlink" title="避免思维映射"></a>避免思维映射</h1><pre><code>避免你的名称被他们翻译成他们熟悉的名称，ijk就是循环的</code></pre><h1 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h1><pre><code>名词、名词短语；避免Manager、processor、Data、Info</code></pre><h1 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h1><pre><code>动词、动词短语</code></pre><p>重载构造器建议<br><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/8.png"></p><h1 id="一个概念一个词forever"><a href="#一个概念一个词forever" class="headerlink" title="一个概念一个词forever"></a>一个概念一个词forever</h1><p>给每个抽象概念选一个词，一以贯之。别使用fetch,retrieve get非多个类同种方法命名</p><p>controller、manager、driver无法区分</p><h1 id="别用双关语"><a href="#别用双关语" class="headerlink" title="别用双关语"></a>别用双关语</h1><pre><code>一词一义，避免用同一个单词表示不同意义，很多人为了“保持一致”，可能很多个类都有add，add参数和返回值语义等价就ok.append、insert 和add意义不一样 add一般表示两个相加</code></pre><h1 id="添加有意义的语境（添加类，函数或名称空间）"><a href="#添加有意义的语境（添加类，函数或名称空间）" class="headerlink" title="添加有意义的语境（添加类，函数或名称空间）"></a>添加有意义的语境（添加类，函数或名称空间）</h1><pre><code>很少有名称自我说明，多数不能，添加类，函数或名称空间。或者前缀，</code></pre><p>比如</p><p><img src="/2020/08/05/cleancode-chap02-meaningfuldefinition/9.png"></p><h1 id="不要添加没用的语境"><a href="#不要添加没用的语境" class="headerlink" title="不要添加没用的语境"></a>不要添加没用的语境</h1><p>再GSD应用程序创建一个邮件类，不需要GSDAccountAddress</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> CleanCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap04-Tree</title>
      <link href="2020/07/14/data-structures-and-algorithms-chap04-tree/"/>
      <url>2020/07/14/data-structures-and-algorithms-chap04-tree/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%A0%91">树</a><ul><li><a href="#%E6%A0%91%E7%9A%84%E5%87%BA%E7%8E%B0">树的出现</a></li><li><a href="#%E6%A0%91%E7%9A%84%E6%9C%AF%E8%AF%AD">树的术语</a></li><li><a href="#%E6%A0%91%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0">树基本实现</a></li><li><a href="#%E6%A0%91%E9%81%8D%E5%8E%86%E5%92%8C%E5%BA%94%E7%94%A8">树遍历和应用</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a><ul><li><a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91">表达式树</a></li></ul></li><li><a href="#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">二叉查找树</a><ul><li><a href="#%E9%80%92%E5%BD%92%E5%92%8C%E5%BE%AA%E7%8E%AF-findminfindmax">递归和循环 （findmin,findmax)</a></li><li><a href="#%E5%AE%9E%E7%8E%B0%E6%B3%A8%E6%84%8F">实现注意</a></li><li><a href="#%E5%B9%B3%E5%9D%87%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90">平均情况分析</a></li></ul></li><li><a href="#avl%E6%A0%91-%E4%B8%80%E7%A7%8D%E5%8F%A4%E8%80%81%E5%B9%B3%E8%A1%A1%E6%A0%91">AVL树 （一种古老平衡树）</a><ul><li><a href="#%E6%97%8B%E8%BD%AC%E8%B0%83%E6%95%B4">旋转调整</a><ul><li><a href="#%E5%8D%95%E6%97%8B%E8%BD%AC-%E6%83%85%E5%BD%A214">单旋转 情形1、4</a></li><li><a href="#%E5%8F%8C%E6%97%8B%E8%BD%AC-%E6%83%85%E5%BD%A223">双旋转 情形2、3</a></li></ul></li></ul></li><li><a href="#%E4%BC%B8%E5%B1%95%E6%A0%91-splay-tree">伸展树 （splay tree)</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E7%9B%B4%E5%8D%95%E6%97%8B%E8%BD%AC-%E4%B8%8D%E5%8F%AF%E7%94%A8">简单实现，一直单旋转 （不可用）</a></li><li><a href="#%E4%B8%A5%E8%B0%A8%E5%AE%9E%E7%8E%B0%E5%B1%95%E5%BC%80">严谨实现，展开</a></li></ul></li><li><a href="#%E5%86%8D%E8%B0%88%E6%A0%91%E9%81%8D%E5%8E%86">再谈树遍历</a></li><li><a href="#b%E6%A0%91">B树</a></li><li><a href="#%E6%A0%87%E5%87%86%E5%BA%93set-map">标准库（SET MAP)</a><ul><li><a href="#set">SET</a></li><li><a href="#map">MAP</a></li><li><a href="#%E5%AE%9E%E7%8E%B0treeset%E5%92%8Ctreemap">实现TreeSet和TreeMAP</a></li><li><a href="#%E5%A4%9A%E4%B8%AA%E6%98%A0%E5%B0%84%E4%BE%8B%E5%AD%90%E4%B8%80%E5%AF%B9%E5%A4%9A">多个映射例子（一对多）</a></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#41-43-%E6%A0%B9%E5%8F%B6%E5%AD%90%E9%AB%98%E5%BA%A6%E6%B7%B1%E5%BA%A6">4.1-4.3 根、叶子、高度、深度</a></li><li><a href="#44-%E8%AF%81%E6%98%8E%E5%9C%A8n%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD-%E5%AD%98%E5%9C%A8n1%E4%B8%AAnull%E9%93%BE-%E4%BB%A3%E8%A1%A8n1%E4%B8%AA%E5%84%BF%E5%AD%90">4.4 证明在N个节点的二叉树中， 存在N+1个null链， 代表N+1个儿子</a></li><li><a href="#45%E8%AF%81%E6%98%8E%E5%9C%A8%E9%AB%98%E5%BA%A6%E4%B8%BAh%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E5%A4%A7%E4%B8%AA%E6%95%B0%E6%98%AF2%5Eh1-1">4.5证明在高度为h的二叉树中，节点的最大个数是2^（h+1)-1</a></li><li><a href="#46%E6%BB%A1%E8%8A%82%E7%82%B9full-node-%E6%98%AF%E5%85%B7%E6%9C%89%E4%B8%A4%E4%B8%AA%E5%84%BF%E5%AD%90%E7%9A%84%E8%8A%82%E7%82%B9%E8%AF%81%E6%98%8E%E6%BB%A1%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%AA%E6%95%B0%E5%8A%A01%E7%AD%89%E4%BA%8E%E9%9D%9E%E7%A9%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A0%91%E5%8F%B6%E7%9A%84%E4%B8%AA%E6%95%B0">4.6满节点(full node) 是具有两个儿子的节点。证明满节点的个数加1等于非空二叉树的树叶的个数</a></li><li><a href="#47%E8%AE%BE%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%89%E6%A0%91%E5%8F%B6lllu%E5%90%84%E6%A0%91%E5%8F%B6%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%88%86%E5%88%AB%E6%98%AFddzdy%E8%AF%81%E6%98%8E2%5E-d12%5E-dy%E2%89%A41">4.7设二叉树有树叶L，l，…，lu，各树叶的深度分别是d，dz，…，dy。证明，2^-d1+…..+2^-dy≤1</a></li><li><a href="#48-%E6%A0%91%E7%9A%84%E7%AC%A6%E5%8F%B7%E8%A1%A8%E8%BE%BE%E5%BC%8F">4.8 树的符号表达式</a></li><li><a href="#49-a%E6%8F%92%E5%85%A53-1-4-6-9-2-5-7-b%E5%88%A0%E9%99%A4%E6%A0%B9">4.9 a插入3 1 4 6 9 2 5 7 b删除根</a></li><li><a href="#410-%E5%88%97%E5%87%BA%E7%9B%AE%E5%BD%95%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%8F%8A%E5%A4%A7%E5%B0%8F">4.10 列出目录所有文件及大小</a></li><li><a href="#412-%E5%AE%9E%E7%8E%B0treeset-%E9%80%9A%E8%BF%87%E7%88%B6%E8%8A%82%E7%82%B9%E5%88%B6%E9%80%A0%E8%BF%AD%E4%BB%A3%E5%99%A8">4.12 实现TreeSet 通过父节点制造迭代器</a></li><li><a href="#412-%E7%94%A8mytreeset%E5%AE%9E%E7%8E%B0treemap%E7%B1%BB">4.12 用myTreeSet实现TreeMap类</a></li><li><a href="#413-%E5%AE%9E%E7%8E%B0treeset-%E9%80%9A%E8%BF%87%E6%B7%BB%E5%8A%A0%E9%80%9A%E5%90%91%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9C%80%E5%B0%8F%E8%8A%82%E7%82%B9%E5%92%8C%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9C%80%E5%A4%A7%E8%8A%82%E7%82%B9%E7%9A%84%E9%93%BE%E5%88%B6%E9%80%A0%E8%BF%AD%E4%BB%A3%E5%99%A8">4.13 实现TreeSet 通过添加通向下一个最小节点和下一个最大节点的链制造迭代器</a></li><li><a href="#414-%E9%9A%8F%E6%9C%BAinsert-remove%E7%9A%84-%E7%9A%84%E9%80%89%E6%8B%A9">4.14 随机insert remove的 的选择</a></li><li><a href="#415-%E5%A4%9A%E7%A7%8Dtree%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5">4.15 多种Tree删除策略</a></li><li><a href="#416-%E6%87%92%E6%83%B0%E5%88%A0%E9%99%A4%E5%AE%9E%E7%8E%B0">4.16 懒惰删除实现</a></li><li><a href="#417-%E8%AF%81%E6%98%8E%E9%9A%8F%E6%9C%BA%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6%E6%9C%80%E6%B7%B1%E7%9A%84%E8%8A%82%E7%82%B9%E7%9A%84%E6%B7%B1%E5%BA%A6-%E5%B9%B3%E5%9D%87%E4%B8%BAologn-">4.17 证明随机二叉查找树的深度(最深的节点的深度) 平均为O(logN) 。</a></li><li><a href="#418-avl%E6%A0%91%E8%8A%82%E7%82%B9%E7%9A%84%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">4.18 AVL树节点的斐波那契数列</a></li><li><a href="#419-avl%E6%A0%91%E6%8F%92%E5%85%A5">4.19 AVL树插入</a></li><li><a href="#420-%E8%AF%81%E6%98%8Eavl%E6%A0%91%E6%8C%891-2--2-1-%E7%9A%84%E5%AE%8C%E7%BE%8E%E7%90%86%E6%83%B3%E5%B9%B3%E8%A1%A1perfectly-balanced">4.20 证明。AVL树按1， 2， …， 2*-1 的完美理想平衡(perfectly balanced)</a></li><li><a href="#421-avl%E6%A0%91%E5%AE%9E%E7%8E%B0">4.21 AVL树实现</a></li><li><a href="#422-avl%E9%AB%98%E5%BA%A6%E4%BF%A1%E6%81%AF%E5%88%A4%E5%88%AB">4.22 AVL高度信息判别</a></li><li><a href="#423-avl%E6%8F%92%E5%85%A5%E9%9D%9E%E9%80%92%E5%BD%92%E6%96%B9%E6%B3%95">4.23 AVL插入非递归方法</a></li><li><a href="#424-avl%E6%A0%91%E4%B8%AD%E5%AE%9E%E7%8E%B0%E9%9D%9E%E6%87%92%E6%83%B0-%E5%88%A0%E9%99%A4">4.24 AVL树中实现(非懒惰) 删除?</a></li><li><a href="#425-avl%E9%AB%98%E5%BA%A6bit%E8%AE%A1%E7%AE%97">4.25 AVL高度bit计算</a></li><li><a href="#426-avl%E6%9B%B4%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E5%8F%8C%E6%97%8B%E8%BD%AC">4.26 AVL更高效率的双旋转</a></li><li><a href="#42728-%E4%BC%B8%E5%B1%95%E6%A0%91%E7%9A%84%E8%AE%BF%E9%97%AE%E5%88%A0%E9%99%A4">4.27、28 伸展树的访问删除</a></li><li><a href="#429-%E8%AF%81%E6%98%8E%E4%BC%B8%E5%B1%95%E6%A0%91%E7%9A%84%E6%80%A7%E8%B4%A8">4.29 证明伸展树的性质</a></li><li><a href="#430-%E4%BC%B8%E5%B1%95%E6%A0%91avl%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%AF%B9%E6%AF%94-%E6%9C%AA%E5%AE%8C%E5%96%84">4.30 伸展树、AVL、二叉查找树对比 (未完善)</a></li><li><a href="#431-%E7%94%A8root%E5%BC%95%E7%94%A8%E8%AE%A1%E7%AE%97%E8%8A%82%E7%82%B9%E6%A0%91%E5%8F%B6%E6%BB%A1%E8%8A%82%E7%82%B9">4.31 用root引用计算节点、树叶、满节点</a></li><li><a href="#432-%E6%B5%8B%E8%AF%95%E4%B8%80%E6%A3%B5%E4%BA%8C%E5%8F%89%E6%A0%91%E6%98%AF%E4%B8%8D%E6%98%AF%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">4.32 测试一棵二叉树是不是二叉查找树</a></li><li><a href="#433-%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E6%A0%91%E5%8F%B6">4.33 递归删除树叶</a></li><li><a href="#434-%E7%94%9F%E6%88%90%E4%B8%80%E6%A3%B5n-%E8%8A%82%E7%82%B9%E9%9A%8F%E6%9C%BA%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">4.34 生成一棵N-节点随机二叉查找树</a></li><li><a href="#435-%E5%86%99%E5%87%BA%E7%94%9F%E6%88%90%E5%85%B7%E6%9C%89%E6%9C%80%E5%B0%91%E8%8A%82%E7%82%B9%E9%AB%98%E5%BA%A6%E4%B8%BAh%E7%9A%84avl%E6%A0%91">4.35 写出生成具有最少节点高度为h的AVL树</a></li><li><a href="#436-%E6%88%90%E4%B8%80%E6%A3%B5%E5%85%B7%E6%9C%89%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%8E1%E7%9B%B4%E5%88%B02h1-1%E4%B8%94%E9%AB%98%E4%B8%BAh%E7%9A%84%E7%90%86%E6%83%B3%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91">4.36 成一棵具有关键字从1直到2h+1-1且高为h的理想平衡二叉查找树</a></li><li><a href="#437-%E5%9C%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9F%A5%E6%89%BEk1k2%E7%9A%84%E5%85%83%E7%B4%A0--%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4oklogn-%E8%BF%90%E8%A1%8C">4.37 在二叉树查找k1~k2的元素  平均时间O(K+logN) 运行</a></li><li><a href="#438-%E7%BB%99%E8%8A%82%E7%82%B9%E9%99%84%E5%8A%A0xy%E6%9D%A5%E7%94%BB%E5%87%BA%E6%A0%91--x%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%95%B0%E5%AD%97-y%E8%B4%9F%E6%B7%B1%E5%BA%A6">4.38 给节点附加x,y来画出树  x中序遍历数字 y负深度</a></li><li><a href="#441-%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E9%9D%9E%E9%80%92%E5%BD%92">4.41 先序遍历、中序遍历、后续遍历、层序遍历、非递归</a></li><li><a href="#444-%E5%85%84%E5%BC%9F%E5%84%BF%E5%AD%90%E6%A0%91-%E6%9E%84%E9%80%A0%E9%81%8D%E5%8E%86">4.44 兄弟儿子树 构造遍历</a></li><li><a href="#446-%E5%88%A4%E6%96%AD%E6%A0%91%E7%9A%84%E7%9B%B8%E4%BC%BC-%E7%BB%93%E6%9E%84%E4%B8%80%E6%A0%B7">4.46 判断树的相似 （结构一样）</a></li><li><a href="#447-%E5%88%A4%E6%96%AD%E6%A0%91%E7%9A%84%E5%90%8C%E6%9E%84">4.47 判断树的同构</a></li><li><a href="#448-%E8%AF%81avl%E5%8D%95%E6%97%8B%E8%BD%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E5%BE%97%E4%BB%BB%E6%84%8F%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%8F%98%E6%88%90%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">4.48 证：AVL单旋转可以使得任意的二叉搜索树变成另一个二叉搜索树</a></li><li><a href="#449-%E6%89%BE%E6%A0%91%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%B0%8F%E9%A1%B9">4.49 找树的第k个最小项</a></li><li><a href="#450-%E7%BA%BF%E7%B4%A2%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0">4.50 线索树的实现</a></li><li><a href="#451-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E6%BB%A1%E8%8A%82%E7%82%B9%E5%B9%B3%E5%9D%87%E6%AC%A1%E6%95%B0">4.51 二叉查找树满节点平均次数</a></li><li><a href="#453-%E8%AF%BB%E5%8F%96%E5%8D%95%E8%AF%8D-%E5%B0%86%E7%9B%B8%E5%B7%AE%E7%AD%89%E4%BA%8E1%E7%9A%84%E5%AF%B9%E5%BA%94-%E5%A4%9A%E4%B8%AA%E6%98%A0%E5%B0%84-3%E7%A7%8D%E6%96%B9%E6%B3%95">4.53 读取单词 将相差等于1的对应 多个映射 (3种方法)</a></li></ul></li></ul><!-- /TOC --><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="树的出现"><a href="#树的出现" class="headerlink" title="树的出现"></a>树的出现</h2><ul><li>大量输入 链表线性访问太慢 ，树大部分操作都是O(logN)，比较均衡</li><li>二叉查找树：每种操作O(logN)</li></ul><h2 id="树的术语"><a href="#树的术语" class="headerlink" title="树的术语"></a>树的术语</h2><p>root：根节点， 每个子树根r的child， r是每个子树的parent<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/1.png"></p><ul><li>N个点 N-1条边决定一个树</li><li>leaf：没有儿子的节点  siblings：相同父亲的是兄弟 grandparent grandchild类似</li><li>n1、n2……nk 的path 就是路径序列<font color="red" font="" size="4">ni是ni+1的父亲</font> ，length就是路径经过的边 k-1 ，每个节点自己对自己有个length=0的路径，根到每个结点有唯一路径</li><li>n1 到n2 有路径,n1是n2的祖先ancestor,n2是n1后裔descendant。 n1!=n2 真祖先（proper ancestor) 真后裔(proper descendant)</li><li>ni的depth 深度：root到节点ni唯一路径的length</li><li>ni的height：ni到<font color="red" font="" size="4">一片树叶的最长路径的长</font> leaf 的height就是0，因为没有儿子。</li></ul><p>定理：<font color="red" font="" size="4">一棵树的深度等于它最深的树叶的深度；该深度等于这个树的高</font><br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/2.png"><br><font color="red" font="" size="4">如上图 E的深度是1，高度是2；F深度1，高度1；Q深度3，高度0；</font> </p><h2 id="树基本实现"><a href="#树基本实现" class="headerlink" title="树基本实现"></a>树基本实现</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/3.png"></p><h2 id="树遍历和应用"><a href="#树遍历和应用" class="headerlink" title="树遍历和应用"></a>树遍历和应用</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/4.png"></p><p>利用深度遍历 打印目录<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/5.png"><br>这就是**先序遍历(preorder traversal)**对节点的处理是在它诸多儿子节点处理之前</p><p>利用深度遍历 求目录总大小<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/6.png"><br>这就是**后序遍历（postorder traversal)**对节点的处理是在它诸多儿子节点处理之后</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树： 每个节点最多两个孩子，分析得平均深度为O(根号N) N节点数<br>二叉查找树： 平均深度 O(logN)</p><p>也有坏情况<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/7.png"></p><p>画树的时候 不画null链</p><h2 id="表达式树"><a href="#表达式树" class="headerlink" title="表达式树"></a>表达式树</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/8.png"><br>(a+(b<em>c))+((((d</em>e)+f))) </p><ul><li><p><strong>中序遍历（inorder traversal）</strong> 括号左表达式 运算符 括号右表达式<br>就是中缀表达式</p></li><li><p>后序遍历 abc*+de<em>f+g</em>+ 后缀表达式</p></li><li><p>先序遍历 先打印运算符 ++a<em>bc</em>+*defg比较少见 先序表达式</p></li></ul><p>后缀变树</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/9.png"><br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/10.png"></p><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><p>先假设所有项互异，左子树小于节点小于右子树</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/11.png"></p><p>由于树的递归定义，通常递归编写操作，二叉查找树平均深度O(logN)所以不用担心栈空间<br>comparable 来构造树确保排序</p><ul><li>非尾递归，下一个函数结束以后此函数还有后续，所以必须保存本身的环境以供处理返回值。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">int</span> <span class="token function">tailrecsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">tailrecsum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//递归</span><span class="token number">2.</span><span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>尾递归，进入下一个函数不再需要上一个函数的环境了，得出结果以后直接返回。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">int</span> <span class="token function">recsum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">recsum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//尾递归</span><span class="token number">2.</span><span class="token keyword">int</span> <span class="token function">fibonacci_tail</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> ret1<span class="token punctuation">,</span> <span class="token keyword">int</span> ret2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret1<span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token function">fibonacci_tail</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> ret2<span class="token punctuation">,</span> ret1 <span class="token operator">+</span> ret2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尾递归可以用循环代替，转变后能克服递归的一些不足。例如：计算阶乘的递归计算过程属于线性递归，步骤数目的增长正比于输入n。也就是说，这个过程所需步骤的增长为O(n) ，空间需求的增长也为O(n) 。对于迭代的阶乘，步数还是O(n)而空间是O(1) ，也就是常数。</p><h2 id="递归和循环-（findmin-findmax"><a href="#递归和循环-（findmin-findmax" class="headerlink" title="递归和循环 （findmin,findmax)"></a>递归和循环 （findmin,findmax)</h2><p>算法的简明是以速度的降低为代价的。尾递归可以改成循环。<br>树的递归先注意处理null.<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/12.png"></p><h2 id="实现注意"><a href="#实现注意" class="headerlink" title="实现注意"></a>实现注意</h2><ul><li><p>先判空,空代表什么？</p></li><li><p>递归思想 </p><ul><li>例如：contains 判空、比较 、小于 递归左边的结果、 大于递归右边的</li><li>insert 空了 就是这个位置 、比较、小于 树的左子树等于左子树递归后的结果、大于 树的右子树等于右子树的递归后的结果 等于 可以设置一个频率位置标记</li><li>remove 空了 就是没有这个元素 直接return、比较、小于 树的左子树等于左子树递归后的结果、大于 树的右子树等于右子树的递归后的结果 ，等于的话，树叶就直接删（=null） 单儿子的话 就连在那个儿子上，双儿子就找右子树的最小值交换值 然后删除那个值。</li><li>findmin,findmax </li></ul></li><li><p>remove的时候如果一直只在右子树会导致树不平衡</p><h2 id="平均情况分析"><a href="#平均情况分析" class="headerlink" title="平均情况分析"></a>平均情况分析</h2></li><li><p>内部路径长（internel path length）：一棵树所有节点的深度和</p></li></ul><p>设D(N)为某N个结点树的内部路径长 D(1)=0,i节点左子树 一棵N-i-1 右处和深度0处的一个根节点，0&lt;=i《N 在原树中，所有节点都加一度 可得</p><blockquote><p>D(N)=D(i)+D(N-i-1)+N-1<br>二叉查找树所有子树大小等可能，<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/13.png"></p></blockquote><p>由于删除都是右节点最小替代<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/14.png"><br>删除会变成O(根号N)而不是O(logN)</p><h1 id="AVL树-（一种古老平衡树）"><a href="#AVL树-（一种古老平衡树）" class="headerlink" title="AVL树 （一种古老平衡树）"></a>AVL树 （一种古老平衡树）</h1><p>给一棵树输入预先排序数据插入，可能会成链表，因为树由没有左儿子的点组成 </p><p>解决方法平衡平衡：任何的节点不得过深<br>带有平衡条件的二叉查找树</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/15.png"></p><p>除了插入其他都是O(logN) 懒惰删除法。在插入后 只有插入点到根节点的路径上平衡可能改变影响平衡的α点，α点两个子树高度差2 就影响平衡了</p><ul><li>1 对α的左儿子的左子树插入</li><li>2 对α的左儿子的右子树插入</li><li>3 对α的右儿子的左子树插入</li><li>4 对α的右儿子的右子树插入</li></ul><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/16.png"><br>四种情形</p><h2 id="旋转调整"><a href="#旋转调整" class="headerlink" title="旋转调整"></a>旋转调整</h2><p>节点k2 不满足AVL平衡，左子树比右子树深两层</p><h3 id="单旋转-情形1、4"><a href="#单旋转-情形1、4" class="headerlink" title="单旋转 情形1、4"></a>单旋转 情形1、4</h3><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/17.png"></p><p>在插入前k2满足AVL,插入后 子树X长出一层 Y不能和Z同一层，把树看成柔软灵活的，抓住子节点k1，闭上眼睛，使劲摇动，在重力作用下k1变成了新的根。<br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/18.png"><br>注意倒数第二个 选择把原来的左子树变成新的右子树</p><h3 id="双旋转-情形2、3"><a href="#双旋转-情形2、3" class="headerlink" title="双旋转 情形2、3"></a>双旋转 情形2、3</h3><p>情形2</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/19.png"><br>2和1 然后2和3旋转</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/20.png"></p><p>2和3 然后3和1旋转</p><h1 id="伸展树-（splay-tree"><a href="#伸展树-（splay-tree" class="headerlink" title="伸展树 （splay tree)"></a>伸展树 （splay tree)</h1><ul><li>保证从空树开始一系列M个的操作的时间最多O(MlogN),虽然有些操作还是O(N)，只要他很少就行；<strong>摊换时间概念</strong></li><li>基本想法：一个节点被访问后，它就要经过一系列AVL旋转被推到根，研究表明，一个节点被访问，它很可能不久就再被访问。伸展树不要求保留高度和平衡信息，因此它某种程度节省空间和简化代码</li></ul><h2 id="简单实现，一直单旋转-（不可用）"><a href="#简单实现，一直单旋转-（不可用）" class="headerlink" title="简单实现，一直单旋转 （不可用）"></a>简单实现，一直单旋转 （不可用）</h2><p>一直单旋转，这样虽然提高了一个k1的访问速度，但是把k3推到了一样的高度上。k1访问时间少，k3增加。</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/21.png"></p><h2 id="严谨实现，展开"><a href="#严谨实现，展开" class="headerlink" title="严谨实现，展开"></a>严谨实现，展开</h2><p>依旧是旋转</p><ul><li><p>X的父亲是根，单旋转</p></li><li><p>X有父亲和祖父，分两种</p><ul><li><p>zig-zag之字型，P是左儿子，X右儿子 或P右 X左。X和P转，P和G</p></li><li><p>zig-zig一字型，P左、X左，或者P右、X右。P和G 然后X和P</p></li></ul></li></ul><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/22.png"></p><p>把访问路上大部分节点深度大致减少一半</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/23.png"><br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/25.png"></p><p>效果：同样和简单旋转一样，在N次插入后得到 只有左子树的，这时候访问1<br>之后对2的访问只花费N/2,而不是N-2。对2访问能把各个节点带到距离根N/4，<br>继续进行下去深度大约为logN。</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/24.png"></p><p>对1-32 插入后执行 1-9的查询 如图</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/26.png"><br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/27.png"><br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/28.png"><br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/29.png"><br><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/30.png"></p><p>这些图强调了伸展树的基本性质：后面可以证明每个操作绝不会落后于O(logN)</p><h1 id="再谈树遍历"><a href="#再谈树遍历" class="headerlink" title="再谈树遍历"></a>再谈树遍历</h1><ul><li>中序遍历：依次列出每一项，有意义 （排序列出的问题、比如二叉查找树）</li><li>后续遍历：先处理两个子树才能处理当前，比如高度</li><li>先序遍历：先处理当前结点，比如用深度标记结点</li></ul><blockquote><p>共同点，都是先处理null，然后其余</p></blockquote><ul><li>层序遍历，深度d结点再d+1之前处理。，它用队列，而不是递归默认的栈。</li></ul><h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><p><font color="red,font" size="4">我们现在可以存储整个数据结构到主存了，大O分析假设所有操作耗时相等</font> 但是磁盘不一样。一台机器可以每秒几亿次指令，磁盘是机械运动，许多磁盘7200RPM，1分钟7200转，平均算转一半就要1/240秒，但是加上移动磁盘差不多也是1/120s，所以为了节省一次磁盘我们愿意进行大量运算。</p><p>假设查找驾驶记录1000w，每个关键词（名字32字节），记录256字节，不能都装入主存，二叉查找不行，不能低于logN。</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/31.png"></p><p>B树特点 （M叉）</p><ul><li>数据项存储在树叶</li><li>非叶结点存储直到M-1关键词指示搜索的方向。关键字i代表子树i+1的最小关键字。</li><li>树的根或一个树叶，儿子数 2~M</li><li>除根外，所有非树叶结点，儿子数【M/2】~M</li><li>所有的树叶都在相同的深度，而且有【L/2】和L个数据项。</li></ul><p>如下，所有非叶结点儿子数3和5之间（2到4关键词），根可能2儿子。L这时候取5 （不一定，每个结点代表一个磁盘区域</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/32.png"></p><p>列如，一块可以8192字节，每个关键词32字节，M-1关键词 。M个分支，每个代表其他磁盘区域，设4字节。一个非叶结点内存需求 32M-32+4M ,不超过8192字节，最大M=228.<br>每个数据记录256字节，32个记录 刚好是一个块大小。所以 L=32。这样保证每片树叶16-32数据记录，每个内部结点（除根）至少114种方式分叉。1000w记录,至多1000w/16=625000树叶。最坏也在第四层，最坏情况 logM/2 N </p><p>插入情况：</p><ul><li>直接插入</li></ul><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/33.png"></p><ul><li>树叶满了，分裂插入</li></ul><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/34.png"></p><ul><li>父节点儿子满了 不能分裂  40在41下 分到1分支，35满了</li></ul><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/35.png"></p><p>删除情况：</p><ul><li>查找后直接删除，可能出现领养情况如下</li></ul><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/36.png"></p><h1 id="标准库（SET-MAP"><a href="#标准库（SET-MAP" class="headerlink" title="标准库（SET MAP)"></a>标准库（SET MAP)</h1><h2 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h2><p>不允许重复元的Collection,SortedSet 接口各项有序。TreeSet实现SortedSet基本操作都是O(logN)</p><h2 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h2><p>key 不null,value 可以null.TreeMap实现了SortedMap。</p><p>通过Map迭代比Collection复杂，因为Map不提供迭代器，而是三种方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Keytpye</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ValueType</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">KeyTpye</span><span class="token punctuation">,</span><span class="token class-name">VauleType</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>keySet()和Values()返回简单的集合，entrySet返回Set对象 每一项是由嵌套的接口Map.Entry表示 Map.Entry 需要的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Keytpye</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">ValueType</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">ValueType</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">ValueType</span> newValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实现TreeSet和TreeMAP"><a href="#实现TreeSet和TreeMAP" class="headerlink" title="实现TreeSet和TreeMAP"></a>实现TreeSet和TreeMAP</h2><p>基本实现方式平衡二叉查找树，基本操作最坏对数，一般不用AVL树，而是自顶而下的红黑树。困难部分，迭代器支持。迭代器保留的是当前节点链接，困难时如何到下一个节点高效推进。方案如下：</p><ol><li>构造迭代器时，让每个把包含TreeSet的数组存储。我们有toArray，不需要迭代器。</li><li>让迭代器保留存储通向当前节点路径的栈。但是这样迭代器有点大，导致迭代器代码臃肿</li><li>让查找树每个节点加上父节点地址。需要额外内存，迭代器代码臃肿。</li><li>让每个节点保留两个附加的链，一个通往更小的节点，一个通往更大的节点。占空间，迭代器简单。</li><li>只对那些具有null左链和null右链的节点保存附加的链。通过附加bool变量，<strong>线索树（threaded tree）</strong>，用在许多平衡二叉查找。</li></ol><h2 id="多个映射例子（一对多）"><a href="#多个映射例子（一对多）" class="headerlink" title="多个映射例子（一对多）"></a>多个映射例子（一对多）</h2><p>改一个字母 wine,dine、fine、line、wind等，夹数词典单词数89000个不同长度不同单词。6~11字母</p><p>打印得到的值</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/37.png"></p><p>简单实现目标计算出所有单词对应的改一个字母的单词</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/38.png"></p><p>这个算法 需要75s，第二种，避免比较不同长度的,先分类长度，<font color="red,font" size="4">遍历集合，我们可以用迭代器，但是循环多次遍历集合，我们最好转换到数组。尤其避免了重复调用使Object向String转换。泛型的话它将发生在幕后。</font> 16s。</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/40.png"></p><p>第三种，从wine、nine这样除第一个完全相同，删第一个，留三个。同理，处理第二个字母，第三第四. 4s</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/39.png"></p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/41.png"></p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="4-1-4-3-根、叶子、高度、深度"><a href="#4-1-4-3-根、叶子、高度、深度" class="headerlink" title="4.1-4.3 根、叶子、高度、深度"></a>4.1-4.3 根、叶子、高度、深度</h2><h2 id="4-4-证明在N个节点的二叉树中，-存在N-1个null链，-代表N-1个儿子"><a href="#4-4-证明在N个节点的二叉树中，-存在N-1个null链，-代表N-1个儿子" class="headerlink" title="4.4 证明在N个节点的二叉树中， 存在N+1个null链， 代表N+1个儿子"></a>4.4 证明在N个节点的二叉树中， 存在N+1个null链， 代表N+1个儿子</h2><p>N有2N儿子  其中N-1个节点是别人的儿子 N+1个null儿子</p><h2 id="4-5证明在高度为h的二叉树中，节点的最大个数是2-（h-1-1"><a href="#4-5证明在高度为h的二叉树中，节点的最大个数是2-（h-1-1" class="headerlink" title="4.5证明在高度为h的二叉树中，节点的最大个数是2^（h+1)-1"></a>4.5证明在高度为h的二叉树中，节点的最大个数是2^（h+1)-1</h2><p>直接求和</p><h2 id="4-6满节点-full-node-是具有两个儿子的节点。证明满节点的个数加1等于非空二叉树的树叶的个数"><a href="#4-6满节点-full-node-是具有两个儿子的节点。证明满节点的个数加1等于非空二叉树的树叶的个数" class="headerlink" title="4.6满节点(full node) 是具有两个儿子的节点。证明满节点的个数加1等于非空二叉树的树叶的个数"></a>4.6满节点(full node) 是具有两个儿子的节点。证明满节点的个数加1等于非空二叉树的树叶的个数</h2><p>n0、n1、n2 代表有几个儿子的点<br>N=n0+n1+n2  N=n1+2n2</p><h2 id="4-7设二叉树有树叶L，l，…，lu，各树叶的深度分别是d，dz，…，dy。证明，2-d1-…-2-dy≤1"><a href="#4-7设二叉树有树叶L，l，…，lu，各树叶的深度分别是d，dz，…，dy。证明，2-d1-…-2-dy≤1" class="headerlink" title="4.7设二叉树有树叶L，l，…，lu，各树叶的深度分别是d，dz，…，dy。证明，2^-d1+…..+2^-dy≤1"></a>4.7设二叉树有树叶L，l，…，lu，各树叶的深度分别是d，dz，…，dy。证明，2^-d1+…..+2^-dy≤1</h2><p>递归法1个</p><h2 id="4-8-树的符号表达式"><a href="#4-8-树的符号表达式" class="headerlink" title="4.8 树的符号表达式"></a>4.8 树的符号表达式</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/42.png"></p><p>前缀表达式：-*<em>ab+cde<br>中缀表达式：((a</em>b)<em>(c+d))-e<br>后缀表达式：ab</em>cd+*e-</p><h2 id="4-9-a插入3-1-4-6-9-2-5-7-b删除根"><a href="#4-9-a插入3-1-4-6-9-2-5-7-b删除根" class="headerlink" title="4.9 a插入3 1 4 6 9 2 5 7 b删除根"></a>4.9 a插入3 1 4 6 9 2 5 7 b删除根</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/47.png"></p><h2 id="4-10-列出目录所有文件及大小"><a href="#4-10-列出目录所有文件及大小" class="headerlink" title="4.10 列出目录所有文件及大小"></a>4.10 列出目录所有文件及大小</h2><p>列出目录的文件 根据空格表示前后级关系：先序遍历</p><p>列出目录的文件和大小 先把子文件的大小打印算出，在算父亲的：后序遍历。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap04</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem4_10 * @Author: Wibur * @Description: * 编写一个程序，该程序列出一个目录中所有的文件和它们的大小。模拟联机代码中的程序。 * @Date: Created in 15:29 2020/7/20 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem4_10</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Directory</span> dir<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">"D:\\java_projects\\DataStructure\\src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dir<span class="token punctuation">.</span><span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Size output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dir<span class="token punctuation">.</span><span class="token function">listAllSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Directory</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listAllSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">listAllSize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printfName</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> subName<span class="token operator">:</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">listAll</span><span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>subName<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">listAllSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> size<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> subName<span class="token operator">:</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>                size<span class="token operator">+=</span><span class="token function">listAllSize</span><span class="token punctuation">(</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>subName<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">printfName</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span>name<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printfName</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>depth <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printfName</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">long</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>depth <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"   "</span><span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-12-实现TreeSet-通过父节点制造迭代器"><a href="#4-12-实现TreeSet-通过父节点制造迭代器" class="headerlink" title="4.12 实现TreeSet 通过父节点制造迭代器"></a>4.12 实现TreeSet 通过父节点制造迭代器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ClassName Problem4_11 * @Author: Wibur * @Description: * 编写Tree Set类的实现程序， 其中相关的迭代器使用二叉查找树。在每个节点上添加一个指向 * 其父节点的链。 * @Date: Created in 15:27 2020/7/20 * @Versuin: 1.0 */</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">contains</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">contains</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">contains</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">,</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> father<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>father<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//两儿子时用右边最小得替代</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>                modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                root<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                modCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tempf<span class="token operator">=</span>root<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>                root<span class="token operator">=</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">:</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>tempf<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">myTreeIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> myTreeIterator <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> current<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> previous<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> okToRemove<span class="token punctuation">;</span>        <span class="token function">myTreeIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            current<span class="token operator">=</span><span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            expectedModCount<span class="token operator">=</span>modCount<span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            previous<span class="token operator">=</span>current<span class="token punctuation">;</span>            <span class="token class-name">AnyType</span> ele<span class="token operator">=</span>current<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                current<span class="token operator">=</span><span class="token function">findMin</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> child<span class="token operator">=</span>current<span class="token punctuation">;</span>                current<span class="token operator">=</span>current<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>current<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span>child<span class="token punctuation">)</span><span class="token punctuation">{</span>                    child<span class="token operator">=</span>current<span class="token punctuation">;</span>                    current<span class="token operator">=</span>current<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ele<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>okToRemove<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token class-name">MyBinarySearchTreeSet</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove1</span><span class="token punctuation">(</span>previous<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>                okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-12-用myTreeSet实现TreeMap类"><a href="#4-12-用myTreeSet实现TreeMap类" class="headerlink" title="4.12 用myTreeSet实现TreeMap类"></a>4.12 用myTreeSet实现TreeMap类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ClassName Problem4_11 * @Author: Wibur * @Description: * 通过存储类型Tree Set&lt;Map.Entry&lt;Key Type， ValueType&gt;&gt;的一个数据成员编写实现 * TreeMap类的程序。 * @Date: Created in 15:27 2020/7/20 * @Versuin: 1.0 */</span><span class="token keyword">class</span> <span class="token class-name">MyTreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span><span class="token class-name">Comparable</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>        <span class="token class-name">V</span> value<span class="token punctuation">;</span>        <span class="token class-name">Entry</span><span class="token punctuation">(</span> <span class="token class-name">K</span> k<span class="token punctuation">,</span> <span class="token class-name">V</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>            key <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>            value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token class-name">Object</span> k1 <span class="token operator">=</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> k2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k1 <span class="token operator">==</span> k2 <span class="token operator">||</span> <span class="token punctuation">(</span>k1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> k1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Object</span> v1 <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> v2 <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1 <span class="token operator">==</span> v2 <span class="token operator">||</span> <span class="token punctuation">(</span>v1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> v1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token keyword">null</span>   <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span>                    <span class="token punctuation">(</span>value<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> value<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> aim<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>                        <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>aim<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">MyTreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> addMap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>addMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-13-实现TreeSet-通过添加通向下一个最小节点和下一个最大节点的链制造迭代器"><a href="#4-13-实现TreeSet-通过添加通向下一个最小节点和下一个最大节点的链制造迭代器" class="headerlink" title="4.13 实现TreeSet 通过添加通向下一个最小节点和下一个最大节点的链制造迭代器"></a>4.13 实现TreeSet 通过添加通向下一个最小节点和下一个最大节点的链制造迭代器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">,</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">,</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> returnTreeNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> next<span class="token punctuation">,</span> prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            next<span class="token punctuation">.</span>prev<span class="token operator">=</span>returnTreeNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prev<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next<span class="token operator">=</span>returnTreeNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> returnTreeNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">,</span>root<span class="token punctuation">,</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">,</span>next<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev<span class="token operator">=</span>root<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next<span class="token operator">=</span>root<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> temp<span class="token punctuation">;</span>            temp<span class="token operator">=</span><span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>temp<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev<span class="token operator">=</span>root<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next<span class="token operator">=</span>root<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            root<span class="token operator">=</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">:</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        previous<span class="token operator">=</span>current<span class="token punctuation">;</span>        <span class="token class-name">AnyType</span> ele<span class="token operator">=</span>current<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        current<span class="token operator">=</span>current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            isEnd<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ele<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-14-随机insert-remove的-的选择"><a href="#4-14-随机insert-remove的-的选择" class="headerlink" title="4.14 随机insert remove的 的选择"></a>4.14 随机insert remove的 的选择</h2><pre class="line-numbers language-none"><code class="language-none">设欲做一个实验来验证由随机insert/remove操作对可能引起的问题。这里有一个策略， 它不是完全随机的，但却是足够封闭的。通过插入从1到M=αN之间随机选出的N个元素来建立一棵具有N个元素的树。然后执行N对先插入后删除的操作。假设存在例程random Integer(a，b)，它返回一个在a和b之间(包括a、b)的均匀随机整数。a.解释如何生成在1和M之间的一个随机整数，该整数不在这棵树上(从而可以进行随机插入)。用N和α来表示这个操作的运行时间。aN/(aN-N)b.解释如何生成在1和M之间的一个随机整数，该整数已经存在于这棵树上(从而可以进行随机删除)。这个操作的运行时间是多少?aN/Nc.α的好的选择是什么?为什么?插入和删除总时间最短 a/(a-1) +a=1+（1/(a-1)+a-1）+1  （1/(a-1)+a-1）的最小值是2 当a=2时取等号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-15-多种Tree删除策略"><a href="#4-15-多种Tree删除策略" class="headerlink" title="4.15 多种Tree删除策略"></a>4.15 多种Tree删除策略</h2><ul><li>a.用T，中最大节点X来代替，递归地删除X。</li><li>b.交替地用T，中最大的节点以及T，中最小的节点来代替，并递归地删除适当的节点。</li><li>c.随机地选用T，中最大的节点或TR中最小的节点来代替(递归地删除适当的节点)。</li></ul><p>哪种方法给出最好的平衡?哪种在处理整个操作序列过程中花费最少的CPU时间?</p><p>交替地用T，有最好的平衡。随机，最少CPU。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//两儿子时用左边最大得替代</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove1</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token function">remove1</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">remove1</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tempf<span class="token operator">=</span>root<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>            root<span class="token operator">=</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">:</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>tempf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//两儿子时用左边最大 和 右边 最小各一次 得替代</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove2</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token function">remove2</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">remove2</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftOrRight<span class="token punctuation">)</span><span class="token punctuation">{</span>                root<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                root<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span> root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            leftOrRight<span class="token operator">=</span><span class="token operator">!</span>leftOrRight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tempf<span class="token operator">=</span>root<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>            root<span class="token operator">=</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">:</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>tempf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//随机左边最大和右边最小</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove3</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    root<span class="token operator">=</span><span class="token function">remove3</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">remove3</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">double</span> random <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>random<span class="token operator">&gt;</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                leftOrRight<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                leftOrRight<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftOrRight<span class="token punctuation">)</span><span class="token punctuation">{</span>                root<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                root<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>                root<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span> root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                   <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tempf<span class="token operator">=</span>root<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>            root<span class="token operator">=</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">?</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">:</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>tempf<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-16-懒惰删除实现"><a href="#4-16-懒惰删除实现" class="headerlink" title="4.16 懒惰删除实现"></a>4.16 懒惰删除实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ClassName Problem4_16 * @Author: Wibur * @Description: * 重做二叉查找树类以实现懒惰删除。仔细注意这将影响所有的例程。特别具有挑战性的是 * find Min和find Max， 它们现在必须递归地完成。 * @Date: Created in 18:50 2020/7/24 * @Versuin: 1.0 */</span> <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                modCount<span class="token operator">++</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span>cnt<span class="token operator">--</span><span class="token punctuation">;</span>                theSize<span class="token operator">--</span><span class="token punctuation">;</span>                deletedSize<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">checkDeletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkDeletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>theSize <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deletedSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token function">doRemove</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 更新节点</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>deletedSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">doRemove</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 删除树中所有flag=1的节点。使用递归</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>cnt <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 不需要删除的节点,直接进入左右子树</span>                <span class="token comment">//System.out.println("000");</span>                t<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> <span class="token function">doRemove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                t<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token function">doRemove</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>leftNode <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> t<span class="token punctuation">.</span>rightNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 叶子节点或者只有一个子树</span>                    t <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>leftNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> t<span class="token punctuation">.</span>leftNode <span class="token operator">:</span> t<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>                    t <span class="token operator">=</span> <span class="token function">doRemove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查拼接上来的子树</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// ②左右子树都存在</span>                    min <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token function">findMin</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 右子树上所有节点都被懒惰删除,直接将t的右子树删除，并继续监测t</span>                        t<span class="token punctuation">.</span>rightNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        t <span class="token operator">=</span> <span class="token function">doRemove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        t<span class="token punctuation">.</span>data <span class="token operator">=</span> min<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                        t<span class="token punctuation">.</span>cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        min<span class="token punctuation">.</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        t <span class="token operator">=</span> <span class="token function">doRemove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            min<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span>  min<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>cnt<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>min<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min<span class="token operator">=</span>root<span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">findMin</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            max<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> max<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>cnt<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>max<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                max<span class="token operator">=</span>root<span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">findMax</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-17-证明随机二叉查找树的深度-最深的节点的深度-平均为O-logN-。"><a href="#4-17-证明随机二叉查找树的深度-最深的节点的深度-平均为O-logN-。" class="headerlink" title="4.17 证明随机二叉查找树的深度(最深的节点的深度) 平均为O(logN) 。"></a>4.17 证明随机二叉查找树的深度(最深的节点的深度) 平均为O(logN) 。</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">证明二叉查找树所有节点的平均深度为<span class="token class-name">O</span>（logN）可以通过内部路径和<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-18-AVL树节点的斐波那契数列"><a href="#4-18-AVL树节点的斐波那契数列" class="headerlink" title="4.18 AVL树节点的斐波那契数列"></a>4.18 AVL树节点的斐波那契数列</h2><pre class="line-numbers language-none"><code class="language-none">1 2 4 7dn=d(n-1)+d(n-2)+1斐波那契数列dn=d(n-1)+d(n-2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/48.png"></p><h2 id="4-19-AVL树插入"><a href="#4-19-AVL树插入" class="headerlink" title="4.19 AVL树插入"></a>4.19 AVL树插入</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/49.png"></p><h2 id="4-20-证明。AVL树按1，-2，-…，-2-1-的完美理想平衡-perfectly-balanced"><a href="#4-20-证明。AVL树按1，-2，-…，-2-1-的完美理想平衡-perfectly-balanced" class="headerlink" title="4.20 证明。AVL树按1， 2， …， 2*-1 的完美理想平衡(perfectly balanced)"></a>4.20 证明。AVL树按1， 2， …， 2*-1 的完美理想平衡(perfectly balanced)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">递归推导即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-21-AVL树实现"><a href="#4-21-AVL树实现" class="headerlink" title="4.21 AVL树实现"></a>4.21 AVL树实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">balance</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> root<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token operator">&gt;</span>BALANCE_ALLOW_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment">//情况1 左左</span>          <span class="token comment">//为了删除的情况加上等于 这样删右子树 就只是单旋转</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              root<span class="token operator">=</span><span class="token function">rotateOneWithLeftChild</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">//情况2 左右</span>          <span class="token keyword">else</span> <span class="token punctuation">{</span>              root<span class="token operator">=</span><span class="token function">rotateDoubleWithLeftChild</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token operator">&gt;</span>BALANCE_ALLOW_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment">//情况4 右右</span>          <span class="token comment">//为了删除的情况加上等于 这样删左子树 就只是单旋转</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              root<span class="token operator">=</span><span class="token function">rotateOneWithRightChild</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">//情况3 右左</span>          <span class="token keyword">else</span> <span class="token punctuation">{</span>              root<span class="token operator">=</span><span class="token function">rotateDoubleWithRightChild</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      root<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> root<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">//根据AVL旋转图 目标旋转成 k1、k2、k3按顺序的</span>  <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateOneWithRightChild</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k1<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k2<span class="token operator">=</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>      k1<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>k2<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>      k2<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>k1<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k1<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      k2<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k1<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>      k1<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k2<span class="token punctuation">;</span>      k1<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      k2<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k2<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k2<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> k2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateOneWithLeftChild</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k1 <span class="token operator">=</span> k2<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>      k2<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>      k1<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>k2<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k2<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          k2<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k2<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      k1<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k2<span class="token punctuation">.</span>fatherNode<span class="token punctuation">;</span>      k2<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k1<span class="token punctuation">;</span>      k1<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      k2<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k2<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k2<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> k1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateDoubleWithRightChild</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k1<span class="token punctuation">)</span> <span class="token punctuation">{</span>      k1<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">rotateOneWithLeftChild</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>      k1<span class="token operator">=</span><span class="token function">rotateOneWithRightChild</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> k1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateDoubleWithLeftChild</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k3<span class="token punctuation">)</span> <span class="token punctuation">{</span>      k3<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">rotateOneWithRightChild</span><span class="token punctuation">(</span>k3<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>      k3<span class="token operator">=</span><span class="token function">rotateOneWithLeftChild</span><span class="token punctuation">(</span>k3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> k3<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-22-AVL高度信息判别"><a href="#4-22-AVL高度信息判别" class="headerlink" title="4.22 AVL高度信息判别"></a>4.22 AVL高度信息判别</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFitHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isFitHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isFitHeight</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>height<span class="token operator">!=</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">isFitHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isFitHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-23-AVL插入非递归方法"><a href="#4-23-AVL插入非递归方法" class="headerlink" title="4.23 AVL插入非递归方法"></a>4.23 AVL插入非递归方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//思路：找到插入位置和插入位置的之前一个位置</span> <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">insertNoRec</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tmpRoot<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> previous<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">int</span> cmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmpRoot<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            previous<span class="token operator">=</span>tmpRoot<span class="token punctuation">;</span>            cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>tmpRoot<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tmpRoot<span class="token operator">=</span>tmpRoot<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tmpRoot<span class="token operator">=</span>tmpRoot<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            previous<span class="token punctuation">.</span>leftNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            previous<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> previous<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-24-AVL树中实现-非懒惰-删除"><a href="#4-24-AVL树中实现-非懒惰-删除" class="headerlink" title="4.24 AVL树中实现(非懒惰) 删除?"></a>4.24 AVL树中实现(非懒惰) 删除?</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">修改balance  <span class="token number">4.21</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-25-AVL高度bit计算"><a href="#4-25-AVL高度bit计算" class="headerlink" title="4.25 AVL高度bit计算"></a>4.25 AVL高度bit计算</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">a<span class="token punctuation">.</span>为了存储一棵<span class="token class-name">N</span><span class="token operator">-</span>节点的AVL树中一个节点的高度， 每个节点需要多少比特<span class="token punctuation">(</span>bit<span class="token punctuation">)</span> <span class="token operator">?</span>b<span class="token punctuation">.</span>使<span class="token number">8</span><span class="token operator">-</span>比特高度计数器溢出的最小AVL树是什么<span class="token operator">?</span>a<span class="token operator">:</span>loglogNb<span class="token operator">:</span><span class="token number">127</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-26-AVL更高效率的双旋转"><a href="#4-26-AVL更高效率的双旋转" class="headerlink" title="4.26 AVL更高效率的双旋转"></a>4.26 AVL更高效率的双旋转</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//思路：利用旋转图</span> <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateDoubleWithRightChildEffiency</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k3<span class="token operator">=</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>        <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k2<span class="token operator">=</span>k3<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>        k1<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>k2<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>        k3<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>k2<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>        k2<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>k1<span class="token punctuation">;</span>        k2<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>k3<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k3<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            k3<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k3<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k1<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k1<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k2<span class="token punctuation">;</span>        k3<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k2<span class="token punctuation">;</span>        k1<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        k3<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k3<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k3<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        k2<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>height<span class="token punctuation">,</span>k3<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> k2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">rotateDoubleWithLeftChildEffiency</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k1<span class="token operator">=</span>k3<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>        <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> k2<span class="token operator">=</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>        k1<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>k2<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>        k3<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>k2<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>        k2<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>k1<span class="token punctuation">;</span>        k2<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>k3<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k3<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            k3<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k3<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k1<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k1<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k2<span class="token punctuation">;</span>        k3<span class="token punctuation">.</span>fatherNode<span class="token operator">=</span>k2<span class="token punctuation">;</span>        k1<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        k3<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>k3<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">height</span><span class="token punctuation">(</span>k3<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        k2<span class="token punctuation">.</span>height<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>k1<span class="token punctuation">.</span>height<span class="token punctuation">,</span>k3<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> k2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-27、28-伸展树的访问删除"><a href="#4-27、28-伸展树的访问删除" class="headerlink" title="4.27、28 伸展树的访问删除"></a>4.27、28 伸展树的访问删除</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/43.png"></p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/50.png"></p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/51.png"></p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/52.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-29-证明伸展树的性质"><a href="#4-29-证明伸展树的性质" class="headerlink" title="4.29 证明伸展树的性质"></a>4.29 证明伸展树的性质</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">a<span class="token punctuation">.</span>证明如果按顺序访问伸展树中的所有节点，则所得到的树由一连串的左儿子组成。<span class="token operator">*</span><span class="token operator">*</span>b<span class="token punctuation">.</span>证明如果按顺序访问伸展树中的所有节点，则总的访问时间是<span class="token class-name">O</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token punctuation">)</span>，与初始树无关。递推证明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-30-伸展树、AVL、二叉查找树对比-未完善"><a href="#4-30-伸展树、AVL、二叉查找树对比-未完善" class="headerlink" title="4.30 伸展树、AVL、二叉查找树对比 (未完善)"></a>4.30 伸展树、AVL、二叉查找树对比 (未完善)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">伸展树优势<span class="token operator">*</span> 可靠的性能——它的平均效率不输于其他平衡树。<span class="token operator">*</span> 存储所需的内存少——伸展树无需记录额外的什么值来维护树的信息，相对于其他平衡树，内存占用要小。缺点<span class="token operator">*</span> 伸展树最显著的缺点是它有可能会变成一条链。这种情况可能发生在以非降顺序访问n个元素之后。然而<span class="token operator">*</span> 均摊的最坏情况是对数级的——<span class="token class-name">O</span><span class="token punctuation">(</span>logn<span class="token punctuation">)</span>。AVL编写一个程序对伸展树执行随机操作。计算所执行的总的旋转次数。与AVL树和非平衡二叉查找树相比，其运行时间如何<span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-31-用root引用计算节点、树叶、满节点"><a href="#4-31-用root引用计算节点、树叶、满节点" class="headerlink" title="4.31 用root引用计算节点、树叶、满节点"></a>4.31 用root引用计算节点、树叶、满节点</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 编写一些高效率的方法，只使用对二叉树的根的引用T，并计算：</span><span class="token comment">// a.T中节点的个数。</span><span class="token comment">// b.T中树叶的片数。</span><span class="token comment">// c.T中满节点的个数。</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">numSum</span><span class="token punctuation">(</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">numSum</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">numSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">numSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">numLeaf</span><span class="token punctuation">(</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">numLeaf</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">numLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">numLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">numLeaf</span><span class="token punctuation">(</span> root<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-32-测试一棵二叉树是不是二叉查找树"><a href="#4-32-测试一棵二叉树是不是二叉查找树" class="headerlink" title="4.32 测试一棵二叉树是不是二叉查找树"></a>4.32 测试一棵二叉树是不是二叉查找树</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设计一个递归的线性算法，该算法测试一棵二叉树是否在每一个节点都满足查找树的序的性质。</span><span class="token comment">//思路：递归看每个点是不是符合</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBinarySortTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isBinarySortTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isBinarySortTree</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isBinarySortTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isBinarySortTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-33-递归删除树叶"><a href="#4-33-递归删除树叶" class="headerlink" title="4.33 递归删除树叶"></a>4.33 递归删除树叶</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 编写一个递归方法，该方法使用对树T的根节点的引用而返回从T删除所有树叶所得到的树的</span><span class="token comment">// 根节点的引用。</span><span class="token comment">//思路：把所有左右节点是null的置null</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAllLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token function">removeAllLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeAllLeaf</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">removeAllLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">removeAllLeaf</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-34-生成一棵N-节点随机二叉查找树"><a href="#4-34-生成一棵N-节点随机二叉查找树" class="headerlink" title="4.34 生成一棵N-节点随机二叉查找树"></a>4.34 生成一棵N-节点随机二叉查找树</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 写出生成一棵N-节点随机二叉查找树的方法，该树具有从1直到N的不同的关键字。你所编</span><span class="token comment">// 写的例程的运行时间是多少?</span><span class="token comment">//思路：随机分界线 然后递归生成  运行时间O(N)</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">makeTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token function">makeTree</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">makeTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> lower<span class="token punctuation">,</span><span class="token keyword">int</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BinaryTreeNode</span> root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> randValue<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lower<span class="token operator">&lt;=</span>upper<span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">(</span>randValue<span class="token operator">=</span><span class="token function">randInt</span><span class="token punctuation">(</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">makeTree</span><span class="token punctuation">(</span>lower<span class="token punctuation">,</span>randValue<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">makeTree</span><span class="token punctuation">(</span>randValue<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>upper<span class="token operator">-</span>lower<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>lower<span class="token punctuation">;</span>        <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-35-写出生成具有最少节点高度为h的AVL树"><a href="#4-35-写出生成具有最少节点高度为h的AVL树" class="headerlink" title="4.35 写出生成具有最少节点高度为h的AVL树"></a>4.35 写出生成具有最少节点高度为h的AVL树</h2><p><font color="red,font" size="4">用数组保存值一直实时改变 在树中的技巧很重要</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用数组保存值一直传递改变 运行时间O(斐波那契数列)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeMinAVLTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> lastValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    root<span class="token operator">=</span><span class="token function">makeMinAVLTree</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">makeMinAVLTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">BinaryTreeNode</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">makeMinAVLTree</span><span class="token punctuation">(</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token operator">++</span>lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">makeMinAVLTree</span><span class="token punctuation">(</span>height<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-36-成一棵具有关键字从1直到2h-1-1且高为h的理想平衡二叉查找树"><a href="#4-36-成一棵具有关键字从1直到2h-1-1且高为h的理想平衡二叉查找树" class="headerlink" title="4.36 成一棵具有关键字从1直到2h+1-1且高为h的理想平衡二叉查找树"></a>4.36 成一棵具有关键字从1直到2h+1-1且高为h的理想平衡二叉查找树</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 编写一个方法，使它生成一棵具有关键字从1直到2h+1-1且高为h的理想平衡二叉查找树</span><span class="token comment">// (perfectly balanced binary search tree) 。该方法运行时间是多少?</span>    <span class="token comment">//两种方法 1：像AVL树一样 2：像生成随机二叉树一样 只不过固定生成一半</span>    <span class="token comment">//运行时间 第一种方法运行时间少一点计算的时间</span>    <span class="token comment">//用数组保存值一直传递改变</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makePerfectBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> lastValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        root<span class="token operator">=</span><span class="token function">makePerfectBinaryTree</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">makePerfectBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BinaryTreeNode</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">makePerfectBinaryTree</span><span class="token punctuation">(</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token operator">++</span>lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">makePerfectBinaryTree</span><span class="token punctuation">(</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makePerfectBinaryTree1</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> upper<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">=</span><span class="token function">makePerfectBinaryTree1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">makePerfectBinaryTree1</span><span class="token punctuation">(</span><span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BinaryTreeNode</span> root<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lower<span class="token operator">&lt;=</span>upper<span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">(</span>lower<span class="token operator">+</span>upper<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token function">makeTree</span><span class="token punctuation">(</span>lower<span class="token punctuation">,</span>value<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">makeTree</span><span class="token punctuation">(</span>value<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-37-在二叉树查找k1-k2的元素-平均时间O-K-logN-运行"><a href="#4-37-在二叉树查找k1-k2的元素-平均时间O-K-logN-运行" class="headerlink" title="4.37 在二叉树查找k1~k2的元素  平均时间O(K+logN) 运行"></a>4.37 在二叉树查找k1~k2的元素  平均时间O(K+logN) 运行</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 编写一个方法以二叉查找树Ｔ和两个有序的关键字k1和k2作为输人，其中k1≤k2，并打印树中</span><span class="token comment">// 所有满足k1≤Key(X) ≤k2， 的元素X。除可以被排序外， 不对关键字的类型做任何假设。所写的</span><span class="token comment">// 程序应该以平均时间O(K+logN) 运行， 其中K是所打印的关键字的个数。确定你的算法的运</span><span class="token comment">// 行时间界。</span><span class="token comment">//思路 中序遍历 找到符合条件的输出 </span><span class="token comment">//第一种方法：判断不符合输出时 停止</span><span class="token comment">//第二种方法：遍历输出满足条件</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binarySearchPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span> lower<span class="token punctuation">,</span><span class="token keyword">int</span> upper<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">binarySearchPrint</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">binarySearchPrint</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp1<span class="token operator">=</span>root<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lower<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cmp2<span class="token operator">=</span>root<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>cmp1<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">binarySearchPrint</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmp2<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">binarySearchPrint</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token function">binarySearchPrint</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">binarySearchPrint</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">binarySearchPrint1</span><span class="token punctuation">(</span><span class="token keyword">int</span> lower<span class="token punctuation">,</span><span class="token keyword">int</span> upper<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">binarySearchPrint1</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">binarySearchPrint1</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> <span class="token keyword">int</span> upper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cmp1<span class="token operator">=</span>root<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>lower<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cmp2<span class="token operator">=</span>root<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cmp1<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">binarySearchPrint1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cmp1<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>cmp2<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">+</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cmp2<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">binarySearchPrint1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>lower<span class="token punctuation">,</span>upper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-38-给节点附加x-y来画出树-x中序遍历数字-y负深度"><a href="#4-38-给节点附加x-y来画出树-x中序遍历数字-y负深度" class="headerlink" title="4.38 给节点附加x,y来画出树  x中序遍历数字 y负深度"></a>4.38 给节点附加x,y来画出树  x中序遍历数字 y负深度</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 本章中一些更大的二叉树是由一个程序自动生成的。</span><span class="token comment">// 可以采取这种办法：给树的每一个节点指</span><span class="token comment">// 定坐标(x，y)，围绕每个坐标点画一个圆圈(在某些图片中这可能很难看清)，并将每个节点连</span><span class="token comment">// 到它的父节点上。假设在存储器中存有一棵二叉查找树(或许是由上面的一个例程生成的)并设</span><span class="token comment">// 每个节点都有两个附加的域存放坐标。</span><span class="token comment">// a.坐标x可以通过指定中序遍历数来计算。写出一个例程对树中的每个节点做这个工作。</span><span class="token comment">// b.</span><span class="token comment">// 坐标y可以通过使用节点深度的负值算出。写出一个例程对树中的每个节点做这个工作。</span><span class="token comment">// C.</span><span class="token comment">// 若使用某个虚拟的单位表示，则所画图形的具体尺寸是多少?如何调整单位使得所画的树总</span><span class="token comment">// 是高大约为宽的三分之二?</span><span class="token comment">// d.证明，使用这个系统没有交叉的线出现，同时，对于任意节点X，X的左子树的所有元素都出</span><span class="token comment">// 现在X的左边，X的右子树的所有元素都出现在X的右边。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getXY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> lastValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">getXY</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>lastValue<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">getXY</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastValue<span class="token punctuation">,</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">getXY</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>lastValue<span class="token punctuation">,</span>depth<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        root<span class="token punctuation">.</span>x<span class="token operator">=</span>lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>y<span class="token operator">=</span>depth<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">getXY</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>lastValue<span class="token punctuation">,</span>depth<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-41-先序遍历、中序遍历、后续遍历、层序遍历、非递归"><a href="#4-41-先序遍历、中序遍历、后续遍历、层序遍历、非递归" class="headerlink" title="4.41 先序遍历、中序遍历、后续遍历、层序遍历、非递归"></a>4.41 先序遍历、中序遍历、后续遍历、层序遍历、非递归</h2><blockquote><p>reference:<a href="https://blog.csdn.net/monster_ii/article/details/82115772">https://blog.csdn.net/monster_ii/article/details/82115772</a></p></blockquote><p><font color="red,font" size="4">先序遍历：用栈保存，栈中元素都是自己和自己的左孩子都访问过了，而右孩子还没有访问到的节点，</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preorderPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">BinaryTreeNode</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BinaryTreeNode</span><span class="token punctuation">&gt;</span></span> treeNodesStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意LinkedList 的 push=addFirst pop=removeFirst</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token operator">!</span>treeNodesStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>data<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            treeNodesStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                cur<span class="token operator">=</span> treeNodesStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red,font" size="4">中序遍历：用栈保存，栈中保存的元素是节点自身和它的右子树都没有被访问到的节点地址。</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrderPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">BinaryTreeNode</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>    <span class="token class-name">BinaryTreeNode</span> top<span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BinaryTreeNode</span><span class="token punctuation">&gt;</span></span> treeNodesStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token operator">!</span>treeNodesStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            treeNodesStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top<span class="token operator">=</span>treeNodesStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>data<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">=</span> treeNodesStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red,font" size="4">后续遍历：用栈保存，栈中保存的元素是栈中保存的元素是它的右子树和自身都没有被遍历到的节点，与中序遍历不同的是先访问右子树，在回来的时候再输出根节点的值。需要多一个last指针指向上一次访问到的节点，用来确认是从根节点的左子树返回的还是从右子树返回的。</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrderPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">BinaryTreeNode</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>    <span class="token class-name">BinaryTreeNode</span> top<span class="token punctuation">,</span>last<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BinaryTreeNode</span><span class="token punctuation">&gt;</span></span> treeNodesStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token operator">!</span>treeNodesStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            treeNodesStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        top<span class="token operator">=</span>treeNodesStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>rightNode<span class="token operator">==</span>last<span class="token operator">||</span>top<span class="token punctuation">.</span>rightNode<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>data<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            treeNodesStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            last<span class="token operator">=</span>top<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            cur<span class="token operator">=</span>top<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red,font" size="4">层序遍历：用队列保存，先将根节点（A）入队，然后用front指针将根节点记下来，再将根节点出队，接下来看front节点（也就是刚才的根节点）有没有左孩子或右孩子，如果有，先左（B）后右（C）入队，最后输出front节点的值，只要队列还不为空，就说明还没有遍历完，就进行下一次循环</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrderPrint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BinaryTreeNode</span><span class="token punctuation">&gt;</span></span> treeNodesQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeNodesQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.print(root.data);</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>treeNodesQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">BinaryTreeNode</span> front <span class="token operator">=</span> treeNodesQueue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span>leftNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                treeNodesQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span>rightNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                treeNodesQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-44-兄弟儿子树-构造遍历"><a href="#4-44-兄弟儿子树-构造遍历" class="headerlink" title="4.44 兄弟儿子树 构造遍历"></a>4.44 兄弟儿子树 构造遍历</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/53.png"></p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/54.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">遍历和之前的一样<span class="token comment">//先序遍历树</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>nextsibling<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-46-判断树的相似-（结构一样）"><a href="#4-46-判断树的相似-（结构一样）" class="headerlink" title="4.46 判断树的相似 （结构一样）"></a>4.46 判断树的相似 （结构一样）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果两棵二叉树或者都是空树，或者非空且具有相似的左子树和右子树，则这两棵二叉树是相</span><span class="token comment">// 似的。</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">similar</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> t1<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> t2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 采用递归算法判断两个二叉树是否相似</span><span class="token keyword">boolean</span> leftS <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> rightS <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 两树皆空</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> t2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// 只有一个树为空</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token comment">// 递归地进行判断</span><span class="token punctuation">{</span> leftS <span class="token operator">=</span> <span class="token function">similar</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>rightS <span class="token operator">=</span> <span class="token function">similar</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> leftS <span class="token operator">&amp;&amp;</span> rightS<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-47-判断树的同构"><a href="#4-47-判断树的同构" class="headerlink" title="4.47 判断树的同构"></a>4.47 判断树的同构</h2><p>如果树T，通过交换其(某些)节点的左右儿子变换成树T，，则称树T和T，是同构<br>的(isomorphic) 。例如， 图4-74中的两棵树是同构的， 因为交换A、B、G的儿子而不交换其他节<br>点的儿子后这两棵树是相同的。</p><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/55.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOmorphic</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">isOmorphic</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>root1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOmorphic</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">BinaryTreeNode</span> root1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root1<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root1<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">isOmorphic</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>root1<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isOmorphic</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>root1<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">isOmorphic</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>root1<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isOmorphic</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>root1<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-48-证：AVL单旋转可以使得任意的二叉搜索树变成另一个二叉搜索树"><a href="#4-48-证：AVL单旋转可以使得任意的二叉搜索树变成另一个二叉搜索树" class="headerlink" title="4.48 证：AVL单旋转可以使得任意的二叉搜索树变成另一个二叉搜索树"></a>4.48 证：AVL单旋转可以使得任意的二叉搜索树变成另一个二叉搜索树</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// *a.证明， 经过一些AVL单旋转， 任意二叉查找树T， 可以变换成另一棵(具有相同项的) 查找树T。</span><span class="token comment">// *b.给出一个算法平均用O(N logN) 次旋转完成这种变换。</span><span class="token comment">// **c.证明该变换在最坏的情形下可以用O(N)次旋转完成。</span><span class="token comment">//结果让root1=root  思路：通过比较当前点 将对应的转到root</span>    <span class="token keyword">public</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">makeTwoTreeSame</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">BinaryTreeNode</span> root1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>root1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root1<span class="token operator">=</span><span class="token function">rotateToRoot</span><span class="token punctuation">(</span>root1<span class="token punctuation">,</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            root1<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">makeTwoTreeSame</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>root1<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            root1<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">makeTwoTreeSame</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>root1<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">rotateToRoot</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root1<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">rotateToRoot</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">rotateWithRightChild</span><span class="token punctuation">(</span>root1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root1<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">rotateToRoot</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">rotateWithLeftChild</span><span class="token punctuation">(</span>root1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-49-找树的第k个最小项"><a href="#4-49-找树的第k个最小项" class="headerlink" title="4.49 找树的第k个最小项"></a>4.49 找树的第k个最小项</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设我们想要把运算find Kth添加到指令集中。该运算find kth(k) 返回树的第k个最小项。假</span><span class="token comment">// 设所有的项都是互异的。解释如何修改二叉树以平均O(logN) 时间支持这种运算， 而又不影响</span><span class="token comment">// 任何其他操作的时间界。</span><span class="token comment">//思路：第一种 非递归用中序遍历  第一种 递归用中序遍历 </span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findKth</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> lastValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findKth</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>k<span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">findKth</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BinaryTreeNode</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BinaryTreeNode</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token class-name">BinaryTreeNode</span> pre<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">||</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> cur<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">findKth1</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> lastValue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findKth1</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>k<span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">findKth1</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">BinaryTreeNode</span> kth1 <span class="token operator">=</span> <span class="token function">findKth1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span> k<span class="token punctuation">,</span> lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> kth1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">findKth1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>k<span class="token punctuation">,</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-50-线索树的实现"><a href="#4-50-线索树的实现" class="headerlink" title="4.50 线索树的实现"></a>4.50 线索树的实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 由于具有N个节点的二叉查找树有N+1个null引用， 因此在二叉查找树中指定给链接信息的</span><span class="token comment">// 空间的一半被浪费了。设若一个节点有一个null左儿子， 我们使它的左儿子链接到它的中序</span><span class="token comment">// 前驱元(in order predecessor) ， 若一个节点有一个null右儿子， 我们让它的右儿子链接到它的中</span><span class="token comment">// 序后继元(in order successor) 。这就叫作线索树(threaded tree) ， 而附加的链就叫作线索(thread) 。</span><span class="token comment">// a.我们如何能够从实际儿子的链中区分出线索?</span><span class="token comment">// b.编写执行向由上面描述的方式形成的线索树进行插入的例程和删除的例程。</span><span class="token comment">// C.使用线索树的优点是什么?</span>a<span class="token operator">:</span>添加flag b<span class="token operator">:</span>找到位置后 根据cmp来添加节点<span class="token class-name">C</span><span class="token operator">:</span>优势<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>利用线索二叉树进行中序遍历时，不必采用堆栈处理，速度较一般二叉树的遍历速度快，且节约存储空间。<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>任意一个结点都能直接找到它的前驱和后继结点。 不足<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>结点的插入和删除麻烦，且速度也较慢。<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>线索子树不能共用。  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span> <span class="token class-name">Integer</span>  data<span class="token punctuation">)</span><span class="token punctuation">{</span>        root<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>data<span class="token punctuation">,</span>begin<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">BinaryTreeNode</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">Integer</span>  data<span class="token punctuation">,</span><span class="token class-name">BinaryTreeNode</span> father<span class="token punctuation">,</span><span class="token keyword">int</span> cmp1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>father<span class="token punctuation">.</span>leftFlag<span class="token operator">==</span><span class="token boolean">true</span><span class="token operator">&amp;&amp;</span>cmp1<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>father<span class="token operator">!=</span>begin<span class="token operator">||</span>father<span class="token punctuation">.</span>rightFlag<span class="token operator">==</span><span class="token boolean">true</span><span class="token operator">&amp;&amp;</span>cmp1<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>father<span class="token operator">!=</span>begin<span class="token punctuation">)</span><span class="token punctuation">{</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">BinaryTreeNode</span> insertNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTreeNode</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> father<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                insertNode<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>father<span class="token punctuation">;</span>                insertNode<span class="token punctuation">.</span>leftFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                insertNode<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>father<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>                insertNode<span class="token punctuation">.</span>rightFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                father<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>insertNode<span class="token punctuation">;</span>                father<span class="token punctuation">.</span>leftFlag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                insertNode<span class="token punctuation">.</span>rightNode<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>insertNode<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>father<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>leftNode<span class="token operator">==</span>root<span class="token operator">&amp;&amp;</span>cmp1<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    insertNode<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>father<span class="token punctuation">.</span>leftNode<span class="token punctuation">;</span>                    insertNode<span class="token punctuation">.</span>leftFlag<span class="token operator">=</span>father<span class="token punctuation">.</span>leftFlag<span class="token punctuation">;</span>                    father<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>insertNode<span class="token punctuation">;</span>                    father<span class="token punctuation">.</span>leftFlag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                    insertNode<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>father<span class="token punctuation">;</span>                    insertNode<span class="token punctuation">.</span>rightFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>rightNode<span class="token operator">==</span>root<span class="token operator">&amp;&amp;</span>cmp1<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    insertNode<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>father<span class="token punctuation">.</span>rightNode<span class="token punctuation">;</span>                    insertNode<span class="token punctuation">.</span>rightFlag<span class="token operator">=</span>father<span class="token punctuation">.</span>rightFlag<span class="token punctuation">;</span>                    father<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>insertNode<span class="token punctuation">;</span>                    father<span class="token punctuation">.</span>rightFlag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                    insertNode<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>father<span class="token punctuation">;</span>                    insertNode<span class="token punctuation">.</span>leftFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> insertNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cmp<span class="token operator">=</span>data<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">,</span>data<span class="token punctuation">,</span>root<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>rightNode<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">,</span>data<span class="token punctuation">,</span>root<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将以root为根节点的二叉树线索化  中序法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inThread</span><span class="token punctuation">(</span><span class="token class-name">BinaryTreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">inThread</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 线索化左孩子</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> root<span class="token punctuation">.</span>leftNode<span class="token punctuation">)</span>   <span class="token comment">// 左孩子为空</span>            <span class="token punctuation">{</span>                root<span class="token punctuation">.</span>leftFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 将左孩子设置为线索</span>                root<span class="token punctuation">.</span>leftNode<span class="token operator">=</span>pre<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">==</span> pre<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span>  <span class="token comment">// 右孩子为空</span>            <span class="token punctuation">{</span>                pre<span class="token punctuation">.</span>rightFlag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>rightNode<span class="token operator">=</span>root<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pre <span class="token operator">=</span> root<span class="token punctuation">;</span>                 <span class="token comment">//每次将当前节点设置为pre</span>            <span class="token function">inThread</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 线索化右孩子</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-51-二叉查找树满节点平均次数"><a href="#4-51-二叉查找树满节点平均次数" class="headerlink" title="4.51 二叉查找树满节点平均次数"></a>4.51 二叉查找树满节点平均次数</h2><p><img src="/2020/07/14/data-structures-and-algorithms-chap04-tree/45.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">a<span class="token punctuation">.</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span>b<span class="token punctuation">.</span> 满节点的个数<span class="token operator">=</span>左子树满<span class="token operator">+</span>右子树满<span class="token operator">+</span> （当左子树不空并且右子树不空时）平均<span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>c<span class="token punctuation">.</span> 递推d<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-53-读取单词-将相差等于1的对应-多个映射-3种方法"><a href="#4-53-读取单词-将相差等于1的对应-多个映射-3种方法" class="headerlink" title="4.53 读取单词 将相差等于1的对应 多个映射 (3种方法)"></a>4.53 读取单词 将相差等于1的对应 多个映射 (3种方法)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap04</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem4_53 * @Author: Wibur * @Description: * @Date: Created in 10:04 2020/8/1 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem4_53</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordsSet<span class="token operator">=</span> <span class="token function">readWordsFromFile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wordsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> l1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stringListMap <span class="token operator">=</span> <span class="token function">computeWords</span><span class="token punctuation">(</span>wordsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> l2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringListMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            l1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringListMap <span class="token operator">=</span> <span class="token function">computeWords1</span><span class="token punctuation">(</span>wordsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            l2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringListMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            l1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringListMap <span class="token operator">=</span> <span class="token function">computeWords2</span><span class="token punctuation">(</span>wordsSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            l2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token operator">-</span>l1<span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringListMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readWordsFromFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fileInputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret<span class="token operator">=</span>fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">oneCharOff</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span><span class="token class-name">String</span> word2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> diff<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                diff<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>diff<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> diff<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">computeWords</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> aWords<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> adjWords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>aWords<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         aWords<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">oneCharOff</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">update</span><span class="token punctuation">(</span>adjWords<span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">update</span><span class="token punctuation">(</span>adjWords<span class="token punctuation">,</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> adjWords<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">computeWords1</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> aWords<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> adjWords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wordsByLength <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>aWords<span class="token punctuation">,</span>wordsByLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>aWords<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        aWords<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> everyLengthList<span class="token operator">:</span>wordsByLength<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> everyLengthArray<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>everyLengthList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            everyLengthList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>everyLengthArray<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> everyLengthArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> everyLengthArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">oneCharOff</span><span class="token punctuation">(</span>everyLengthArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>everyLengthArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">update</span><span class="token punctuation">(</span>adjWords<span class="token punctuation">,</span>everyLengthArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>everyLengthArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">update</span><span class="token punctuation">(</span>adjWords<span class="token punctuation">,</span>everyLengthArray<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>everyLengthArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> adjWords<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">computeWords2</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> aWords<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> adjWords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wordsByLength <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>aWords<span class="token punctuation">,</span>wordsByLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>aWords<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        aWords<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> everyEntry<span class="token operator">:</span>wordsByLength<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> groupsWords<span class="token operator">=</span>everyEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> groupNum<span class="token operator">=</span>everyEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> groupNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> repToWords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token operator">:</span>groupsWords                     <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> rep<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">update</span><span class="token punctuation">(</span>repToWords<span class="token punctuation">,</span>rep<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordCli<span class="token operator">:</span>repToWords<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>wordCli<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token operator">:</span>wordCli<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s2<span class="token operator">:</span>wordCli<span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token operator">!=</span>s2<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token function">update</span><span class="token punctuation">(</span>adjWords<span class="token punctuation">,</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> adjWords<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> aWords<span class="token punctuation">,</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> wordsByLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>aWords<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lengthList <span class="token operator">=</span> wordsByLength<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lengthList<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                lengthList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                wordsByLength<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lengthList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lengthList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> adjWords<span class="token punctuation">,</span> <span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> word1List <span class="token operator">=</span> adjWords<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>word1List<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            word1List<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            adjWords<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word1<span class="token punctuation">,</span>word1List<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        word1List<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap03-List、Stack、Queue</title>
      <link href="2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/"/>
      <url>2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-abstract-data-type-abt">抽象数据类型 （abstract data type ABT）</a></li><li><a href="#list-adt">List ADT</a><ul><li><a href="#%E7%94%A8%E6%95%B0%E7%BB%84%E5%AE%8C%E6%88%90">用数组完成</a></li><li><a href="#%E7%94%A8%E7%AE%80%E5%8D%95%E9%93%BE%E8%A1%A8">用简单链表</a></li></ul></li><li><a href="#java-collection">Java Collection</a><ul><li><a href="#collection-%E6%8E%A5%E5%8F%A3">Collection 接口</a></li><li><a href="#itertor-%E6%8E%A5%E5%8F%A3">Itertor 接口</a><ul><li><a href="#list%E6%8E%A5%E5%8F%A3">List接口</a><ul><li><a href="#arraylist">ArrayList</a></li><li><a href="#myarraylist-%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82%E6%B3%A8%E6%84%8F">MyArrayList 实现细节注意</a></li><li><a href="#linkedlist">LinkedList</a></li><li><a href="#mylinkedlist-%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82%E6%B3%A8%E6%84%8F">MyLinkedList 实现细节注意</a></li><li><a href="#%E4%BA%8C%E8%80%85contains-%E5%92%8Cfind-%E9%83%BD%E6%98%AFon">二者contains 和find 都是O(N)</a></li><li><a href="#%E4%BE%8B%E5%AD%90%E5%88%A0%E9%99%A4%E8%A1%A8%E7%9A%84%E5%81%B6%E6%95%B0">例子删除表的偶数</a></li><li><a href="#listiterator-%E6%8E%A5%E5%8F%A3">ListIterator 接口</a></li></ul></li></ul></li><li><a href="#%E6%A0%88">栈</a><ul><li><a href="#%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0-%E5%B0%91%E8%A7%81">链表实现 （少见）</a></li><li><a href="#%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0-%E5%B8%B8%E8%A7%81%E7%94%A8arraylist-%E5%B0%B1%E8%A1%8C">数组实现 （常见）用ArrayList 就行</a></li><li><a href="#%E5%BA%94%E7%94%A8">应用</a><ul><li><a href="#%E7%AC%A6%E5%8F%B7%E5%8C%B9%E9%85%8D">符号匹配</a></li><li><a href="#%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AE%A1%E7%AE%97-%E4%B8%8D%E9%9C%80%E7%9F%A5%E9%81%93%E4%BB%BB%E4%BD%95%E8%A7%84%E5%88%99-on">后缀表达式计算 （不需知道任何规则 O(N))</a></li><li><a href="#%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%AD%A3%E5%B8%B8%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E5%8F%AA%E6%9C%89-%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F">中缀表达式转后缀表达式（正常表达式 只有+-*/转后缀表达式）</a></li><li><a href="#%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8-%E6%A0%88%E5%B8%A7">方法调用 （栈帧）</a></li></ul></li></ul></li><li><a href="#%E9%98%9F%E5%88%97">队列</a></li></ul></li><li><a href="#%E6%B3%9B%E5%9E%8B">泛型</a><ul><li><a href="#%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B">使用泛型</a><ul><li><a href="#%E6%B3%9B%E5%9E%8B%E7%B1%BB">泛型类</a></li><li><a href="#%E6%B3%9B%E5%9E%8B%E6%8E%A5%E5%8F%A3">泛型接口</a></li><li><a href="#%E6%B3%9B%E5%9E%8B%E6%96%B9%E6%B3%95">泛型方法</a></li><li><a href="#%E6%B3%9B%E5%9E%8B%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98">泛型数组问题</a><ul><li><a href="#sun%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E">sun文档说明</a></li></ul></li></ul></li></ul></li><li><a href="#intanceof">Intanceof</a><ul><li><a href="#obj-%E5%BF%85%E9%A1%BB%E4%B8%BA%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%83%BD%E6%98%AF%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B">obj 必须为引用类型，不能是基本类型</a></li><li><a href="#obj-%E4%B8%BA-null">obj 为 null</a></li><li><a href="#obj-%E4%B8%BA-class-%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1">obj 为 class 类的实例对象</a></li><li><a href="#obj-%E4%B8%BA-class-%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB">obj 为 class 接口的实现类</a></li><li><a href="#obj-%E4%B8%BA-class-%E7%B1%BB%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%88%96%E9%97%B4%E6%8E%A5%E5%AD%90%E7%B1%BB">obj 为 class 类的直接或间接子类</a></li><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#31-%E9%81%8D%E5%8E%86%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%8C%87%E5%AE%9A%E4%B8%8B%E6%A0%87%E4%B8%8B%E6%A0%87%E7%94%B1%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%8F%90%E4%BE%9B">3.1 遍历一个表指定下标，下标由另一个表提供</a></li><li><a href="#32-%E8%B0%83%E6%95%B4%E9%93%BE%E4%BA%A4%E6%8D%A2%E7%9B%B8%E9%82%BB%E7%9A%84%E5%85%83%E7%B4%A0%E5%8D%95%E5%8F%8C%E9%93%BE">3.2 调整链交换相邻的元素（单双链）</a></li><li><a href="#33-mylinkedlist-contains">3.3 MyLinkedList contains</a></li><li><a href="#34-35-%E4%B8%A4%E4%B8%AA%E8%A1%A8%E7%9A%84%E4%BA%A4%E9%9B%86%E5%92%8C%E5%B9%B6%E9%9B%86">3.4 3.5 两个表的交集和并集</a></li><li><a href="#36-josephus%E9%97%AE%E9%A2%98-%E4%B8%A2%E6%89%8B%E7%BB%A2%E4%BC%A0%E9%80%92%E9%97%AE%E9%A2%98bian">3.6 Josephus问题 丢手绢（传递问题）bian</a></li><li><a href="#37-trimsizen-on">3.7 TrimSize(N) O(N)</a></li><li><a href="#38-%E5%88%A0%E5%89%8D%E5%8D%8A%E8%A1%A8">3.8 删前半表</a></li><li><a href="#37-318-myarraylist">3.7-3.18 MyArrayList</a></li><li><a href="#37-318-mylinkedlist">3.7-3.18 MyLinkedList</a></li><li><a href="#319-%E6%97%A0%E5%A4%B4%E5%B0%BE%E8%8A%82%E7%82%B9%E5%AE%9E%E7%8E%B0linkedlist">3.19 无头尾节点实现LinkedList</a></li><li><a href="#320-%E6%87%92%E6%83%B0%E5%88%A0%E9%99%A4">3.20 懒惰删除</a></li><li><a href="#321-%E5%B9%B3%E8%A1%A1%E7%AC%A6%E5%8F%B7">3.21 平衡符号</a></li><li><a href="#322-%E8%AE%A1%E7%AE%97%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F">3.22 计算后缀表达式</a></li><li><a href="#323-%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80">3.23 中缀转后缀</a></li><li><a href="#324-%E5%8D%95%E6%95%B0%E7%BB%84%E5%8F%8C%E6%A0%88">3.24 单数组双栈</a></li><li><a href="#325-%E6%9E%84%E9%80%A0%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-push-pop-findmin-o1">3.25 构造一个数据结构 push pop findMin O(1)</a></li><li><a href="#326-%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%89%E4%B8%AA%E6%A0%88-%E9%99%A4%E4%BA%86%E6%BB%A1%E4%B8%8D%E8%83%BD%E6%BA%A2%E5%87%BA">3.26 一个数组三个栈 （除了满不能溢出）</a></li><li><a href="#327-%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98">3.27 递归调用时间问题</a></li><li><a href="#38-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97deque">3.8 双端队列(deque)</a></li><li><a href="#329-%E5%80%92%E5%BA%8F%E6%89%93%E5%8D%B0%E5%8D%95%E5%8F%8C%E9%93%BE%E8%A1%A8-%E5%8F%AA%E8%83%BD%E9%99%84%E4%BB%B6o1%E7%A9%BA%E9%97%B4">3.29 倒序打印单双链表 （只能附件O(1)空间）</a></li><li><a href="#330-%E8%87%AA%E8%B0%83%E6%95%B4%E8%A1%A8-find%E5%B0%86%E5%85%83%E7%B4%A0%E6%8F%90%E5%89%8D">3.30 自调整表 find()将元素提前</a></li><li><a href="#331-%E4%BD%BF%E7%94%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E9%AB%98%E6%95%88%E5%AE%9E%E7%8E%B0%E6%A0%88%E7%B1%BB%E4%B8%8D%E7%94%A8%E5%A4%B4%E8%8A%82%E7%82%B9%E5%92%8C%E5%B0%BE%E8%8A%82%E7%82%B9">3.31 使用单链表高效实现栈类，不用头节点和尾节点。</a></li><li><a href="#332-%E4%BD%BF%E7%94%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E9%AB%98%E6%95%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%B1%BB%E4%B8%8D%E7%94%A8%E5%A4%B4%E8%8A%82%E7%82%B9%E5%92%8C%E5%B0%BE%E8%8A%82%E7%82%B9">3.32 使用单链表高效实现队列类，不用头节点和尾节点。</a></li><li><a href="#333-%E4%BD%BF%E7%94%A8%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84%E9%AB%98%E6%95%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%B1%BB">3.33 使用循环数组高效实现队列类</a></li><li><a href="#334-%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8">3.34 判断循环链表</a></li><li><a href="#335-%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0%E6%97%B6%E9%97%B4o1%E9%98%9F%E5%88%97">3.35 循环链表实现时间O(1)队列</a></li><li><a href="#336%E9%80%9A%E8%BF%87%E5%8D%95%E8%8A%82%E7%82%B9%E5%BC%95%E7%94%A8%E9%80%BB%E8%BE%91%E4%B8%8A%E5%88%A0%E9%99%A4%E8%AF%A5%E8%8A%82%E7%82%B9">3.36通过单节点引用逻辑上删除该节点</a></li><li><a href="#337-%E5%8D%95%E9%93%BE%E8%A1%A8-%E5%9C%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%BD%8D%E7%BD%AE%E5%89%8D%E6%8F%92%E5%85%A5-%E5%92%8C%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE">3.37 单链表 在迭代器位置前插入 和删除当前位置</a></li></ul></li></ul><!-- /TOC --><h1 id="抽象数据类型-（abstract-data-type-ABT）"><a href="#抽象数据类型-（abstract-data-type-ABT）" class="headerlink" title="抽象数据类型 （abstract data type ABT）"></a>抽象数据类型 （abstract data type ABT）</h1><h1 id="List-ADT"><a href="#List-ADT" class="headerlink" title="List ADT"></a>List ADT</h1><p>基本功能 打印全表、清空全表、在某位置insert、delete、<br>查找某位置数 </p><h2 id="用数组完成"><a href="#用数组完成" class="headerlink" title="用数组完成"></a>用数组完成</h2><p>但是在插入和删除花费时间太多 在查找上O(1)</p><h2 id="用简单链表"><a href="#用简单链表" class="headerlink" title="用简单链表"></a>用简单链表</h2><p>但是仍然需要找到位置后  在插入和删除花费时间 O(1) 在查找上O(i)<br>如果插入删除的是最后一个需要遍历整个数组 解决方法双链表</p><h1 id="Java-Collection"><a href="#Java-Collection" class="headerlink" title="Java Collection"></a>Java Collection</h1><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/1.png"></p><h2 id="Itertor-接口"><a href="#Itertor-接口" class="headerlink" title="Itertor 接口"></a>Itertor 接口</h2><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/2.png"></p><ul><li><p>迭代器就是为了遍历，<br>迭代器的remove 从列表中删除由next()或previous()返回的最后一个元素（可选操作）。 </p></li><li><p>Collection 也有remove 但是可能iter 有更快的效率 比如对集合隔一个删一个  Collection需要每次先找到 </p></li><li><p>增强for 相当于 while(it.hasNext()) 遍历<br><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/3.png"></p></li><li><p>直接使用迭代器（或者通过for）<font color="red" font="" size="4"><strong>当集合改变时  迭代器无效 抛出异常</strong> 因为不知道改变在前后 或者刚好是当前的  <strong>但是可以通过迭代器的方法remove 元素</strong> </font></p></li></ul><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>加入了 具体位置 设置获取添加删除的操作 以及特定的迭代器</p><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/4.png"></p><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/5.png"></p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>底层数组 get set O(1)<br>插入 删除 除了 末端 都是O(N)</p><h4 id="MyArrayList-实现细节注意"><a href="#MyArrayList-实现细节注意" class="headerlink" title="MyArrayList 实现细节注意"></a>MyArrayList 实现细节注意</h4><ul><li>底层数组 创建对象时 初始化clean</li><li>利用一个函数保证 长度，通过copy 原来的元素到新数组申请Object 数组强转</li><li>内部类迭代器共享外部数据</li><li>利用一个通用的添加 别的添加函数都转换给他</li><li>通用remove   别的remove 也到通用去</li><li>利用bool值决定 next 置1 和remove 置0</li><li>暂时没检查 使迭代器无效的 方法  放到Linkedlist 里面实现（一样的方法）<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4>底层链表 get set O(n)<br>前末端 插入 删除 O(1)<br>找到位置后O(1)</li></ul><h4 id="MyLinkedList-实现细节注意"><a href="#MyLinkedList-实现细节注意" class="headerlink" title="MyLinkedList 实现细节注意"></a>MyLinkedList 实现细节注意</h4><ul><li><p>初始化一个头结点和尾结点</p></li><li><p>底层双链表 注意 需要自己扔 throw new IndexOutOfBoundsException 因为不是底层数组不能自己判断IndexOutOfBoundsException</p></li><li><p>利用modconut 看当前迭代器拥有后 表有无add remove操作</p></li></ul><h4 id="二者contains-和find-都是O-N"><a href="#二者contains-和find-都是O-N" class="headerlink" title="二者contains 和find 都是O(N)"></a>二者contains 和find 都是O(N)</h4><h4 id="例子删除表的偶数"><a href="#例子删除表的偶数" class="headerlink" title="例子删除表的偶数"></a>例子删除表的偶数</h4><p>想法1<br><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/6.png"></p><p>对于ArrrayList remove 费时 总O(n^2)</p><p>对于LinkedList get 费时 总O(n^2)</p><p>想法2<br><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/7.png"></p><p>对于ArrrayList remove 费时 总O(n^2)</p><p>对于LinkedList 刚好remove就在旁边的东西就在附近  O(N)</p><h4 id="ListIterator-接口"><a href="#ListIterator-接口" class="headerlink" title="ListIterator 接口"></a>ListIterator 接口</h4><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/8.png"></p><p>加上了与next()对应的之前项 Previous  用来从后往前遍历<br>add 在当前位置（在next 和previous之间） 插入个对象 </p><p>对于ArrrayList 还是O(n)</p><p>对于LinkedList O(1)</p><p>Set 改变迭代器看到的最后一个值<br><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/9.png"></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="链表实现-（少见）"><a href="#链表实现-（少见）" class="headerlink" title="链表实现 （少见）"></a>链表实现 （少见）</h3><h3 id="数组实现-（常见）用ArrayList-就行"><a href="#数组实现-（常见）用ArrayList-就行" class="headerlink" title="数组实现 （常见）用ArrayList 就行"></a>数组实现 （常见）用ArrayList 就行</h3><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="符号匹配"><a href="#符号匹配" class="headerlink" title="符号匹配"></a>符号匹配</h4><h4 id="后缀表达式计算-（不需知道任何规则-O-N"><a href="#后缀表达式计算-（不需知道任何规则-O-N" class="headerlink" title="后缀表达式计算 （不需知道任何规则 O(N))"></a>后缀表达式计算 （不需知道任何规则 O(N))</h4><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/10.png"></p><h4 id="中缀表达式转后缀表达式（正常表达式-只有-转后缀表达式）"><a href="#中缀表达式转后缀表达式（正常表达式-只有-转后缀表达式）" class="headerlink" title="中缀表达式转后缀表达式（正常表达式 只有+-*/转后缀表达式）"></a>中缀表达式转后缀表达式（正常表达式 只有+-*/转后缀表达式）</h4><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/11.png"><br><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/12.png"><br><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/13.png"></p><h4 id="方法调用-（栈帧）"><a href="#方法调用-（栈帧）" class="headerlink" title="方法调用 （栈帧）"></a>方法调用 （栈帧）</h4><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>排队论</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>参数化类型<br>只在编译阶段有用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> classStringArrayList <span class="token operator">=</span> stringArrayList<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> classIntegerArrayList <span class="token operator">=</span> integerArrayList<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>classStringArrayList<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classIntegerArrayList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"泛型测试"</span><span class="token punctuation">,</span><span class="token string">"类型相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>输出结果：<span class="token class-name">D</span><span class="token operator">/</span>泛型测试<span class="token operator">:</span> 类型相同。泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><span class="token comment">//在实例化泛型类时，必须指定T的具体类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>     <span class="token comment">//key这个成员变量的类型为T,T的类型由外部指定  </span>    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//泛型构造方法形参key的类型也为T，T的类型由外部指定</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//泛型方法getKey的返回值类型为T，T的类型由外部指定</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>不能对确切的泛型类型使用<span class="token keyword">instanceof</span>操作。如下面的操作是非法的，编译时会出错。<span class="token keyword">if</span><span class="token punctuation">(</span>ex_num <span class="token keyword">instanceof</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//定义一个泛型接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中 * 即：class FruitGenerator&lt;T&gt; implements Generator&lt;T&gt;{ * 如果不声明泛型，如：class FruitGenerator implements Generator&lt;T&gt;，编译器会报错："Unknown class" */</span><span class="token keyword">class</span> <span class="token class-name">FruitGenerator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 泛型方法的基本介绍 * @param tClass 传入的泛型实参 * @return T 返回值为T类型 * 说明： *     1）public 与 返回值中间&lt;T&gt;非常重要，可以理解为声明此方法为泛型方法。 *     2）只有声明了&lt;T&gt;的方法才是泛型方法，泛型类中的使用了泛型的成员方法并不是泛型方法。 *     3）&lt;T&gt;表明该方法将使用泛型类型T，此时才可以在方法中使用泛型类型T。 *     4）与泛型类的定义一样，此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。 */</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">genericMethod</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">,</span>  <span class="token class-name">IllegalAccessException</span><span class="token punctuation">{</span>        <span class="token class-name">T</span> instance <span class="token operator">=</span> tClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型类中的泛型方法 可以</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GenerateTest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show_1</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//在泛型类中声明了一个泛型方法，使用泛型E，这种泛型E可以为任意类型。可以类型与T相同，也可以不同。</span>       <span class="token comment">//由于泛型方法在声明的时候会声明泛型&lt;E&gt;，因此即使在泛型类中并未声明泛型，编译器也能够正确识别泛型方法中识别的泛型。</span>       <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">show_3</span><span class="token punctuation">(</span><span class="token class-name">E</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//在泛型类中声明了一个泛型方法，使用泛型T，注意这个T是一种全新的类型，可以与泛型类中声明的T不是同一种类型。</span>       <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">show_2</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型数组问题"><a href="#泛型数组问题" class="headerlink" title="泛型数组问题"></a>泛型数组问题</h3><p>在java中是”不能创建一个确切的泛型类型的数组”的。</p><p>也就是说下面的这个例子是不可以的：</p><pre class="line-numbers language-none"><code class="language-none">List&lt;String&gt;[] ls = new ArrayList&lt;String&gt;[10];  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而使用通配符创建泛型数组是可以的，如下面这个例子：</p><pre class="line-numbers language-none"><code class="language-none">List&lt;?&gt;[] ls = new ArrayList&lt;?&gt;[10];  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样也是可以的：</p><pre class="line-numbers language-none"><code class="language-none">List&lt;String&gt;[] ls = new ArrayList[10];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="sun文档说明"><a href="#sun文档说明" class="headerlink" title="sun文档说明"></a>sun文档说明</h4><p>如果可以声明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> lsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Not really allowed.    </span><span class="token class-name">Object</span> o <span class="token operator">=</span> lsa<span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    li<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">;</span> <span class="token comment">// Unsound, but passes run time store check    </span><span class="token class-name">String</span> s <span class="token operator">=</span> lsa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Run-time error: ClassCastException.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这种情况下，由于JVM泛型的擦除机制，在运行时JVM是不知道泛型信息的，所以可以给oa[1]赋上一个ArrayList而不会出现异常，但是在取出数据的时候却要做一次类型转换，所以就会出现ClassCastException，如果可以进行泛型数组的声明，上面说的这种情况在编译期将不会出现任何的警告和错误，只有在运行时才会出错。<br>而对泛型数组的声明进行限制，对于这样的情况，可以在编译期提示代码有类型安全问题，比没有任何提示要强很多。</p></blockquote><p>下面采用通配符的方式是被允许的:<strong>数组的类型不可以是类型变量，除非是采用通配符的方式</strong>，因为对于通配符的方式，最后取出数据是要做显式的类型转换的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> lsa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK, array of unbounded wildcard type.    </span><span class="token class-name">Object</span> o <span class="token operator">=</span> lsa<span class="token punctuation">;</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    li<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">;</span> <span class="token comment">// Correct.    </span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> lsa<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Intanceof"><a href="#Intanceof" class="headerlink" title="Intanceof"></a>Intanceof</h1><p>　instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例，用法为：</p><blockquote><p>boolean result = obj instanceof Class</p></blockquote><p>其中 obj 为一个对象，Class 表示一个类或者一个接口，当 obj 为 Class 的对象，或者是其直接或间接子类，或者是其接口的实现类，结果result 都返回 true，否则返回false。</p><p>注意：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。</p><h2 id="obj-必须为引用类型，不能是基本类型"><a href="#obj-必须为引用类型，不能是基本类型" class="headerlink" title="obj 必须为引用类型，不能是基本类型"></a>obj 必须为引用类型，不能是基本类型</h2><h2 id="obj-为-null"><a href="#obj-为-null" class="headerlink" title="obj 为 null"></a>obj 为 null</h2><blockquote><p>System.out.println(null instanceof Object);//false</p></blockquote><p>我们不需要对 null 类型有多深刻的了解，我们只需要知道 null 是可以成为任意引用类型的特殊符号。</p><p>　　在 JavaSE规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返回 false。</p><h2 id="obj-为-class-类的实例对象"><a href="#obj-为-class-类的实例对象" class="headerlink" title="obj 为 class 类的实例对象"></a>obj 为 class 类的实例对象</h2><h2 id="obj-为-class-接口的实现类"><a href="#obj-为-class-接口的实现类" class="headerlink" title="obj 为 class 接口的实现类"></a>obj 为 class 接口的实现类</h2><h2 id="obj-为-class-类的直接或间接子类"><a href="#obj-为-class-类的直接或间接子类" class="headerlink" title="obj 为 class 类的直接或间接子类"></a>obj 为 class 类的直接或间接子类</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，如果不能确定类型，则通过编译，具体看运行时定。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译报错</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java8描述</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> result<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">T</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span> <span class="token comment">// checkcast</span>      result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说有表达式 obj instanceof T，instanceof 运算符的 obj 操作数的类型必须是引用类型或空类型; 否则，会发生编译时错误。 </p><p>　　如果 obj 强制转换为 T 时发生编译错误，则关系表达式的 instanceof 同样会产生编译时错误。 在这种情况下，表达式实例的结果永远为false。</p><p>　　在运行时，如果 T 的值不为null，并且 obj 可以转换为 T 而不引发ClassCastException，则instanceof运算符的结果为true。 否则结果是错误的</p><p>　　简单来说就是：如果 obj 不为 null 并且 (T) obj 不抛 ClassCastException 异常则该表达式值为 true ，否则值为 false 。</p><p>　　所以对于上面提出的问题就很好理解了，为什么 p1 instanceof String 编译报错，因为(String)p1 是不能通过编译的，而 (List)p1 可以通过编译。</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="3-1-遍历一个表指定下标，下标由另一个表提供"><a href="#3-1-遍历一个表指定下标，下标由另一个表提供" class="headerlink" title="3.1 遍历一个表指定下标，下标由另一个表提供"></a>3.1 遍历一个表指定下标，下标由另一个表提供</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_1 * @Author: Wibur * @Description: * 给定一个表L和另一个表P， 它们包含以升序排列的整数。操作print Lots(L， P) 将打印L中 * 那些由P所指定的位置上的元素。例如，如果P=1，3，4，6，那么，L中位于第1、第3、第4和 * 第6个位置上的元素被打印出来。写出过程print Lots(L， P) 。只可使用public型的 * Collections API容器操作。该过程的运行时间是多少? * @Date: Created in 22:17 2020/6/17 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printLots</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">B</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> LA<span class="token operator">=</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> LB<span class="token operator">=</span><span class="token class-name">B</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> tempA<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>LA<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>LB<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>LB<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>start<span class="token operator">&lt;</span>temp<span class="token operator">&amp;&amp;</span> LA<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>                tempA<span class="token operator">=</span>LA<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tempA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Problem3_1</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem3_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">printLots</span><span class="token punctuation">(</span>stringList<span class="token punctuation">,</span>integerList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-调整链交换相邻的元素（单双链）"><a href="#3-2-调整链交换相邻的元素（单双链）" class="headerlink" title="3.2 调整链交换相邻的元素（单双链）"></a>3.2 调整链交换相邻的元素（单双链）</h2><p><strong>注意：</strong> </p><ul><li>交换节点 最好先定义出三点 前 中 后</li><li>双链 调整可以先调整单链  在反向 调整回来</li><li>用String.valueof 可以替代toString() 只是多了判空</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token comment">/*public static String valueOf(Object obj){return (obj==null) ? "null" : obj.toString()    };    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_2 * @Author: Wibur * @Description: * 通过只调整链(而不是数据)来交换两个相邻的元素，使用单链表 双链表 * @Date: Created in 19:13 2020/6/18 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> firstNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> secondNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        secondNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> thirdNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thirdNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fourthNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fourthNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstNode<span class="token punctuation">.</span>next<span class="token operator">=</span>secondNode<span class="token punctuation">;</span>        secondNode<span class="token punctuation">.</span>next<span class="token operator">=</span>thirdNode<span class="token punctuation">;</span>        thirdNode<span class="token punctuation">.</span>next<span class="token operator">=</span>fourthNode<span class="token punctuation">;</span>        <span class="token class-name">Problem3_2</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem3_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span>firstNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">swapNextNodeNew</span><span class="token punctuation">(</span>secondNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span>firstNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> firstNode1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstNode1<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> secondNode1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        secondNode1<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> thirdNode1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thirdNode1<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fourthNode1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fourthNode1<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstNode1<span class="token punctuation">.</span>next<span class="token operator">=</span>secondNode1<span class="token punctuation">;</span>        secondNode1<span class="token punctuation">.</span>next<span class="token operator">=</span>thirdNode1<span class="token punctuation">;</span>        thirdNode1<span class="token punctuation">.</span>next<span class="token operator">=</span>fourthNode1<span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">printList1</span><span class="token punctuation">(</span>firstNode1<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">swapNextNode1New</span><span class="token punctuation">(</span>firstNode1<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">printList1</span><span class="token punctuation">(</span>firstNode1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> temp<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printList1</span><span class="token punctuation">(</span><span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> temp<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">swapNextNodeNew</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> beforeP<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> <span class="token class-name">P</span><span class="token operator">=</span>beforeP<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> afterP<span class="token operator">=</span><span class="token class-name">P</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">P</span><span class="token punctuation">.</span>next<span class="token operator">=</span>afterP<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        beforeP<span class="token punctuation">.</span>next<span class="token operator">=</span>afterP<span class="token punctuation">;</span>        afterP<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token class-name">P</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">swapNextNode1New</span><span class="token punctuation">(</span><span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> beforeP<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> <span class="token class-name">P</span><span class="token operator">=</span>beforeP<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> afterP<span class="token operator">=</span><span class="token class-name">P</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">P</span><span class="token punctuation">.</span>next<span class="token operator">=</span>afterP<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        beforeP<span class="token punctuation">.</span>next<span class="token operator">=</span>afterP<span class="token punctuation">;</span>        afterP<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token class-name">P</span><span class="token punctuation">;</span>        <span class="token class-name">P</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev<span class="token operator">=</span><span class="token class-name">P</span><span class="token punctuation">;</span>        <span class="token class-name">P</span><span class="token punctuation">.</span>prev<span class="token operator">=</span>afterP<span class="token punctuation">;</span>        afterP<span class="token punctuation">.</span>prev<span class="token operator">=</span>beforeP<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>    <span class="token keyword">private</span> anyType data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>    anyType data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        next<span class="token punctuation">.</span>prev<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/*public static String valueOf(Object obj){    return (obj==null) ? "null" : obj.toString()        };        */</span>        <span class="token keyword">return</span>  <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-MyLinkedList-contains"><a href="#3-3-MyLinkedList-contains" class="headerlink" title="3.3 MyLinkedList contains"></a>3.3 MyLinkedList contains</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @ClassName Problem3_3 * @Author: Wibur * @Description: * LinkedList contains * @Date: Created in 19:13 2020/6/18 * @Versuin: 1.0 */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> p<span class="token operator">=</span>beginMarker<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> idx<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            idx<span class="token operator">++</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-3-5-两个表的交集和并集"><a href="#3-4-3-5-两个表的交集和并集" class="headerlink" title="3.4 3.5 两个表的交集和并集"></a>3.4 3.5 两个表的交集和并集</h2><p>通过迭代器便利很清晰的思路</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_4 * @Author: Wibur * @Description: * 给定两个已排序的表L， 和L， 只使用基本的表操作编写计算L∩L， 的过程。 * 给定两个已排序的表L和L，只使用基本的表操作编写计算L∪L，的过程。 * @Date: Created in 11:28 2020/6/29 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Problem3_4</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem3_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1 <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">intersectionList</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token operator">=</span><span class="token class-name"><span class="token namespace">p<span class="token punctuation">.</span></span>UnionList</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">intersectionList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l1<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l1ListIterator <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l2ListIterator <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> L1<span class="token operator">=</span>l1ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> L2<span class="token operator">=</span>l2ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1ListIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>l2ListIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>L1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                    l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    L1 <span class="token operator">=</span> l1ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    L2 <span class="token operator">=</span> l2ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    L2 <span class="token operator">=</span> l2ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>                    L1 <span class="token operator">=</span> l1ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l3<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">UnionList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l1<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l1ListIterator <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l2ListIterator <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> L1<span class="token operator">=</span>l1ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> L2<span class="token operator">=</span>l2ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1ListIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>l2ListIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>L1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                    l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    L1 <span class="token operator">=</span> l1ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    L2 <span class="token operator">=</span> l2ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    L2 <span class="token operator">=</span> l2ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>                    l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    L1 <span class="token operator">=</span> l1ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1ListIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l1ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l2ListIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                l3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l2ListIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> l3<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-6-Josephus问题-丢手绢（传递问题）bian"><a href="#3-6-Josephus问题-丢手绢（传递问题）bian" class="headerlink" title="3.6 Josephus问题 丢手绢（传递问题）bian"></a>3.6 Josephus问题 丢手绢（传递问题）bian</h2><ul><li>主要做删除而不是查询考虑链表<ul><li>第一种方法： 数学逻辑法 remove对应下标 时间O(N/2*M)</li><li>第二种方法： 单方向遍历 迭代器法 边遍历边删除  O(N)</li><li>第三种方法： 双方向遍历 迭代器法 size超过1/2 用previous遍历边删除  O(N/2)</li></ul></li></ul><p><strong>注意：迭代器remove 删除的是上次previous或者next 的结果</strong></p><p><strong>next函数是获取了当前值但是 cursor 已经移动到了下一个，相当于 return array[cursor++];<br>previous 函数是移动到前一个并且获取值   ，相当于 return array[–cursor];</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_6 * @Author: Wibur * @Description: * Josephus问题(Josephus problem) 是下面的游戏：N个人编号从1到N， 围坐成一个圆圈。从1号 * 开始传递一个热土豆。经过M次传递后拿着热土豆的人被清除离座，围坐的圆圈缩紧，由坐在被 * 清除的人后面的人拿起热土豆继续进行游戏。最后剩下的人取胜。因此，如果M=0和N=5，则 * 游戏人依序被清除，5号游戏人获胜。如果M=1和N=5，那么被清除的人的顺序是2，4，1，5。 * a.编写一个程序解决M和N在一般值下的Josephus问题， 应使程序尽可能地高效率， 要确保能 * 够清除各个单元。 * b.你的程序的运行时间是多少? * @Date: Created in 9:39 2020/6/30 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem3_6</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem3_6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">josephus</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">josephusIterOneDirection</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">josephusIterTwoDirection</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">josephus</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> l1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> t1<span class="token operator">=</span>m<span class="token operator">%</span>n<span class="token punctuation">;</span>        <span class="token keyword">int</span> t2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t2<span class="token operator">+=</span>t1<span class="token punctuation">;</span>            t2<span class="token operator">%=</span>l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l1<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">josephusIterOneDirection</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> l1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iter1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t1<span class="token operator">=</span>m<span class="token operator">%</span>n<span class="token punctuation">;</span>        <span class="token keyword">int</span> t2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>iter1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    iter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    iter1<span class="token operator">=</span>l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    iter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            iter1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l1<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">josephusIterTwoDirection</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> l1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iter1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t1<span class="token operator">=</span>m<span class="token operator">%</span>n<span class="token punctuation">;</span>        <span class="token keyword">int</span> t2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token operator">&lt;=</span>l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>iter1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        iter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span><span class="token punctuation">{</span>                        iter1<span class="token operator">=</span>l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        iter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                iter1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                iter1<span class="token operator">=</span>l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>t1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>iter1<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        iter1<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token comment">// 要从列表迭代器返回的第一个元素的索引（通过调用 next ）</span>                        iter1<span class="token operator">=</span>l1<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        iter1<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                iter1<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iter1<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> l1<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7-TrimSize-N-O-N"><a href="#3-7-TrimSize-N-O-N" class="headerlink" title="3.7 TrimSize(N) O(N)"></a>3.7 TrimSize(N) O(N)</h2><h2 id="3-8-删前半表"><a href="#3-8-删前半表" class="headerlink" title="3.8 删前半表"></a>3.8 删前半表</h2><p><img src="/2020/06/15/data-structures-and-algorithms-chap03-list-stack-queue/14.png"></p><pre class="line-numbers language-none"><code class="language-none">a:size()会变b: ArrayList O(n^2/2)c:LinkedList O(n/2)d: 都不能 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7-3-18-MyArrayList"><a href="#3-7-3-18-MyArrayList" class="headerlink" title="3.7-3.18 MyArrayList"></a>3.7-3.18 MyArrayList</h2><p>要点</p><ul><li>保证容量的实现ensureCapcity</li><li>add在某下标上添加 ,remove 在下标删除</li><li>迭代器的LastRet最后遇见值和index 下标<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyArrayList * @Author: Wibur * @Description: 实现ArrayList 两种迭代器  * @Date: Created in 11:16 2020/7/12 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPCITY<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>    <span class="token class-name">MyArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">doClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        modCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">ensureCapcity</span><span class="token punctuation">(</span>DEFAULT_CAPCITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">ensureCapcity</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//注意 怎么样转换</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ensureCapcity</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapcity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>newCapcity<span class="token operator">&lt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> old<span class="token operator">=</span>items<span class="token punctuation">;</span>        items <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newCapcity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>old<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">AnyType</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>items<span class="token punctuation">.</span>length<span class="token operator">==</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">ensureCapcity</span><span class="token punctuation">(</span>size<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span>index <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token operator">=</span>items<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>items<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">AnyType</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;=</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;=</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> iterItems <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAll</span><span class="token punctuation">(</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> iterItems <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//iterable 需要iterator</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyArrayListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayListIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> curModCount<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> okToRemove<span class="token punctuation">;</span>        <span class="token class-name">MyArrayListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            curModCount<span class="token operator">=</span>modCount<span class="token punctuation">;</span>            index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> items<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curModCount<span class="token operator">!=</span>modCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>okToRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">--</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            curModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyArrayListListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayListListIterator</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> curModCount<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> lastRet<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> okToRemove<span class="token punctuation">;</span>        <span class="token class-name">MyArrayListListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            curModCount<span class="token operator">=</span>modCount<span class="token punctuation">;</span>            index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            lastRet<span class="token operator">=</span>index<span class="token punctuation">;</span>            <span class="token keyword">return</span> items<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            lastRet<span class="token operator">=</span><span class="token operator">--</span>index<span class="token punctuation">;</span>            <span class="token keyword">return</span> items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curModCount<span class="token operator">!=</span>modCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>okToRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            curModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> anyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>anyType<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> anyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curModCount<span class="token operator">!=</span>modCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            curModCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">MyArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>anyType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestMyArrayList</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myArrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"3.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"1.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"1.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterMyArrayList <span class="token operator">=</span> myArrayList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">trimToSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterMyArrayList<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> temp<span class="token operator">=</span>iterMyArrayList<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                iterMyArrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listIterMyArrayList <span class="token operator">=</span> myArrayList<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterMyArrayList<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> temp<span class="token operator">=</span>listIterMyArrayList<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterMyArrayList<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> temp<span class="token operator">=</span>listIterMyArrayList<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                listIterMyArrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        listIterMyArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listIterMyArrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> L1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> L2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myArrayList<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myArrayList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7-3-18-MyLinkedList"><a href="#3-7-3-18-MyLinkedList" class="headerlink" title="3.7-3.18 MyLinkedList"></a>3.7-3.18 MyLinkedList</h2>要点</li><li>注意head 和tail</li><li>iter 的index从head.next 开始<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ListIterator</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyLinkedList * @Author: Wibur * @Description: * @Date: Created in 19:13 2020/7/12 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>    <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">doClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        modCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>tail<span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>prev<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">addBefore</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBefore</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">P</span> <span class="token operator">=</span> <span class="token function">getNode1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> beforeP <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> insertP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        beforeP<span class="token punctuation">.</span>next<span class="token operator">=</span>insertP<span class="token punctuation">;</span>        insertP<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token class-name">P</span><span class="token punctuation">;</span>        <span class="token class-name">P</span><span class="token punctuation">.</span>prev<span class="token operator">=</span>insertP<span class="token punctuation">;</span>        insertP<span class="token punctuation">.</span>prev<span class="token operator">=</span>beforeP<span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFist</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">addBefore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode1</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> temp<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>size<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>head<span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            temp<span class="token operator">=</span>tail<span class="token punctuation">;</span>            <span class="token keyword">int</span> i<span class="token operator">=</span>size<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>prev<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp<span class="token operator">=</span>temp<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getNode1</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getNode1</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> beforeP<span class="token operator">=</span>temp<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> afterP<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            beforeP<span class="token punctuation">.</span>next<span class="token operator">=</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            afterP<span class="token punctuation">.</span>prev<span class="token operator">=</span>beforeP<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tempHead<span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tempHead<span class="token punctuation">.</span>next<span class="token operator">!=</span>tail<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tempHead<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                tempHead<span class="token operator">=</span>tempHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tempHead<span class="token operator">=</span>tempHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">remove</span><span class="token punctuation">(</span>tempHead<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">P</span> <span class="token operator">=</span> <span class="token function">getNode1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">remove</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">remove</span><span class="token punctuation">(</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">AnyType</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;=</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">P</span> <span class="token operator">=</span> <span class="token function">getNode1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">P</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>index<span class="token operator">&gt;=</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">getNode1</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> iterItems <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAll</span><span class="token punctuation">(</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> iterItems <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>iterItems<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">splice</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> itr<span class="token punctuation">,</span> <span class="token class-name">MyLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        itr<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> tmp <span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>size <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>tmp<span class="token operator">=</span>tmp<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//iterable 需要iterator</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLinkedListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyLinkedListIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> curModCount<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> index<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> lastRet<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> okToRemove<span class="token punctuation">;</span>        <span class="token class-name">MyLinkedListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            curModCount<span class="token operator">=</span>modCount<span class="token punctuation">;</span>            index<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token operator">!=</span>tail<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            lastRet<span class="token operator">=</span>index<span class="token punctuation">;</span>            index<span class="token operator">=</span>index<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> lastRet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curModCount<span class="token operator">!=</span>modCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>okToRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            curModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">MyLinkedListListIterator</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLinkedListListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyLinkedListListIterator</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> curModCount<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> index<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span></span> lastRet<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> okToRemove<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> curIndex<span class="token punctuation">;</span>        <span class="token class-name">MyLinkedListListIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            curModCount<span class="token operator">=</span>modCount<span class="token punctuation">;</span>            index<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            curIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token operator">!=</span>tail<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            lastRet<span class="token operator">=</span>index<span class="token punctuation">;</span>            index<span class="token operator">=</span>index<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            curIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastRet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index<span class="token punctuation">.</span>prev<span class="token operator">!=</span>head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">AnyType</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            okToRemove<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            index<span class="token operator">=</span>index<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            lastRet<span class="token operator">=</span>index<span class="token punctuation">;</span>            curIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastRet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> curIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> curIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curModCount<span class="token operator">!=</span>modCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>okToRemove<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>            okToRemove<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            curModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> anyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            index<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>anyType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">AnyType</span> anyType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curModCount<span class="token operator">!=</span>modCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            curModCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">MyLinkedList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addBefore</span><span class="token punctuation">(</span>curIndex<span class="token punctuation">,</span>anyType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TestMyLinkedList</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> myLinkedList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">addBefore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"3.5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"1.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"1.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterMyArrayList <span class="token operator">=</span> myLinkedList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterMyArrayList<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> temp<span class="token operator">=</span>iterMyArrayList<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"1.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                iterMyArrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> listIterMyLinkedlist <span class="token operator">=</span> myLinkedList<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterMyLinkedlist<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> temp<span class="token operator">=</span>listIterMyLinkedlist<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>listIterMyLinkedlist<span class="token punctuation">.</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> temp<span class="token operator">=</span>listIterMyLinkedlist<span class="token punctuation">.</span><span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                listIterMyLinkedlist<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        listIterMyLinkedlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listIterMyLinkedlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> L1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> L2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        L2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myLinkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"19"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myLinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-19-无头尾节点实现LinkedList"><a href="#3-19-无头尾节点实现LinkedList" class="headerlink" title="3.19 无头尾节点实现LinkedList"></a>3.19 无头尾节点实现LinkedList</h2></li></ul><p>区别： </p><ul><li>不能使用通用的添加 有特殊情况</li><li>在尾部添加、删除O(N)时间</li></ul><h2 id="3-20-懒惰删除"><a href="#3-20-懒惰删除" class="headerlink" title="3.20 懒惰删除"></a>3.20 懒惰删除</h2><p>我们只是标记上该元素被除(使用一个附加的位(bit) 城) 。表中被删除和非被除元素<br>的个数作为数据结构的一部分被保留。如果被册除元素和非被制除元素一样多，則遍历整个表，删除所有标记元素</p><p><strong>好处</strong> 节省了很多无效链接 步骤</p><h2 id="3-21-平衡符号"><a href="#3-21-平衡符号" class="headerlink" title="3.21 平衡符号"></a>3.21 平衡符号</h2><ul><li>遍历字符</li><li>注意 /*的判别</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_21 * @Author: Wibur * @Description: * 平衡符号 * @Date: Created in 20:34 2020/7/2 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_21</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> blanceStack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'('</span><span class="token operator">:</span>                    blanceStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'['</span><span class="token operator">:</span>                    blanceStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'{'</span><span class="token operator">:</span>                    blanceStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        blanceStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        blanceStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'/'</span><span class="token operator">||</span>blanceStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">||</span>blanceStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'*'</span><span class="token operator">||</span>blanceStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">')'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>blanceStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>blanceStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">']'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>blanceStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>blanceStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'['</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'}'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>blanceStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>blanceStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'{'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token keyword">default</span><span class="token operator">:</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>blanceStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"{[]}(/*()*/)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Problem3_21</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem3_21</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">checkExpression</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-22-计算后缀表达式"><a href="#3-22-计算后缀表达式" class="headerlink" title="3.22 计算后缀表达式"></a>3.22 计算后缀表达式</h2><ul><li>幂运算右结合 <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_22 * @Author: Wibur * @Description: * 计算后缀表达式 * @Date: Created in 9:34 2020/7/6 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_22</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">suffixExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> doubleStack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> inputNum<span class="token punctuation">;</span>        <span class="token class-name">String</span> inputString<span class="token punctuation">;</span>        <span class="token keyword">double</span> result<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inputString<span class="token operator">=</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                inputNum<span class="token operator">=</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>                doubleStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inputNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                        result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        result<span class="token operator">+=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token operator">+=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        doubleStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                        result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                        result<span class="token operator">-=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token operator">+=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        doubleStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                        result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        result<span class="token operator">*=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token operator">*=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        doubleStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                        result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                        result<span class="token operator">/=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token operator">*=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        doubleStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"^"</span><span class="token operator">:</span>                        result<span class="token operator">=</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        result<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        doubleStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"="</span><span class="token operator">:</span>                       <span class="token keyword">return</span> doubleStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem3_22</span> p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Problem3_22</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">suffixExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-23-中缀转后缀"><a href="#3-23-中缀转后缀" class="headerlink" title="3.23 中缀转后缀"></a>3.23 中缀转后缀</h2></li><li>指令优先级 （《+、-《*、/《^《）<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_23 * @Author: Wibur * @Description: * 中缀转后缀 * @Date: Created in 10:31 2020/7/6 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_23</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">inffixToSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringStack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> inputNum<span class="token punctuation">;</span>        <span class="token class-name">String</span> inputString<span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> result<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>inputString<span class="token operator">=</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                inputNum<span class="token operator">=</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>inputNum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>inputString<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                       <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stringStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                               result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                       stringStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stringStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        stringStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stringStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"("</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"+"</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        stringStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stringStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"("</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"+"</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        stringStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"^"</span><span class="token operator">:</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stringStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"("</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"+"</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"-"</span>                                <span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"*"</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"/"</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"^"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        stringStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"^"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"("</span><span class="token operator">:</span>                        stringStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">")"</span><span class="token operator">:</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stringStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"="</span><span class="token operator">:</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stringStack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>stringStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>stringStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem3_23</span> p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Problem3_23</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">inffixToSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-24-单数组双栈"><a href="#3-24-单数组双栈" class="headerlink" title="3.24 单数组双栈"></a>3.24 单数组双栈</h2></li><li>除了充满 不能溢出</li><li>两端栈<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_24 * @Author: Wibur * @Description: * 单数组双栈 * @Date: Created in 9:16 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_24</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyTwoStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringMyTwoStack <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyTwoStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyTwoStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyTwoStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span>  <span class="token class-name">MyTwoStack</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stack1Top<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stack2Top<span class="token punctuation">;</span>    <span class="token class-name">MyTwoStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        stack1Top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        stack2Top<span class="token operator">=</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">MyTwoStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">=</span>length<span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        stack1Top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        stack2Top<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyTpye <span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack1Top<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop failed no left in stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>anyTpye<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token operator">--</span>stack1Top<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack2Top<span class="token operator">&gt;=</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop failed no left in stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>anyTpye<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token operator">++</span>stack2Top<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">push</span><span class="token punctuation">(</span>anyTpye a<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack1Top<span class="token operator">&gt;</span>stack2Top<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"push failed full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>stack1Top<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack2Top<span class="token operator">&lt;</span>stack1Top<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"push failed full in stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>stack2Top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyTpye <span class="token function">peek</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack1Top<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no peek"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>anyTpye<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>stack1Top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack2Top<span class="token operator">&gt;=</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no peek"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>anyTpye<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>stack2Top<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> stack1Top<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>stack2Top<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-25-构造一个数据结构-push-pop-findMin-O-1"><a href="#3-25-构造一个数据结构-push-pop-findMin-O-1" class="headerlink" title="3.25 构造一个数据结构 push pop findMin O(1)"></a>3.25 构造一个数据结构 push pop findMin O(1)</h2></li><li>内部保存两个数组 一个是栈的 一个最小值数组<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_25 * @Author: Wibur * @Description: *  构造一个数据结构 push pop findMin O(1) * @Date: Created in 10:02 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_25</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringMyStack <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyStack<span class="token punctuation">.</span><span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringMyStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringMyStack<span class="token punctuation">.</span><span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span>  <span class="token class-name">MyStack</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> minIndex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> indexTop<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> stackTop<span class="token punctuation">;</span>    <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        minIndex<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        stackTop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        indexTop<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">=</span>length<span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        minIndex<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        stackTop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        indexTop<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyTpye <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stackTop<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop failed no left in stack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stackTop<span class="token operator">-</span><span class="token number">1</span><span class="token operator">==</span>minIndex<span class="token punctuation">[</span>indexTop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    indexTop<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>anyTpye<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token operator">--</span>stackTop<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">push</span><span class="token punctuation">(</span>anyTpye a<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stackTop<span class="token operator">&gt;</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"push failed full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>indexTop<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    minIndex<span class="token punctuation">[</span><span class="token operator">++</span>indexTop<span class="token punctuation">]</span><span class="token operator">=</span>stackTop<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>stackTop<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>minIndex<span class="token punctuation">[</span>indexTop<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    minIndex<span class="token punctuation">[</span><span class="token operator">++</span>indexTop<span class="token punctuation">]</span><span class="token operator">=</span>stackTop<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>stackTop<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyTpye <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stackTop<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no peek"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>anyTpye<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">[</span>stackTop<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> stackTop<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyTpye <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>anyTpye<span class="token punctuation">)</span>a<span class="token punctuation">[</span>minIndex<span class="token punctuation">[</span>indexTop<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-26-一个数组三个栈-（除了满不能溢出）"><a href="#3-26-一个数组三个栈-（除了满不能溢出）" class="headerlink" title="3.26 一个数组三个栈 （除了满不能溢出）"></a>3.26 一个数组三个栈 （除了满不能溢出）</h2></li><li>头尾两个 </li><li>中间一个随机生长方向的栈<h2 id="3-27-递归调用时间问题"><a href="#3-27-递归调用时间问题" class="headerlink" title="3.27 递归调用时间问题"></a>3.27 递归调用时间问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">在<span class="token number">2.4</span>节中用于计算斐波那契数的递归例程如果对<span class="token class-name">N</span><span class="token operator">=</span><span class="token number">50</span>运行，栈空间有可能用完吗<span class="token operator">?</span>为什么<span class="token operator">?</span>堆栈空间不会用完，因为只会堆叠<span class="token number">49</span>个调用。但是，运行时间是指数的，如第<span class="token number">2</span>章所示，因此该例程不会在合理的时间内终止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-8-双端队列-deque"><a href="#3-8-双端队列-deque" class="headerlink" title="3.8 双端队列(deque)"></a>3.8 双端队列(deque)</h2><ul><li>用链表实现即可<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_28 * @Author: Wibur * @Description: * 双端队列(deque) 是由一列项组成的数据结构， 对该数据结构可以进行下列操作： * push(x) ：将项x插入到双端队列的前端。 * pop() ：从双端队列中删除前端项并将其返回。 * inject(x) ：将项x插入到双端队列的尾端。 * eject() ：从双端队列中删除尾端项并将其返回。 * 编写支持双端队列的例程，其中每种操作均花费O(1)时间。 * @Date: Created in 11:00 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_28</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deque<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> deque<span class="token punctuation">;</span>    <span class="token class-name">Deque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        deque<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>anyTpye x<span class="token punctuation">)</span><span class="token punctuation">{</span>        deque<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyTpye <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>anyTpye x<span class="token punctuation">)</span><span class="token punctuation">{</span>        deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyTpye <span class="token function">eject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-29-倒序打印单双链表-（只能附件O-1-空间）"><a href="#3-29-倒序打印单双链表-（只能附件O-1-空间）" class="headerlink" title="3.29 倒序打印单双链表 （只能附件O(1)空间）"></a>3.29 倒序打印单双链表 （只能附件O(1)空间）</h2></li><li>遍历链表 三点 修改前面两点顺序 以此类推</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Probelem3_29 * @Author: Wibur * @Description: * 编写以倒序打印双链表的算法，只使用常数的附加空间。本题意味着，不能使用递归但可以假设 * 该算法是一个表成员函数。 * @Date: Created in 11:11 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_29</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> firstNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> secondNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        secondNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> thirdNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thirdNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fourthNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fourthNode<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstNode<span class="token punctuation">.</span>next<span class="token operator">=</span>secondNode<span class="token punctuation">;</span>        secondNode<span class="token punctuation">.</span>next<span class="token operator">=</span>thirdNode<span class="token punctuation">;</span>        thirdNode<span class="token punctuation">.</span>next<span class="token operator">=</span>fourthNode<span class="token punctuation">;</span>        <span class="token class-name">Problem3_29</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Problem3_29</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">printReverse</span><span class="token punctuation">(</span>firstNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printReverse</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> preNode<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> curNode<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> nextNode<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nextNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            curNode<span class="token punctuation">.</span>next<span class="token operator">=</span>preNode<span class="token punctuation">;</span>            preNode<span class="token operator">=</span>curNode<span class="token punctuation">;</span>            curNode<span class="token operator">=</span>nextNode<span class="token punctuation">;</span>            nextNode<span class="token operator">=</span>nextNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        curNode<span class="token punctuation">.</span>next<span class="token operator">=</span>preNode<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curNode<span class="token operator">=</span>curNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-30-自调整表-find-将元素提前"><a href="#3-30-自调整表-find-将元素提前" class="headerlink" title="3.30 自调整表 find()将元素提前"></a>3.30 自调整表 find()将元素提前</h2><ul><li>可以用Arraylist</li><li>可以用Linkedlist<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_30 * @Author: Wibur * @Description: * a.写出自调整表(self - adjusting list) 的数组实现。在自调整表中， 所有的插入都在前端进行。自调 * 整表添加一个find操作， 当一个元素被find访问时， 它就被移到表的前端而并不改变其余 * 的项的相对顺序。 * b.写出自调整表的链表实现。 * C.设每个元素都有其被访问的固定的概率pi。证明那些具有最高访问概率的元素都靠近表的 * 前端。 * @Date: Created in 15:08 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_30</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">ArraySelfList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arraySekfList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArraySelfList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       arraySekfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arraySekfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arraySekfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arraySekfList<span class="token punctuation">)</span><span class="token punctuation">;</span>        arraySekfList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arraySekfList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LinkedSelfList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> linkedSelfList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedSelfList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedSelfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedSelfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedSelfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedSelfList<span class="token punctuation">)</span><span class="token punctuation">;</span>        linkedSelfList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedSelfList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ArraySelfList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> selfList<span class="token punctuation">;</span>    <span class="token class-name">ArraySelfList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        selfList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>anyTpye t<span class="token punctuation">)</span><span class="token punctuation">{</span>        selfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span>anyTpye t<span class="token punctuation">)</span><span class="token punctuation">{</span>        selfList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        selfList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> selfList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">LinkedSelfList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyTpye<span class="token punctuation">&gt;</span></span> selfList<span class="token punctuation">;</span>    <span class="token class-name">LinkedSelfList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        selfList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>anyTpye t<span class="token punctuation">)</span><span class="token punctuation">{</span>        selfList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span>anyTpye t<span class="token punctuation">)</span><span class="token punctuation">{</span>        selfList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        selfList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> selfList<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-31-使用单链表高效实现栈类，不用头节点和尾节点。"><a href="#3-31-使用单链表高效实现栈类，不用头节点和尾节点。" class="headerlink" title="3.31 使用单链表高效实现栈类，不用头节点和尾节点。"></a>3.31 使用单链表高效实现栈类，不用头节点和尾节点。</h2></li><li>头节点就是栈顶，入栈就在栈顶加个点<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_31 * @Author: Wibur * @Description: * 使用单链表高效实现栈类，不用头节点和尾节点。 * @Date: Created in 16:07 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_31</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SingleStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strStcak <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleStack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strStcak<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strStcak<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStcak<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStcak<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SingleStack</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>    <span class="token class-name">SingleStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        head<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>anyType t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">=</span>t1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyType <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyType <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        anyType t<span class="token operator">=</span>head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> anyType data<span class="token punctuation">;</span>        <span class="token class-name">Node2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node2</span><span class="token punctuation">(</span>anyType n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node2</span><span class="token punctuation">(</span>anyType t<span class="token punctuation">,</span><span class="token class-name">Node2</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token operator">=</span>t<span class="token punctuation">;</span>            next<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-32-使用单链表高效实现队列类，不用头节点和尾节点。"><a href="#3-32-使用单链表高效实现队列类，不用头节点和尾节点。" class="headerlink" title="3.32 使用单链表高效实现队列类，不用头节点和尾节点。"></a>3.32 使用单链表高效实现队列类，不用头节点和尾节点。</h2></li><li>队头队尾节点<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_32 * @Author: Wibur * @Description: * @Date: Created in 17:21 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_32</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SingleQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strStcak <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strStcak<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strStcak<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strStcak<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strStcak<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strStcak<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStcak<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStcak<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStcak<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStcak<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strStcak<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SingleQueue</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>    <span class="token class-name">SingleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        head<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        tail<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>anyType t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">==</span>tail<span class="token operator">&amp;&amp;</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            head<span class="token operator">=</span>t1<span class="token punctuation">;</span>            tail<span class="token operator">=</span>t1<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tail<span class="token punctuation">.</span>next<span class="token operator">=</span>t1<span class="token punctuation">;</span>            tail<span class="token operator">=</span>t1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyType <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        anyType t<span class="token operator">=</span>head<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Node2</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> anyType data<span class="token punctuation">;</span>        <span class="token class-name">Node2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node2</span><span class="token punctuation">(</span>anyType n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Node2</span><span class="token punctuation">(</span>anyType t<span class="token punctuation">,</span><span class="token class-name">Node2</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token operator">=</span>t<span class="token punctuation">;</span>            next<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-33-使用循环数组高效实现队列类"><a href="#3-33-使用循环数组高效实现队列类" class="headerlink" title="3.33 使用循环数组高效实现队列类"></a>3.33 使用循环数组高效实现队列类</h2></li><li>对头队尾的移动  队尾指向 入队位置 对头指向 最前元素</li><li>判空和满的条件<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_33 * @Author: Wibur * @Description: * 使用循环数组高效实现队列类。 * @Date: Created in 19:18 2020/7/7 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_33</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CircleArrayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strQueue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CircleArrayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strQueue<span class="token punctuation">.</span><span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strQueue<span class="token punctuation">.</span><span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CircleArrayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> arrayList<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> tail<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token class-name">CircleArrayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">CircleArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        maxSize<span class="token operator">=</span>num<span class="token punctuation">;</span>        head<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        tail<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enQueue</span><span class="token punctuation">(</span>anyType t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            arrayList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyType <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        anyType a <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token operator">==</span>maxSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-34-判断循环链表"><a href="#3-34-判断循环链表" class="headerlink" title="3.34 判断循环链表"></a>3.34 判断循环链表</h2></li><li>第一种方法 ，记录所有点 需要O(N)空间</li><li>第二章方法，不同速度遍历 ，如果有循环一定会相等<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentLinkedQueue</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_34 * @Author: Wibur * @Description: * 如果从某个节点p开始， 接着跟有足够数目的next链将把我们带回到节点p， 那么这个链表包含 * 一个循环。p不必是该表的第一个节点。假设给你一个链表，它包含N个节点；不过Ｎ的值是不 * 知道的。 * a.设计一个0(N)算法以确定该表是否包含有循环。你可以使用0(N)的额外空间。 * b.重复(a)部分，但是只使用O(1)的额外空间。(提示：使用两个迭代器，它们最初在表的开始 * 处，但以不同的速度推进。) * @Date: Created in 10:57 2020/7/8 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_34</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CircleList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> circleList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CircleList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> node1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>        circleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        CircleNode&lt;String&gt; node2=new CircleNode&lt;&gt;("7",node1);</span><span class="token comment">//        circleList.add(node2);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>circleList<span class="token punctuation">.</span><span class="token function">isCirle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CircleList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token class-name">CircleList</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span><span class="token punctuation">{</span>        head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node1<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node1<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            node1<span class="token operator">=</span>node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node1<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node1<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node1<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            node1<span class="token operator">=</span>node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node1<span class="token punctuation">.</span>next<span class="token operator">=</span>  node<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCirle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node1<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node2<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>node2<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            node1<span class="token operator">=</span>node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node2<span class="token operator">=</span>node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node2<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node2<span class="token operator">==</span>node1<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>    <span class="token keyword">private</span> anyType data<span class="token punctuation">;</span>    <span class="token class-name">CircleNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">CircleNode</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">CircleNode</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">,</span><span class="token class-name">CircleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-35-循环链表实现时间O-1-队列"><a href="#3-35-循环链表实现时间O-1-队列" class="headerlink" title="3.35 循环链表实现时间O(1)队列"></a>3.35 循环链表实现时间O(1)队列</h2></li></ul><pre class="line-numbers language-none"><code class="language-none">实现队列的一种方法是使用一个循环链表。在循环链表中， 最后一个节点的next链是链接到第1个节点上的。假设该表不包含表头，并假设我们最多可以保留一个迭代器，它对应表中的一个节点。对于下列的哪种表示方式，所有的基本队列操作都可以以常数最坏情形时间执行?证明你的答案是正确的。a.保留一个迭代器，它对应该表的第一项。b.保留一个迭代器，它对应该表的最后一项。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最后一项 因为最后一项也能指向第一项  入队从最后一项入 出队从第一项出</li></ul><h2 id="3-36通过单节点引用逻辑上删除该节点"><a href="#3-36通过单节点引用逻辑上删除该节点" class="headerlink" title="3.36通过单节点引用逻辑上删除该节点"></a>3.36通过单节点引用逻辑上删除该节点</h2><ul><li>利用copy把后一个节点copy  删除后一个节点即可<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap03</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem3_37 * @Author: Wibur * @Description: * 设我们有到单链表的一个节点的引用，而且保证它不是该表的最后的节点。我们没有到任何其他 * 节点的引用(除非通过后面的一些链)。描述一个O(1)算法，该算法逻辑上从该链表删除存储在 * 这样一个节点上的值，同时保持链表的完整性。(提示：涉及下一个节点。) * @Date: Created in 22:41 2020/7/8 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem3_37</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SingleList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> singleList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> node1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> node2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> node3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node3<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>node3<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>node1<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> node4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node4<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">addBefore</span><span class="token punctuation">(</span>node4<span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleList<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SingleList</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token class-name">SingleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>tail<span class="token punctuation">;</span>        size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">SingleList</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span><span class="token punctuation">{</span>        head<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        tail<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>tail<span class="token punctuation">;</span>        size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBefore</span><span class="token punctuation">(</span><span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node<span class="token punctuation">,</span>anyType data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token operator">=</span>node1<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token operator">==</span>tail<span class="token punctuation">)</span><span class="token punctuation">{</span>            node<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            tail<span class="token operator">=</span>node<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node1<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node1<span class="token punctuation">.</span>next<span class="token operator">!=</span>tail<span class="token punctuation">)</span><span class="token punctuation">{</span>            node1<span class="token operator">=</span>node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        node1<span class="token punctuation">.</span>next<span class="token operator">=</span>  node<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token operator">=</span>tail<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> node<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">!=</span>tail<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>    <span class="token keyword">private</span> anyType data<span class="token punctuation">;</span>    <span class="token class-name">SingleNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">SingleNode</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">SingleNode</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">,</span><span class="token class-name">SingleNode</span><span class="token generics"><span class="token punctuation">&lt;</span>anyType<span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> anyType <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>anyType data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-37-单链表-在迭代器位置前插入-和删除当前位置"><a href="#3-37-单链表-在迭代器位置前插入-和删除当前位置" class="headerlink" title="3.37 单链表 在迭代器位置前插入 和删除当前位置"></a>3.37 单链表 在迭代器位置前插入 和删除当前位置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">设单链表用到一个头节点和一个尾节点来实现。描述下述操作的常数时间算法：a<span class="token punctuation">.</span>在位置<span class="token function">p</span><span class="token punctuation">(</span>由一个迭代器给出<span class="token punctuation">)</span>前插入一项x。b<span class="token punctuation">.</span>删除存储在位置<span class="token function">p</span><span class="token punctuation">(</span>由一个迭代器给出<span class="token punctuation">)</span>的项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>（a）在位置p之后添加位置p上的节点的副本；然后将位置p中存储的值更改为x。 </li><li>（b）设置p.data = p.next.data并设置p.next = p.next.next。尾节点保证始终存在下一个节点。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap02-AlgorithmAnalysiss</title>
      <link href="2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/"/>
      <url>2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E4%B8%BB%E8%A6%81%E8%AE%A8%E8%AE%BA%E9%97%AE%E9%A2%98">主要讨论问题</a></li><li><a href="#%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80">数学基础</a></li><li><a href="#%E5%88%86%E6%9E%90%E9%97%AE%E9%A2%98">分析问题</a><ul><li><a href="#%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C%E9%97%AE%E9%A2%98">最大子序和问题</a></li><li><a href="#%E5%88%86%E6%9E%90%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E5%87%86%E5%88%99">分析运行时间准则</a></li><li><a href="#%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C%E9%97%AE%E9%A2%98%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%AE%97%E6%B3%95">最大子序和问题的四种算法</a><ul><li><a href="#on%5E3-on%5E2-%E7%9B%B4%E8%A7%82%E6%B3%95-%E8%AE%A1%E7%AE%97%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C">O(N^3) O(N^2) 直观法 计算每个元素的最大子序和</a></li><li><a href="#onlogn-%E5%88%86%E6%B2%BB%E6%B3%95%E9%80%92%E5%BD%92">O(NlogN) 分治法递归</a></li><li><a href="#on--%E8%BE%B9%E8%B5%B0-%E8%BE%B9%E7%AE%97">O(N)  边走 边算</a></li></ul></li><li><a href="#%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84%E5%AF%B9%E6%95%B0">运行中的对数</a><ul><li><a href="#%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE">折半查找</a></li><li><a href="#%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0">欧几里得算法计算最大公约数</a></li><li><a href="#%E5%B9%82%E5%87%BD%E6%95%B0">幂函数</a></li></ul></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#27-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4">2.7 程序执行时间</a></li><li><a href="#28-%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA0n%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%AD%97%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95">2.8 生成一个（0，N）的随机数字的三种方法</a></li><li><a href="#211-%E4%B8%8D%E5%90%8Con%E7%9A%84%E8%8A%B1%E8%B4%B9%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83">2.11 不同O（N）的花费时间比较</a></li><li><a href="#214-%E8%AE%A1%E7%AE%97%E5%A4%9A%E9%A1%B9%E5%BC%8F">2.14 计算多项式</a></li><li><a href="#215-%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE">2.15 折半查找</a></li><li><a href="#216-gcd-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%9B%A0%E6%95%B0">2.16 gcd 最小公因数</a></li><li><a href="#217-%E6%9C%80%E5%B0%8F%E5%AD%90%E5%BA%8F%E5%92%8C-%E6%9C%80%E5%B0%8F%E6%AD%A3%E5%AD%90%E5%BA%8F%E5%92%8C">2.17 最小子序和 最小正子序和</a></li><li><a href="#218-%E5%87%BD%E6%95%B0%E6%B1%82%E9%9B%B6%E7%82%B9">2.18 函数求零点</a></li><li><a href="#219-%E7%BB%99%E8%AE%A1%E7%AE%97%E7%9A%84%E5%AD%90%E5%BA%8F%E5%92%8C%E5%8A%A0%E4%B8%8A%E5%9D%90%E6%A0%87">2.19 给计算的子序和加上坐标</a></li><li><a href="#220-%E7%AE%97%E7%B4%A0%E6%95%B0-o%E6%A0%B9%E5%8F%B7n">2.20 算素数 O(根号n)</a></li><li><a href="#221%E7%AD%9B%E9%80%89%E5%88%A0%E9%99%A4%E8%AE%A1%E7%AE%97%E5%B0%8F%E4%BA%8En%E7%9A%84%E6%89%80%E6%9C%89%E7%B4%A0%E6%95%B0">2.21筛选删除计算小于N的所有素数</a></li><li><a href="#223%E9%9D%9E%E9%80%92%E5%BD%92%E5%BF%AB%E9%80%9F%E6%B1%82%E5%B9%82">2.23非递归快速求幂</a></li><li><a href="#226%E5%AF%BB%E6%89%BE%E4%B8%BB%E5%85%83%E7%B4%A0-%E6%AC%A1%E6%95%B0%E5%A4%A7%E4%BA%8En2-on%E6%AC%A1">2.26寻找主元素 （次数大于n/2) O(N)次</a></li><li><a href="#227%E6%9F%A5%E6%89%BEnn-%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5on">2.27查找N*N 有序矩阵O（N）</a></li><li><a href="#228-%E8%AE%A1%E7%AE%97%E6%95%B0%E7%BB%84%E4%B8%A4%E6%95%B0%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E6%9C%80%E5%A4%A7%E5%80%BC">2.28 计算数组两数加减乘除最大值</a></li><li><a href="#229-%E5%9C%A8%E6%88%91%E4%BB%AC%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%A8%A1%E5%9E%8B%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E5%81%87%E8%AE%BE%E6%95%B4%E6%95%B0%E5%85%B7%E6%9C%89%E5%9B%BA%E5%AE%9A%E9%95%BF%E5%BA%A6%E6%98%AF%E9%87%8D%E8%A6%81%E7%9A%84">2.29 在我们的计算机模型中为什么假设整数具有固定长度是重要的?</a></li><li><a href="#231-%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%AC%AC15%E8%A1%8C%E7%9A%84%E8%AF%AD%E5%8F%A5%E6%98%AFlowmid%E8%80%8C%E4%B8%8D%E6%98%AFlowmid1%E8%BF%99%E4%B8%AA%E7%A8%8B%E5%BA%8F%E8%BF%98%E8%83%BD%E6%AD%A3%E7%A1%AE%E8%BF%90">2.31 折半查找程序的第15行的语句是low=mid而不是low=mid+1。这个程序还能正确运</a></li><li><a href="#232-%E5%AE%9E%E7%8E%B0%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE%E4%BD%BF%E5%BE%97%E5%9C%A8%E6%AF%8F%E6%AC%A1%E8%BF%AD%E4%BB%A3%E4%B8%AD%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1%E4%BA%8C%E8%B7%AF%E6%AF%94%E8%BE%83%E8%AF%BE%E6%96%87%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%BD%BF%E7%94%A8%E4%BA%86%E4%B8%89%E8%B7%AF%E6%AF%94%E8%BE%83%E5%81%87%E8%AE%BE%E5%8F%AA">2.32 实现折半查找使得在每次迭代中只执行一次二路比较。(课文中的实现使用了三路比较。假设只</a></li></ul></li></ul><!-- /TOC --><h1 id="主要讨论问题"><a href="#主要讨论问题" class="headerlink" title="主要讨论问题"></a>主要讨论问题</h1><ul><li>如何估计程序需要时间</li><li>如何将一个程序运行时间从天降低到秒甚至更少</li><li>粗心使用递归的后果</li><li>将数自乘得幂，计算两个数最大公因数的非常有效方法</li></ul><h1 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h1><p><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/1.png"></p><ul><li><p>第一个定义<font color="red" font="" size="4">(大O标记法)</font>：某个点N0开始 c*f(N)总是大于T（N)  比如T(N)=1000N f(N)=N^2 N0=1000 c=1<br>或者N0=10 c=100  1000N=O(N^2)  增长率小于等于f(N); <font color="red" font="" size="4">(上界)</font></p></li><li><p>第二个定义增长率大于等于f(N);<font color="red" font="" size="4">(下界)</font></p></li><li><p>第三个定义增长率等于f(N);</p></li><li><p>第三个定义增长率小于f(N);</p></li></ul><blockquote><p>例子 N^3 比 N^2 增长快 可以说  N^2=O(N^3)  N^3=∩(N^2) </p></blockquote><blockquote><p>f(N)=N^2 和g(N)=2N^2 增长率一样 f(N)=O(g(N)) f(N)=∩(g(N))都对 用f(N)=θ(N^2)最好<br>准确</p></blockquote><p><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/2.png"></p><p><font color="red" font="" size="4">洛必达来计算相对增长率</font></p><p><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/3.png"></p><h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><p>Tavg 反应典型 行为Tworst 反应对任何输入的性能保证 Tbest 没什么意义<br>以下只考虑算法 不考虑实现 <font color="red" font="" size="4">编译器和操作系统</font></p><h2 id="最大子序和问题"><a href="#最大子序和问题" class="headerlink" title="最大子序和问题"></a>最大子序和问题</h2><p><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/4.png"><br>小量输入不值得<br><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/5.png"></p><h2 id="分析运行时间准则"><a href="#分析运行时间准则" class="headerlink" title="分析运行时间准则"></a>分析运行时间准则</h2><ul><li><p>for准则 一般只看for 就行 从内往外</p></li><li><p>if-else 准则  取最长运行时间的</p></li><li><p>其中的方法也用运行时间带入进去</p><p>注意递归的分析<br><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/6.png"><br><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/7.png"><br>慢的原因<br>计算fn(n-1)实际上算了fn(n-2)  违反递归第四条准则</p></li></ul><h2 id="最大子序和问题的四种算法"><a href="#最大子序和问题的四种算法" class="headerlink" title="最大子序和问题的四种算法"></a>最大子序和问题的四种算法</h2><h3 id="O-N-3-O-N-2-直观法-计算每个元素的最大子序和"><a href="#O-N-3-O-N-2-直观法-计算每个元素的最大子序和" class="headerlink" title="O(N^3) O(N^2) 直观法 计算每个元素的最大子序和"></a>O(N^3) O(N^2) 直观法 计算每个元素的最大子序和</h3><h3 id="O-NlogN-分治法递归"><a href="#O-NlogN-分治法递归" class="headerlink" title="O(NlogN) 分治法递归"></a>O(NlogN) 分治法递归</h3><pre class="line-numbers language-none"><code class="language-none">计算前一半 和 后一半最大子序  中间的最大子序 然后把包含前一半最后一个元素的最大子序和后一半第一个元素的最大子序相加<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="O-N-边走-边算"><a href="#O-N-边走-边算" class="headerlink" title="O(N)  边走 边算"></a>O(N)  边走 边算</h3><p><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/8.png"></p><p><font color="red" font="" size="4">也叫联机算法 任意时刻的输出都是最大的</font></p><h2 id="运行中的对数"><a href="#运行中的对数" class="headerlink" title="运行中的对数"></a>运行中的对数</h2><p>一个问题常数时间O(1)消减成一小部分    后面的性能就是 O(logN)</p><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnyType</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">AnyType</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span> <span class="token class-name">AnyType</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token class-name">AnyType</span> x <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span> low <span class="token operator">+</span> high <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> a<span class="token punctuation">[</span> mid <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> a<span class="token punctuation">[</span> mid <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>   <span class="token comment">// Found</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> NOT_FOUND<span class="token punctuation">;</span>     <span class="token comment">// NOT_FOUND is defined as -1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="欧几里得算法计算最大公约数"><a href="#欧几里得算法计算最大公约数" class="headerlink" title="欧几里得算法计算最大公约数"></a>欧几里得算法计算最大公约数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span> <span class="token keyword">long</span> m<span class="token punctuation">,</span> <span class="token keyword">long</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> n <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> rem <span class="token operator">=</span> m <span class="token operator">%</span> n<span class="token punctuation">;</span>        m <span class="token operator">=</span> n<span class="token punctuation">;</span>        n <span class="token operator">=</span> rem<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red" font="" size="4"> 定理：M&gt;N M mod N &lt; M/2</font><br>所以算法时间 O(logN)</p><h3 id="幂函数"><a href="#幂函数" class="headerlink" title="幂函数"></a>幂函数</h3><p><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/9.png"></p><p>直接就O(N)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isEven</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow</span><span class="token punctuation">(</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isEven</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写成 return pow( x , n / 2 )*pow(x,n/2);会使运行时间不在是 O(logn)</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">pow</span><span class="token punctuation">(</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="2-7-程序执行时间"><a href="#2-7-程序执行时间" class="headerlink" title="2.7 程序执行时间"></a>2.7 程序执行时间</h2><p><img src="/2020/06/05/data-structures-and-algorithms-chap02-algorithmanalysiss/12.png"></p><p>注意是O(N^5)  不是O(N^4)</p><h2 id="2-8-生成一个（0，N）的随机数字的三种方法"><a href="#2-8-生成一个（0，N）的随机数字的三种方法" class="headerlink" title="2.8 生成一个（0，N）的随机数字的三种方法"></a>2.8 生成一个（0，N）的随机数字的三种方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_8 * @Author: Wibur * @Description: * 假设需要生成前N个整数的一个随机置换。例如，14，3，1，5，2)和(3，1，4，2，5)就是合 * 法的置换，但(5，4，1，2，1)则不是，因为数1出现两次而数3却没有。这个程序常常用于模 * 拟一些算法。我们假设存在一个随机数生成器r， 它有方法rand Int(i， j) ， 它以相同的概率 * 生成i和j之间的整数。下面是三个算法： * 1.如下填入从a[0]到a[n-1]的数组a；为了填人a[i]，生成随机数直到它不同于已经生成的 * a[0]，a[1]，…，a[i-1]时再将其填人a[i]。 * 2.同算法(1) ， 但是要保存一个附加的数组， 称为used数组。当一个随机数ran最初被放人数 * 组a的时候， 置used[ran] =true。这就是说， 当用一个随机数填入a[i] 时， 可以用一步 * 来测试是否该随机数已经被使用，而不是像第一个算法那样(可能)用i步测试。 * 3.填写该数组使得a[i]=i+1。然后 * for(i=1; i&lt;n; i++) * swap References(a[i] ， a[rand Int(0， i) ] ) ; * @Date: Created in 17:00 2020/6/9 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_8</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 随机数生成器randInt(i,j)，它以相同的概率生成i和j之间的一个整数。     *     * @param i     * @param j     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 生成区间[i,j]的随机数</span>        <span class="token keyword">return</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法一：填入从a[0]到a[n-1]的数组a，为了填入a[i]，生成随机数直到它不同于已经生成的a[0],a[1],...,a[i-1]时，再将其填入a[i]。     *     * 时间复杂度为O(N^2)     * @param a     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">randFun1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法二：同方法一，但是要保存一个附加的数组，称为used数组。当一个随机数ran最初被放入数组a的时候，置used[ran] = true。     * 这就是说，当用一个随机数填入a[i]时，可以用一步来测试是否该随机数已经被使用。     *     * 时间复杂度为O(N)     * @param a     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">randFun2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            used<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法三：填写该数组使得a[i]=i+1。然后for(i=1; i&lt;n; i++)     *                                     swapReferences(a[i], a[randInt(0,i)]);     * @param a     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">randFun3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//随机交换位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">swapReferences</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swapReferences</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 打印数组     *     * @param arr     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem2_8</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Problem2_8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">randInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//        rand.randFun1(a);</span><span class="token comment">//        rand.randFun2(a);</span>        rand<span class="token punctuation">.</span><span class="token function">randFun3</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-11-不同O（N）的花费时间比较"><a href="#2-11-不同O（N）的花费时间比较" class="headerlink" title="2.11 不同O（N）的花费时间比较"></a>2.11 不同O（N）的花费时间比较</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_11 * @Author: Wibur * @Description: * @Date: Created in 22:35 2020/6/10 * @Versuin: 1.0 */</span><span class="token keyword">class</span> <span class="token class-name">Problem2_11</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> m <span class="token operator">&lt;</span> n <span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span> n<span class="token punctuation">,</span> m <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>            <span class="token keyword">return</span> m<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span> n<span class="token punctuation">,</span> m <span class="token operator">%</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">probRelPrime</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> rel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tot<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">gcd</span><span class="token punctuation">(</span> i<span class="token punctuation">,</span> j <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>                    rel<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> rel <span class="token operator">/</span> tot<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">64000</span><span class="token punctuation">;</span> n <span class="token operator">*=</span> <span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> prob <span class="token operator">=</span> <span class="token function">probRelPrime</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">500</span> <span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> elapsed <span class="token operator">=</span> <span class="token punctuation">(</span> end <span class="token operator">-</span> start <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> <span class="token string">"%4d"</span><span class="token punctuation">,</span> n <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> <span class="token string">"\t%d"</span><span class="token punctuation">,</span> elapsed <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> <span class="token string">"\t%.9f"</span><span class="token punctuation">,</span> elapsed <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n <span class="token operator">/</span> n <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> <span class="token string">"\t%.12f"</span><span class="token punctuation">,</span> elapsed <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n <span class="token operator">/</span> n <span class="token operator">/</span> n <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> <span class="token string">"\t%.9f"</span><span class="token punctuation">,</span> elapsed <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n <span class="token operator">/</span> n <span class="token operator">/</span> <span class="token punctuation">(</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// if( n &gt;= 10000 )</span>            <span class="token comment">//     n += 4000;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-14-计算多项式"><a href="#2-14-计算多项式" class="headerlink" title="2.14 计算多项式"></a>2.14 计算多项式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_14 * @Author: Wibur * @Description: * 考虑下述算法(称为Horner法则) 计算f(X) = * poly=0； * for(i=n； i&gt;=0； i--) * poly=x*poly+a[i] ； * a jx'的值： * @Date: Created in 22:35 2020/6/10 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_14</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">calculateFx</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> ploy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ploy<span class="token operator">=</span>x<span class="token operator">*</span>ploy<span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ploy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">calculateFx</span><span class="token punctuation">(</span><span class="token number">3.02</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-15-折半查找"><a href="#2-15-折半查找" class="headerlink" title="2.15 折半查找"></a>2.15 折半查找</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Data-Structures * @description: * 给出一个有效的算法来确定在整数Af&lt;A ， &lt; Ag &lt; … &lt; An的数组中是否存在整数i使得A ， = i 。 你   *  的 算 法的运行时间是多少? * @author: scorpinxia * @create: 2020-06-08 10:30 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_15</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">==</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">==</span> high <span class="token operator">?</span> high <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                high<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">binarySearch1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-16-gcd-最小公因数"><a href="#2-16-gcd-最小公因数" class="headerlink" title="2.16 gcd 最小公因数"></a>2.16 gcd 最小公因数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_16 * @Author: Wibur * @Description: *  *  基 于 下 列 各式编写另外的ged算法(其中a&gt; b) *  ·gcd(a， b) =2gcd(a/2， b/2)若a和b均为偶数。 *  ·gcd(a， b) =gcd(a/2， b)若a为偶数，b为奇数。 *  ·gcd(a， b) =gcd(a， b/2)若a为奇数，b为偶数。 *  ·gcd(a， b) =gcd((a+b) /2， (a-b) /2)若a和b均为奇数。 * @Date: Created in 16:36 2020/6/8 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_16</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> t<span class="token operator">=</span>a<span class="token operator">%</span>b<span class="token punctuation">;</span>            a<span class="token operator">=</span>b<span class="token punctuation">;</span>            b<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd1</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> t<span class="token operator">=</span>a<span class="token punctuation">;</span>            a<span class="token operator">=</span>b<span class="token punctuation">;</span>            b<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">gcd1</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd2</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd4</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd2</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> t<span class="token operator">=</span>a<span class="token punctuation">;</span>            a<span class="token operator">=</span>b<span class="token punctuation">;</span>            b<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">gcd1</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd2</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd4</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd3</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> t<span class="token operator">=</span>a<span class="token punctuation">;</span>            a<span class="token operator">=</span>b<span class="token punctuation">;</span>            b<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">gcd1</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd2</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd4</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">gcd4</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span><span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> t<span class="token operator">=</span>a<span class="token punctuation">;</span>            a<span class="token operator">=</span>b<span class="token punctuation">;</span>            b<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">gcd1</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd2</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd3</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">gcd4</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">1932</span><span class="token punctuation">,</span><span class="token number">584</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">gcd1</span><span class="token punctuation">(</span><span class="token number">1932</span><span class="token punctuation">,</span><span class="token number">584</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-17-最小子序和-最小正子序和"><a href="#2-17-最小子序和-最小正子序和" class="headerlink" title="2.17 最小子序和 最小正子序和"></a>2.17 最小子序和 最小正子序和</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_17 * @Author: Wibur * @Description: * 给出有效的算法(及其运行时间分析)： * a.求最小子序列和。 * *b.求最小的正子序列和。 * *c.求最大子序列乘积。 * @Date: Created in 19:51 2020/6/8 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_17</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> maxSum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            maxSum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>maxSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//不考虑全负数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubArray1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> maxSum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span>maxSum<span class="token punctuation">)</span><span class="token punctuation">{</span>                maxSum<span class="token operator">=</span>sum<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> minSum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            minSum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>minSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">minSubArrayPostive</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>b<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>sum<span class="token punctuation">;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minPosSum<span class="token operator">=</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">:</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> t<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">-</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token operator">&gt;</span>b<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>k<span class="token operator">&amp;&amp;</span>t<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>minPosSum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>minPosSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minPosSum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxSubArrayMul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> thisSum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxMulSum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> neg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                thisSum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>neg<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            thisSum<span class="token operator">*=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxMulSum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>thisSum<span class="token punctuation">,</span>maxMulSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>neg<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> maxMulSum<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> maxMulSum1<span class="token operator">=</span>a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            thisSum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    thisSum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                thisSum<span class="token operator">*=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                maxMulSum1<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>thisSum<span class="token punctuation">,</span>maxMulSum1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxMulSum<span class="token punctuation">,</span>maxMulSum1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 快速排序     * 1.从数组中选择一个数作为基准数。     * 2.分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边     * 3.再对左右区间重复第2步，直到各区间只有一个数     *     * @param arr     * @param low     * @param high     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 进行第一轮排序获取分割点     *     * @param arr     * @param low     * @param high     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>        <span class="token keyword">int</span> small <span class="token operator">=</span> low <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//将比pivot值小的数放到左边</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>                small<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>high<span class="token punctuation">,</span>small <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> small <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Node</span> t<span class="token operator">=</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a3<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArray</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArray</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArray</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArray1</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArray1</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArray1</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minSubArray</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minSubArray</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minSubArray</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Problem2_17</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem2_17</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">minSubArrayPostive</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">minSubArrayPostive</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">minSubArrayPostive</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArrayMul</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArrayMul</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">maxSubArrayMul</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-18-函数求零点"><a href="#2-18-函数求零点" class="headerlink" title="2.18 函数求零点"></a>2.18 函数求零点</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_18 * @Author: Wibur * @Description: * 数值分析中一个重要的问题是对某个任意的函数f找出方程f(X)=0的一个解。如果该函数是连 * 续的并有两个点low和high使得f(low) 和f(high) 符号相反， 那么在low和high之间必然存在一 * 个根， 并且这个根可以通过折半查找求得。写出一个函数， 以f、low和high为参数， 并且解出一 * 个零点。(为了实现一个泛型函数作为参数， 我们传递一个函数对象， 让该对象实现Function * 接口， 而这个Function接口含有一个方法f) 为保证能够终止， 你必须要做什么? * @Date: Created in 21:04 2020/6/9 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_18</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token operator">*</span>a<span class="token operator">*</span>a<span class="token operator">*</span>a<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token operator">*</span>a<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">findZero</span><span class="token punctuation">(</span><span class="token class-name">Function</span> fun<span class="token punctuation">,</span><span class="token keyword">double</span> low<span class="token punctuation">,</span><span class="token keyword">double</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0.002</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">*</span>fun<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                low<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                high<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem2_18</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Problem2_18</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">findZero</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1.278442</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-19-给计算的子序和加上坐标"><a href="#2-19-给计算的子序和加上坐标" class="headerlink" title="2.19 给计算的子序和加上坐标"></a>2.19 给计算的子序和加上坐标</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_19 * @Author: Wibur * @Description: * 课文中最大相连子序列和算法均不给出具体序列的任何指示。将这些算法修改使得它们以单个 * 对象的形式返回最大子序列的值以及具体序列的那些相应下标。 * @Date: Created in 21:19 2020/6/9 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_19</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> maxSum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sum<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> high<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> low1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> high1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sum<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    low<span class="token operator">=</span>i<span class="token punctuation">;</span>                    high<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    high<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span>maxSum<span class="token punctuation">)</span><span class="token punctuation">{</span>                    low1<span class="token operator">=</span>low<span class="token punctuation">;</span>                    high1<span class="token operator">=</span>high<span class="token punctuation">;</span>                    maxSum<span class="token operator">=</span>sum<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>maxSum<span class="token punctuation">,</span>low1<span class="token punctuation">,</span>high1<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a3<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">maxSubArray</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">maxSubArray</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">maxSubArray</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-20-算素数-O-根号n"><a href="#2-20-算素数-O-根号n" class="headerlink" title="2.20 算素数 O(根号n)"></a>2.20 算素数 O(根号n)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_20 * @Author: Wibur * @Description: * a.编写一个程序来确定正整数N是否是素数。 * b.你的程序在最坏情形下的运行时间是多少(用N表示)?(你应该能够以O(√N)来完成这项工作) * c.令B等于的二进制表示法中的位数。B的值是多少? * d.你的程序在最坏情形下的运行时间是什么(用B表示)? * e.比较确定一个20(二进制)位的数是否是素数和确定一个40(二进制)位的数是否是素数的运行 * 时间。 * .用N或B给出运行时间更合理吗?为什么? * @Date: Created in 21:49 2020/6/9 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_20</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-21筛选删除计算小于N的所有素数"><a href="#2-21筛选删除计算小于N的所有素数" class="headerlink" title="2.21筛选删除计算小于N的所有素数"></a>2.21筛选删除计算小于N的所有素数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_21 * @Author: Wibur * @Description: * 厄拉多塞(Eras to the nes) 筛是一种用于计算小于N的所有素数的方法。我们从制作整数2到Ｎ的 * 表开始。找出最小的未被删除的整数i，打印i，然后删除i，2i，3i，…。当i&gt;√N时，算法终止。 * 该算法的运行时间是多少? * @Date: Created in 21:55 2020/6/9 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_21</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Erastothenes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">findMinNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">=</span><span class="token function">findMinNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMinNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Erastothenes</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-23非递归快速求幂"><a href="#2-23非递归快速求幂" class="headerlink" title="2.23非递归快速求幂"></a>2.23非递归快速求幂</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_23 * @Author: Wibur * @Description:用循环做的话，当然不能直接死乘。举个例子： * 3 ^ 999 = 3 * 3 * 3 * … * 3 * 直接乘要做998次乘法。但事实上可以这样做，先求出2^k次幂： * 3 ^ 2 = 3 * 3 * 3 ^ 4 = (3 ^ 2) * (3 ^ 2) * 3 ^ 8 = (3 ^ 4) * (3 ^ 4) * 3 ^ 16 = (3 ^ 8) * (3 ^ 8) * 3 ^ 32 = (3 ^ 16) * (3 ^ 16) * 3 ^ 64 = (3 ^ 32) * (3 ^ 32) * 3 ^ 128 = (3 ^ 64) * (3 ^ 64) * 3 ^ 256 = (3 ^ 128) * (3 ^ 128) * 3 ^ 512 = (3 ^ 256) * (3 ^ 256) * 再相乘： * 3 ^ 999 = 3 ^ (512 + 256 + 128 + 64 + 32 + 4 + 2 + 1) *             = (3 ^ 512) * (3 ^ 256) * (3 ^ 128) * (3 ^ 64) * (3 ^ 32) * (3 ^ 4) * (3 ^ 2) * 3 * 这样只要做16次乘法。即使加上一些辅助的存储和运算，也比直接乘高效得多（尤其如果这里底数是成百上千位的大数字的话）。 * 我们发现，把999转为2进制数：1111100111，其各位就是要乘的数。这提示我们利用求二进制位的算法（其中mod是模运算）： * @Date: Created in 14:38 2020/6/10 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_23</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">int</span> result<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEven</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">*</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                a <span class="token operator">*=</span> a<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 非递归方法     *    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">pow2</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> pow <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEven</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pow <span class="token operator">*=</span> x<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x <span class="token operator">*=</span> x<span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> isEven <span class="token punctuation">(</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">pow2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-26寻找主元素-（次数大于n-2-O-N-次"><a href="#2-26寻找主元素-（次数大于n-2-O-N-次" class="headerlink" title="2.26寻找主元素 （次数大于n/2) O(N)次"></a>2.26寻找主元素 （次数大于n/2) O(N)次</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_26 * @Author: Wibur * @Description: * 设该数出现的次数为x，则x满足n/2+1&lt;=x&lt;=n；所以可以想象如果该数和其余的数全部相抵消的话，至少还剩1个。 * 我们可以从前往后遍历，设key为第一个数，key出现的次数为count，初始化为1，代表key出现了一次。 * 从前往后，如果某个数不等于key，则它俩抵消，key出现的次数减一； * 如果等于key，则key出现的次数加1，如果key出现的次数变成了0，则说明key已经用完了，所以需要重新初始化key为另一个数。 * 重复以上步骤，因为一定有一个数大于n/2，所以遍历到最后剩下的数则是要求的数。 * @Date: Created in 16:08 2020/6/10 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_26</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMainElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">int</span> key<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mark<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> mark<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">else</span>           <span class="token punctuation">{</span>mark<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mark<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                key<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                mark<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isMainElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">&gt;=</span>arr<span class="token punctuation">.</span>length<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span>    <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mainEle<span class="token operator">=</span><span class="token function">findMainElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMainElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mainEle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the main ele is "</span><span class="token operator">+</span>mainEle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"there is no main Ele"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-27查找N-N-有序矩阵O（N）"><a href="#2-27查找N-N-有序矩阵O（N）" class="headerlink" title="2.27查找N*N 有序矩阵O（N）"></a>2.27查找N*N 有序矩阵O（N）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_27 * @Author: Wibur * @Description: * 输人是一个NxN数字矩阵并且已经读人内存。每一行均从左到右递增。每一列则从上到下递 * 增。给出一个O(N)最坏情形算法以决定数X是否在该矩阵中。 * @Date: Created in 16:58 2020/6/10 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_27</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> aim <span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> find <span class="token operator">=</span><span class="token function">searchIncreasedMaxtrix</span><span class="token punctuation">(</span>aim<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">searchIncreasedMaxtrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> aim<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token generics"><span class="token punctuation">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">&amp;</span><span class="token operator">&amp;</span>j<span class="token punctuation">&gt;</span></span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>aim<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>aim<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-28-计算数组两数加减乘除最大值"><a href="#2-28-计算数组两数加减乘除最大值" class="headerlink" title="2.28 计算数组两数加减乘除最大值"></a>2.28 计算数组两数加减乘除最大值</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap02</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem2_28 * @Author: Wibur * @Description: *   使用正数的数组a设计有效的算法以确定： *   a.a[j]+a[i]的最大值，其中j≥i。 *   b.a[j]-a[i]的最大值，其中j≥i。 *   c.a[j]*a[i]的最大值，其中j≥i。 *   d.a[j]/[i]的最大值，其中j≥i。 * @Date: Created in 17:20 2020/6/10 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem2_28</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMaxAddPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> secondMax<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>                secondMax<span class="token operator">=</span>max<span class="token punctuation">;</span>                max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> secondMax<span class="token operator">+</span>max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMaxSubstactPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token punctuation">{</span> min<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token operator">-</span>min<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMaxMultiplyPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> secondMax<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>                secondMax<span class="token operator">=</span>max<span class="token punctuation">;</span>                max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> secondMax<span class="token operator">*</span>max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMaxDividePermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token punctuation">{</span> min<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token operator">/</span>min<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">findMaxAddPermutation</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findMaxDividePermutation</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findMaxMultiplyPermutation</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">findMaxSubstactPermutation</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-29-在我们的计算机模型中为什么假设整数具有固定长度是重要的"><a href="#2-29-在我们的计算机模型中为什么假设整数具有固定长度是重要的" class="headerlink" title="2.29 在我们的计算机模型中为什么假设整数具有固定长度是重要的?"></a>2.29 在我们的计算机模型中为什么假设整数具有固定长度是重要的?</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">样就可以假定整数的加减乘除运算可以在单位时间内处理完<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-31-折半查找程序的第15行的语句是low-mid而不是low-mid-1。这个程序还能正确运"><a href="#2-31-折半查找程序的第15行的语句是low-mid而不是low-mid-1。这个程序还能正确运" class="headerlink" title="2.31 折半查找程序的第15行的语句是low=mid而不是low=mid+1。这个程序还能正确运"></a>2.31 折半查找程序的第15行的语句是low=mid而不是low=mid+1。这个程序还能正确运</h2><p>行吗?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">不行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-32-实现折半查找使得在每次迭代中只执行一次二路比较。-课文中的实现使用了三路比较。假设只"><a href="#2-32-实现折半查找使得在每次迭代中只执行一次二路比较。-课文中的实现使用了三路比较。假设只" class="headerlink" title="2.32 实现折半查找使得在每次迭代中只执行一次二路比较。(课文中的实现使用了三路比较。假设只"></a>2.32 实现折半查找使得在每次迭代中只执行一次二路比较。(课文中的实现使用了三路比较。假设只</h2><p>有方法less Than是可用的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">可以放弃，但是需要遍历所有循环 无法跳转<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data-Structures-and-Algorithms-chap01-BaseIdea</title>
      <link href="2020/06/01/data-structures-and-algorithms-chap01-baseidea/"/>
      <url>2020/06/01/data-structures-and-algorithms-chap01-baseidea/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%90%88%E7%90%86%E7%9A%84%E7%AE%97%E6%B3%95%E5%AE%8C%E5%85%A8%E6%94%B9%E5%8F%98%E6%80%A7%E8%83%BD">合理的算法完全改变性能</a></li><li><a href="#%E9%80%92%E5%BD%92%E5%87%86%E5%88%99">递归准则</a></li><li><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%E5%92%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9C%89%E5%8C%85%E8%A3%85%E7%B1%BB">泛型的重要性和为什么要有包装类</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E9%80%9A%E9%85%8D%E7%AC%A6">基本通配符</a></li><li><a href="#-%E8%BF%90%E7%AE%97%E7%AC%A6">&lt;&gt; 运算符</a></li><li><a href="#%E5%B8%A6%E6%9C%89%E9%99%90%E5%88%B6%E7%9A%84%E9%80%9A%E9%85%8D%E7%AC%A6">带有限制的通配符</a><ul><li><a href="#%E9%80%9A%E9%85%8D%E7%AC%A6">通配符</a></li><li><a href="#%E4%B8%8A%E7%95%8C%E9%80%9A%E9%85%8D%E7%AC%A6%E5%AD%90%E7%B1%BB%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6">上界通配符（子类型通配符）</a></li><li><a href="#%E4%B8%8B%E7%95%8C%E9%80%9A%E9%85%8D%E7%AC%A6">下界通配符</a></li><li><a href="#%E6%96%B9%E6%B3%95%E5%89%8D%E7%9A%84%E6%B3%9B%E5%9E%8B">方法前的泛型</a></li></ul></li><li><a href="#%E6%B3%9B%E5%9E%8Bstatic">泛型static</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E9%99%90%E7%95%8C">类型限界</a><ul><li><a href="#pecs-%E5%8E%9F%E5%88%99">PECS 原则</a></li></ul></li><li><a href="#%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">类型擦除</a></li><li><a href="#%E6%B3%9B%E5%9E%8B%E7%9A%84%E9%99%90%E5%88%B6">泛型的限制</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8D%E8%A1%8C">基本类型不行</a></li><li><a href="#instanceof-%E6%A3%80%E6%B5%8B">Instanceof 检测</a></li><li><a href="#%E6%B3%9B%E5%9E%8B%E7%B1%BB-static-%E6%96%B9%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%9D%87%E4%B8%8D%E5%8F%AF%E5%BC%95%E7%94%A8%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F-%E5%9B%A0%E4%B8%BA%E7%B1%BB%E6%93%A6%E9%99%A4%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E4%B8%8D%E5%AD%98%E5%9C%A8">泛型类 static 方法作用域均不可引用类的类型变量 因为类擦除类型变量不存在</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1">函数对象</a></li></ul></li><li><a href="#%E4%B9%A0%E9%A2%98">习题</a><ul><li><a href="#11-%E9%80%89%E6%8B%A9%E6%9C%80%E5%A4%A7%E5%80%BC">1.1 选择最大值</a></li><li><a href="#12-%E5%AD%97%E8%B0%9C%E9%97%AE%E9%A2%98">1.2 字谜问题</a></li><li><a href="#%E9%80%92%E5%BD%92%E6%B1%82double">递归求double</a></li><li><a href="#14-include">1.4 #include</a></li><li><a href="#15%E9%80%92%E5%BD%92%E6%B1%82%E4%BA%8C%E8%BF%9B%E5%88%B61%E6%95%B0%E7%9B%AE">1.5递归求二进制1数目</a></li><li><a href="#16%E9%A9%B1%E5%8A%A8%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%92%E5%BD%92%E6%B1%82%E8%A7%A3%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%AF%E8%83%BD">1.6驱动字符串递归求解所有字符串可能</a></li><li><a href="#113%E6%B3%9B%E5%9E%8B%E7%B1%BB%E8%AE%BE%E8%AE%A1">1.13泛型类设计</a></li><li><a href="#114%E6%B3%9B%E5%9E%8Bcomparable">1.14泛型Comparable</a></li><li><a href="#115%E4%B8%8D%E5%90%8C%E6%8E%92%E5%BA%8F%E6%96%B9%E6%B3%95">1.15不同排序方法</a></li></ul></li></ul><!-- /TOC --><h1 id="合理的算法完全改变性能"><a href="#合理的算法完全改变性能" class="headerlink" title="合理的算法完全改变性能"></a>合理的算法完全改变性能</h1><h1 id="递归准则"><a href="#递归准则" class="headerlink" title="递归准则"></a>递归准则</h1><p>当编写递归例程时，关键是要牢记递归的四条基本法则：</p><ul><li>1.基准情形。必须总要有某些基准情形，它无需递归就能解出。</li><li>2.不断推进。对于那些需要递归求解的情形，每一次递归调用都必须要使状况朝向一种基<br>准情形推进冂</li><li>3.设计法则。假设所有的递归调用都能运行。</li><li>4.合成效益法则（compoundinterestrule)。在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作。</li></ul><p>第四条法则（连同它的名称一起）将在后面的章节证明是合理的。使用递归计算诸如斐波那契数之类简单数学数的值的想法一般来说不是一个好主意，其道理正是根据第四条法则。<br>只要在头脑中记住这些法则，递归程序设计就应该是简单明了的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printOut</span><span class="token punctuation">(</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span>  <span class="token comment">/* Print nonnegative n */</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&gt;=</span> <span class="token number">10</span> <span class="token punctuation">)</span>            <span class="token function">printOut</span><span class="token punctuation">(</span> n <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printDigit</span><span class="token punctuation">(</span> n <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//mod 耗时 化成右边就好很多 n%10=n-[n/10]*10</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printOut</span><span class="token punctuation">(</span> <span class="token number">1369</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="泛型的重要性和为什么要有包装类"><a href="#泛型的重要性和为什么要有包装类" class="headerlink" title="泛型的重要性和为什么要有包装类"></a>泛型的重要性和为什么要有包装类</h1><p>每个引用类型和Obejct兼容 但是8个基本类型却不可以 包装类就可以</p><h2 id="基本通配符"><a href="#基本通配符" class="headerlink" title="基本通配符"></a>基本通配符</h2><p><anytpye> <t></t></anytpye></p><h2 id="lt-gt-运算符"><a href="#lt-gt-运算符" class="headerlink" title="<> 运算符"></a>&lt;&gt; 运算符</h2><p>自动匹配左边的类型  简化开发    new Arraylist&lt;&gt;(); </p><h2 id="带有限制的通配符"><a href="#带有限制的通配符" class="headerlink" title="带有限制的通配符"></a>带有限制的通配符</h2><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p><font color="red" size="4">一般的，统配符不会出现在泛型类的声明上，而多用于使用泛型类或泛型方法。</font> </p><p>可以表示为 List&lt;?&gt;,意思是 元素类型未知的 List，不同于 List 其元素类型为 T。这个问号被称为通配符，它的元素类型可以匹配任何类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> age <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    name<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"icon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    age<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    number<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getData</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getData</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token comment">// 在此处使用通配符，则可以传入各种类型的 List 泛型，</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test date :"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上界通配符（子类型通配符）"><a href="#上界通配符（子类型通配符）" class="headerlink" title="上界通配符（子类型通配符）"></a>上界通配符（子类型通配符）</h3><p>首先理解车的例子：单车是车的子类，单车有车的特性可以代表车，但是车不能代表单车。即类型向上兼容向下不兼容。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ClassType</span><span class="token punctuation">&gt;</span></span> 该通配符为 <span class="token class-name">ClassType</span> 的所有子类型。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>编译器只知道类型是 <span class="token class-name">C</span> 或 <span class="token class-name">C</span> 的子类，所以有可能是 <span class="token class-name">C</span> <span class="token class-name">D</span> <span class="token class-name">E</span> <span class="token class-name">F</span> 其中一个类型，为保证类型安全不能添加除了 <span class="token keyword">null</span> 以外的任何元素，即使是 <span class="token class-name">C</span> 本身也不行<span class="token punctuation">(</span>车不能代表单车<span class="token punctuation">)</span>。<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>既然编译器不知道此时集合中的元素是 <span class="token class-name">C</span> <span class="token class-name">D</span> <span class="token class-name">E</span> <span class="token class-name">F</span> 的哪一个，返回类型只能是他们共同父类 <span class="token class-name">C</span> 类型。<span class="token class-name">Collection</span><span class="token operator">&lt;</span>？ extend <span class="token class-name">Shape</span><span class="token operator">&gt;</span> arr<span class="token class-name">T</span> ISA <span class="token class-name">Shape</span> <span class="token punctuation">(</span>继承或者实现类或方法<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/01/data-structures-and-algorithms-chap01-baseidea/1.png"></p><h3 id="下界通配符"><a href="#下界通配符" class="headerlink" title="下界通配符"></a>下界通配符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>编译器只知道类型是 <span class="token class-name">C</span> 或者 <span class="token class-name">C</span> 的父类，所以有可能是 <span class="token class-name">A</span> <span class="token class-name">B</span> <span class="token class-name">C</span> 其中一个类型。编译器知道下界是 <span class="token class-name">C</span> ，根据类型向上兼容所以可以添加的元素是 <span class="token class-name">C</span> 以及 <span class="token class-name">C</span> 的子类<span class="token punctuation">(</span>单车可以代表车<span class="token punctuation">)</span>。<span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>既然编译器不确定集合类型是 <span class="token class-name">A</span> <span class="token class-name">B</span> <span class="token class-name">C</span> 的哪一种，返回类型只能是他们的共同父类 <span class="token class-name">Object</span> 。特点：<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> 的 <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 被限制，<span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> 的 <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 被限制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法前的泛型"><a href="#方法前的泛型" class="headerlink" title="方法前的泛型"></a>方法前的泛型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test05<span class="token punctuation">.</span>myTest</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Fruit"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Apple"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Person"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token comment">//主类，文件名ClassName.java</span>          <span class="token keyword">void</span> <span class="token function">show_1</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show_1  "</span><span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">show_2</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show_2  "</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">show_3</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show_3  "</span><span class="token operator">+</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ClassName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Fruit</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Apple</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show_1 演示________________________"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_1</span><span class="token punctuation">(</span> f <span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_1</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        o.show_1( p );  把这行代码去掉注释看一下，是不能编译通过的。因为在</span><span class="token comment">//        ClassName&lt;Fruit&gt;中已经限定了全局的T为Fruit，所以不能再加入Person;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show_2 演示________________________"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_2</span><span class="token punctuation">(</span> f <span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_2</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_2</span><span class="token punctuation">(</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show_3 演示________________________"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_3</span><span class="token punctuation">(</span> f <span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_3</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>        o<span class="token punctuation">.</span><span class="token function">show_3</span><span class="token punctuation">(</span> p <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型static"><a href="#泛型static" class="headerlink" title="泛型static"></a>泛型static</h2><p>代替Object的非泛型方法 能得到编译错误<br><img src="/2020/06/01/data-structures-and-algorithms-chap01-baseidea/2.png"></p><h2 id="类型限界"><a href="#类型限界" class="headerlink" title="类型限界"></a>类型限界</h2><p>找最大值 要保证传入的type是可以有实现comparable的<br><img src="/2020/06/01/data-structures-and-algorithms-chap01-baseidea/3.png"></p><ul><li>方法一：public static <anytpye extend="" comparable=""></anytpye></li><li>方法二：comparable接口现在是泛型<br>public static &lt;Anytpye extend comparable<anytpye>&gt;</anytpye></li><li><font color="red">方法三:</font><br>假设shape 实现类Comparable《shape》 square 继承shape square IS-A comparable《shape》 但他IS-NOT-A comparable《square》<br>编译器将接受类型T的数组，只是使得T实现Comparable《S》接口 T IS-A S</li></ul><p><img src="/2020/06/01/data-structures-and-algorithms-chap01-baseidea/4.png"></p><h3 id="PECS-原则"><a href="#PECS-原则" class="headerlink" title="PECS 原则"></a>PECS 原则</h3><pre class="line-numbers language-none"><code class="language-none">&lt;? extends C&gt; 适合大量做获取操作的情景，&lt;? super C&gt; 适合大量做添加操作的情景。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>泛型类可以通过编译器类型擦除变成非泛型</p><p>好处：泛型生成代码和之前的差不多 运行也不会快 但是类型转换不用放在代码里 编译器来类型检验</p><h2 id="泛型的限制"><a href="#泛型的限制" class="headerlink" title="泛型的限制"></a>泛型的限制</h2><h3 id="基本类型不行"><a href="#基本类型不行" class="headerlink" title="基本类型不行"></a>基本类型不行</h3><h3 id="Instanceof-检测"><a href="#Instanceof-检测" class="headerlink" title="Instanceof 检测"></a>Instanceof 检测</h3><p><img src="/2020/06/01/data-structures-and-algorithms-chap01-baseidea/5.png"><br>最后出错 因为instanceof 不过</p><h3 id="泛型类-static-方法作用域均不可引用类的类型变量-因为类擦除类型变量不存在"><a href="#泛型类-static-方法作用域均不可引用类的类型变量-因为类擦除类型变量不存在" class="headerlink" title="泛型类 static 方法作用域均不可引用类的类型变量 因为类擦除类型变量不存在"></a>泛型类 static 方法作用域均不可引用类的类型变量 因为类擦除类型变量不存在</h3><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><p>比如Comparator 对象 作为一个函数的用途</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="1-1-选择最大值"><a href="#1-1-选择最大值" class="headerlink" title="1.1 选择最大值"></a>1.1 选择最大值</h2><p>用书的两种方法 求第k个最大值<br>第一种：直接排序<br>第二种：排序k个后慢慢插入<br><img src="/2020/06/01/data-structures-and-algorithms-chap01-baseidea/6.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/*编写一个程序解决选择问题。令k=N/2。画出表格显示程序对于N种不同的值的运行时间。确定第k个最大值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要数组的数目："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入需要找到排序后的第几个值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token operator">=</span><span class="token function">generateRndomK</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> begin<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxK<span class="token operator">=</span><span class="token function">findMax1NumberK</span><span class="token punctuation">(</span>arrays<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"值为："</span><span class="token operator">+</span>maxK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二种方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        begin<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxK<span class="token operator">=</span><span class="token function">findMax1NumberK</span><span class="token punctuation">(</span>arrays<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"值为："</span><span class="token operator">+</span>maxK<span class="token punctuation">)</span><span class="token punctuation">;</span>        end<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"耗时"</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMax1NumberK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    t<span class="token operator">=</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findMax2NumberK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    t<span class="token operator">=</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>array<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>k <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&gt;</span> j<span class="token punctuation">;</span> l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        array<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRndomK</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateRndom1K</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-字谜问题"><a href="#1-2-字谜问题" class="headerlink" title="1.2 字谜问题"></a>1.2 字谜问题</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @description: 问题描述：输入是由一些字母和单词构成的二维数组，目标是找出字谜中的单词，这些单词可以是水平、垂直或沿对角线以任何方向放置。 *   编写一个程序求解字谜游戏问题 *   t h i s     找出 this、two、fat、that *   w a t s *   o a h g *   f g d t */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_2</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_LENGTH<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"this"</span><span class="token punctuation">,</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"fat"</span><span class="token punctuation">,</span><span class="token string">"that"</span><span class="token punctuation">,</span><span class="token string">"dgf"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> twoDimensionalChar<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">findWords</span><span class="token punctuation">(</span>twoDimensionalChar<span class="token punctuation">,</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findWords</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> aim<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ArrayList&lt;Character&gt; characterList=new ArrayList&lt;&gt;();</span>        <span class="token class-name">StringBuffer</span> stringBuffer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//source[0][0]='f';</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">.</span>length <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右上</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">,</span>l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//左下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token generics"><span class="token punctuation">&lt;</span>source<span class="token punctuation">.</span>length<span class="token operator">&amp;</span><span class="token operator">&amp;</span>l<span class="token punctuation">&gt;</span></span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span>l<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//右下</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">,</span>l<span class="token operator">=</span>j<span class="token punctuation">;</span> k <span class="token operator">&lt;</span>source<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span>l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stringBuffer<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stringBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token operator">:</span>aim             <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="递归求double"><a href="#递归求double" class="headerlink" title="递归求double"></a>递归求double</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token comment">/** * @description: 只使用处理I/O的print Digit方法， 编写一种方法以输出任意double型量(可以是负的) 。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_3</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">output</span><span class="token punctuation">(</span><span class="token number">675454.65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">double</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//正负号</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">//整数</span>            <span class="token keyword">long</span> digit <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>digit <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">printDigit</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">//小数点</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//小数部分</span>            <span class="token keyword">double</span> decimal <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//取整使用(long)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>decimal <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printDigit</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDigit</span><span class="token punctuation">(</span><span class="token keyword">double</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printDigit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不可遗漏long</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不可遗漏long</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">long</span> digit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printDigit</span><span class="token punctuation">(</span>num<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">-</span> digit<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//这里会出现误差错误</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/*PS:Java中所有数字都是带符号的,没有unsigned,int在java中是固定的32bits,表示的范围为-2^31到2^31-1-2147483648到2147483647才是正确的！ 10位-----------------------------------------------------------------------------------------------System.out.println(Integer.MAX_VALUE); //2的31次方-1,10个数位，正的20亿左右,用在钱上面不一定够System.out.println(Integer.MIN_VALUE); //负的2的31次方2147483647-2147483648-----------------------------------------------------------------------------------------------System.out.println(Long.MAX_VALUE); //2的63次方-1, 19个数位，很大了,可放心用在钱上面System.out.println(Long.MIN_VALUE); //负的2的63次方9223372036854775807-9223372036854775808-----------------------------------------------------------------------------------------------System.out.println(Float.MAX_VALUE); //2的128次方-1, 38个数位，比long多了一倍,这个主要用来做简单数学精确运算使用System.out.println(Float.MIN_VALUE); //2的-149次方3.4028235E381.4E-45-----------------------------------------------------------------------------------------------System.out.println(Double.MAX_VALUE); //2的1024次方-1,308个数位，是float数位的10倍，主要用来做复杂运算和天文运算System.out.println(Double.MIN_VALUE); //2的-1024次方1.7976931348623157E3084.9E-324*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-include"><a href="#1-4-include" class="headerlink" title="1.4 #include"></a>1.4 #include</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem1_4 * @Author: Wibur * @Description: * #inc1ude filename * 的语句， 它将filename读人并将其插入到include语句处。include语句可以嵌套； 换句话说， * 文件filename本身还可以包含include语句， 但是显然一个文件在任何链接中都不能包含它自 * 己。编写一个程序， 使它读入被一些include语句修饰的文件并且输出这个文件。 * @Date: Created in 21:08 2020/6/3 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_4</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">ProcessFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Filename</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">BufferedReader</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token class-name">Filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>file<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"#include"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//substring 子串是扩展到endindex-1的</span>                <span class="token class-name">ProcessFile</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">"#include"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//ProcessFile("D:\\java_projects\\DateStrcutures\\src\\chap01\\Problem1_1.java");</span>        <span class="token class-name">ProcessFile</span><span class="token punctuation">(</span><span class="token string">"src/chap01/TestProblem4_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5递归求二进制1数目"><a href="#1-5递归求二进制1数目" class="headerlink" title="1.5递归求二进制1数目"></a>1.5递归求二进制1数目</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem1_5 * @Author: Wibur * @Description: * 编写一种递归方法，它返回数Ｎ的二进制表示中1的个数。利用这样的事实：如果N是奇数，那 * 么其1的个数等于N/2的二进制表示中1的个数加1。 * @Date: Created in 21:41 2020/6/3 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_5</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token class-name">PrintBinaryPresent</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">PrintBinaryPresent</span><span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">PrintBinaryPresent</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">int</span>  <span class="token class-name">PrintBinaryPresent2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">N</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">PrintBinaryPresent</span><span class="token punctuation">(</span><span class="token class-name">N</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">N</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">PrintBinaryPresent</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6驱动字符串递归求解所有字符串可能"><a href="#1-6驱动字符串递归求解所有字符串可能" class="headerlink" title="1.6驱动字符串递归求解所有字符串可能"></a>1.6驱动字符串递归求解所有字符串可能</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem1_6 * @Author: Wibur * @Description: * 编写带有下列声明的例程： * publicvoid permute(String str) ； * private void permute(char[] str， int1ow， int high) ； * 第一个例程是个驱动程序， 它调用第二个例程并显示String str中的字符的所有排列。如果 * str是”abc”， 那么输出的串则是abc， acb， bac， bca， cab和cba。第二个例程使用递归。 * * @Date: Created in 22:13 2020/6/3 * @Versuin: 2.0 自己理解错了递归的含义 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_6</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Problem1_6</span> p6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Problem1_6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p6<span class="token punctuation">.</span><span class="token function">permute</span><span class="token punctuation">(</span> <span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">permute</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> low<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">permute</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> str<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-13泛型类设计"><a href="#1-13泛型类设计" class="headerlink" title="1.13泛型类设计"></a>1.13泛型类设计</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Probelm1_13 * @Author: Wibur * @Description: * 设计一个泛型类Collection， 它存储Object对象的集合(在数组中) ， 以及该集合的当前大小。 * 提供publi方法isEmpty、make Empty、insert、remove和is Present。方法is Present(x) * 当且仅当在该集合中存在(由equals定义) 等于x的一个Object时返回true。 * @Date: Created in 15:32 2020/6/4 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Probelm1_13</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BEGINSIZE<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAXSIZE<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>BEGINSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>            size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&gt;</span>MAXSIZE<span class="token operator">*</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content_new<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>MAXSIZE<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    content_new<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                content<span class="token operator">=</span>content_new<span class="token punctuation">;</span>                MAXSIZE<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">IsPresent</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-14泛型Comparable"><a href="#1-14泛型Comparable" class="headerlink" title="1.14泛型Comparable"></a>1.14泛型Comparable</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem1_14 * @Author: Wibur * @Description: * 设计一个泛型类OrderedCollection， 它存储Comparable的对象的集合(在数组中) ， 以及 * 该集合的当前大小。提供public方法isEmpty、make Empty、insert、remove、find Min和 * find Max。find Min和find Max分别返回该集合中最小的和最大的Comparable对象的引用 * (如果该集合为空， 则返回null) 。 * @Date: Created in 16:33 2020/6/4 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_14</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrderedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BEGINSIZE<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token keyword">private</span>  <span class="token keyword">int</span> MAXSIZE<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span>  <span class="token keyword">int</span> <span class="token function">getMAXSIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> MAXSIZE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">OrderedCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>BEGINSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>            size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            size<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&gt;</span>MAXSIZE<span class="token operator">*</span><span class="token number">3</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content_new<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>MAXSIZE<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    content_new<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                content<span class="token operator">=</span>content_new<span class="token punctuation">;</span>                MAXSIZE<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&gt;</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token class-name">IsPresent</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token class-name">Findmax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> maxindex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMAXSIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    maxindex<span class="token operator">=</span>i<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxindex<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxindex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMAXSIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxindex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        maxindex<span class="token operator">=</span>i<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxindex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">StringBuilder</span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>MAXSIZE <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">E</span> <span class="token class-name">FindMax</span><span class="token punctuation">(</span><span class="token class-name">OrderedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> maxindex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>e<span class="token punctuation">.</span><span class="token function">getMAXSIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxindex<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxindex<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxindex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>e<span class="token punctuation">.</span><span class="token function">getMAXSIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxindex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                   maxindex<span class="token operator">=</span>i<span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxindex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OrderedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OrderedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"asad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"rqwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"uqsdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"wrqwr3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"uysdwr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// c.insert(3); 错误</span>        c<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token class-name">FindMax</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span></span>Findmax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> a<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-15不同排序方法"><a href="#1-15不同排序方法" class="headerlink" title="1.15不同排序方法"></a>1.15不同排序方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap01</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Problem1_15 * @Author: Wibur * @Description: * 定义一个Rectangle类， 该类提供getLength和getwidth方法。利用图1-18中的find Max * 例程编写一种main方法， 该方法创建一个Rectangle数组并首先找出依面积最大的 * Rectangle对象， 然后找出依周长最大的Rectangle对象。 * @Date: Created in 19:43 2020/6/4 * @Versuin: 1.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Problem1_15</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> length<span class="token punctuation">;</span>        <span class="token keyword">int</span> width<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">circlLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token punctuation">]</span> r<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>r<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">=</span>i<span class="token punctuation">;</span>            r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>width<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rectangle</span><span class="token punctuation">&gt;</span></span> c1 <span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rectangle1<span class="token punctuation">,</span> <span class="token class-name">Rectangle</span> rectangle2<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> rectangle1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>rectangle2<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rectangle</span><span class="token punctuation">&gt;</span></span> c2 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token class-name">Rectangle</span> rectangle1<span class="token punctuation">,</span><span class="token class-name">Rectangle</span> rectangle2<span class="token punctuation">)</span><span class="token operator">-&gt;</span> rectangle1<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>rectangle2<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>r<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token punctuation">(</span>rectangle1<span class="token punctuation">,</span>rectangle2<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rectangle1<span class="token punctuation">.</span><span class="token function">circlLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>rectangle2<span class="token punctuation">.</span><span class="token function">circlLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">return</span> rectangle1<span class="token punctuation">.</span><span class="token function">circlLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>rectangle2<span class="token punctuation">.</span><span class="token function">circlLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>r<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Data Structures and Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-chap04-JVMTroubleshooting</title>
      <link href="2020/05/31/deepinjvm-chap04-jvmtroubleshooting/"/>
      <url>2020/05/31/deepinjvm-chap04-jvmtroubleshooting/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机性能监控、故障处理工具"><a href="#虚拟机性能监控、故障处理工具" class="headerlink" title="虚拟机性能监控、故障处理工具"></a>虚拟机性能监控、故障处理工具</h1><h2 id="基础故障处理工具"><a href="#基础故障处理工具" class="headerlink" title="基础故障处理工具"></a>基础故障处理工具</h2><h3 id="jps：虚拟机进程状况工具"><a href="#jps：虚拟机进程状况工具" class="headerlink" title="jps：虚拟机进程状况工具"></a>jps：虚拟机进程状况工具</h3><p>可以列出正在运行的虚拟机进<br>程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一<br>ID（LVMID，Local Virtual Machine Identifier）。<br><img src="/2020/05/31/deepinjvm-chap04-jvmtroubleshooting/1.png"></p><h3 id="jstat：虚拟机统计信息监视工具"><a href="#jstat：虚拟机统计信息监视工具" class="headerlink" title="jstat：虚拟机统计信息监视工具"></a>jstat：虚拟机统计信息监视工具</h3><p><img src="/2020/05/31/deepinjvm-chap04-jvmtroubleshooting/2.png"><br><img src="/2020/05/31/deepinjvm-chap04-jvmtroubleshooting/3.png"></p><h3 id="jinfo-JVM配置信息工具"><a href="#jinfo-JVM配置信息工具" class="headerlink" title="jinfo:JVM配置信息工具"></a>jinfo:JVM配置信息工具</h3><p><img src="/2020/05/31/deepinjvm-chap04-jvmtroubleshooting/4.png"></p><h3 id="jmap：Java内存映像工具"><a href="#jmap：Java内存映像工具" class="headerlink" title="jmap：Java内存映像工具"></a>jmap：Java内存映像工具</h3><p>和jinfo命令一样，jmap有部分功能在Windows平台下是受限的<br><img src="/2020/05/31/deepinjvm-chap04-jvmtroubleshooting/5.png"></p><h3 id="jhat：-虚拟机堆转储快照分析工具-基本不用"><a href="#jhat：-虚拟机堆转储快照分析工具-基本不用" class="headerlink" title="jhat： 虚拟机堆转储快照分析工具(基本不用)"></a>jhat： 虚拟机堆转储快照分析工具(基本不用)</h3><h3 id="jstack：Java堆栈跟踪工具"><a href="#jstack：Java堆栈跟踪工具" class="headerlink" title="jstack：Java堆栈跟踪工具"></a>jstack：Java堆栈跟踪工具</h3><h2 id="可视化故障处理工具"><a href="#可视化故障处理工具" class="headerlink" title="可视化故障处理工具"></a>可视化故障处理工具</h2><h3 id="JHSDB：基于服务性代理的调试工具"><a href="#JHSDB：基于服务性代理的调试工具" class="headerlink" title="JHSDB：基于服务性代理的调试工具"></a>JHSDB：基于服务性代理的调试工具</h3><h3 id="JConsole：Java监视与管理控制台"><a href="#JConsole：Java监视与管理控制台" class="headerlink" title="JConsole：Java监视与管理控制台"></a>JConsole：Java监视与管理控制台</h3><h4 id="内存监控（类似jstat"><a href="#内存监控（类似jstat" class="headerlink" title="内存监控（类似jstat)"></a>内存监控（类似jstat)</h4><h4 id="线程监控（类似jstack"><a href="#线程监控（类似jstack" class="headerlink" title="线程监控（类似jstack)"></a>线程监控（类似jstack)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 线程死锁等待演示 */</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynAddRunalbe</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SynAddRunalbe</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynAddRunalbe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynAddRunalbe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>死锁：面带for循环的版本最多运行两三次就会遇到线程死锁，程序无法结束。造成死锁的根本原<br>因是Integer.valueOf()方法出于减少对象创建次数和节省内存的考虑，会对数值为-128～127之间的<br>Integer对象进行缓存[2]，如果valueOf()方法传入的参数在这个范围之内，就直接返回缓存中的对象。<br>也就是说代码中尽管调用了200次Integer.valueOf()方法，但一共只返回了两个不同的Integer对象。假如<br>某个线程的两个synchronized块之间发生了一次线程切换，那就会出现线程A在等待被线程B持有的<br>Integer.valueOf(1)，线程B又在等待被线程A持有的Integer.valueOf(2)，结果大家都跑不下去的情况</p><p><img src="/2020/05/31/deepinjvm-chap04-jvmtroubleshooting/6.png"><br><img src="/2020/05/31/deepinjvm-chap04-jvmtroubleshooting/7.png"></p><h3 id="VisualVM：多合-故障处理工具-（All-in-One-Java-Troubleshooting-Tool）"><a href="#VisualVM：多合-故障处理工具-（All-in-One-Java-Troubleshooting-Tool）" class="headerlink" title="VisualVM：多合-故障处理工具 （All-in-One Java Troubleshooting Tool）"></a>VisualVM：多合-故障处理工具 （All-in-One Java Troubleshooting Tool）</h3><p>插件扩展支持  jDK9开始需要额外下载</p><blockquote><p><a href="https://visualvm.github.io/download.html">https://visualvm.github.io/download.html</a></p></blockquote><ul><li>显示虚拟机进程以及进程的配置、环境信息（jps、jinfo）。</li><li>监视应用程序的处理器、垃圾收集、堆、方法区以及线程的信息（jstat、jstack）。</li><li>dump以及分析堆转储快照（jmap、jhat）。</li><li>方法级的程序运行性能分析，找出被调用最多、运行时间最长的方法。</li><li>离线程序快照：收集程序的运行时配置、线程dump、内存dump等信息建立一个快照，可以将快<br>照发送开发者处进行Bug反馈。</li><li>其他插件带来的无限可能性。</li></ul><h3 id="Java-Mission-Control：可持续在线的监控工具"><a href="#Java-Mission-Control：可持续在线的监控工具" class="headerlink" title="Java Mission Control：可持续在线的监控工具"></a>Java Mission Control：可持续在线的监控工具</h3><p>JFR是一套内建在HotSpot虚拟机里面的监控和基于事件的信息搜集框架，与其他的监控工具（如<br>JProfiling）相比，Oracle特别强调它“可持续在线”（Always-On）的特性。也不是自带的</p><blockquote><p><a href="https://www.oracle.com/technetwork/java/javaseproducts/downloads/jmc7-downloads-5868868.html">https://www.oracle.com/technetwork/java/javaseproducts/downloads/jmc7-downloads-5868868.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-chap03-GarbageCollect</title>
      <link href="2020/05/31/deepinjvm-chap03-garbagecollect/"/>
      <url>2020/05/31/deepinjvm-chap03-garbagecollect/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h1><p>以下只指堆 因为栈内存分配和回收都具备确定性</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><h4 id="引用计数法特点"><a href="#引用计数法特点" class="headerlink" title="引用计数法特点"></a>引用计数法特点</h4><pre><code>简单，不错的算法，但是java主流虚拟机没用，很难解决对象相互循环引用</code></pre><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/5.png"><br>虚拟机并没有因为这两个对象互相引用就放弃回收它们</p><h3 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h3><p>java C# 都是这样<br>这个算法的基本思路就是通过<br>一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过<br>程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p><h4 id="可达性分析法特点"><a href="#可达性分析法特点" class="headerlink" title="可达性分析法特点"></a>可达性分析法特点</h4><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/6.png"></p><p>在Java技术体系里面，固定可作为GC Roots的对象包括以下几种：</p><ul><li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的<br>参数、局部变量、临时变量等。</li><li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</li><li>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</li><li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</li><li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如<br>NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</li><li>所有被同步锁（synchronized关键字）持有的对象。</li><li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li></ul><h3 id="引用问题"><a href="#引用问题" class="headerlink" title="引用问题"></a>引用问题</h3><p>JDK1.2之前reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称该reference数据是代表某块内存、某个对象的引用。</p><p>新的需求：<font color="red" size="4">如我们希望能描述一类对象：当内存空间还足够时，能保留在内存之中，如果内存空<br>间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象——很多系统的缓存功能都符合这样的应<br>用场景。</font></p><p>JDK1.2 之后</p><ul><li><p>强引用：是指在程序代码之中普遍存在的引用赋值，即类似“Object<br>obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回<br>收掉被引用的对象。</p></li><li><p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内<br>存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，<br>才会抛出内存溢出异常。在JDK 1.2版之后提供了SoftReference类来实现软引用。</p></li><li><p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的<br>存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚<br>引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供<br>了PhantomReference类来实现虚引用。</p></li></ul><h3 id="如何判定需要回收"><a href="#如何判定需要回收" class="headerlink" title="如何判定需要回收"></a>如何判定需要回收</h3><p>   可达分析后不可达目标<br>   两次标记：1.GC Roots 无<br>   需要执行finalize() ？ 不需要的话直接回收 假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。<br>   需要的就放入队列F-Queue里Finalizer线程第二次标记</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 此代码演示了两点： * 1.对象可以在被GC时自我拯救。 * 2.这种自救的机会只有一次，因为一个对象的finalize()方法最多只会被系统自动调用一次 * @author zzm */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">FinalizeEscapeGC</span> SAVE_HOOK <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes, i am still alive :)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finalize method executed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span>SAVE_HOOK <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        SAVE_HOOK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象第一次成功拯救自己</span>        SAVE_HOOK <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为Finalizer方法优先级很低，暂停0.5秒，以等待它</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SAVE_HOOK <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SAVE_HOOK<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no, i am dead :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 下面这段代码与上面的完全相同，但是这次自救却失败了</span>        SAVE_HOOK <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为Finalizer方法优先级很低，暂停0.5秒，以等待它</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SAVE_HOOK <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SAVE_HOOK<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"no, i am dead :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临<br>下一次回收，它的finalize()方法不会被再次执行，因此第二段代码的自救行动失败了。</p><p><font color="red">finalize()能做的所有工作，使用try-finally或者其他方式都可以做得更好、<br>更及时，所以笔者建议大家完全可以忘掉Java语言里面的这个方法。</font></p><h3 id="方法区回收"><a href="#方法区回收" class="headerlink" title="方法区回收"></a>方法区回收</h3><p>常量和堆区类似</p><p>一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。</li><li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如<br>OSGi、JSP的重加载等，否则通常是很难达成的。</li><li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方<br>法。</li></ul><p>Java虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是<br>和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了-<br>Xnoclassgc参数进行控制，还可以使用-verbose：class以及-XX：+TraceClass-Loading、-XX：<br>+TraceClassUnLoading查看类加载和卸载信息，其中-verbose：class和-XX+TraceClassLoading可以在Product版的虚拟机中使用</p><h2 id="垃圾收集算法-1"><a href="#垃圾收集算法-1" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="分代收集理论"><a href="#分代收集理论" class="headerlink" title="分代收集理论"></a>分代收集理论</h3><p>实质是一套符合大多数程序运行实际情况的经验法则，它建立在两个分<br>代假说之上：</p><ul><li>1）弱分代假说（Weak Generational Hypothesis）：绝大多数对象都是朝生夕灭的。</li><li>2）强分代假说（Strong Generational Hypothesis）：熬过越多次垃圾收集过程的对象就越难以消<br>亡。</li></ul><p>设计原则：回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区<br>域之中存储。只关注少量存活，低代价回收大量空间</p><p>有可能出现跨代引用，新生代被老年代引用，需额外遍历整<br>个老年代中所有对象来确保可达性分析结果的正确性</p><ul><li>3）跨代引用假说（Intergenerational Reference Hypothesis）：跨代引用相对于同代引用来说仅占极少数。<br>只需在新生代上建立一个全局的数据结构（该结构被称为“记忆集”，Remembered Set），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。</li></ul><h3 id="收集名词"><a href="#收集名词" class="headerlink" title="收集名词"></a>收集名词</h3><ul><li>部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为：<ul><li>新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。</li><li>老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。另外请注意“Major GC”这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。</li><li>混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收<br>集器会有这种行为。</li></ul></li><li>整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。</li></ul><p><font color="red">f新生代（Young）、老年代（Old）是HotSpot虚拟机，也是现在业界主流的命名方式。</font></p><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/7.png"><br>缺点：效率不稳定，标记的太多了 （不管你是标需要回收还是不需要回收的）；内存空间碎片化<br>想要申请连续大内存又需要GC</p><h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/8.png"><br>“半区复制”（Semispace Copying）的垃圾收集算法，但对于多数对象都是可回收的情况，算法需要复制的就是占少数的存活对象</p><p>缺点：这种复制回收算法的代价是将可用内存缩小为了原来的一半，空间浪费未免太多了一<br>点。</p><p>现在的商用Java虚拟机大多都优先采用了这种收集算法去回收<font color="red">新生代</font>。Appel式回收的具体做法是把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空<br>间。HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保（Handle Promotion）</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/9.png"></p><p>标记-清除算法与标记-整理算法的本质差异在于前者是一种非移动式的回收算法，而后者是移动<br>式的。是否移动回收后的存活对象是一项优缺点并存的风险决策：</p><ul><li>移动更新引用很慢必须暂停相对久的用户应用</li><li>不移动的碎片化问题 通过“分区空闲分配链<br>表”来解决内存分配问题（计算机硬盘存储大文件就不要求物理连续的磁盘空间，能够在碎片化的硬盘<br>上存储和访问就是通过硬盘分区表实现的）。内存的访问是用户程序最频繁的操作，甚至都没有之<br>一，假如在这个环节上增加了额外的负担，势必会直接影响应用程序的吞吐量。</li></ul><p>HotSpot虚拟机里面关注吞吐量的Parallel<br>Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的，这也从侧面印证这点。</p><p>另外，还有一种“和稀泥式”解决方案可以不在内存分配和访问上增加太大额外负担，做法是让虚<br>拟机平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经<br>大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。前面提到的基于标<br>记-清除算法的CMS收集器面临空间碎片过多时采用的就是这种处理办法。</p><h2 id="HotSpot算法细节"><a href="#HotSpot算法细节" class="headerlink" title="HotSpot算法细节"></a>HotSpot算法细节</h2><h3 id="根节点枚举加OopMap"><a href="#根节点枚举加OopMap" class="headerlink" title="根节点枚举加OopMap"></a>根节点枚举加OopMap</h3><p>虚拟机应当是有办法直接得到哪些地方存放着对象引用的。在HotSpot<br>的解决方案里，是使用一组称为OopMap（Ordinary Object Pointer，OOP）的数据结构来达到这个目的。一旦类加载动作完成的时候，<br>HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译（见第11章）过程中，也<br>会在特定的位置记录下栈里和寄存器里哪些位置是引用。</p><h3 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h3><p>在OopMap的协助下，HotSpot可以快速准确地完成GC Roots枚举。何时收集？<br>在安全点 比如长时间执行”的最明显特征就是指令序列的复用，例如方法调用、循环跳转、异常跳转<br>等都属于指令序列复用，所以只有具有这些功能的指令才会产生安全点。</p><ul><li>抢跑式中断 ：基本没用了</li><li>主动式中断（Voluntary Suspension）垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。轮询标志的地方和安全点是重合的</li></ul><h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>安全点机制保证了程序执行时，在不太长的时间内就会遇到可进入垃圾收集<br>过程的安全点。但是，程序“不执行”的时候呢？所谓的程序不执行就是没有分配处理器时间，典型的<br>场景便是用户线程处于Sleep状态或者Blocked状态，这时候线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己，虚拟机也显然不可能持续等待线程重新被激活分配处理器时间。对于<br>这种情况，就必须引入安全区域（Safe Region）来解决。</p><p>安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任<br>意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。</p><h3 id="记忆集与卡表"><a href="#记忆集与卡表" class="headerlink" title="记忆集与卡表"></a>记忆集与卡表</h3><p>讲解分代收集理论的时候，提到了为解决对象跨代引用所带来的问题，垃圾收集器在新生代中建<br>立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围。</p><ul><li>字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个<br>精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。</li><li>对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。</li><li>卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨代指针。</li></ul><p>第三种“卡精度”所指的是用一种称为“卡表”（Card Table）的方式去实现记忆集<br>卡表最简单的形式可以只是一个字节数组[2]，而HotSpot虚拟机确实也是这样做的。以下这行代<br>码是HotSpot默认的卡表标记逻辑[3]：</p><pre><code>CARD_TABLE [this address &gt;&gt; 9] = 0;</code></pre><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/10.png"><br>一个卡页的内存中通常包含不止一个对象，只要卡页内有一个（或更多）对象的字段存在着跨代<br>指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏（Dirty），没有则标识为0。</p><h3 id="写屏障"><a href="#写屏障" class="headerlink" title="写屏障"></a>写屏障</h3><p>对引用类型字段赋值 会产生通知 来维护记忆集的正确</p><h3 id="并发的可达性分析"><a href="#并发的可达性分析" class="headerlink" title="并发的可达性分析"></a>并发的可达性分析</h3><ul><li>白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是<br>白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。</li><li>黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代<br>表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对<br>象不可能直接（不经过灰色对象）指向某个白色对象。</li><li>灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。<br><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/11.png"></li></ul><p>要注意上面的情况 黑变白<br>当且仅当以下两个条件同时满足时，会产生“对象消失”的问<br>题，即原本应该是黑色的对象被误标为白色：</p><ul><li>赋值器插入了一条或多条从黑色对象到白色对象的新引用；</li><li>赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。</li></ul><p>因此，我们要解决并发扫描时的对象消失问题，只需破坏这两个条件的任意一个即可。由此分别<br>产生了两种解决方案：增量更新（Incremental Update）和原始快照（Snapshot At The Beginning，<br>SATB）。</p><ul><li><p>增量更新要破坏的是第一个条件，当黑色对象插入新的指向白色对象的引用关系时，就将这个新<br>插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫<br>描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象<br>了。</p></li><li><p>原始快照要破坏的是第二个条件，当灰色对象要删除指向白色对象的引用关系时，就将这个要删<br>除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描<br>一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来<br>进行搜索。</p></li></ul><p>以上无论是对引用关系记录的插入还是删除，虚拟机的记录操作都是通过写屏障实现的。在<br>HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新<br>来做并发标记的，G1、Shenandoah则是用原始快照来实现。</p><h2 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h2><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/15.png"></p><p>并行和并发都是并发编程中的专业名词，<br>在谈论垃圾收集器的上下文语境中，它们可以理解为：</p><ul><li>并行（Parallel）：并行描述的是多条垃圾收集器线程之间的关系，说明同一时间有多条这样的线<br>程在协同工作，通常默认此时用户线程是处于等待状态。</li><li>并发（Concurrent）：并发描述的是垃圾收集器线程与用户线程之间的关系，说明同一时间垃圾<br>收集器线程与用户线程都在运行。由于用户线程并未被冻结，所以程序仍然能响应服务请求，但由于<br>垃圾收集器线程占用了一部分系统资源，此时应用程序的处理的吞吐量将受到一定影响。</li></ul><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/12.png"><br>曾经（在JDK 1.3.1之前）是HotSpot虚拟机<strong>新生代收集器</strong>的唯一选择。<br>在用户桌面的应用场景以及近年来流行的部分微服务应用中，分配给虚<br>拟机管理的内存一般来说并不会特别大，Serial收集器对于运行在客户端模式下的虚拟机来说是一个很好的选择。</p><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/13.png"><br>ParNew可以说是HotSpot虚拟机中第一款退出历史舞台的垃圾收集器。</p><h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><p>和ParNew收集器类似 但是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能<br>地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。<br><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/14.png"><br>Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间<br>的-XX：MaxGCPauseMillis参数以及直接设置吞吐量大小的-XX：GCTimeRatio参数。</p><h3 id="Serial-old-收集器"><a href="#Serial-old-收集器" class="headerlink" title="Serial old 收集器"></a>Serial old 收集器</h3><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器</p><h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/16.png"></p><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很<br>大一部分的Java应用集中在互联网网站或者基于浏览器的B/S系统的服务端上，这类应用通常都会较为<br>关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验。CMS收集器就非<br>常符合这类应用的需求。</p><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/17.png"></p><p>缺点： </p><ul><li>处理器资源 大</li><li>“浮动垃圾”处理不了，并发标记的时候一直产生</li><li>“标记-清除”缺点</li></ul><h3 id="Garbage-First收集器（G1收集器"><a href="#Garbage-First收集器（G1收集器" class="headerlink" title="Garbage First收集器（G1收集器)"></a>Garbage First收集器（G1收集器)</h3><p>G1是一款主要面向服务端应用的垃圾收集器。衡量标准不再是它属于哪个分代，而<br>是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的Mixed GC模式。<br><font color="red" size="4"><br>G1开创的基于Region的堆内存布局是它能够实现这个目标的关键。虽然G1也仍是遵循分代收集理<br>论设计的，但其堆内存的布局与其他收集器有非常明显的差异：G1不再坚持固定大小以及固定数量的<br>分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果。</font><br><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/18.png"></p><ul><li>初始标记（Initial Marking）：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS<br>指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要<br>停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际<br>并没有额外的停顿。</li><li>并发标记（Concurrent Marking）：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆<br>里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以<br>后，还要重新处理SATB记录下的在并发时有引用变动的对象。</li><li>最终标记（Final Marking）：对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留<br>下来的最后那少量的SATB记录。</li><li>筛选回收（Live Data Counting and Evacuation）：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。<br><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/19.png"></li></ul><p><font color="red" size="4">目前在小内存应用上CMS的表现大概率仍然要会优于G1，而在大内存应用上G1则大多能发挥其<br>优势，这个优劣势的Java堆容量平衡点通常在6GB至8GB之间，</font></p><p>Region中还有一类特殊的Humongous区域，专门用来存储大对象。G1认为只要大小超过了一个<br>Region容量一半的对象即可判定为大对象。</p><h2 id="低延迟垃圾收集器"><a href="#低延迟垃圾收集器" class="headerlink" title="低延迟垃圾收集器"></a>低延迟垃圾收集器</h2><p>衡量垃圾收集器的三项最重要的指标是：内存占用（Footprint）、吞吐量（Throughput）和延迟<br>（Latency），三者共同构成了一个“不可能三角[1]”。三者总体的表现会随技术进步而越来越好，但是<br>要在这三个方面同时具有卓越表现的“完美”收集器是极其困难甚至是不可能的，一款优秀的收集器通<br>常最多可以同时达成其中的两项。</p><p>硬件规格提升，准确地说是内存的扩<br>大，处理能力变强、对延迟反而会带来负面的效果，这点也是很符合直观思维的：虚拟机要回收完整的1TB的堆内<br>存，毫无疑问要比回收1GB的堆内存耗费更多时间。由此，我们就不难理解为何延迟会成为垃圾收集<br>器最被重视的性能指标了。<br><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/20.png"><br>并发标记、并发回收、并发引用更新<br><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/24.png"></p><h3 id="Shenandoah收集器"><a href="#Shenandoah收集器" class="headerlink" title="Shenandoah收集器"></a>Shenandoah收集器</h3><p>不是Oracl 公司的<br>Shenandoah摒弃了在G1中耗费大量内存和计算资源去维护的记忆集，改用名为“连接矩阵”（Connection<br>Matrix）的全局数据结构来记录跨Region的引用关系，降低了处理跨代指针时的记忆集维护消耗，也降<br>低了伪共享问题（见3.4.4节）的发生概率。<br><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/21.png"></p><p><img src="/2020/05/31/deepinjvm-chap03-garbagecollect/22.png"><br>与用户进程对象并发移动（并行整理） 靠Brooks Pointer (利用句柄重定位 转发指针) </p><ul><li>1）收集器线程复制了新的对象副本；</li><li>2）用户线程更新对象的某个字段；</li><li>3）收集器线程更新转发指针的引用值为新副本地址。<br>需要同步，读屏障 </li></ul><h3 id="ZGC收集器"><a href="#ZGC收集器" class="headerlink" title="ZGC收集器"></a>ZGC收集器</h3><p>Oracl公司 与Shenandoah类似 在并发整理上也是读屏障 但是不是重定位指针，染色指针技术（Colored Pointer）技术，而ZGC的染色指针是最<br>直接的、最纯粹的，它直接把标记信息记在引用对象的指针上，对象打上三色标记（白色、黑色、灰色）</p><p>未来</p><h2 id="Epsilon收集器（不收集垃圾-、小应用-微服务）"><a href="#Epsilon收集器（不收集垃圾-、小应用-微服务）" class="headerlink" title="Epsilon收集器（不收集垃圾 、小应用 微服务）"></a>Epsilon收集器（不收集垃圾 、小应用 微服务）</h2><h2 id="收集器选择"><a href="#收集器选择" class="headerlink" title="收集器选择"></a>收集器选择</h2><p>应用程序的主要关注点是什么？</p><ul><li>如果是数据分析、科学计算类的任务，目标是能尽快算出结果，<br>那吞吐量就是主要关注点；</li><li>如果是SLA应用，那停顿时间直接影响服务质量，严重的甚至会导致事务<br>超时，这样延迟就是主要关注点；</li><li>而如果是客户端应用或者嵌入式应用，那垃圾收集的内存占用则是<br>不可忽视的。</li></ul><p>如果你有充足的预算但没有太多调优经验，那么一套带商业技术支持的专有硬件或者软件解决方<br>案是不错的选择，Azul公司以前主推的Vega系统和现在主推的Zing VM是这方面的代表，这样你就可以<br>使用传说中的C4收集器了。</p><ul><li>如果你虽然没有足够预算去使用商业解决方案，但能够掌控软硬件型号，使用较新的版本，同时<br>又特别注重延迟，那ZGC很值得尝试。</li><li>如果你对还处于实验状态的收集器的稳定性有所顾虑，或者应用必须运行在Win-dows操作系统<br>下，那ZGC就无缘了，试试Shenandoah吧。</li><li>如果你接手的是遗留系统，软硬件基础设施和JDK版本都比较落后，那就根据内存规模衡量一<br>下，对于大概4GB到6GB以下的堆内存，CMS一般能处理得比较好，而对于更大的堆内存，可重点考<br>察一下G1。</li></ul><h2 id="虚拟机及垃圾收集器日志"><a href="#虚拟机及垃圾收集器日志" class="headerlink" title="虚拟机及垃圾收集器日志"></a>虚拟机及垃圾收集器日志</h2><p>到JDK 9，这种混乱不堪的局面<br>才终于消失，HotSpot所有功能的日志都收归到了“-Xlog”参数上，这个参数的能力也相应被极大拓展<br>了：</p><pre><code>-Xlog[:[selector][:[output][:[decorators][:output-options]]]]</code></pre><p>命令行中最关键的参数是选择器（Selector），它由标签（Tag）和日志级别（Level）共同组成。<br>标签可理解为虚拟机中某个功能模块的名字，它告诉日志框架用户希望得到虚拟机哪些功能的日志输<br>出。垃圾收集器的标签名称为“gc”，由此可见，垃圾收集器日志只是HotSpot众多功能日志的其中一<br>项，全部支持的功能模块标签名如下所示：</p><p>日志级别从低到高，共有Trace，Debug，Info，Warning，Error，Off六种级别，日志级别决定了输<br>出信息的详细程度，默认级别为Info，HotSpot的日志规则与Log4j、SLF4j这类Java日志框架大体上是<br>一致的。另外，还可以使用修饰器（Decorator）来要求每行日志输出都附加上额外的内容，支持附加<br>在日志行上的信息包括：</p><ul><li>time：当前日期和时间。</li><li>uptime：虚拟机启动到现在经过的时间，以秒为单位。</li><li>timemillis：当前时间的毫秒数，相当于System.currentTimeMillis()的输出。</li><li>uptimemillis：虚拟机启动到现在经过的毫秒数。</li><li>timenanos：当前时间的纳秒数，相当于System.nanoTime()的输出。</li><li>uptimenanos：虚拟机启动到现在经过的纳秒数。</li><li>pid：进程ID。</li><li>tid：线程ID。</li><li>level：日志级别。</li></ul><p>·tags：日志输出的标签集。<br>如果不指定，默认值是uptime、level、tags这三个，此时日志输出类似于以下形式：</p><p>[3.080s][info][gc,cpu] GC(5) User=0.03s Sys=0.00s Real=0.01s</p><ul><li><p>1）查看GC基本信息，在JDK 9之前使用-XX：+PrintGC，JDK 9后使用-Xlog：gc：</p></li><li><p>2）查看GC详细信息，在JDK 9之前使用-XX：+PrintGCDetails，在JDK 9之后使用-X-log：gc<em>，<br>用通配符</em>将GC标签下所有细分过程都打印出来，如果把日志级别调整到Debug或者Trace（基于版面<br>篇幅考虑，例子中并没有），还将获得更多细节信息：</p></li><li><p>3）查看GC前后的堆、方法区可用容量变化，在JDK 9之前使用-XX：+PrintHeapAtGC，JDK 9之<br>后使用-Xlog：gc+heap=debug：</p></li><li><p>4）查看GC过程中用户线程并发时间以及停顿的时间，在JDK 9之前使用-XX：+Print-<br>GCApplicationConcurrentTime以及-XX：+PrintGCApplicationStoppedTime，JDK 9之后使用-Xlog：safepoint：</p></li><li><p>5）查看收集器Ergonomics机制（自动设置堆空间各分代区域大小、收集目标等内容，从Parallel收<br>集器开始支持）自动调节的相关信息。在JDK 9之前使用-XX：+PrintAdaptive-SizePolicy，JDK 9之后<br>使用-Xlog：gc+ergo*=trace：</p></li><li><p>6）查看熬过收集后剩余对象的年龄分布信息，在JDK 9前使用-XX：+PrintTenuring-Distribution，<br>JDK 9之后使用-Xlog：gc+age=trace：</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP First</title>
      <link href="2020/05/25/asp-first/"/>
      <url>2020/05/25/asp-first/</url>
      
        <content type="html"><![CDATA[<h1 id="ASP概述"><a href="#ASP概述" class="headerlink" title="ASP概述"></a>ASP概述</h1><h1 id="ASP是什么"><a href="#ASP是什么" class="headerlink" title="ASP是什么"></a>ASP是什么</h1><p>IIS 代表 Internet Information Services （Internet 信息服务）<br>ASP 代表 Active Server Pages （动态服务器页面）</p><h2 id="ASP-和-HTML-有何不同？"><a href="#ASP-和-HTML-有何不同？" class="headerlink" title="ASP 和 HTML 有何不同？"></a>ASP 和 HTML 有何不同？</h2><p>当浏览器请求某个 HTML 文件时，服务器会返回这个文件<br>当浏览器请求某个 ASP 文件时，IIS 将这个请求传递给 ASP 引擎。ASP 引擎会逐行地读取这个 ASP 文件，并执行文件中的脚本。最后，ASP 文件将以纯 HTML 的形式返回到浏览器。</p><h2 id="ASP好处"><a href="#ASP好处" class="headerlink" title="ASP好处"></a>ASP好处</h2><ul><li>动态地编辑、改变或者添加网页的任何内容</li><li>对由用户从 HTML 表单提交的查询或者数据作出响应</li><li>访问数据或者数据库，并向浏览器返回结果</li><li>为不同的用户定制网页，提高这些页面的可用性</li><li>用 ASP 替代 CGI 和 Perl 的优势在于它的简易性和速度</li><li>提供安全性保障 - •由于 ASP 代码不能从浏览器查看</li><li>优秀的 ASP 编程可最小化网络流量<br>Note注释：由于 ASP 脚本在服务器上运行，浏览器无需支持脚本就可以显示 ASP 文件！</li></ul>]]></content>
      
      
      <categories>
          
          <category> ASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5 Study</title>
      <link href="2020/05/25/html5-study/"/>
      <url>2020/05/25/html5-study/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#html%E5%9F%BA%E7%A1%80">html基础</a></li><li><a href="#html%E5%85%83%E7%B4%A0">html元素</a></li><li><a href="#html-%E5%B1%9E%E6%80%A7">html 属性</a></li><li><a href="#html%E9%93%BE%E6%8E%A5">html链接</a></li><li><a href="#html-%E5%A4%B4%E9%83%A8">html 头部</a></li><li><a href="#html-css%E6%B8%B2%E6%9F%93">html CSS渲染</a></li><li><a href="#html%E5%9B%BE%E5%83%8F">html图像</a></li><li><a href="#html%E8%A1%A8%E6%A0%BC">html表格</a></li><li><a href="#html%E5%88%97%E8%A1%A8">html列表</a></li><li><a href="#html-div-span">html div span</a></li><li><a href="#html-%E5%B8%83%E5%B1%80">html 布局</a></li><li><a href="#html-%E8%A1%A8%E5%8D%95">html 表单</a></li><li><a href="#html%E6%A1%86%E6%9E%B6%E5%A4%9A%E4%B8%AA%E7%BD%91%E9%A1%B5">html框架（多个网页）</a></li><li><a href="#html%E9%A2%9C%E8%89%B2">html颜色</a></li><li><a href="#html%E8%84%9A%E6%9C%AC">html脚本</a></li><li><a href="#html-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6">html 特殊字符</a></li><li><a href="#html-url-uniform-resource-locators">html URL （Uniform Resource Locators)</a></li><li><a href="#html5-%E7%94%BB%E5%B8%83canvas">html5 画布Canvas</a></li><li><a href="#html5-%E4%BC%B8%E7%BC%A9%E5%9B%BE%E5%83%8Fsvg">html5 伸缩图像SVG</a></li><li><a href="#html5-%E6%95%B0%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8Fmathml">html5 数学表达式MathML</a></li><li><a href="#html5-%E5%AE%9A%E4%BD%8D">html5 定位</a></li><li><a href="#html5-%E6%8B%96%E6%94%BE">html5 拖放</a></li><li><a href="#html5-%E8%A7%86%E9%A2%91">html5 视频</a></li><li><a href="#html5-%E9%9F%B3%E9%A2%91">html5 音频</a></li><li><a href="#html5-%E6%96%B0%E8%BE%93%E5%85%A5%E7%B1%BB%E5%9E%8B">html5 新输入类型</a></li><li><a href="#html5-%E6%96%B0%E8%AF%AD%E4%B9%89%E5%85%83%E7%B4%A0-%E5%B8%83%E5%B1%80%E7%9A%84">html5 新语义元素 布局的</a></li><li><a href="#html5-web%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8">html5 web本地存储</a></li><li><a href="#html5-web-sql">html5 Web SQL</a></li><li><a href="#html5-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%BC%93%E5%AD%98">html5 应用程序缓存</a></li><li><a href="#html5-web-worker">html5 Web Worker</a></li><li><a href="#html5-sse%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E4%BA%8B%E4%BB%B6server-sent-events">html5 SSE服务器发送事件(Server-Sent Events)</a></li></ul><!-- /TOC --><h1 id="html基础"><a href="#html基础" class="headerlink" title="html基础"></a>html基础</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>我的第一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我的第一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明html5</p><p><img src="/2020/05/25/html5-study/1.png"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://scorpinxia.github.io<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>链接我的博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html5-Study/1.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>258<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>39<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h1><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;&lt;/p&gt;之类的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="html-属性"><a href="#html-属性" class="headerlink" title="html 属性"></a>html 属性</h1><p>img <strong>src</strong>(属性)</p><ul><li>class</li><li>id </li><li>style</li><li>title</li></ul><h1 id="html链接"><a href="#html链接" class="headerlink" title="html链接"></a>html链接</h1><p>链接文本” 不必一定是文本。图片或其他 HTML 元素都可以成为链接。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>无边框的图片链接:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.runoob.com/html/html-tutorial.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html5-Study/1.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML 教程<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>32<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="html-头部"><a href="#html-头部" class="headerlink" title="html 头部"></a>html 头部</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> - 定义了HTML文档的标题使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span> 标签定义HTML文档的标题* 定义了浏览器工具栏的标题* 当网页添加到收藏夹时，显示在收藏夹中的标题* 显示在搜索引擎结果页面的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">&gt;</span></span> - 定义了所有链接的URL使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">&gt;</span></span> 定义页面中所有链接默认的链接目标地址。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.runoob.com/images/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">&gt;</span></span> - 提供了HTML文档的meta标记使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span><span class="token punctuation">&gt;</span></span> 元素来描述HTML文档的描述，关键词，作者，字符集等。为搜索引擎定义关键词:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keywords<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML, CSS, XML, XHTML, JavaScript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>为网页定义描述内容:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>免费 Web &amp; 编程 教程<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>定义网页作者:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Runoob<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>每30秒钟刷新当前页面:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">&gt;</span></span> 标签定义了文档与外部资源之间的关系。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span><span class="token punctuation">&gt;</span></span> 标签通常用于链接到样式表:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"> <span class="token selector">标签定义了HTML文档的样式文件引用地址.在&lt;style&gt; 元素中你也可以直接添加样式来渲染 HTML 文档:&lt;head&gt;&lt;style type="text/css"&gt;body</span> <span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">}</span><span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html-CSS渲染"><a href="#html-CSS渲染" class="headerlink" title="html CSS渲染"></a>html CSS渲染</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html">内部样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>外部样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mystyle.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html图像"><a href="#html图像" class="headerlink" title="html图像"></a>html图像</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pulpit.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pulpit<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>304<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>228<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>alt 代表无法载入图像时，替换文本属性告诉读者她们失去的信息图像映射<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>planetmap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0,82,126<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sun<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sun.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90,58,3<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mercury<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mercur.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>124,58,8<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Venus<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>venus.htm<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>该段代码中的shape指的是点击区域的形状，coords指的应该是链接区域在图片中的坐标（像素为单位）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html表格"><a href="#html表格" class="headerlink" title="html表格"></a>html表格</h1><p><a href="https://c.runoob.com/codedemo/3187">https://c.runoob.com/codedemo/3187</a>  好看的表格和CSS结合</p><h1 id="html列表"><a href="#html列表" class="headerlink" title="html列表"></a>html列表</h1><h1 id="html-div-span"><a href="#html-div-span" class="headerlink" title="html div span"></a>html div span</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html">HTML <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 元素HTML <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 元素是块级元素，它可用于组合其他 HTML 元素的容器。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 元素没有特定的含义。除此之外，由于它属于块级元素，浏览器会在其前后显示折行。如果与 CSS 一同使用，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 元素可用于对大的内容块设置样式属性。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span> 元素进行文档布局不是表格的正确用法。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span> 元素的作用是显示表格化的数据。HTML <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 元素HTML <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 元素是内联元素，可用作文本的容器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 元素也没有特定的含义。当与 CSS 一同使用时，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 元素可用于为部分文本设置样式属性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html-布局"><a href="#html-布局" class="headerlink" title="html 布局"></a>html 布局</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">width</span><span class="token punctuation">:</span>500px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFA500<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">margin-bottom</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>主要的网页标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFD700<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>菜单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>CSS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#EEEEEE<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>400px<span class="token punctuation">;</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>内容在这里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FFA500<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>版权 © runoob.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>&nbsp;<meta charset="utf-8">&nbsp;<title>菜鸟教程(runoob.com)</title>&nbsp;</meta charset="utf-8"><div id="container" style="width:500px"><div id="header" style="background-color:#FFA500;"><h1 style="margin-bottom:0;">主要的网页标题</h1></div><div id="menu" style="background-color:#FFD700;height:200px;width:100px;float:left;"><b>菜单</b><br>HTML<br>CSS<br>JavaScript</div><div id="content" style="background-color:#EEEEEE;height:200px;width:400px;float:left;">内容在这里</div><div id="footer" style="background-color:#FFA500;clear:both;text-align:center;">版权 © runoob.com</div></div> <p>或者用table</p><h1 id="html-表单"><a href="#html-表单" class="headerlink" title="html 表单"></a>html 表单</h1><form name="input" action="html_form_action.php" method="get">Username: <input type="text" name="user"><input type="submit" value="Submit"></form><form><p>你生活在哪个国家？</p><input type="radio" name="country" value="China" checked="checked">中国<br><input type="radio" name="country" value="the USA">美国</form><h1 id="html框架（多个网页）"><a href="#html框架（多个网页）" class="headerlink" title="html框架（多个网页）"></a>html框架（多个网页）</h1><p>通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。</p><iframe src="demo_iframe.htm" name="iframe_a"></iframe><p><a href="http://www.runoob.com" target="iframe_a">RUNOOB.COM</a></p><h1 id="html颜色"><a href="#html颜色" class="headerlink" title="html颜色"></a>html颜色</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html">可以用rgba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0.25<span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>通过 rbg 值设置背景颜色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>#FF00FF</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>通过16进制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>或者名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">background-color</span><span class="token punctuation">:</span>LightGoldenRodYellow</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>通过16进制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html脚本"><a href="#html脚本" class="headerlink" title="html脚本"></a>html脚本</h1> <meta charset="utf-8"> <title>菜鸟教程(runoob.com)</title>     <h1>我的第一段 JavaScript</h1><p id="demo">JavaScript 能改变 HTML 元素的样式。</p><script>function myFunction(){    x=document.getElementById("demo") // 找到元素    x.style.color="#ff0000";          // 改变样式}</script><button type="button" onclick="myFunction()">点击这里</button>    <h1 id="html-特殊字符"><a href="#html-特殊字符" class="headerlink" title="html 特殊字符"></a>html 特殊字符</h1><h1 id="html-URL-（Uniform-Resource-Locators"><a href="#html-URL-（Uniform-Resource-Locators" class="headerlink" title="html URL （Uniform Resource Locators)"></a>html URL （Uniform Resource Locators)</h1><pre class="line-numbers language-none"><code class="language-none">一个网页地址实例: http://www.runoob.com/html/html-tutorial.html 语法规则:scheme://host.domain:port/path/filename说明:scheme - 定义因特网服务的类型。最常见的类型是 httphost - 定义域主机（http 的默认主机是 www）domain - 定义因特网域名，比如 runoob.com:port - 定义主机上的端口号（http 的默认端口号是 80）path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。filename - 定义文档/资源的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html5-画布Canvas"><a href="#html5-画布Canvas" class="headerlink" title="html5 画布Canvas"></a>html5 画布Canvas</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>菜鸟教程(runoob.com)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">border</span><span class="token punctuation">:</span>1px solid #c3c3c3<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>您的浏览器不支持 HTML5 canvas 标签。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> c<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myCanvas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>fillStyle<span class="token operator">=</span><span class="token string">"#FF0000"</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html5-伸缩图像SVG"><a href="#html5-伸缩图像SVG" class="headerlink" title="html5 伸缩图像SVG"></a>html5 伸缩图像SVG</h1><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>190<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polygon</span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100,10 40,180 190,60 10,60 160,180<span class="token punctuation">"</span></span>  <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">fill</span><span class="token punctuation">:</span>lime<span class="token punctuation">;</span><span class="token property">stroke</span><span class="token punctuation">:</span>purple<span class="token punctuation">;</span><span class="token property">stroke-width</span><span class="token punctuation">:</span>5<span class="token punctuation">;</span><span class="token property">fill-rule</span><span class="token punctuation">:</span>evenodd<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html5-数学表达式MathML"><a href="#html5-数学表达式MathML" class="headerlink" title="html5 数学表达式MathML"></a>html5 数学表达式MathML</h1><h1 id="html5-定位"><a href="#html5-定位" class="headerlink" title="html5 定位"></a>html5 定位</h1><h1 id="html5-拖放"><a href="#html5-拖放" class="headerlink" title="html5 拖放"></a>html5 拖放</h1><h1 id="html5-视频"><a href="#html5-视频" class="headerlink" title="html5 视频"></a>html5 视频</h1><p>当前， <video> 元素支持三种视频格式： MP4, WebM, 和 Ogg:</video></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movie.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/ogg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>您的浏览器不支持Video标签。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>大多数是flash 播放<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="html5-音频"><a href="#html5-音频" class="headerlink" title="html5 音频"></a>html5 音频</h1><p>目前, <audio>元素支持三种音频格式文件: MP3, Wav, 和 Ogg:</audio></p><h1 id="html5-新输入类型"><a href="#html5-新输入类型" class="headerlink" title="html5 新输入类型"></a>html5 新输入类型</h1><ul><li>color</li><li>date</li><li>datetime</li><li>datetime-local</li><li>email</li><li>month</li><li>number</li><li>range</li><li>search</li><li>tel</li><li>time</li><li>url</li><li>week</li></ul>&nbsp;<meta charset="utf-8">&nbsp;<title>菜鸟教程(runoob.com)</title>&nbsp;</meta charset="utf-8"><form action="demo-form.php">  生日: <input type="date" name="bday">  <input type="submit"></form>&nbsp;<meta charset="utf-8">&nbsp;<title>菜鸟教程(runoob.com)</title>&nbsp;</meta charset="utf-8"><form action="demo-form.php">  数量 ( 1 到 5 之间): <input type="number" name="quantity" min="1" max="5">  <input type="submit"></form><p><b>注意:</b>Internet Explorer 9 及更早 IE 版本不支持 type="number" 。</p><h1 id="html5-新语义元素-布局的"><a href="#html5-新语义元素-布局的" class="headerlink" title="html5 新语义元素 布局的"></a>html5 新语义元素 布局的</h1><p><img src="/2020/05/25/html5-study/2.png"></p><h1 id="html5-web本地存储"><a href="#html5-web本地存储" class="headerlink" title="html5 web本地存储"></a>html5 web本地存储</h1><div style="border: 2px dashed #ccc;width:320px;text-align:center;">         <label for="sitename">网站名(key)：</label>      <input type="text" id="sitename" name="sitename" class="text">      <br>      <label for="siteurl">网 址(value)：</label>      <input type="text" id="siteurl" name="siteurl">      <br>      <input type="button" onclick="save()" value="新增记录">      <hr>      <label for="search_site">输入网站名：</label>      <input type="text" id="search_site" name="search_site">      <input type="button" onclick="find()" value="查找网站">      <p id="find_result"><br></p>  </div><h1 id="html5-Web-SQL"><a href="#html5-Web-SQL" class="headerlink" title="html5 Web SQL"></a>html5 Web SQL</h1><h1 id="html5-应用程序缓存"><a href="#html5-应用程序缓存" class="headerlink" title="html5 应用程序缓存"></a>html5 应用程序缓存</h1><h1 id="html5-Web-Worker"><a href="#html5-Web-Worker" class="headerlink" title="html5 Web Worker"></a>html5 Web Worker</h1><p>是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。<br></p>&nbsp;<meta charset="utf-8">&nbsp;<title>菜鸟教程(runoob.com)</title>&nbsp;</meta charset="utf-8"><p>计数： <output id="result"></output></p><button onclick="startWorker()">开始工作</button> <button onclick="stopWorker()">停止工作</button><p><strong>注意：</strong> Internet Explorer 9 及更早 IE 版本浏览器不支持 Web Workers.</p><script>var w;function startWorker() {    if(typeof(Worker) !== "undefined") {        if(typeof(w) == "undefined") {            w = new Worker("demo_workers.js");        }        w.onmessage = function(event) {            document.getElementById("result").innerHTML = event.data;        };    } else {        document.getElementById("result").innerHTML = "抱歉，你的浏览器不支持 Web Workers...";    }}function stopWorker() {     w.terminate();    w = undefined;}</script><h1 id="html5-SSE服务器发送事件-Server-Sent-Events"><a href="#html5-SSE服务器发送事件-Server-Sent-Events" class="headerlink" title="html5 SSE服务器发送事件(Server-Sent Events)"></a>html5 SSE服务器发送事件(Server-Sent Events)</h1><p>TML5 服务器发送事件（server-sent event）允许网页获得来自服务器的更新。</p>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
          <category> Base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepInJVM-chap02-MemoryRegion</title>
      <link href="2020/05/24/deepinjvm-chap02-memoryregion/"/>
      <url>2020/05/24/deepinjvm-chap02-memoryregion/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8">Java内存区域和内存溢出异常</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F">运行时数据区域</a><ul><li><a href="#%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">程序计数器</a></li><li><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">虚拟机栈</a><ul><li><a href="#%E5%BC%82%E5%B8%B8">异常</a></li></ul></li><li><a href="#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88">本地方法栈</a></li><li><a href="#java%E5%A0%86">Java堆</a></li><li><a href="#%E6%96%B9%E6%B3%95%E5%8C%BA">方法区</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0">运行时常量池</a></li></ul></li></ul></li><li><a href="#hotspot-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9%E8%B1%A1">HotSpot 虚拟机对象</a><ul><li><a href="#hotspot-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1">HotSpot 虚拟机创建对象</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80">对象的内存布局</a><ul><li><a href="#%E5%AF%B9%E8%B1%A1%E5%A4%B4">对象头</a></li><li><a href="#%E5%AE%9E%E4%BE%8B%E6%95%B0%E6%8D%AE">实例数据</a></li><li><a href="#%E5%AF%B9%E9%BD%90%E5%A1%AB%E5%85%85">对齐填充</a></li></ul></li><li><a href="#%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D">对象访问定位</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="Java内存区域和内存溢出异常"><a href="#Java内存区域和内存溢出异常" class="headerlink" title="Java内存区域和内存溢出异常"></a>Java内存区域和内存溢出异常</h1><h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="/2020/05/24/deepinjvm-chap02-memoryregion/1.png"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul><li>每个线程单独拥有</li><li>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地<br>址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）。</li><li>此内存区域是唯一一个在《Java虚拟机规范》中没有规定任何OutOfMemoryError情况的区域。</li></ul><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p><strong>描述的是Java方法执行的线程内存模型</strong>即每个方法执行都有</p><ul><li>局部变量表：基本数据类型 对象引用 内存空间编译时分配</li><li>操作数栈、动态连接、方法出口等<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4>对这个内存区域规定了两类异常状况：</li><li>如果线程请求的栈深度大于虚<br>拟机所允许的深度，将抛出StackOverflowError异常；</li><li>如果Java虚拟机栈容量可以动态扩展[2]，当栈扩<br>展时无法申请到足够的内存会抛出OutOfMemoryError异常。（HotSpot虚拟机栈容量不可以动态扩展，申请失败也会OOM）</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>与虚拟机栈相似 只是使用本地方法服务 也有StackOverflowError异常；OutOfMemoryError异常<br>甚至有的Java虚拟机（譬如Hot-Spot虚拟机）直接<br>就把本地方法栈和虚拟机栈合二为一。</p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>所有线程共享，存放对象<br>Java堆是垃圾收集器管理的内存区域 GC堆 Garbage Collected Heap</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>所有线程共享的内存区域，存储虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据</p><pre><code>垃圾收集行为在这个区域的确是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。</code></pre><p><font color="red" size="5">这区域的内存回<br>收目标主要是针对常量池的回收和对类型的卸载</font>，一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收有时又确实是必要的。</p><p>如果方法区无法满足新的内存分配需求时，将抛出<br>OutOfMemoryError异常。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ul><li><p>方法区的一部分，Class文件中除了有类的版本、字<br>段、方法、接口等描述信息外，还有一项信息是常量池表（Constant Pool Table），<font color="red" size="4">用于存放编译期生成的各种字面量与符号引用</font>，这部分内容将在类加载后存放到方法区的运行时常量池中</p></li><li><p>动态性 不一定在编译器，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p></li></ul><h2 id="HotSpot-虚拟机对象"><a href="#HotSpot-虚拟机对象" class="headerlink" title="HotSpot 虚拟机对象"></a>HotSpot 虚拟机对象</h2><h3 id="HotSpot-虚拟机创建对象"><a href="#HotSpot-虚拟机创建对象" class="headerlink" title="HotSpot 虚拟机创建对象"></a>HotSpot 虚拟机创建对象</h3><p>虚拟机遇到一条字节码new指令时，<font color="red" size="4">首先将去检查这个指令的参数是否能在常量池中定位到<br>一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过</font>。如果没有，那必须先执行相应的类加载过程，本书第7章将探讨这部分细节。</p><pre><code>对象所需内存的大小在类加载完成后便可完全确定  </code></pre><p>为了保证不会同时分配相同有两种可选方案：</p><ul><li>一种是对分配内存空间的动作进行同步处理——实际上虚拟机是采用CAS配上失败<br>重试的方式保证更新操作的原子性；</li><li>另外一种是把内存分配的动作按照线程划分在不同的空间之中进<br>行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local AllocationBuffer，TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。</li></ul><p>内存分配完成之后，虚拟机必须将分配到的内存空间（但不包括对象头）都初始化为零值</p><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了。但是从Java程序的视<br>角看来，对象创建才刚刚开始——构造函数，即Class文件中的<init>()方法还没有执行</init></p><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p>在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例<br>数据（Instance Data）和对齐填充（Padding）。</p><h4 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h4><ul><li>第一部分包括第一类是用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等 ，官方称它为“Mark Word”。</li></ul><p>根据对象的状态复用自己的存储空间。例如在32位的HotSpot虚拟机中，如对象未被同步锁锁定的状态<br>下，Mark Word的32个比特存储空间中的25个比特用于存储对象哈希码，4个比特用于存储对象分代年<br>龄，2个比特用于存储锁标志位，1个比特固定为0，在其他状态（轻量级锁定、重量级锁定、GC标<br>记、可偏向）[1]下对象的存储内容如表2-1所示。<br><img src="/2020/05/24/deepinjvm-chap02-memoryregion/2.png"></p><ul><li>对象头的另外一部分是类型指针</li></ul><h4 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h4><p>对象有效信息 父类 子类 可能交叉存</p><h4 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h4><p>HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍</p><h3 id="对象访问定位"><a href="#对象访问定位" class="headerlink" title="对象访问定位"></a>对象访问定位</h3><p>我们的Java程序会通过栈上的reference数据来操作堆上的具体对象。</p><p>两种方法</p><ul><li>句柄<br><img src="/2020/05/24/deepinjvm-chap02-memoryregion/3.png"><br>这两种对象访问方式各有优势，<font color="red" size="4">使用句柄来访问的最大好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改</font>。</li><li>直接指针<br><img src="/2020/05/24/deepinjvm-chap02-memoryregion/4.png"><br>使用直接指针来访问<font color="red" size="4">最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访<br>问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本，就本书讨论的主要虚拟<br>机HotSpot而言，它主要使用第二种方式进行对象访问</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Collection-API</title>
      <link href="2020/05/19/java-collection-api/"/>
      <url>2020/05/19/java-collection-api/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E6%80%BB%E5%9B%BE">总图</a></li><li><a href="#iterable-%E8%B6%85%E6%8E%A5%E5%8F%A3">Iterable 超接口</a></li><li><a href="#collection%E6%8E%A5%E5%8F%A3">Collection接口</a><ul><li><a href="#abstactcollection-%E6%8A%BD%E8%B1%A1%E7%B1%BB">AbstactCollection 抽象类</a></li><li><a href="#list">list</a><ul><li><a href="#abstactlist">AbstactList</a><ul><li><a href="#arraylist">ArrayList</a></li><li><a href="#vector">Vector</a><ul><li><a href="#stack">Stack</a></li></ul></li><li><a href="#abstactsequentiallist">AbstactSequentialList</a></li></ul></li><li><a href="#linkedlist">LinkedList</a></li></ul></li><li><a href="#set%E6%8E%A5%E5%8F%A3">Set接口</a><ul><li><a href="#hashset">HashSet</a><ul><li><a href="#linkedhashset">LinkedHashSet</a></li></ul></li><li><a href="#sortset-%E6%8E%A5%E5%8F%A3">SortSet 接口</a><ul><li><a href="#treeset">TreeSet</a></li></ul></li></ul></li></ul></li><li><a href="#map%E6%8E%A5%E5%8F%A3">MAP接口</a><ul><li><a href="#hashmap">HashMap</a><ul><li><a href="#linkedhashmap">LinkedHashMap</a></li></ul></li><li><a href="#comparable">Comparable</a></li><li><a href="#comparator">Comparator</a></li></ul></li></ul><!-- /TOC --><h1 id="总图"><a href="#总图" class="headerlink" title="总图"></a>总图</h1><p>这个图比较漂亮yes<br><img src="/2020/05/19/java-collection-api/1.png"></p><h1 id="Iterable-超接口"><a href="#Iterable-超接口" class="headerlink" title="Iterable 超接口"></a>Iterable 超接口</h1><p>Iterable   有个方法 获得Iterator   以及foreach jdk1.8<br><img src="/2020/05/19/java-collection-api/2.png"></p><h1 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h1><p>继承了Iterable 实际上需求的是Iterator接口去得到遍历功能</p><p>不同的Collection子类对于有序性、重复性、null、线程同步都有不同的策略。</p><h2 id="AbstactCollection-抽象类"><a href="#AbstactCollection-抽象类" class="headerlink" title="AbstactCollection 抽象类"></a>AbstactCollection 抽象类</h2><p>提供骨架实现 减少实现此接口的工作量 <strong>不包括Hashcode和Stream()</strong></p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><ul><li>序列 </li><li>特殊的迭代器，称为 ListIterator，迭代器加入了元素插入和替换，以及双向访问功能。还提供了一个方法(如下)来获取从列表中指定位置开始的列表迭代器。</li><li>迭代索引访问优先于索引</li><li>搜索比较慢 </li></ul><h3 id="AbstactList"><a href="#AbstactList" class="headerlink" title="AbstactList"></a>AbstactList</h3><p>与AbstactCollection 同理</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>具体实现类 可变大小数组 不同步<br><strong>适合随机查找和遍历，不适合插入和删除。</strong></p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>不怎么用 比ArrayList慢</p><h5 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h5><p>栈</p><h4 id="AbstactSequentialList"><a href="#AbstactSequentialList" class="headerlink" title="AbstactSequentialList"></a>AbstactSequentialList</h4><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>LinkedList是用链表结构存储数据的，<strong>很适合数据的动态插入和删除，随机访问和遍历速度比较慢。</strong></li><li>它还实现了Deque接口，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</li></ul><h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><p>就像数学意义的集合一样 不能重复 无序</p><ul><li>Set判断两个对象相同不是使用”==”运算符，而是根据equals方法。</li><li>equals 要有效 构造函数输入的也不能重复</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li>HashSet使用HASH算法来存储集合中的元素，因此具有良好的存取和查找性能</li><li>HashSet集合判断两个元素相等的标准是两个对象通过equals()方法比较相等，并且两个对象的hashCode()方法的返回值相等</li></ul><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ul><li>LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但和HashSet不同的是，它同时使用链表维护元素的次序，这样使得元素看起来是以插入的顺序保存的。 </li><li>适合遍历 其他性能小于Hashset</li></ul><h3 id="SortSet-接口"><a href="#SortSet-接口" class="headerlink" title="SortSet 接口"></a>SortSet 接口</h3><h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><h1 id="MAP接口"><a href="#MAP接口" class="headerlink" title="MAP接口"></a>MAP接口</h1><p>单独的接口 与Collections 没有实际继承关系</p><p><strong>但是MAP的所有key 是一个set对象 value 是一个collection的子类对象</strong></p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>两个key通过equals()方法比较返回true、 同时两个key的hashCode值也必须相等</p><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><h2 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a>Comparable</h2><p>compareTo(T o)</p><h2 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h2><p>函数接口 compare(T o1,T o2)</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-jdk-new-features</title>
      <link href="2020/05/03/java-new-features/"/>
      <url>2020/05/03/java-new-features/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F">Lamda表达式</a><ul><li><a href="#lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89">Lamda表达式的基本定义</a></li><li><a href="#lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%9C%81%E7%95%A5%E6%A8%A1%E5%BC%8F">Lamda表达式的省略模式</a></li><li><a href="#lamda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8E%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB">Lamda表达式与匿名内部类的区别</a></li></ul></li><li><a href="#%E6%8E%A5%E5%8F%A3%E6%9B%B4%E6%96%B0">接口更新</a><ul><li><a href="#%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95-java-8">默认方法 （java 8）</a></li><li><a href="#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95-java8">静态方法 java8</a></li><li><a href="#%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95-java9">私有方法 java9</a></li></ul></li><li><a href="#%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8">方法引用</a><ul><li><a href="#%E5%BC%95%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95">引用对象方法</a></li><li><a href="#%E5%BC%95%E7%94%A8%E7%B1%BB%E6%96%B9%E6%B3%95">引用类方法</a></li><li><a href="#%E5%BC%95%E7%94%A8%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">引用构造方法</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3-%E5%B0%B1%E6%98%AFlambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E6%8E%A5%E5%8F%A3%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95">函数式接口 就是Lambda表达式 （接口只有一个抽象方法）</a><ul><li><a href="#java-8-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3">java 8 常用函数式接口</a><ul><li><a href="#supplies">Supplies</a></li><li><a href="#consumer">Consumer</a></li><li><a href="#predicate">Predicate</a></li><li><a href="#function">Function</a></li></ul></li></ul></li><li><a href="#strem-%E6%B5%81">Strem 流</a><ul><li><a href="#%E7%94%9F%E6%88%90%E6%B5%81">生成流</a></li><li><a href="#%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C">中间操作</a></li><li><a href="#%E7%BB%88%E7%BB%93%E6%93%8D%E4%BD%9C">终结操作</a></li></ul></li></ul><!-- /TOC --><h1 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h1><h2 id="Lamda表达式的基本定义"><a href="#Lamda表达式的基本定义" class="headerlink" title="Lamda表达式的基本定义"></a>Lamda表达式的基本定义</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//类方式</span><span class="token comment">//        MyRunnable myRunnable = new MyRunnable();</span><span class="token comment">//        Thread t =new Thread(myRunnable);</span><span class="token comment">//        t.start();</span>        <span class="token comment">//匿名内部类</span><span class="token comment">//        new Thread(new Runnable() {</span><span class="token comment">//            @Override</span><span class="token comment">//            public void run() {</span><span class="token comment">//                System.out.println("多线程启动");</span><span class="token comment">//            }</span><span class="token comment">//        }).start();</span>        <span class="token comment">//Lambda表达式  有一个接口有且仅有一个抽象方法</span>        <span class="token comment">//形参 箭头 代码块</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>        <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动多线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lamda表达式的省略模式"><a href="#Lamda表达式的省略模式" class="headerlink" title="Lamda表达式的省略模式"></a>Lamda表达式的省略模式</h2><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public  class LambdaDemo1 {    public static void main(String[] args) {        //省略参数类型        useAddable((x,y)-&gt;{            return x+y;        });        useFlyable((s)-&gt;{            System.out.println(s);        });        //只有一个参数 小括号也可以省略        useFlyable(s-&gt;{            System.out.println(s+"sad");        });        //如果代码块只有一行 可以省略 大括号和封号        useFlyable(s -&gt; System.out.println(s+"sad32"));        //如果有return 想省略大括号和封号 需要return 也省略        useAddable((x, y) -&gt; x-y);    }    private static void useAddable(Addable a)    {        int sum=a.add(10,20);        System.out.println(sum);    }    private static void useFlyable(Flyable f){        f.fly("哈哈哈哈");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lamda表达式与匿名内部类的区别"><a href="#Lamda表达式与匿名内部类的区别" class="headerlink" title="Lamda表达式与匿名内部类的区别"></a>Lamda表达式与匿名内部类的区别</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap19</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Head-First-Java-master * @description: * @author: scorpinxia * @create: 2020-05-03 19:57 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">useAnimal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"抽象类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">useInface</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Inface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">useStudent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//useStudent(()-&gt; System.out.println("saew"));</span>        <span class="token comment">//useAnimal(()-&gt; System.out.println("具体类"));</span>        <span class="token comment">//只能是接口</span>        <span class="token function">useInface</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useInface</span><span class="token punctuation">(</span><span class="token class-name">Inface</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useAnimal</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名内部类静态编译会产生字节码<br><img src="/2020/05/03/java-new-features/1.png"></p><p>Lambda动态生成字节码<br><img src="/2020/05/03/java-new-features/2.png"></p><h1 id="接口更新"><a href="#接口更新" class="headerlink" title="接口更新"></a>接口更新</h1><p>本身由常量和抽象方法组成</p><h2 id="默认方法-（java-8）"><a href="#默认方法-（java-8）" class="headerlink" title="默认方法 （java 8）"></a>默认方法 （java 8）</h2><p>应用场景 接口升级后（加入新的方法） 需要把所有实现类的地方都重新写过</p><h2 id="静态方法-java8"><a href="#静态方法-java8" class="headerlink" title="静态方法 java8"></a>静态方法 java8</h2><p>只能用接口调用，不能用实现对象，调用</p><h2 id="私有方法-java9"><a href="#私有方法-java9" class="headerlink" title="私有方法 java9"></a>私有方法 java9</h2><p>为了抽象出默认和静态中的共有</p><h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><h2 id="引用对象方法"><a href="#引用对象方法" class="headerlink" title="引用对象方法"></a>引用对象方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap19</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Head-First-Java-master * @description: * @author: scorpinxia * @create: 2020-05-03 20:30 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodReferenceDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">usePrintable</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用  隐含就是把前面的参数给后面的方法</span>        <span class="token function">usePrintable</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可推导就是可省略</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">usePrintable</span><span class="token punctuation">(</span><span class="token class-name">Printable</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">printString</span><span class="token punctuation">(</span><span class="token string">"hello "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用类方法"><a href="#引用类方法" class="headerlink" title="引用类方法"></a>引用类方法</h2><h2 id="引用构造方法"><a href="#引用构造方法" class="headerlink" title="引用构造方法"></a>引用构造方法</h2><h1 id="函数式接口-就是Lambda表达式-（接口只有一个抽象方法）"><a href="#函数式接口-就是Lambda表达式-（接口只有一个抽象方法）" class="headerlink" title="函数式接口 就是Lambda表达式 （接口只有一个抽象方法）"></a>函数式接口 就是Lambda表达式 （接口只有一个抽象方法）</h1><p>@FunctionInterface</p><h2 id="java-8-常用函数式接口"><a href="#java-8-常用函数式接口" class="headerlink" title="java 8 常用函数式接口"></a>java 8 常用函数式接口</h2><h3 id="Supplies"><a href="#Supplies" class="headerlink" title="Supplies"></a>Supplies</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap19<span class="token punctuation">.</span></span><span class="token class-name">FunctionInterface</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Supplier</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Head-First-Java-master * @description: * @author: scorpinxia * @create: 2020-05-03 21:13 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SupplierDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span> i<span class="token operator">=</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s<span class="token operator">=</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token function">getMaxInteger</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> max1<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> it<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">&gt;</span>max1<span class="token punctuation">)</span><span class="token punctuation">{</span>                    max1<span class="token operator">=</span>it<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> max1<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"max="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span>  <span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sup<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span>   <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sup<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span>   <span class="token function">getMaxInteger</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> sup<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>  sup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap19<span class="token punctuation">.</span></span><span class="token class-name">FunctionInterface</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Head-First-Java-master * @description: * @author: scorpinxia * @create: 2020-05-04 20:21 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"scorpin"</span><span class="token punctuation">,</span>n<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sd"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"scorpin1"</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"scorpin"</span><span class="token punctuation">,</span>n<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token string">"scorpin"</span><span class="token punctuation">,</span>n<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>n<span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sd"</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//不同方式消费两次</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">operatorString</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c1<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//        c1.accept(name);</span><span class="token comment">//        c2.accept(name);</span>        <span class="token comment">//c1先消费一次 c2在消费</span>        c1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap19<span class="token punctuation">.</span></span><span class="token class-name">FunctionInterface</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Head-First-Java-master * @description: * @author: scorpinxia * @create: 2020-05-04 20:54 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerDemo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArray<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"xia,30"</span><span class="token punctuation">,</span><span class="token string">"xue,20"</span><span class="token punctuation">,</span><span class="token string">"xixi,32"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//        opreatorStringArray(strArray,str-&gt;{</span><span class="token comment">//            String name=str.split(",")[0];</span><span class="token comment">//            System.out.print("姓名："+ name);</span><span class="token comment">//        },str1-&gt;{</span><span class="token comment">//            String age=str1.split(",")[1];</span><span class="token comment">//            System.out.println("年龄"+age);</span><span class="token comment">//</span><span class="token comment">//        });</span>        <span class="token function">opreatorStringArray</span><span class="token punctuation">(</span>strArray<span class="token punctuation">,</span>str<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str1<span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token operator">+</span>str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">opreatorStringArray</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c1<span class="token punctuation">,</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token operator">:</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap19<span class="token punctuation">.</span></span><span class="token class-name">FunctionInterface</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Predicate</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Head-First-Java-master * @description: * @author: scorpinxia * @create: 2020-05-04 23:04 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PredicateDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isMorethan8 <span class="token operator">=</span><span class="token function">checkString</span><span class="token punctuation">(</span><span class="token string">"rqwtg"</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isMorethan8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isMorethan82 <span class="token operator">=</span><span class="token function">checkString</span><span class="token punctuation">(</span><span class="token string">"adawrwqrqw"</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isMorethan82<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span><span class="token function">checkString</span><span class="token punctuation">(</span><span class="token string">"adawrwqrqw"</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">8</span><span class="token punctuation">,</span>str1<span class="token operator">-&gt;</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pre<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//return pre.test(s);</span>        <span class="token comment">//逻辑非 不是!pre.test(s);</span>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pre1<span class="token punctuation">,</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> pre2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//        boolean test1 = pre1.test(s);</span><span class="token comment">//        boolean test2 = pre2.test(s);</span><span class="token comment">//        boolean result = test1 &amp;&amp; test2;</span><span class="token comment">//        return result;</span>        <span class="token comment">//与上面一致</span>          <span class="token keyword">return</span> pre1<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>pre2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//OR 同理</span>          <span class="token comment">//return  pre1.or(pre2).test(s);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">chap19<span class="token punctuation">.</span></span><span class="token class-name">FunctionInterface</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Stream</span><span class="token punctuation">;</span><span class="token comment">/** * @program: Head-First-Java-master * @description: * @author: scorpinxia * @create: 2020-05-05 22:14 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">covert</span><span class="token punctuation">(</span><span class="token string">"23412"</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">covert1</span><span class="token punctuation">(</span><span class="token number">324</span><span class="token punctuation">,</span>i<span class="token operator">-&gt;</span><span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>        <span class="token function">covert1</span><span class="token punctuation">(</span><span class="token string">"23412"</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">covert1</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span>str<span class="token operator">-&gt;</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span>i1<span class="token operator">-&gt;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i1<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">covert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> fun<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">covert1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span>  s<span class="token operator">=</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">covert1</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span>  s1<span class="token operator">=</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">covert1</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> fun1<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fun2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//        int i=fun1.apply(s);</span><span class="token comment">//        String s1=fun2.apply(i);</span><span class="token comment">//        System.out.println(s1);</span>        <span class="token comment">//同</span>        <span class="token class-name">String</span> s1<span class="token operator">=</span>fun1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>fun2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Strem-流"><a href="#Strem-流" class="headerlink" title="Strem 流"></a>Strem 流</h1><h2 id="生成流"><a href="#生成流" class="headerlink" title="生成流"></a>生成流</h2><p>list.strem()</p><p>Colletions 体系集合默认方法stream<br>Map 体系集合间接生成流<br>数组 Stream的静态方法</p><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><p>fliter()</p><h2 id="终结操作"><a href="#终结操作" class="headerlink" title="终结操作"></a>终结操作</h2><p>foreach</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA 技巧快捷键</title>
      <link href="2020/05/03/idea-ji-qiao-kuai-jie-jian/"/>
      <url>2020/05/03/idea-ji-qiao-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">psvm mainsout 输出ctrl+alt+space 代码提示ctrl+/   //ctrl+shift+/ 多行/* */ctrl+alt+l 格式化ctrl+alt+v 自动补全ctrl+f12 类内查找方法ctrl+n 查找类ctrl+f 查找 ctrl+r 替代<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLAN-解析</title>
      <link href="2020/04/28/vlan-jie-xi/"/>
      <url>2020/04/28/vlan-jie-xi/</url>
      
        <content type="html"><![CDATA[<p> <strong>原文</strong> </p><blockquote><p><a href="https://blog.csdn.net/zjkc050818/article/details/80663886">https://blog.csdn.net/zjkc050818/article/details/80663886</a></p></blockquote><h1 id="为什么需要VLAN"><a href="#为什么需要VLAN" class="headerlink" title="为什么需要VLAN"></a>为什么需要VLAN</h1><h2 id="什么是VLAN"><a href="#什么是VLAN" class="headerlink" title="什么是VLAN"></a>什么是VLAN</h2><p>用路由分割的 网络（广播域）</p><h2 id="非分割广播域时"><a href="#非分割广播域时" class="headerlink" title="非分割广播域时"></a>非分割广播域时</h2><p>原网络<br><img src="/2020/04/28/vlan-jie-xi/1.png"><br>当A 与 B通信 交换机会转发到其他端口 <strong>Flooding</strong><br><img src="/2020/04/28/vlan-jie-xi/2.png"><br>这导致了网络带宽和CPU运算能力无谓消耗</p><h2 id="常用广播通信"><a href="#常用广播通信" class="headerlink" title="常用广播通信"></a>常用广播通信</h2><ul><li>ARP请求</li><li>RIP </li><li>DHCP </li><li>NetBEUI：Windows下使用的网络协议</li><li>IPX：NovellNetware使用的网络协议</li><li>Apple Talk：苹果公司的Macintosh计算机使用的网络协议。</li></ul><h2 id="广播域分割与VLAN必要性"><a href="#广播域分割与VLAN必要性" class="headerlink" title="广播域分割与VLAN必要性"></a>广播域分割与VLAN必要性</h2><ul><li><p>分割广播域，一般用路由的LAN interface<br>但是，通常情况下路由器无太多网络接口 而且有的lan口其实有可能是路由内置的交换机</p></li><li><p>与路由器相比，二层交换机一般带有多个网络接口。因此如果能使用它分割广播域，那么无疑运用上的灵活性会大大提高。</p></li><li><p>二层交换机上分割广播域的技术，就是VLAN。通过利用VLAN，我们可以自由设计广播域的构成，提高网络设计的自由度。</p></li></ul><h1 id="VLAN-机制"><a href="#VLAN-机制" class="headerlink" title="VLAN 机制"></a>VLAN 机制</h1><h2 id="VLAN-id"><a href="#VLAN-id" class="headerlink" title="VLAN id"></a>VLAN id</h2><p><img src="/2020/04/28/vlan-jie-xi/3.png"><br><img src="/2020/04/28/vlan-jie-xi/4.png"></p><h2 id="直观描述"><a href="#直观描述" class="headerlink" title="直观描述"></a>直观描述</h2><p><img src="/2020/04/28/vlan-jie-xi/5.png"></p><p>但是虽然连在同一个交换机 不同VLAN 不能直接通信</p><h2 id="VLAN通信"><a href="#VLAN通信" class="headerlink" title="VLAN通信"></a>VLAN通信</h2><p>VLAN是广播域。而通常两个广播域之间来往的数据包都是由路由器中继的。因此，<font color="red">VLAN间的通信也需要路由器提供中继服务，这被称作“VLAN间路由”。</font> </p><h1 id="端口访问方式"><a href="#端口访问方式" class="headerlink" title="端口访问方式"></a>端口访问方式</h1><pre><code>分为访问链接和汇聚链接</code></pre><h2 id="VLAN访问链接"><a href="#VLAN访问链接" class="headerlink" title="VLAN访问链接"></a>VLAN访问链接</h2><p>只属于一个VLAN 端口转发数据帧</p><h3 id="静态VLAN-基于端口"><a href="#静态VLAN-基于端口" class="headerlink" title="静态VLAN-基于端口"></a>静态VLAN-基于端口</h3><p><img src="/2020/04/28/vlan-jie-xi/6.png"><br>很难频繁修改</p><h3 id="动态VLAN"><a href="#动态VLAN" class="headerlink" title="动态VLAN"></a>动态VLAN</h3><p>根据端口连的计算机</p><ul><li>根据MAC的VLAN</li><li>根据子网的VLAN</li><li>根据用户的VLAN</li></ul><p>差异：<font color="red">根据OSI参照模型哪一层的信息决定端口所属的VLAN。</font> </p><h4 id="根据MAC的VLAN"><a href="#根据MAC的VLAN" class="headerlink" title="根据MAC的VLAN"></a>根据MAC的VLAN</h4><p><img src="/2020/04/28/vlan-jie-xi/7.png"><br>OSI二层访问链接方法 更换网卡要改设定</p><h4 id="基于子网的VLAN"><a href="#基于子网的VLAN" class="headerlink" title="基于子网的VLAN"></a>基于子网的VLAN</h4><p><img src="/2020/04/28/vlan-jie-xi/8.png"><br>OSI三层访问链接方法 比较灵活</p><h4 id="基于用户的VLAN"><a href="#基于用户的VLAN" class="headerlink" title="基于用户的VLAN"></a>基于用户的VLAN</h4><p>根据当前登录用户  OSI四层以上</p><h2 id="汇聚链接"><a href="#汇聚链接" class="headerlink" title="汇聚链接"></a>汇聚链接</h2><h3 id="需要设置跨越多台交换机VLAN-（同一部门不同楼层）"><a href="#需要设置跨越多台交换机VLAN-（同一部门不同楼层）" class="headerlink" title="需要设置跨越多台交换机VLAN （同一部门不同楼层）"></a>需要设置跨越多台交换机VLAN （同一部门不同楼层）</h3><p><img src="/2020/04/28/vlan-jie-xi/9.png"></p><p><strong>简单方法</strong> 添加口互连 端口效率比较低<br><img src="/2020/04/28/vlan-jie-xi/10.png"></p><h3 id="汇聚链接-（用一个口互连）"><a href="#汇聚链接-（用一个口互连）" class="headerlink" title="汇聚链接 （用一个口互连）"></a>汇聚链接 （用一个口互连）</h3><p><font color="blue" font="" face="微软雅黑" size="4">汇聚链接（Trunk Link）指的是能够转发多个不同VLAN的通信的端口。</font><br>汇聚链路上流通的数据帧，都被附加了用于识别分属于哪个VLAN的特殊信息。<br><img src="/2020/04/28/vlan-jie-xi/11.png"></p><h4 id="汇聚方式"><a href="#汇聚方式" class="headerlink" title="汇聚方式"></a>汇聚方式</h4><h5 id="IEEE-802-1Q"><a href="#IEEE-802-1Q" class="headerlink" title="IEEE 802.1Q"></a>IEEE 802.1Q</h5><p><img src="/2020/04/28/vlan-jie-xi/12.png"></p><h5 id="ISL"><a href="#ISL" class="headerlink" title="ISL"></a>ISL</h5><p>Cisco产品支持的<br><img src="/2020/04/28/vlan-jie-xi/13.png"></p><h1 id="VLAN间路由"><a href="#VLAN间路由" class="headerlink" title="VLAN间路由"></a>VLAN间路由</h1><h2 id="VLAN间路由必要性"><a href="#VLAN间路由必要性" class="headerlink" title="VLAN间路由必要性"></a>VLAN间路由必要性</h2><p>因为收不到ARP（广播） 不同VLAN无法直接通信</p><h2 id="使用路由器VLAN间路由"><a href="#使用路由器VLAN间路由" class="headerlink" title="使用路由器VLAN间路由"></a>使用路由器VLAN间路由</h2><p><font color="blue" font="" face="微软雅黑" size="4">简单方法</font><br><img src="/2020/04/28/vlan-jie-xi/14.png"><br>扩展性问题增加一个VLAN 路由要多一个LAN口</p><p><img src="/2020/04/28/vlan-jie-xi/15.png"><br><font color="blue" font="" face="微软雅黑" size="4">汇聚链接</font><br>路由器上定义各个VLAN的子接口</p><h2 id="同一VLAN通信"><a href="#同一VLAN通信" class="headerlink" title="同一VLAN通信"></a>同一VLAN通信</h2><p>网络<br><img src="/2020/04/28/vlan-jie-xi/16.png"><br><strong>ABCDR 为MAC地址</strong> <strong>原网络</strong></p><p><img src="/2020/04/28/vlan-jie-xi/17.png"><br><font color="blue" font="" face="微软雅黑" size="4">A到B通信在交换机内完成</font> </p><h2 id="不同VLAN-间通信"><a href="#不同VLAN-间通信" class="headerlink" title="不同VLAN 间通信"></a>不同VLAN 间通信</h2><p><img src="/2020/04/28/vlan-jie-xi/18.png"><br>知道不是一个网段，就向默认网关转发，ARP获取路由MAC<br><font color="red" font="" face="微软雅黑" size="4">进行VLAN间通信时，即使通信双方都连接在同一台交换机上，也必须经过：“发送方——交换机——路由器——交换机——接收方”这样一个流程。</font> </p><h1 id="三层交换机"><a href="#三层交换机" class="headerlink" title="三层交换机"></a>三层交换机</h1><h2 id="路由器-来进行VLAN间路由问题"><a href="#路由器-来进行VLAN间路由问题" class="headerlink" title="路由器 来进行VLAN间路由问题"></a>路由器 来进行VLAN间路由问题</h2><p><font color="red" font="" face="微软雅黑" size="4">随着VLAN之间流量的不断增加，很可能导致路由器成为整个网络的瓶颈。</font> </p><ul><li>交换机ASIC，专用硬件处理数据帧，很多能达到wired Speed </li><li>路由器 软件处理不能不限速转发</li></ul><h2 id="三层交换机-1"><a href="#三层交换机-1" class="headerlink" title="三层交换机"></a>三层交换机</h2><p><font color="red" font="" face="微软雅黑" size="4">本质上带有 路由（第三层功能）的交换机，使用ASIC硬件处理路由，高速路由</font> </p><p><img src="/2020/04/28/vlan-jie-xi/19.png"></p><h3 id="三层交换机同一VLAN通信"><a href="#三层交换机同一VLAN通信" class="headerlink" title="三层交换机同一VLAN通信"></a>三层交换机同一VLAN通信</h3><p><img src="/2020/04/28/vlan-jie-xi/20.png"></p><h3 id="三层交换机不同一VLAN通信"><a href="#三层交换机不同一VLAN通信" class="headerlink" title="三层交换机不同一VLAN通信"></a>三层交换机不同一VLAN通信</h3><p><img src="/2020/04/28/vlan-jie-xi/21.png"><br><font color="red" font="" face="微软雅黑" size="4">都需要经过“发送方→交换模块→路由模块→交换模块→接收方”</font> </p><h1 id="加速VLAN通信手段"><a href="#加速VLAN通信手段" class="headerlink" title="加速VLAN通信手段"></a>加速VLAN通信手段</h1><h2 id="流（flow）"><a href="#流（flow）" class="headerlink" title="流（flow）"></a>流（flow）</h2><p>如FTP传输较大文件 MTU（Maximum Transmission Unit）限制 会分割小块<br><font color="blue" font="" face="微软雅黑" size="4">只要将流最初的数据正确地路由以后，后继的数据理应也会被同样地路由。据此，后继的数据不再需要路由器进行路由处理；通过省略反复进行的路由操作，可以进一步提高VLAN间路由的速度。</font> </p><h2 id="加速VLAN间路由的机制"><a href="#加速VLAN间路由的机制" class="headerlink" title="加速VLAN间路由的机制"></a>加速VLAN间路由的机制</h2><p><img src="/2020/04/28/vlan-jie-xi/23.png"><br><font color="red" font="" face="微软雅黑" size="4">第一块数据路由结果记录到缓存保存</font> </p><ol><li><p>目标IP地址</p></li><li><p>源IP地址</p></li><li><p>目标TCP/UDP端口号</p></li><li><p>源TCP/UDP端口号</p></li><li><p>接收端口号（交换机）</p></li><li><p>转发端口号（交换机）</p></li><li><p>转发目标MAC地址<br>等等</p></li></ol><h1 id="传统路由器存在意义"><a href="#传统路由器存在意义" class="headerlink" title="传统路由器存在意义"></a>传统路由器存在意义</h1><h2 id="传统路由器必要性"><a href="#传统路由器必要性" class="headerlink" title="传统路由器必要性"></a>传统路由器必要性</h2><p>三层交换机很贵 </p><ul><li>用于与WAN链接<br>三层交换机一般只有LAN</li><li>保证网络安全<br>路由器网络安全功能多，除了三层也有的数据报过滤，还有基于IPSec构建VPN（VirtualPrivate Network）、利用RADIUS进行用户认证等等。</li><li>支持除TCP/IP以外的异构网络结构<br>除了高端三层一般三层交换只支持TCP/IP</li></ul><h2 id="传统路由器和交换机配合构建LAN-实例"><a href="#传统路由器和交换机配合构建LAN-实例" class="headerlink" title="传统路由器和交换机配合构建LAN 实例"></a>传统路由器和交换机配合构建LAN 实例</h2><p>各楼层配置二层定义VLAN 楼层间用三层交换高速<br>与WAN的连接，则通过带有各种网络接口的路由器进行。并且，通过路由器的数据包过滤和VPN等功能实现网络安全。<br><img src="/2020/04/28/vlan-jie-xi/24.png"></p><h1 id="使用VLAN设计局域网"><a href="#使用VLAN设计局域网" class="headerlink" title="使用VLAN设计局域网"></a>使用VLAN设计局域网</h1><h2 id="使用VLAN设计局域网特点"><a href="#使用VLAN设计局域网特点" class="headerlink" title="使用VLAN设计局域网特点"></a>使用VLAN设计局域网特点</h2><ul><li>不收物理链路现在自由分割广播域，能够适应灵活多变的网络构成。</li><li>但是，由于利用VLAN容易导致网络构成复杂化，因此也会造成整个网络的组成难以把握。<h2 id="不使用VLAN的局域网中网络构成的改变"><a href="#不使用VLAN的局域网中网络构成的改变" class="headerlink" title="不使用VLAN的局域网中网络构成的改变"></a>不使用VLAN的局域网中网络构成的改变</h2><img src="/2020/04/28/vlan-jie-xi/25.png"><br>图中的路由器，带有2个LAN接口。左侧的网络是192.168.1.0/24，右侧是192.168.2.0/24。</li></ul><p>现在如果想将192.168.1.0/24这个网络上的计算机A转移到192.168.2.0/24上去，就需要改变物理连接、将A接到右侧的交换机上。</p><p>并且，当需要新增一个地址为192.168.3.0/24的网络时，还要在路由器上再占用一个LAN接口并添置一台交换机。而由于这台路由器上只带了2个LAN接口，因此为了新增网络还必须将路由器升级为带有3个以上LAN接口的产品。</p><h2 id="使用VLAN局域网中网络构成的改变"><a href="#使用VLAN局域网中网络构成的改变" class="headerlink" title="使用VLAN局域网中网络构成的改变"></a>使用VLAN局域网中网络构成的改变</h2><p>只要在交换机上生成蓝色VLAN，然后将计算机A所连的端口1加入到蓝色VLAN中去，使它成为访问链接即可。<font color="red" font="" face="微软雅黑" size="4">ip如果是DHCP获取 那都不需要对客户机任何改变</font><br><img src="/2020/04/28/vlan-jie-xi/26.png"></p><p>经常需要改变网络布局 VLAN优势明显</p><h2 id="利用VLAN而导致的网络结构复杂化"><a href="#利用VLAN而导致的网络结构复杂化" class="headerlink" title="利用VLAN而导致的网络结构复杂化"></a>利用VLAN而导致的网络结构复杂化</h2><p>由于数据流纵横交错，一旦发生故障时，准确定位并排除故障会比较困难。<br><img src="/2020/04/28/vlan-jie-xi/27.png"></p><h2 id="把握网络的逻辑结构与物理结构"><a href="#把握网络的逻辑结构与物理结构" class="headerlink" title="把握网络的逻辑结构与物理结构"></a>把握网络的逻辑结构与物理结构</h2><p><img src="/2020/04/28/vlan-jie-xi/28.png"></p><p><font color="red" font="" face="微软雅黑" size="4">物理结构</font> </p><p><font color="blue" font="" face="微软雅黑" size="4">当进行路由和数据包过滤的时候，需要逻辑结构</font> </p><p><img src="/2020/04/28/vlan-jie-xi/29.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-版本控制</title>
      <link href="2020/04/26/git-ban-ben-kong-zhi/"/>
      <url>2020/04/26/git-ban-ben-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><h2 id="版本控制是什么"><a href="#版本控制是什么" class="headerlink" title="版本控制是什么"></a>版本控制是什么</h2><p>记录若干文件变化</p><h2 id="为什么版本控制"><a href="#为什么版本控制" class="headerlink" title="为什么版本控制"></a>为什么版本控制</h2><p>回溯状态 对比文件 找BUG</p><h2 id="本地版本控制"><a href="#本地版本控制" class="headerlink" title="本地版本控制"></a>本地版本控制</h2><p>直接复制目录 或者利用本地数据库<br><img src="/2020/04/26/git-ban-ben-kong-zhi/1.png"></p><h2 id="集中化版本控制"><a href="#集中化版本控制" class="headerlink" title="集中化版本控制"></a>集中化版本控制</h2><p>单一集中服务器 去服务器取得最新 （单点故障 联网）<br><img src="/2020/04/26/git-ban-ben-kong-zhi/2.png"></p><h2 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h2><p>GIT 客户端不只提取最新文件快照，而把代码仓库完整镜像。<br>大家不用联网， 将更改推送他人就可以 ，实际中可能需要一个<br>中心服务器 只是为了推送更改</p><p><img src="/2020/04/26/git-ban-ben-kong-zhi/3.png"></p><h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h2 id="与其他版本管理区别"><a href="#与其他版本管理区别" class="headerlink" title="与其他版本管理区别"></a>与其他版本管理区别</h2><p>差别： 对待数据方式</p><h3 id="其他版本控制"><a href="#其他版本控制" class="headerlink" title="其他版本控制"></a>其他版本控制</h3><p>提交更新文件用Delta表示<br><strong>如何得到最新版本</strong><br>通过原始文件和加减得到最终文件<br><img src="/2020/04/26/git-ban-ben-kong-zhi/4.png"></p><h3 id="GIT控制"><a href="#GIT控制" class="headerlink" title="GIT控制"></a>GIT控制</h3><p><font color="blue">快照流 对全部文件制作快照，保存索引,如果文件没有更改就不再重新存储 只保留一个链接指向之前存储 </font><br><img src="/2020/04/26/git-ban-ben-kong-zhi/5.png"></p><h4 id="GIT三种状态"><a href="#GIT三种状态" class="headerlink" title="GIT三种状态"></a>GIT三种状态</h4><ol><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified</strong>）：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><h4 id="Git-三个工作区域"><a href="#Git-三个工作区域" class="headerlink" title="Git 三个工作区域"></a>Git 三个工作区域</h4><p><img src="/2020/04/26/git-ban-ben-kong-zhi/6.png"></p><ul><li>Git 仓库(.git directoty)、</li><li>工作目录(Working Directory) </li><li>暂存区域(Staging Area) 。</li></ul><h4 id="GIT工作流程"><a href="#GIT工作流程" class="headerlink" title="GIT工作流程"></a>GIT工作流程</h4><ol><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li></ol><h1 id="GIT入门"><a href="#GIT入门" class="headerlink" title="GIT入门"></a>GIT入门</h1><blockquote><p><a href="https://backlog.com/git-tutorial/cn/intro/intro2_3.html">https://backlog.com/git-tutorial/cn/intro/intro2_3.html</a></p></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>设置账户</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"&lt;用户名&gt;"</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"&lt;电子邮件&gt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看当前设置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git config <span class="token operator">--</span>list <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照以下步骤把新创建的tutorial目录设置到Git数据库。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">mkdir tutorialcd tutorialgit init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>请使用status命令确认工作树和索引的状态。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/26/git-ban-ben-kong-zhi/7.png"><br>新建一个 sample.txt<br>从status响应我们可以看到‘sample.txt’目前不是历史记录对象。请首先把‘sample.txt’加入到索引，就可以追踪它的变更了。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git add sample<span class="token punctuation">.</span>txtgit status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/04/26/git-ban-ben-kong-zhi/8.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git commit <span class="token operator">-</span>m <span class="token string">"first commit"</span>git statusgit log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/26/git-ban-ben-kong-zhi/9.png"></p><h2 id="共享数据库"><a href="#共享数据库" class="headerlink" title="共享数据库"></a>共享数据库</h2><h3 id="将本地数据库修改记录共享到远程PUSH"><a href="#将本地数据库修改记录共享到远程PUSH" class="headerlink" title="将本地数据库修改记录共享到远程PUSH"></a>将本地数据库修改记录共享到远程PUSH</h3><p>创建一个数据库<br><img src="/2020/04/26/git-ban-ben-kong-zhi/10.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git remote add origin https<span class="token operator">:</span><span class="token comment">//gitee.com/scorpin_xia/tutorial.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加远程数据库 名称origin</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git push <span class="token operator">-</span>u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您指定了-u选项，那么下一次推送时就可以省略分支名称了。但是，首次运行指令向空的远程数据库推送时，必须指定远程数据库名称和分支名称。</p><p><img src="/2020/04/26/git-ban-ben-kong-zhi/11.png"></p><h3 id="克隆远程数据库-clone"><a href="#克隆远程数据库-clone" class="headerlink" title="克隆远程数据库 clone"></a>克隆远程数据库 clone</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">git clone https<span class="token operator">:</span><span class="token comment">//gitee.com/scorpin_xia/tutorial.git tutorial2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="推送变更"><a href="#推送变更" class="headerlink" title="推送变更"></a>推送变更</h3><p>当在克隆的数据库目录执行推送时，您可以省略数据库和分支名称。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">git add sample<span class="token punctuation">.</span>txtgit commit <span class="token operator">-</span>m <span class="token string">"添加add的说明"</span>git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/26/git-ban-ben-kong-zhi/12.png"></p><h3 id="从远程数据库-pull-更新"><a href="#从远程数据库-pull-更新" class="headerlink" title="从远程数据库 pull 更新"></a>从远程数据库 pull 更新</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">git pull origin mastergit log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/04/26/git-ban-ben-kong-zhi/13.png"></p><h1 id="整合修改记录"><a href="#整合修改记录" class="headerlink" title="整合修改记录"></a>整合修改记录</h1><h2 id="pull-冲突状态"><a href="#pull-冲突状态" class="headerlink" title="pull 冲突状态"></a>pull 冲突状态</h2><p>在执行pull之后，进行下一次push之前，如果其他人进行了推送内容到远程数据库的话，那么你的push将被拒绝。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//tutorial</span>git add sample<span class="token punctuation">.</span>txtgit commit <span class="token operator">-</span>m <span class="token string">"添加commit的说明"</span><span class="token comment">//tutorial2</span>git add sample<span class="token punctuation">.</span>txtgit commit <span class="token operator">-</span>m <span class="token string">"添加pull的说明"</span>git push<span class="token comment">//tutorial</span>git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/26/git-ban-ben-kong-zhi/14.png"></p><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//tutorial</span>git push origin mastercat sample<span class="token punctuation">.</span>txtgit add sample<span class="token punctuation">.</span>txtgit commit <span class="token operator">-</span>m <span class="token string">"合并"</span>git log <span class="token operator">--</span>graph <span class="token operator">--</span>oneline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/26/git-ban-ben-kong-zhi/15.png"><br>指定–graph选项，能以文本形式显示更新记录的流程图。指定–oneline选项，能在一行中显示提交的信息。<br><img src="/2020/04/26/git-ban-ben-kong-zhi/16.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-next()&amp;&amp;nextline()etc</title>
      <link href="2020/04/10/java-next-nextline-etc/"/>
      <url>2020/04/10/java-next-nextline-etc/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>next（）</strong>:  一定要读取到有效字符后才可以结束输入，对输入有效字符之前遇到的空格键、Tab键或Enter键等结束符，next（）方法会自动将其去掉，只有在输入有效字符之后，next（）方法才将其后输入的空格键、Tab键或Enter键等视为分隔符或结束符。简单地说，next（）查找并返回来自此扫描器的下一个完整标记。完整标记的前后是与分隔模式匹配的输入信息，所以next方法不能得到带空格的字符串。</p></blockquote><p>只有第一个单词</p><blockquote><p>而<strong>nextLine（）</strong>  方法的结束符只是Enter键，即nextLine（）方法返回的是Enter键之前的所有字符，它是可以得到带空格的字符串的。</p></blockquote><p>nextline（）会自动读取next() nextIn 等 的enter</p><p>字节流和字符流 比较好的规范用法：&nbsp;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span>） <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span> <span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">FileInputStream</span> in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">2</span>） <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span> <span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">FileInputStream</span> in<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">InputStreamReader</span> inReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span> <span class="token punctuation">(</span>in<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">BufferedReader</span> bufReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inReader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">3</span>） <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span> <span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">FileReader</span> fileReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">BufferedReader</span> bufReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课堂 </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>head-MYSQL</title>
      <link href="2020/04/06/head-mysql/"/>
      <url>2020/04/06/head-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="了解SQL"><a href="#了解SQL" class="headerlink" title="了解SQL"></a>了解SQL</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>表</li><li>列和数据类型</li><li>行</li><li><strong>主键</strong><br>每行（列）一个主键不相同</li></ul><h2 id="SQL（Structured-Query-Language）"><a href="#SQL（Structured-Query-Language）" class="headerlink" title="SQL（Structured Query Language）"></a>SQL（Structured Query Language）</h2><h1 id="了解MYSQL"><a href="#了解MYSQL" class="headerlink" title="了解MYSQL"></a>了解MYSQL</h1><p>DBMS 数据库管理系统 两种</p><ul><li>共享文件系统<br>  用的少 低端</li><li>客户机 服务器</li></ul><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><ul><li>开源</li><li>快</li><li>简单<br>安装：<blockquote><p><a href="https://www.runoob.com/mysql/mysql-install.html">https://www.runoob.com/mysql/mysql-install.html</a></p></blockquote><h3 id="CS程序"><a href="#CS程序" class="headerlink" title="CS程序"></a>CS程序</h3></li></ul><p>客户机应用</p><ul><li>命令行</li><li>MYSQL administrator 服务器管理</li><li>MYSQL Query Browser 执行命令</li></ul><h1 id="使用MYSQL"><a href="#使用MYSQL" class="headerlink" title="使用MYSQL"></a>使用MYSQL</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>以下命令要不就全大写或者全小写</strong></p><h2 id="创建-导入数据库"><a href="#创建-导入数据库" class="headerlink" title="创建 导入数据库"></a>创建 导入数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> xxx<span class="token keyword">use</span> xxxsource d:\test<span class="token punctuation">.</span><span class="token keyword">sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用某数据库"><a href="#使用某数据库" class="headerlink" title="使用某数据库"></a>使用某数据库</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> <span class="token keyword">database</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据库列表"><a href="#数据库列表" class="headerlink" title="数据库列表"></a>数据库列表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据中的表"><a href="#数据中的表" class="headerlink" title="数据中的表"></a>数据中的表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据表的属性，属性类型，主键信息"><a href="#数据表的属性，属性类型，主键信息" class="headerlink" title="数据表的属性，属性类型，主键信息"></a>数据表的属性，属性类型，主键信息</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> xxxx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/1.png"></p><h2 id="数据表的索引信息"><a href="#数据表的索引信息" class="headerlink" title="数据表的索引信息"></a>数据表的索引信息</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> xxxx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/2.png"></p><h2 id="数据表的性能信息"><a href="#数据表的性能信息" class="headerlink" title="数据表的性能信息"></a>数据表的性能信息</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token keyword">from</span> mysql <span class="token operator">like</span> <span class="token string">'user%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/3.png"></p><h1 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h1><h2 id="检索单个列-检查多个列-所有列"><a href="#检索单个列-检查多个列-所有列" class="headerlink" title="检索单个列 检查多个列 所有列"></a>检索单个列 检查多个列 所有列</h2><p><strong>无序</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> xxx <span class="token keyword">from</span> xxxx<span class="token punctuation">;</span><span class="token keyword">select</span> xxx，xx<span class="token punctuation">,</span>xxx <span class="token keyword">from</span> xxxx<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> xxx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="检索出不同的行-DISTINCT"><a href="#检索出不同的行-DISTINCT" class="headerlink" title="检索出不同的行 DISTINCT"></a>检索出不同的行 DISTINCT</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> vend_id <span class="token keyword">from</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本来有14行<br><img src="/2020/04/06/head-mysql/5.png"></p><h2 id="限制结果-LIMIT"><a href="#限制结果-LIMIT" class="headerlink" title="限制结果 LIMIT"></a>限制结果 LIMIT</h2><p>从第4行开始5个</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  vend_id <span class="token keyword">from</span> products <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="完全限定"><a href="#完全限定" class="headerlink" title="完全限定"></a>完全限定</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  products<span class="token punctuation">.</span>prod_name <span class="token keyword">from</span> crashcourse<span class="token punctuation">.</span>products <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="排序检索"><a href="#排序检索" class="headerlink" title="排序检索"></a>排序检索</h1><h2 id="单行排序"><a href="#单行排序" class="headerlink" title="单行排序"></a>单行排序</h2><p>实际上可以用<strong>别的列</strong>按字母排序 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_name<span class="token keyword">from</span> products <span class="token keyword">order</span> <span class="token keyword">by</span> prod_name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="多行-多规则排序"><a href="#多行-多规则排序" class="headerlink" title="多行 多规则排序"></a>多行 多规则排序</h2><p>检索三个列，按其中两个列排序 首先价格（价格相同的情况） 在按名称</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">order</span> <span class="token keyword">by</span> prod_price<span class="token punctuation">,</span>prod_name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="降序-DESC"><a href="#降序-DESC" class="headerlink" title="降序 DESC"></a>降序 DESC</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">order</span> <span class="token keyword">by</span> prod_price <span class="token keyword">desc</span><span class="token punctuation">,</span>prod_name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="找最贵"><a href="#找最贵" class="headerlink" title="找最贵"></a>找最贵</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">order</span> <span class="token keyword">by</span> prod_price <span class="token keyword">desc</span><span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h1><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>order by 需要在whre 后</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_price<span class="token operator">=</span><span class="token number">2.50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/6.png"></p><h3 id="空值检测"><a href="#空值检测" class="headerlink" title="空值检测"></a>空值检测</h3><p>空值和0值、空字符、空格不一样 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_price <span class="token operator">is</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="and-or"><a href="#and-or" class="headerlink" title="and or"></a>and or</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> <span class="token punctuation">(</span>vend_id <span class="token operator">=</span> <span class="token number">1002</span> <span class="token operator">or</span> vend_id <span class="token operator">=</span> <span class="token number">1003</span><span class="token punctuation">)</span> <span class="token operator">and</span> prod_price<span class="token operator">&gt;=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="in-清晰的or-执行更快"><a href="#in-清晰的or-执行更快" class="headerlink" title="in (清晰的or) 执行更快"></a>in (清晰的or) 执行更快</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> <span class="token punctuation">(</span>vend_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> prod_price<span class="token operator">&gt;=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="not-不在后续的条件"><a href="#not-不在后续的条件" class="headerlink" title="not 不在后续的条件"></a>not 不在后续的条件</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> <span class="token punctuation">(</span>vend_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">and</span> prod_price<span class="token operator">&gt;=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="通配符过滤"><a href="#通配符过滤" class="headerlink" title="通配符过滤"></a>通配符过滤</h1><h2 id="like"><a href="#like" class="headerlink" title="like"></a>like</h2><p><strong>%</strong> 代表任意字符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">like</span> <span class="token string">'jet%'</span><span class="token keyword">where</span> prod_name <span class="token operator">like</span> <span class="token string">'%jet%'</span> 含有 jet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>_</strong> 代表单个字符</p><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>很复杂 只讲一些</p><h2 id="REGEXP-代表后面是正则表达"><a href="#REGEXP-代表后面是正则表达" class="headerlink" title="REGEXP 代表后面是正则表达"></a>REGEXP 代表后面是正则表达</h2><p><strong>默认不区分大小写</strong><br>除了加上binary </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token keyword">binary</span> <span class="token string">'JetPACK .000'</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**.**代表任意一个字符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'1000'</span><span class="token punctuation">;</span> 匹配<span class="token number">1000</span>的<span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'.000'</span><span class="token punctuation">;</span> 匹配x000的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="like-和-regexp-区别-（对于同样能执行的语句）"><a href="#like-和-regexp-区别-（对于同样能执行的语句）" class="headerlink" title="like 和 regexp 区别 （对于同样能执行的语句）"></a>like 和 regexp 区别 （对于同样能执行的语句）</h3><ul><li>like是对整个列查找 </li><li>regexp 是对列的具体里面值 查找看含有没有 ，但是regexp可以通过别的符号来实现对整个列匹配</li></ul><p><img src="/2020/04/06/head-mysql/7.png"> </p><h2 id="表示or"><a href="#表示or" class="headerlink" title="| 表示or"></a>| 表示or</h2><h2 id="代表组合"><a href="#代表组合" class="headerlink" title="[]代表组合"></a>[]代表组合</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'[123] Ton'</span><span class="token punctuation">;</span> 将含有匹配<span class="token string">'1 ton'</span><span class="token operator">or</span> <span class="token string">'2 ton''3 ton'</span>的匹配<span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'[1-3] Ton'</span><span class="token punctuation">;</span> 将含有匹配<span class="token string">'1 ton'</span><span class="token operator">or</span> <span class="token string">'2 ton''3 ton'</span>的匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与|的不同</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'1|2|3 Ton'</span><span class="token punctuation">;</span>将含有 <span class="token string">'1'</span> <span class="token operator">or</span> <span class="token string">'2'</span> <span class="token operator">or</span> <span class="token string">'3'</span> ton 匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="匹配特殊字符-就是"><a href="#匹配特殊字符-就是" class="headerlink" title="匹配特殊字符 就是% . -"></a>匹配特殊字符 就是% . -</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'\\.'</span><span class="token punctuation">;</span>将含有<span class="token punctuation">.</span>的匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>引用元字符<br><img src="/2020/04/06/head-mysql/8.png"><br><img src="/2020/04/06/head-mysql/9.png"> </p><h2 id="匹配多个实例-（多次-或几次）"><a href="#匹配多个实例-（多次-或几次）" class="headerlink" title="匹配多个实例 （多次 或几次）"></a>匹配多个实例 （多次 或几次）</h2><p><img src="/2020/04/06/head-mysql/10.png"> </p><p><strong>?</strong> 代表前面一个字符出现0 或者1次</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'\\([0-9] sticks?\\)'</span><span class="token keyword">order</span> <span class="token keyword">by</span> prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/11.png"> </p><p><strong>{4}</strong> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'[[:digit:]]{4}'</span><span class="token keyword">order</span> <span class="token keyword">by</span> prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>匹配四个数字</p><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p><img src="/2020/04/06/head-mysql/12.png"> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  prod_id<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">where</span> prod_name <span class="token operator">regexp</span> <span class="token string">'^[[:digit:]\\.]'</span><span class="token keyword">order</span> <span class="token keyword">by</span> prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/13.png"> </p><p>可以用select 测试 正则</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'hello'</span> <span class="token operator">regexp</span> <span class="token string">'^[[:digit:]\\.]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会返回0</p><h1 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h1><p>数据表的数据用到的一般不是应用程序需要的格式</p><p>字段（field） 基本和列一样 在计算字段用到</p><p><strong>为什么不在应用程序处理呢</strong><br>因为DBMS快得多</p><h2 id="concat-拼接"><a href="#concat-拼接" class="headerlink" title="concat 拼接"></a>concat 拼接</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span>vend_name<span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>vend_country<span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token keyword">from</span> vendors<span class="token keyword">order</span> <span class="token keyword">by</span> vend_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/14.png"> </p><h2 id="trim-Ltrim-Rtrim-去左右空格-去左-去右"><a href="#trim-Ltrim-Rtrim-去左右空格-去左-去右" class="headerlink" title="trim Ltrim Rtrim 去左右空格 去左 去右"></a>trim Ltrim Rtrim 去左右空格 去左 去右</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span>Rtrim<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>Rtrim<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token keyword">from</span> vendors<span class="token keyword">order</span> <span class="token keyword">by</span> vend_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="导出列-别名-AS"><a href="#导出列-别名-AS" class="headerlink" title="导出列 别名 AS"></a>导出列 别名 AS</h2><p>之前只是看 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span>Rtrim<span class="token punctuation">(</span>vend_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span>Rtrim<span class="token punctuation">(</span>vend_country<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token keyword">as</span> vend_title<span class="token keyword">from</span> vendors<span class="token keyword">order</span> <span class="token keyword">by</span> vend_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算"><a href="#计算" class="headerlink" title="计算 +-*/"></a>计算 +-*/</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> prod_id<span class="token punctuation">,</span>quantity<span class="token punctuation">,</span>item_price<span class="token punctuation">,</span>       quantity<span class="token operator">*</span>item_price <span class="token keyword">as</span> expand_price <span class="token comment">//取名字不同会自动覆盖字段</span><span class="token keyword">from</span> orderitems<span class="token keyword">where</span> order_num<span class="token operator">=</span><span class="token number">20005</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h1><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><p><img src="/2020/04/06/head-mysql/15-1.png"><br><img src="/2020/04/06/head-mysql/15-2.png"> </p><p>其中Soundex() 是匹配发音的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_contact<span class="token keyword">from</span> customers<span class="token keyword">where</span> soundex<span class="token punctuation">(</span>cust_contact<span class="token punctuation">)</span><span class="token operator">=</span>soundex<span class="token punctuation">(</span><span class="token string">'Y lie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/16.png"> </p><h2 id="日期时间处理"><a href="#日期时间处理" class="headerlink" title="日期时间处理"></a>日期时间处理</h2><p>日期格式 最好 xxxx-xx-xx<br><img src="/2020/04/06/head-mysql/17.png"> </p><p>如果要日期 用Data（）<br>如果要时间 用Time()<br>他们会从列出提取 就算只有一个</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_id<span class="token punctuation">,</span>order_num<span class="token keyword">from</span> orders<span class="token keyword">where</span> soundex<span class="token punctuation">(</span>cust_contact<span class="token punctuation">)</span><span class="token operator">=</span>soundex<span class="token punctuation">(</span><span class="token string">'Y lie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h2><p><img src="/2020/04/06/head-mysql/18.png"> </p><h1 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h1><p>经常需要汇总数据而不用实际检索(会浪费时间)<br><img src="/2020/04/06/head-mysql/19.png"> </p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_price<span class="token keyword">from</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h3><p>count(*) 计算所有行数 包括空</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cust_num<span class="token keyword">from</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>count(cust_mail) 计算列中非null的数量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>cust_mail<span class="token punctuation">)</span>  <span class="token keyword">as</span> cust_num<span class="token keyword">from</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="MAX"><a href="#MAX" class="headerlink" title="MAX()"></a>MAX()</h3><p>对于数值和时间返回最大的 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">as</span> max_price<span class="token keyword">from</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于别的数据就返回最后一行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>prod_name<span class="token punctuation">)</span> <span class="token keyword">as</span> max_prod_name<span class="token keyword">from</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="MIN（）与上同"><a href="#MIN（）与上同" class="headerlink" title="MIN（）与上同"></a>MIN（）与上同</h3><h3 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h3><h2 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h2><p>可用于上述函数</p><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>只考虑不同值 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> prod_price<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_price<span class="token keyword">from</span> products<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h1><p>在汇总数据的基础上 想知道每个供应商对应的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num_pords<span class="token keyword">from</span> products<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就失败，没有得到我们想要的<br><img src="/2020/04/06/head-mysql/21.png">   </p><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num_pords<span class="token keyword">from</span> products<span class="token keyword">group</span> <span class="token keyword">by</span> vend_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/20.png"> </p><h2 id="过滤分组（注意此时不能where-where-是决定什么行不要"><a href="#过滤分组（注意此时不能where-where-是决定什么行不要" class="headerlink" title="过滤分组（注意此时不能where where 是决定什么行不要)"></a>过滤分组（注意此时不能where where 是决定什么行不要)</h2><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num_pords<span class="token keyword">from</span> products<span class="token keyword">group</span> <span class="token keyword">by</span> vend_id<span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/22.png"> </p><h2 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h2><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>order by 与 group by的区别<br><img src="/2020/04/06/head-mysql/23.png"> </p><p>第一点很重要<br>应该提供明确的order by 决定分组顺序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> order_num<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token keyword">as</span> order_total<span class="token keyword">from</span> orderitems<span class="token keyword">group</span> <span class="token keyword">by</span> order_num<span class="token keyword">having</span> order_total<span class="token operator">&gt;</span><span class="token number">50</span><span class="token keyword">order</span> <span class="token keyword">by</span> order_total<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无order by<br><img src="/2020/04/06/head-mysql/24_1.png"></p><p>you order by<br><img src="/2020/04/06/head-mysql/24_2.png"></p><h3 id="select-顺序"><a href="#select-顺序" class="headerlink" title="select 顺序"></a>select 顺序</h3><p><img src="/2020/04/06/head-mysql/25_1.png"><br><img src="/2020/04/06/head-mysql/25_2.png"></p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>想要查询所有订购了’TNT2’的用户id 但是 他们之间没有直接的表</p><p>只能先查 数量</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> order_num<span class="token keyword">from</span> orderitems<span class="token keyword">where</span> prod_id<span class="token operator">=</span><span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/26_1.png"><br>在通过数量查询用户id</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_id<span class="token keyword">from</span> orders<span class="token keyword">where</span> order_num <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">20007</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/26_2.png"></p><h2 id="子查询过滤"><a href="#子查询过滤" class="headerlink" title="子查询过滤"></a>子查询过滤</h2><p>嵌套查询 出客户的id </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_id<span class="token keyword">from</span> orders<span class="token keyword">where</span> order_num <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> order_num                    <span class="token keyword">from</span> orderitems                    <span class="token keyword">where</span> prod_id<span class="token operator">=</span><span class="token string">'TNT2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在继续查询出客户的信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_contact<span class="token keyword">from</span> customers<span class="token keyword">where</span> cust_id <span class="token operator">in</span> <span class="token punctuation">(</span>                  <span class="token keyword">select</span> cust_id                  <span class="token keyword">from</span> orders                  <span class="token keyword">where</span> order_num <span class="token operator">in</span> <span class="token punctuation">(</span>                                      <span class="token keyword">select</span> order_num                                      <span class="token keyword">from</span> orderitems                                      <span class="token keyword">where</span> prod_id<span class="token operator">=</span><span class="token string">'TNT2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算子查询"><a href="#计算子查询" class="headerlink" title="计算子查询"></a>计算子查询</h2><p>1.检查 customersl里面的客户列表<br>2.对于每个客户计算在orders里面的订单数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_id<span class="token keyword">from</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/27_1.png"></p><p>只能单独算 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> orders<span class="token keyword">from</span> orders<span class="token keyword">where</span> cust_id <span class="token operator">=</span> <span class="token number">10001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_state<span class="token punctuation">,</span>cust_id<span class="token punctuation">,</span>       <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> orders        <span class="token keyword">from</span> orders        <span class="token keyword">where</span> orders<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">as</span> orders<span class="token keyword">from</span> customers<span class="token keyword">order</span> <span class="token keyword">by</span> cust_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/27_2.png"><br>如果cust_id = cust_id 会导致歧义</p><h1 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h1><p>假如有一个包含产品目录的数据库列表，每种类别一行<br>对于每种物品存储的信息包括产品描述、价格、供应商等。</p><p>如果需要保存同一个供应商生成的多个产品？</p><p>为什么要分开存储数据和产品信息？</p><ul><li>防止重复</li><li>信息更改只要一次</li><li>如果每个产品都存供应商信息，不能保证数据一致性</li><li>相同数据出现多次不是好事</li></ul><p>建立关系表 一个是产品信息 一个是供应商信息</p><ul><li><p>供应商信息 每个供应商存着信息 有着唯一的标识 就是主键（primary key)</p></li><li><p>产品信息 只存产品信息 加上供应商信息primary key 也就是对于products 来说的外键</p></li></ul><p>这样的好处</p><ul><li>供应商信息不重复</li><li>供应商信息改变只要改供应商表</li><li>数据无重复且一致</li></ul><h2 id="为什么联结"><a href="#为什么联结" class="headerlink" title="为什么联结"></a>为什么联结</h2><p>联结是一种机制，更好处理<br>要保证外键存在</p><h2 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">,</span>prod_price<span class="token keyword">from</span> vendors<span class="token punctuation">,</span>products<span class="token keyword">where</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token keyword">order</span> <span class="token keyword">by</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/28.png"></p><p>同样的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">,</span>prod_price<span class="token keyword">from</span> vendors <span class="token keyword">inner</span> <span class="token keyword">join</span> products<span class="token keyword">on</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token keyword">order</span> <span class="token keyword">by</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多联结"><a href="#多联结" class="headerlink" title="多联结"></a>多联结</h2><p>可以先列出所有的表 在决定关系</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>quantity<span class="token keyword">from</span> orderitems<span class="token punctuation">,</span>products<span class="token punctuation">,</span>vendors<span class="token keyword">where</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token operator">and</span> orderitems<span class="token punctuation">.</span>prod_id<span class="token operator">=</span>products<span class="token punctuation">.</span>prod_id<span class="token operator">and</span> order_num<span class="token operator">=</span><span class="token number">20005</span><span class="token keyword">order</span> <span class="token keyword">by</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">,</span>prod_price<span class="token punctuation">,</span>quantity<span class="token keyword">from</span> orderitems<span class="token punctuation">,</span>products<span class="token punctuation">,</span>vendors<span class="token keyword">where</span> vendors<span class="token punctuation">.</span>vend_id <span class="token operator">=</span> products<span class="token punctuation">.</span>vend_id<span class="token operator">and</span> orderitems<span class="token punctuation">.</span>prod_id<span class="token operator">=</span>products<span class="token punctuation">.</span>prod_id<span class="token operator">and</span> order_num<span class="token operator">=</span><span class="token number">20005</span><span class="token keyword">order</span> <span class="token keyword">by</span> vend_name<span class="token punctuation">,</span>prod_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现14章子查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_contact<span class="token keyword">from</span> customers<span class="token punctuation">,</span>orders<span class="token punctuation">,</span>orderitems<span class="token keyword">where</span> customers<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>orders<span class="token punctuation">.</span>cust_id<span class="token operator">and</span> orders<span class="token punctuation">.</span>order_num<span class="token operator">=</span>orderitems<span class="token punctuation">.</span>order_num<span class="token operator">and</span> prod_id<span class="token operator">=</span><span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h1><h2 id="表别名"><a href="#表别名" class="headerlink" title="表别名"></a>表别名</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_contact<span class="token keyword">from</span> customers <span class="token keyword">as</span> c<span class="token punctuation">,</span>orders <span class="token keyword">as</span> o<span class="token punctuation">,</span>orderitems <span class="token keyword">as</span> oi<span class="token keyword">where</span> c<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>o<span class="token punctuation">.</span>cust_id<span class="token operator">and</span> o<span class="token punctuation">.</span>order_num<span class="token operator">=</span>oi<span class="token punctuation">.</span>order_num<span class="token operator">and</span> prod_id<span class="token operator">=</span><span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h2><p>发现某物品有问题 查该物品的供应商的其他物品是否有问题<br>找该供应商生成的其他产品</p><p>子查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> prod_id<span class="token punctuation">,</span>prod_name<span class="token keyword">from</span> products<span class="token keyword">where</span> vend_id<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> vend_id                <span class="token keyword">from</span> products                <span class="token keyword">where</span> prod_id<span class="token operator">=</span><span class="token string">'DTNTR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自联结</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> c<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span>o<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span>       oi<span class="token punctuation">.</span>prod_id<span class="token punctuation">,</span>oi<span class="token punctuation">.</span>quantity<span class="token punctuation">,</span>oi<span class="token punctuation">.</span>item_price<span class="token keyword">from</span> customers <span class="token keyword">as</span> c<span class="token punctuation">,</span>orders <span class="token keyword">as</span> o<span class="token punctuation">,</span>orderitems <span class="token keyword">as</span> oi<span class="token keyword">where</span> c<span class="token punctuation">.</span>cust_id <span class="token operator">=</span>o<span class="token punctuation">.</span>cust_id<span class="token operator">and</span> oi<span class="token punctuation">.</span>order_num <span class="token operator">=</span>o<span class="token punctuation">.</span>order_num<span class="token operator">and</span> oi<span class="token punctuation">.</span>prod_id<span class="token operator">=</span><span class="token string">'FB'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/29.png"></p><h2 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h2><p>重复的列不会列出来</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> p1<span class="token punctuation">.</span>prod_id<span class="token punctuation">,</span>p1<span class="token punctuation">.</span>prod_name<span class="token keyword">from</span> products <span class="token keyword">as</span> p1<span class="token punctuation">,</span>products <span class="token keyword">as</span> p2<span class="token keyword">where</span> p1<span class="token punctuation">.</span>vend_id<span class="token operator">=</span>p2<span class="token punctuation">.</span>vend_id<span class="token operator">and</span> p2<span class="token punctuation">.</span>prod_id<span class="token operator">=</span><span class="token string">'DTNTR'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/30.png"></p><h2 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h2><p>没有关联行的行 外部联行</p><p>目标：</p><ul><li>对每个客户下多少订单计数 包括没人订购的</li><li>列出所有产品 包括没人订购的</li><li>平均规模，包括未下单的</li></ul><p>内联</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span>orders<span class="token punctuation">.</span>order_num<span class="token keyword">from</span> customers <span class="token keyword">inner</span> <span class="token keyword">join</span> orders<span class="token keyword">on</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>外左联</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span>orders<span class="token punctuation">.</span>order_num<span class="token keyword">from</span> customers <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> orders<span class="token keyword">on</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>外右联</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> customers<span class="token punctuation">.</span>cust_id<span class="token punctuation">,</span>orders<span class="token punctuation">.</span>order_num<span class="token keyword">from</span> customers <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> orders<span class="token keyword">on</span> customers<span class="token punctuation">.</span>cust_id <span class="token operator">=</span> orders<span class="token punctuation">.</span>cust_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>相当于输出两个查询的结果 连接起来</p><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_id<span class="token punctuation">,</span>prod_id<span class="token punctuation">,</span>prod_price<span class="token keyword">from</span> products<span class="token keyword">where</span> prod_price <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token keyword">union</span><span class="token keyword">select</span> vend_id<span class="token punctuation">,</span>prod_id<span class="token punctuation">,</span>prod_price<span class="token keyword">from</span> products<span class="token keyword">where</span> vend_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/31.png"></p><p><strong>注意点</strong>:查询的东西一样</p><h2 id="UION-ALL"><a href="#UION-ALL" class="headerlink" title="UION ALL"></a>UION ALL</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> vend_id<span class="token punctuation">,</span>prod_id<span class="token punctuation">,</span>prod_price<span class="token keyword">from</span> products<span class="token keyword">where</span> prod_price <span class="token operator">&lt;=</span><span class="token number">5</span><span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> vend_id<span class="token punctuation">,</span>prod_id<span class="token punctuation">,</span>prod_price<span class="token keyword">from</span> products<span class="token keyword">where</span> vend_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/32.png"></p><h1 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h1><p>有几种数据库引擎<br>常见有MyISAM 支持  InnoDB不支持</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> productnotes<span class="token punctuation">(</span>    note_id     <span class="token keyword">int</span>         <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    prod_id     <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    note_date   <span class="token keyword">datetime</span>    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    note_text   <span class="token keyword">text</span>        <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>note_id<span class="token punctuation">)</span><span class="token punctuation">,</span>    fulltext<span class="token punctuation">(</span>note_text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span>MyISAM<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了表并列出它包含的列<br>根据fulltext(note_text) 指示来对它索引<br>也可索引多个列</p><p><strong>tips</strong> 不要在导入数据时 使用fulltext ,应该先导入数据到新表<br>在修改表定义</p><h2 id="Match-against"><a href="#Match-against" class="headerlink" title="Match() against()"></a>Match() against()</h2><p>match 某列 against 关键词</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'rabbit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/33_1.png"></p><p>简单搜索和like差不多</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> note_text <span class="token operator">like</span> <span class="token string">'%rabbit%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>重要</strong> : 可以对结果排序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token punctuation">,</span>        <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'rabbit'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> rank1<span class="token keyword">from</span> productnotes<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据匹配词的数目 唯一词的数目 包含行的行数 对结果排序</p><p><img src="/2020/04/06/head-mysql/33_2.png"></p><h2 id="查询扩展"><a href="#查询扩展" class="headerlink" title="查询扩展"></a>查询扩展</h2><ul><li>先全文本搜索出 相关行</li><li>在相关行中检测出有用词（MYSQL断定的）</li><li>根据这些有用词在查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'anvils'</span> <span class="token keyword">with</span> query expansion<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/34.png"></p><h2 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h2><ul><li>要匹配的词</li><li>要排斥的词</li><li>排列提示 （哪些词更重要)</li></ul><p><strong>没有FULLTEXT索引也可以用</strong>布尔方式，但是很慢</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'heavy'</span> <span class="token operator">in</span> <span class="token keyword">boolean</span> <span class="token keyword">mode</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/35_1.png"><br>排斥任意以rope开始的行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'heavy -rope*'</span> <span class="token operator">in</span> <span class="token keyword">boolean</span> <span class="token keyword">mode</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/35_2.png"></p><p><strong>操作表</strong><br><img src="/2020/04/06/head-mysql/36.png"></p><p><strong>例子</strong><br>搜索包含rabbit <strong>和</strong>bait的行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'+rabbit +bait'</span> <span class="token operator">in</span> <span class="token keyword">boolean</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>搜索包含rabbit或者bait <strong>至少一个的行</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'rabbit bait'</span> <span class="token operator">in</span> <span class="token keyword">boolean</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>搜索包含 <strong>rabbit bait的短语</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'+rabbit +bait'</span> <span class="token operator">in</span> <span class="token keyword">boolean</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>搜索包含rabbit或者bait <strong>至少一个的行</strong> 增加前者的登记</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> note_text<span class="token keyword">from</span> productnotes<span class="token keyword">where</span> <span class="token keyword">match</span><span class="token punctuation">(</span>note_text<span class="token punctuation">)</span> against<span class="token punctuation">(</span><span class="token string">'+rabbit +bait'</span> <span class="token operator">in</span> <span class="token keyword">boolean</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h1><h2 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> customers<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token string">'Pep E.LaPew'</span><span class="token punctuation">,</span>        <span class="token string">'100 Main Street'</span><span class="token punctuation">,</span>        <span class="token string">'Log Angeles'</span><span class="token punctuation">,</span>        <span class="token string">'CA'</span><span class="token punctuation">,</span>        <span class="token string">'90046'</span><span class="token punctuation">,</span>        <span class="token string">'USA'</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单但不使用 因为依赖次序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> customers<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span>        cust_address<span class="token punctuation">,</span>        cust_city<span class="token punctuation">,</span>        cust_state<span class="token punctuation">,</span>        cust_zip<span class="token punctuation">,</span>        cust_country<span class="token punctuation">,</span>        cust_contact<span class="token punctuation">,</span>        cust_email<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token string">'Pep E.LaPew'</span><span class="token punctuation">,</span>        <span class="token string">'100 Main Street'</span><span class="token punctuation">,</span>        <span class="token string">'Log Angeles'</span><span class="token punctuation">,</span>        <span class="token string">'CA'</span><span class="token punctuation">,</span>        <span class="token string">'90046'</span><span class="token punctuation">,</span>        <span class="token string">'USA'</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样表结构变了 依然能使用</p><p><strong>提高性能</strong><br>可以在insert 和into 直接添加 low_priority 降低优先级来先处理优先级高的</p><h2 id="插入多行"><a href="#插入多行" class="headerlink" title="插入多行"></a>插入多行</h2><p><strong>1方式</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> customers<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span>        cust_address<span class="token punctuation">,</span>        cust_city<span class="token punctuation">,</span>        cust_state<span class="token punctuation">,</span>        cust_zip<span class="token punctuation">,</span>        cust_country<span class="token punctuation">,</span>        cust_contact<span class="token punctuation">,</span>        cust_email<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token string">'Pep E.LaPew'</span><span class="token punctuation">,</span>        <span class="token string">'100 Main Street'</span><span class="token punctuation">,</span>        <span class="token string">'Log Angeles'</span><span class="token punctuation">,</span>        <span class="token string">'CA'</span><span class="token punctuation">,</span>        <span class="token string">'90046'</span><span class="token punctuation">,</span>        <span class="token string">'USA'</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> customers<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span>        cust_address<span class="token punctuation">,</span>        cust_city<span class="token punctuation">,</span>        cust_state<span class="token punctuation">,</span>        cust_zip<span class="token punctuation">,</span>        cust_country<span class="token punctuation">,</span>        cust_contact<span class="token punctuation">,</span>        cust_email<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token string">'Pe2p E.LaPew'</span><span class="token punctuation">,</span>        <span class="token string">'1002 Main Street'</span><span class="token punctuation">,</span>        <span class="token string">'Log2 Angeles'</span><span class="token punctuation">,</span>        <span class="token string">'CA2'</span><span class="token punctuation">,</span>        <span class="token string">'900462'</span><span class="token punctuation">,</span>        <span class="token string">'USA2'</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2方式</strong><br>效率高 相当于单insert</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> customers<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span>        cust_address<span class="token punctuation">,</span>        cust_city<span class="token punctuation">,</span>        cust_state<span class="token punctuation">,</span>        cust_zip<span class="token punctuation">,</span>        cust_country<span class="token punctuation">,</span>        cust_contact<span class="token punctuation">,</span>        cust_email<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token string">'Pep E.LaPew'</span><span class="token punctuation">,</span>        <span class="token string">'100 Main Street'</span><span class="token punctuation">,</span>        <span class="token string">'Log Angeles'</span><span class="token punctuation">,</span>        <span class="token string">'CA'</span><span class="token punctuation">,</span>        <span class="token string">'90046'</span><span class="token punctuation">,</span>        <span class="token string">'USA'</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">)</span>，<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token string">'Pe2p E.LaPew'</span><span class="token punctuation">,</span>        <span class="token string">'1002 Main Street'</span><span class="token punctuation">,</span>        <span class="token string">'Log2 Angeles'</span><span class="token punctuation">,</span>        <span class="token string">'CA2'</span><span class="token punctuation">,</span>        <span class="token string">'900462'</span><span class="token punctuation">,</span>        <span class="token string">'USA2'</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">,</span>        <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入检索数据"><a href="#插入检索数据" class="headerlink" title="插入检索数据"></a>插入检索数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> customers<span class="token punctuation">(</span>cust_name<span class="token punctuation">,</span>        cust_address<span class="token punctuation">,</span>        cust_city<span class="token punctuation">,</span>        cust_state<span class="token punctuation">,</span>        cust_zip<span class="token punctuation">,</span>        cust_country<span class="token punctuation">,</span>        cust_contact<span class="token punctuation">,</span>        cust_email<span class="token punctuation">)</span><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>        cust_address<span class="token punctuation">,</span>        cust_city<span class="token punctuation">,</span>        cust_state<span class="token punctuation">,</span>        cust_zip<span class="token punctuation">,</span>        cust_country<span class="token punctuation">,</span>        cust_contact<span class="token punctuation">,</span>        cust_email<span class="token keyword">from</span> custnew<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong> 不一定要名称一样</p><h1 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h1><ul><li>页面创建</li><li>语句创建</li></ul><h2 id="创建基础"><a href="#创建基础" class="headerlink" title="创建基础"></a>创建基础</h2><p><img src="/2020/04/06/head-mysql/37.png"></p><h3 id="MYSQL-忽略空格"><a href="#MYSQL-忽略空格" class="headerlink" title="MYSQL 忽略空格"></a><strong>MYSQL 忽略空格</strong></h3><p>以cust_id 为主键</p><h3 id="使用null"><a href="#使用null" class="headerlink" title="使用null"></a><strong>使用null</strong></h3><p>创建的时候不允许null not null在插入时不允许null值<br>null 和 空 不一定</p><h3 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h3><p>每增加一行 自动增 也可以给一个值只要是唯一的<br>select last_insert_id() 可以获得</p><h3 id="default-值"><a href="#default-值" class="headerlink" title="default 值"></a>default 值</h3><h3 id="引擎类型"><a href="#引擎类型" class="headerlink" title="引擎类型"></a>引擎类型</h3><ul><li><p>InnoDB 是可靠的事务处理 不支持全文搜索</p></li><li><p>MEMROY 功能等于MyISAM 数据存在内存，速度很快</p></li><li><p>MyISAM 性能极高 支持全文本搜索 不支持事务处理</p></li></ul><h2 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h2><h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><ul><li>添加列<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> vendors<span class="token keyword">add</span> vend_phone <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>删除列</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> vendors<span class="token keyword">drop</span> <span class="token keyword">columns</span> vend_phone<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>加外键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> orderitems<span class="token keyword">add</span> consraint fk_orderitems_orders<span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span> <span class="token keyword">references</span> orders <span class="token punctuation">(</span>order_num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>复杂表结构更改一般需要手动删除</p><ul><li>新布局建表</li><li>insert select导入旧表数据</li><li>检验新表</li><li>重命名旧表</li><li>重命名新表</li><li>根据需要 重新创建触发器 存储过程 索引 外键</li></ul></li></ul><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>没确认 不撤销</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> custmers2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重命名新表"><a href="#重命名新表" class="headerlink" title="重命名新表"></a>重命名新表</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">rename</span> <span class="token keyword">table</span> custmers2 <span class="token keyword">to</span> customers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图-1"><a href="#视图-1" class="headerlink" title="视图"></a>视图</h2><p>15章的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_contact<span class="token keyword">from</span> customers<span class="token punctuation">,</span>orders<span class="token punctuation">,</span>orderitems<span class="token keyword">where</span> customers<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>orders<span class="token punctuation">.</span>cust_id<span class="token operator">and</span> orders<span class="token punctuation">.</span>order_num<span class="token operator">=</span>orderitems<span class="token punctuation">.</span>order_num<span class="token operator">and</span> prod_id<span class="token operator">=</span><span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个查询包装成一个名为 productscustomers 虚拟表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_contact<span class="token keyword">from</span> productscustomers<span class="token keyword">where</span> prod_id<span class="token operator">=</span><span class="token string">'TNT2'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作为视图不应该有任何列或数据 包含SQL查询</p><h3 id="视图作用"><a href="#视图作用" class="headerlink" title="视图作用"></a>视图作用</h3><ul><li>重用SQL语句</li><li>保护表</li><li>使用表的组成部分而不是整个表</li><li>可更改数据格式</li></ul><p>视图可使用和表基本相同的方式</p><p><strong>视图不包含数据，大量视图可能导致性能问题</strong></p><h3 id="视图规则"><a href="#视图规则" class="headerlink" title="视图规则"></a>视图规则</h3><p><img src="/2020/04/06/head-mysql/38.png"></p><h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><h3 id="简化复杂联结"><a href="#简化复杂联结" class="headerlink" title="简化复杂联结"></a>简化复杂联结</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> productscustomers <span class="token keyword">as</span><span class="token keyword">select</span> cust_name<span class="token punctuation">,</span>cust_contact<span class="token punctuation">,</span>prod_id<span class="token keyword">from</span> customers<span class="token punctuation">,</span>orders<span class="token punctuation">,</span>orderitems<span class="token keyword">where</span> customers<span class="token punctuation">.</span>cust_id<span class="token operator">=</span>orders<span class="token punctuation">.</span>cust_id<span class="token operator">and</span> orders<span class="token punctuation">.</span>order_num<span class="token operator">=</span>orderitems<span class="token punctuation">.</span>order_num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建了productcustomers视图 联结了三个表</p><h3 id="视图格式化检索数据"><a href="#视图格式化检索数据" class="headerlink" title="视图格式化检索数据"></a>视图格式化检索数据</h3><h3 id="过滤不想要的数据"><a href="#过滤不想要的数据" class="headerlink" title="过滤不想要的数据"></a>过滤不想要的数据</h3><h3 id="应该视图用于检索-不更新"><a href="#应该视图用于检索-不更新" class="headerlink" title="应该视图用于检索 不更新"></a>应该视图用于检索 不更新</h3><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>为以后的使用保存一条或者多条MySQL的语句</p><h2 id="为什么使用存储过程"><a href="#为什么使用存储过程" class="headerlink" title="为什么使用存储过程"></a>为什么使用存储过程</h2><ul><li>封装</li><li>保证开发人员和应用程序一个存储过程</li><li>简化对变动的管理</li><li>安全性</li><li>提高性能<h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2></li></ul><h3 id="执行存储过程"><a href="#执行存储过程" class="headerlink" title="执行存储过程"></a>执行存储过程</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">call</span> productpricing<span class="token punctuation">(</span><span class="token variable">@pricelow</span><span class="token punctuation">,</span>                    <span class="token variable">@pricehigh</span><span class="token punctuation">,</span>                    <span class="token variable">@priceaverage</span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">as</span> priceaverage        <span class="token keyword">from</span> products<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是命令行<br>因为Mysql 默认分隔符是; 向上面那样创建会报错<br><strong>解决方法</strong><br>通过delimiter 更改</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">as</span> priceaverage        <span class="token keyword">from</span> products<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token comment">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用参数的存储过程"><a href="#使用参数的存储过程" class="headerlink" title="使用参数的存储过程"></a>使用参数的存储过程</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> productpricing<span class="token punctuation">(</span>        <span class="token keyword">out</span> pl <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">out</span> ph <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">out</span> pa <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span>        <span class="token keyword">into</span> pl        <span class="token keyword">from</span> products<span class="token punctuation">;</span>        <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span>        <span class="token keyword">into</span> ph        <span class="token keyword">from</span> products<span class="token punctuation">;</span>        <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span>        <span class="token keyword">into</span> pa        <span class="token keyword">from</span> products<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token comment">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">call</span> productpricing<span class="token punctuation">(</span><span class="token variable">@pricelow</span><span class="token punctuation">,</span>                    <span class="token variable">@pricehigh</span><span class="token punctuation">,</span>                    <span class="token variable">@priceaverage</span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/39.png"></p><p>带输入输出参数的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> ordertotal<span class="token punctuation">(</span>        <span class="token operator">in</span> onnumber <span class="token keyword">int</span><span class="token punctuation">,</span>        <span class="token keyword">out</span> ototal <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>item_price<span class="token operator">*</span>quantity<span class="token punctuation">)</span>        <span class="token keyword">from</span> orderitems        <span class="token keyword">where</span> order_num <span class="token operator">=</span> onnumber        <span class="token keyword">into</span> ototal<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token comment">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> ordertotal<span class="token punctuation">(</span>        <span class="token operator">in</span> onnumber <span class="token keyword">int</span><span class="token punctuation">,</span>        <span class="token keyword">out</span> ototal <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>item_price<span class="token operator">*</span>quantity<span class="token punctuation">)</span>        <span class="token keyword">from</span> orderitems        <span class="token keyword">where</span> order_num <span class="token operator">=</span> onnumber        <span class="token keyword">into</span> ototal<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token comment">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/40.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">call</span> ordertotal<span class="token punctuation">(</span><span class="token number">20009</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="建立智能存储过程"><a href="#建立智能存储过程" class="headerlink" title="建立智能存储过程"></a>建立智能存储过程</h3><ul><li>获得总计</li><li>把营业税 有条件添加</li><li>返回合计（带税或者不带）</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token comment">-- Name : ordertotal</span><span class="token comment">-- Parameters : onnumber = order_num</span><span class="token comment">--              taxable = 0 if not taxalbe, 1 if taxalbe</span><span class="token comment">--              ototal = 0 order total variable</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> ordertotal<span class="token punctuation">(</span>        <span class="token operator">in</span> onnumber <span class="token keyword">int</span><span class="token punctuation">,</span>        <span class="token operator">in</span> taxable <span class="token keyword">boolean</span><span class="token punctuation">,</span>        <span class="token keyword">out</span> ototal <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">'Obtain order total,optionally adding tax'</span><span class="token keyword">begin</span>        <span class="token comment">-- Declare variable for total</span>        <span class="token keyword">declare</span> total <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">-- Declare tax percentage</span>        <span class="token keyword">declare</span> taxrate <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment">-- get the order total</span>        <span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>item_price<span class="token operator">*</span>quantity<span class="token punctuation">)</span>        <span class="token keyword">from</span> orderitems        <span class="token keyword">where</span> order_num <span class="token operator">=</span> onnumber        <span class="token keyword">into</span> total<span class="token punctuation">;</span>        <span class="token comment">-- Is this taxalbe?</span>        <span class="token keyword">if</span> taxable <span class="token keyword">then</span>                <span class="token comment">-- yes add tax rate to total</span>                <span class="token keyword">select</span> total<span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span>taxable<span class="token punctuation">)</span> <span class="token keyword">into</span> total<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token comment">-- finally save </span>        <span class="token keyword">select</span> total <span class="token keyword">into</span> ototal<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token comment">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">call</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span class="token keyword">call</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@total</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/41.png"></p><h3 id="检查存储过程"><a href="#检查存储过程" class="headerlink" title="检查存储过程"></a>检查存储过程</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> ordertotal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>普通查询没办法得到 第一行 下一行 前10行<br>游标存储在Mysql服务器的数据库查询 是检索出来的结果集 </p><h2 id="使用游标cursor"><a href="#使用游标cursor" class="headerlink" title="使用游标cursor"></a>使用游标cursor</h2><ul><li>使用前要定义 </li><li>使用完要关闭</li></ul><h3 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> processorders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">declare</span> ordernumbers <span class="token keyword">cursor</span>        <span class="token keyword">for</span>        <span class="token keyword">select</span> order_num <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面定义了游标<br>存储过程处理完成后，游标就消失</p><h3 id="打开关闭游标"><a href="#打开关闭游标" class="headerlink" title="打开关闭游标"></a>打开关闭游标</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> processorders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">declare</span> ordernumbers <span class="token keyword">cursor</span>        <span class="token keyword">for</span>        <span class="token keyword">select</span> order_num <span class="token keyword">from</span> orders<span class="token punctuation">;</span>        <span class="token keyword">open</span> ordernumbers<span class="token punctuation">;</span>        <span class="token keyword">close</span> ordernumbers<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> processorders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">declare</span> ordernumbers <span class="token keyword">cursor</span>                <span class="token keyword">select</span> order_num <span class="token keyword">from</span> orders<span class="token punctuation">;</span>        <span class="token keyword">open</span> ordernumbers<span class="token punctuation">;</span>        <span class="token keyword">fetch</span> ordernumbers <span class="token keyword">into</span> o<span class="token punctuation">;</span>        <span class="token keyword">close</span> ordernumbers<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fetch 检索当前行的order_num列 （自动从第一行开始）<br>到一个名为o的局部变量 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> processorders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">declare</span> done <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">declare</span> o <span class="token keyword">int</span><span class="token punctuation">;</span>        <span class="token keyword">declare</span> ordernumbers <span class="token keyword">cursor</span>        <span class="token keyword">for</span>         <span class="token keyword">select</span> order_num <span class="token keyword">from</span> orders<span class="token punctuation">;</span>        <span class="token keyword">declare</span> <span class="token keyword">continue</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> sqlstate <span class="token string">'02000'</span> <span class="token keyword">set</span> done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">open</span> ordernumbers<span class="token punctuation">;</span>                <span class="token keyword">repeat</span>                        <span class="token keyword">fetch</span> ordernumbers <span class="token keyword">into</span> o<span class="token punctuation">;</span>                until done <span class="token keyword">end</span> <span class="token keyword">repeat</span><span class="token punctuation">;</span>        <span class="token keyword">close</span> ordernumbers<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反复执行到done 为真 此时是sqlstate ‘02000’ 如果没找到就是所有行循环完</p><p>局部变量定义在游标之前 句柄在游标之后</p><p><strong>最终案例</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> processorders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>        <span class="token keyword">declare</span> done <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">declare</span> o <span class="token keyword">int</span><span class="token punctuation">;</span>        <span class="token keyword">declare</span> t <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">declare</span> ordernumbers <span class="token keyword">cursor</span>        <span class="token keyword">for</span>         <span class="token keyword">select</span> order_num <span class="token keyword">from</span> orders<span class="token punctuation">;</span>        <span class="token keyword">declare</span> <span class="token keyword">continue</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> sqlstate <span class="token string">'02000'</span> <span class="token keyword">set</span> done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> ordertotals                                   <span class="token punctuation">(</span>order_num <span class="token keyword">int</span><span class="token punctuation">,</span>total <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">open</span> ordernumbers<span class="token punctuation">;</span>                <span class="token keyword">repeat</span>                        <span class="token keyword">fetch</span> ordernumbers <span class="token keyword">into</span> o<span class="token punctuation">;</span>                        <span class="token keyword">call</span> ordertotal<span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">insert</span> <span class="token keyword">into</span> ordertotals<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span>total<span class="token punctuation">)</span>                        <span class="token keyword">values</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                until done <span class="token keyword">end</span> <span class="token keyword">repeat</span><span class="token punctuation">;</span>        <span class="token keyword">close</span> ordernumbers<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/42.png"></p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="触发器定义"><a href="#触发器定义" class="headerlink" title="触发器定义"></a>触发器定义</h2><p>想要某条语句在事件发生时自动执行</p><ul><li>加个顾客，检查电话号码格式是否正确，州缩写是否大写</li><li>订购一个产品，从库存数量减去订购数量</li></ul><p>只有三种语句支持在他们发生后触发</p><ul><li><p>delete</p></li><li><p>insert</p></li><li><p>update </p></li><li><p><strong>只支持表</strong> 不支持临时表和视图</p></li><li><p>每个表最多6个</p></li></ul><h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> newproduct <span class="token keyword">after</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> productcustomers<span class="token comment">-- 现版本不支持for each row select 'Product added'</span><span class="token keyword">for each row</span> <span class="token keyword">select</span> <span class="token string">'Product added'</span> <span class="token keyword">into</span> <span class="token variable">@productinfo</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">trigger</span> newproduct<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h2><h3 id="insert-触发器"><a href="#insert-触发器" class="headerlink" title="insert 触发器"></a>insert 触发器</h3><p>使用<strong>new</strong> 访问被插入的行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> neworder <span class="token keyword">after</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> orders<span class="token comment">-- 现版本不支持for each row select new.order_num </span><span class="token keyword">for each row</span> <span class="token keyword">select</span> new<span class="token punctuation">.</span>order_num <span class="token keyword">into</span> <span class="token variable">@new_order_num</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插入一个新订单到orders表里，mysql表会自动生成<br>order_num（由于auto_increment) 而触发器取得并返回他</p><p>测试</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> orders<span class="token punctuation">(</span>order_date<span class="token punctuation">,</span>cust_id<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@new_order_num</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/43.png"></p><p><strong>还有before 用于数据检验</strong></p><h3 id="delete-触发器"><a href="#delete-触发器" class="headerlink" title="delete 触发器"></a>delete 触发器</h3><p>使用<strong>old</strong> 访问被删除的行 只读</p><p>保存任意删除订单存档</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> neworder before <span class="token keyword">delete</span> <span class="token keyword">on</span> orders<span class="token keyword">for each row</span> <span class="token keyword">begin</span>         <span class="token keyword">insert</span> <span class="token keyword">into</span> archive_orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span>order_date<span class="token punctuation">,</span>cust_id<span class="token punctuation">)</span>         <span class="token keyword">values</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span>old<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span>old<span class="token punctuation">.</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果订单不能存档 delete 会放弃</p><h3 id="update触发器"><a href="#update触发器" class="headerlink" title="update触发器"></a>update触发器</h3><p>综合 insert 和delete</p><ul><li>old访问旧值 new访问心智</li><li>在before 之前 new运行更新 （更改update的数据）</li><li>old 只读<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> neworder before <span class="token keyword">update</span> <span class="token keyword">on</span> orders<span class="token keyword">for each row</span> <span class="token keyword">set</span> new<span class="token punctuation">.</span>vend_state <span class="token operator">=</span> upper<span class="token punctuation">(</span>new<span class="token punctuation">.</span>vend_state<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li>需要权限 </li><li>用来保持数据一致</li><li>不支持call 得拷贝过程代码 过来</li></ul><h1 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h1><p>InnoDB支持 </p><h2 id="事务处理定义"><a href="#事务处理定义" class="headerlink" title="事务处理定义"></a>事务处理定义</h2><p>维护数据库的完整性，保证成批的Mysql操作要么完全执行，要么完全不执行<br>设计良好的数据库都是关联的<br>例：orders和orderitems两个表 orders 实际订单 orderitems 存储订购产品，两个表通过主键 互相关联</p><p>给系统添加订单过程</p><ol><li> 检查有无对应客户 customers表 没有添加</li><li>检索客户id</li><li>添加一行到orders表 与客户ID关联</li><li>检索orders 赋值的新订单ID</li><li>对于每个订购物品在orderitems表添加一行 通过检索的ID与orders表关联<br>（产品ID与products表关联）</li></ol><p>如果过程中发生了数据库故障（超出空间，安全限制，表锁）<br>阻止其中的过程就会出现 有订单无信息的情况</p><p><strong>事务管理添加</strong></p><ol><li> 检查有无对应客户 customers表 没有添加</li><li>提交客户信息</li><li>检索客户id</li><li>添加一行到orders表 </li><li>如果在添加行orders表 出现故障，回退</li><li>检索orders 赋值的新订单ID</li><li>对于每个订购物品在orderitems表添加一行 </li><li>如果添加新行到orderitems 出现故障，回退所有添加的orderitems行和orders行</li><li>提交订单信息</li></ol><p><strong>KEYWORDS</strong></p><ul><li>事务 transaction 一组SQL语句</li><li>回退 rollback 撤销指定SQL语句过程</li><li>提交 commit 讲为存储的SQL语句写入数据库表</li><li>保留点 savepoint 事务处理的临时占位符 place-holder 可以对它发布回退（与回退整个事务处理不同）</li></ul><h2 id="控制事务"><a href="#控制事务" class="headerlink" title="控制事务"></a>控制事务</h2><h3 id="rollback"><a href="#rollback" class="headerlink" title="rollback"></a>rollback</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ordertotals<span class="token punctuation">;</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> ordertotals<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ordertotals<span class="token punctuation">;</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ordertotals<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删了回退</p><p><img src="/2020/04/06/head-mysql/44.png"></p><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>一般Mysql语句都是直接针对数据库操作 是隐含提交<br>implicit commit </p><p>事务处理里面不会隐含提交</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> ordertotals <span class="token keyword">where</span> order_num <span class="token operator">=</span> <span class="token number">20010</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> orders <span class="token keyword">where</span> order_num <span class="token operator">=</span> <span class="token number">20010</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>commit 只在两条都成功的情况下提交</strong></p><h3 id="savepoint"><a href="#savepoint" class="headerlink" title="savepoint"></a>savepoint</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">savepoint</span> delete1；<span class="token keyword">rollback</span> <span class="token keyword">to</span> delete1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>保留点越多越好 自己意愿回退</li></ul><h3 id="更改默认提交行为"><a href="#更改默认提交行为" class="headerlink" title="更改默认提交行为"></a>更改默认提交行为</h3><p>set autocommit=0 </p><h1 id="全球化和本地化（多种语言字符集）"><a href="#全球化和本地化（多种语言字符集）" class="headerlink" title="全球化和本地化（多种语言字符集）"></a>全球化和本地化（多种语言字符集）</h1><h2 id="字符集校对顺序"><a href="#字符集校对顺序" class="headerlink" title="字符集校对顺序"></a>字符集校对顺序</h2><p>多种语言 字符集</p><ul><li>字符集 字母和符合集合</li><li>编码 字符集成员内部表示</li><li>校对 规定字符如何比较<br>例：校对APE apex Apple 的正确排序顺序 依赖是否区分大小写<br>也影响搜索，以及法文 德文排序</li></ul><h2 id="使用字符集-和校对顺序"><a href="#使用字符集-和校对顺序" class="headerlink" title="使用字符集 和校对顺序"></a>使用字符集 和校对顺序</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">character</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/45.png"></p><p>展示了可用字符集合默认校对</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> collation<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>展示可用校对 一个字符集有很多校对  很多校对两次<br>一次区分大小写 （_cs) 一次不区分大小写（_ci)</p><p><img src="/2020/04/06/head-mysql/46.png"></p><p>默认的字符集和校对 系统管理</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'character%'</span><span class="token punctuation">;</span><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'collation%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/47.png"></p><h3 id="创建表指定字符集校对"><a href="#创建表指定字符集校对" class="headerlink" title="创建表指定字符集校对"></a>创建表指定字符集校对</h3><ul><li>对整个表<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> mytable<span class="token punctuation">(</span>        column1 <span class="token keyword">int</span><span class="token punctuation">,</span>        column2 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">character</span> <span class="token keyword">set</span> hebrew<span class="token keyword">collate</span> hebrew_general_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>对整个表和特定的列</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> mytable<span class="token punctuation">(</span>        column1 <span class="token keyword">int</span><span class="token punctuation">,</span>        column2 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        column3 <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">character</span> <span class="token keyword">set</span> latin1 <span class="token keyword">collate</span>                                          latin1_general_ci<span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">character</span> <span class="token keyword">set</span> hebrew<span class="token keyword">collate</span> hebrew_general_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>以创建表不同的校对顺序排序</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> customers<span class="token keyword">order</span> <span class="token keyword">by</span> lastname<span class="token punctuation">,</span>fisrtname <span class="token keyword">collate</span> latin1_general_cs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>临时区分大小写</p><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><ul><li>多数用户能读写 少数能创建删除</li><li>有些只能读 不能更新</li><li>允许添加 不允许删除</li><li>有用户处理用户账号权限</li><li>只能通过存储过程访问数据 不直接</li><li>登录地点限制</li></ul><p><strong>防止无意错误</strong><br><strong>不要使用root</strong> </p><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/48.png"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> ben identified <span class="token keyword">by</span> <span class="token string">'p@$$w0rd'</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>indentified by 指定纯文本口令作为散列值加密，密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">rename</span> <span class="token keyword">user</span> ben <span class="token keyword">to</span> beforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/49.png"></p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">user</span> beforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h3><h4 id="查看访问权限"><a href="#查看访问权限" class="headerlink" title="查看访问权限"></a>查看访问权限</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> grants <span class="token keyword">for</span> beforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/04/06/head-mysql/50_1.png"><br>权限 usage on <em>.</em> 代表根本没有任何权限</p><h4 id="赋值和撤销访问权限"><a href="#赋值和撤销访问权限" class="headerlink" title="赋值和撤销访问权限"></a>赋值和撤销访问权限</h4><p>每个grant 添加一个权限</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">select</span> <span class="token keyword">on</span> crashcourse<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> beforta<span class="token punctuation">;</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> beforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">revoke</span> <span class="token keyword">select</span> <span class="token keyword">on</span> crashcourse<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> beforta<span class="token punctuation">;</span><span class="token keyword">show</span> grants <span class="token keyword">for</span> beforta<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>grand 和revoke 控制访问权限层次</p><ul><li>整个服务器，使用grant all 和 revoke all</li><li>整个数据库 on database.*</li><li>特定表 on datebase.table</li><li>特定的列</li><li>特定的存储过程</li></ul><p><img src="/2020/04/06/head-mysql/50_2.png"><br><img src="/2020/04/06/head-mysql/50_3.png"></p><p><strong>注意点：</strong> </p><ul><li>grant revoke 用户必须存在但是对象不一定</li><li>可以简化 grant select,insert on crashcourse.* to bforta;</li></ul><h4 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> password <span class="token keyword">for</span> bforta <span class="token operator">=</span>Password<span class="token punctuation">(</span><span class="token string">'n3w p@$$w0rd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h1><h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><ul><li>mysqldump  转储数据库到外部</li><li>mysqlhotcopy 从一个数据库复制所有数据</li><li>backup table 或者select into outfile 到外部文件<br>用restore table 复原</li></ul><h2 id="进行数据库维护"><a href="#进行数据库维护" class="headerlink" title="进行数据库维护"></a>进行数据库维护</h2><p>查看表键 对不对<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">analyze</span> <span class="token keyword">table</span> orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>发现修复问题<br> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">check</span> <span class="token keyword">table</span> orders<span class="token punctuation">,</span>orderitems<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>删除大量数据后用回收空间<br> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">optimize</span> <span class="token keyword">table</span> orders<span class="token punctuation">,</span>orderitems<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><img src="/2020/04/06/head-mysql/51.png"><p></p><h2 id="诊断启动问题"><a href="#诊断启动问题" class="headerlink" title="诊断启动问题"></a>诊断启动问题</h2><p>大多是自动启动<br>mysqld 手动启动</p><ul><li>–help 显示帮助</li><li>–safe-mode 装载 减去某些最近配置服务器</li><li>–verbose 显示全文本消息</li><li>–version </li></ul><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><ul><li>错误日志 hostname.err data目录</li><li>查询日志 所有活动hostname.log </li><li>二进制日志 更新过数据的所有语句 hostname-bin</li><li>缓慢查询日志 记录执行缓慢的任何查询来优化</li></ul><h1 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h1><blockquote><p><a href="http://dev.mysql.com/doc/">http://dev.mysql.com/doc/</a> Mysql文档</p></blockquote><p><strong>TIPS</strong></p><ul><li>所有DBMS有特定硬件建议</li><li>开始是默认设置，一段时间可能需要调整内存分配。<br>缓存区大小 （当前设置 show variables 和show status)。</li><li>MYSQL多用户多线程的，一个执行慢，大家都满。 show processlit显示活动进程。 kill 终结。</li><li>总是有不只一种方法编写select，  联结子查询。</li><li>explain， 解释如何执行一个select 。</li><li>存储过程比一条一条快。</li><li>绝不检索比需求多。</li><li>有操作支持delayed ，将控制返回调用程序 ，一有可能再执行。</li><li>导入数据， 应该关闭自动提交， 你可能删除索引， 包括fulltext索引<br>导入完在重建。</li><li>必须索引数据库表改善数据检索性能，可需要分析使用的select以找出重复的where 和order by 。如果一个简单的where子句 返回结果所花时间太长，可以断定其中使用的列需要索引</li><li>一个select 有一系列or 吗？ 通过多条和UNION语句，极大改善性能。</li><li>索引改善检索性能，损害数据插入、删除、更新性能。（索引可根据需要添加删除）</li><li>like很慢。一般用fulltext 而不是like</li><li>数据库不断变化，理想配置也是</li><li><strong>重要的是每条规则在某些条件会被打破</strong></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>串字符<br><img src="/2020/04/06/head-mysql/52.png"></p><p>数值类型<br><img src="/2020/04/06/head-mysql/53.png"></p><p>日期时间<br><img src="/2020/04/06/head-mysql/54.png"></p><p>二进制<br><img src="/2020/04/06/head-mysql/55.png"></p>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
          <category> Base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>head java first</title>
      <link href="2020/03/20/head-java-first/"/>
      <url>2020/03/20/head-java-first/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#base">base</a><ul><li><a href="#%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98">对象引用问题</a></li><li><a href="#%E6%95%B0%E7%BB%84%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1">数组是一个对象</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96-%E5%B0%8F%E5%88%B0%E5%A4%A7--%E5%A4%A7%E5%88%B0%E5%B0%8F%E9%9C%80%E8%A6%81%E6%98%BE%E7%A4%BA%E6%8C%87%E6%B4%BE">类型转化 小到大  大到小需要显示指派</a></li><li><a href="#%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F%E6%9C%89%E9%BB%98%E8%AE%A4%E5%80%BC-%E7%B1%BB%E9%87%8C--%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%B2%A1%E6%9C%89%E9%BB%98%E8%AE%A4%E5%80%BC-%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E6%8A%A5%E9%94%99">实例变量有默认值 （类里）  局部变量没有默认值 直接使用报错</a></li><li><a href="#-%E5%8F%AA%E6%98%AF%E6%AF%94%E8%BE%83%E9%87%8C%E9%9D%A2%E7%9A%84%E5%AD%97%E8%8A%82">== 只是比较里面的字节</a></li><li><a href="#arraylist-%E9%87%8C%E9%9D%A2%E6%94%BE%E7%9A%84%E6%98%AF%E5%AF%B9%E8%B1%A1--%E5%A6%82%E6%9E%9C%E6%98%AF%E4%B8%BB%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E4%BC%9A%E8%A2%AB%E5%8C%85%E8%A3%85%E6%88%90object">ArrayList 里面放的是对象  如果是主数据类型 会被包装成object</a></li></ul></li><li><a href="#%E5%A4%9A%E6%80%81-1-%E7%BB%A7%E6%89%BF">多态 1 继承</a><ul><li><a href="#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9C%8B%E5%B7%A6%E8%BE%B9%E9%9D%9E%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%BC%96%E8%AF%91%E7%9C%8B%E5%B7%A6%E8%BE%B9%E8%BF%90%E8%A1%8C%E7%9C%8B%E5%8F%B3%E8%BE%B9">成员变量，静态方法看左边；非静态方法：编译看左边，运行看右边</a></li><li><a href="#%E5%AD%90%E7%B1%BB%E6%83%B3%E8%A6%81%E5%BC%95%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%E5%8A%A0%E4%B8%8A%E4%B8%80%E4%BA%9B">子类想要引用父类的方法加上一些</a></li><li><a href="#%E8%BF%90%E7%94%A8%E4%BA%8B%E6%80%81%E6%97%B6%E5%BC%95%E7%94%A8%E8%8B%B1%E5%9E%8B%E5%8F%AF%E4%BB%A5%E6%98%AF%E5%AE%9E%E9%99%85%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E7%88%B6%E7%B1%BB%E5%A4%9A%E6%80%81">运用事态时，引用英型可以是实际对象类型的父类（多态）</a></li><li><a href="#%E6%97%A0%E6%B3%95%E7%9C%8B%E5%88%B0%E6%BA%90%E7%A0%81-%E5%8F%88%E6%83%B3%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95-%E5%8F%AF%E4%BB%A5%E7%BB%A7%E6%89%BF%E6%9D%A5%E5%81%9A">无法看到源码 又想修改方法 可以继承来做</a></li><li><a href="#final-%E6%A0%87%E8%AE%B0%E6%96%B9%E6%B3%95%E9%98%B2%E6%AD%A2%E8%A6%86%E7%9B%96">final 标记方法防止覆盖</a></li><li><a href="#%E5%8F%82%E6%95%B0%E4%B8%80%E6%A0%B7-%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%E5%85%BC%E5%AE%B9-%E4%B8%8D%E9%99%8D%E4%BD%8E%E8%AF%BB%E5%8F%96%E6%9D%83%E9%99%90">参数一样 返回类型兼容 不降低读取权限</a></li></ul></li><li><a href="#%E9%87%8D%E8%BD%BD">重载</a></li><li><a href="#%E5%A4%9A%E6%80%81-2-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E6%8A%BD%E8%B1%A1%E7%B1%BB">多态 2 接口与抽象类</a><ul><li><a href="#%E6%8A%BD%E8%B1%A1%E7%B1%BB--%E4%B8%8D%E8%83%BD%E8%AE%A9animals-new-%E5%87%BA%E6%9D%A5-%E4%B8%8D%E7%9F%A5%E9%81%93%E4%BB%80%E4%B9%88%E5%8A%A8%E7%89%A9%E6%98%AF%E5%8A%A8%E7%89%A9">抽象类  不能让animals new 出来 （不知道什么动物是动物）</a></li></ul></li><li><a href="#%E6%89%80%E6%9C%89%E7%B1%BB%E7%BB%A7%E6%89%BF%E4%BA%86object">所有类继承了Object</a><ul><li><a href="#%E5%8F%AF%E4%BB%A5%E8%A6%86%E7%9B%96%E9%83%A8%E5%88%86%E6%96%B9%E6%B3%95%E4%BD%86%E6%98%AF%E9%83%A8%E5%88%86%E6%98%AFfinal%E5%BC%BA%E7%83%88%E5%BB%BA%E8%AE%AE%E8%A6%86%E7%9B%96hashcode-equals-tostring">可以覆盖部分方法，但是部分是final(强烈建议覆盖hashcode equals toString)</a></li><li><a href="#%E4%B8%8D%E5%8F%AF%E6%8A%8A%E6%89%80%E6%9C%89%E8%BF%94%E5%9B%9E%E5%92%8C%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE%E6%88%90object">不可把所有返回和参数设置成Object</a></li><li><a href="#%E6%9C%89%E4%BA%9B%E5%8A%A8%E7%89%A9%E6%83%B3%E8%A6%81pets">有些动物想要pets</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E5%A4%9A%E6%80%81-%E5%AF%B9%E8%B1%A1%E5%8F%AF%E4%BB%A5%E6%9D%A5%E8%87%AA%E4%BB%BB%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AD%90%E7%B1%BB">接口类型作为多态 对象可以来自任何实现接口的子类</a></li><li><a href="#%E5%90%8C%E4%B8%80%E4%B8%AA%E7%B1%BB%E6%89%80%E6%9C%89%E5%AE%9E%E4%BE%8B%E5%85%B1%E4%BA%AB%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F-%E6%97%A0%E5%AF%B9%E8%B1%A1%E5%85%88%E5%88%9D%E5%A7%8B%E5%8C%96">同一个类所有实例共享一个静态变量 无对象先初始化</a></li><li><a href="#static-final-%E6%98%AF-%E5%B8%B8%E9%87%8F-%E6%AF%94%E5%A6%82pi">Static final 是 常量 比如PI</a></li><li><a href="#final">final</a></li></ul></li><li><a href="#autobox">autobox</a><ul><li><a href="#string%E8%BD%ACprimitive">String转Primitive</a></li></ul></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a><ul><li><a href="#%E5%A6%82%E6%9E%9C%E6%9C%89%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8-%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%80%E5%AE%9A%E8%A6%81%E4%BD%A0%E5%A4%84%E7%90%86-%E9%99%A4%E4%BA%86runtimeexp%E4%B8%80%E8%88%AC%E6%98%AF%E9%80%BB%E8%BE%91%E9%94%99%E8%AF%AF">如果有抛出异常 编译器一定要你处理 除了runtimeexp(一般是逻辑错误)</a></li><li><a href="#%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8-try-%E7%9B%B4%E6%8E%A5%E5%88%B0catch">出现异常 try 直接到catch</a></li><li><a href="#finally-%E6%97%A0%E8%AE%BA%E6%80%8E%E4%B9%88%E6%A0%B7%E9%83%BD%E6%89%A7%E8%A1%8C">finally 无论怎么样都执行</a></li><li><a href="#duck-%E7%BB%99%E8%B0%83%E7%94%A8%E5%A4%84%E7%90%86">duck 给调用处理</a></li></ul></li><li><a href="#gui">Gui</a><ul><li><a href="#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6%E6%BA%90">监听事件源</a></li><li><a href="#%E5%90%8C%E6%97%B6%E7%9B%91%E5%90%AC%E4%B8%A4%E4%BB%B6%E4%BA%8B">同时监听两件事</a></li></ul></li><li><a href="#io">IO</a><ul><li><a href="#%E5%AD%97%E8%8A%82%E5%9E%8B">字节型</a><ul><li><a href="#%E8%AF%BB%E5%86%99">读写</a></li><li><a href="#%E9%97%AE%E9%A2%98">问题</a></li></ul></li><li><a href="#%E5%AD%97%E7%AC%A6%E5%9E%8B">字符型</a><ul><li><a href="#%E8%AF%BB%E5%86%99-1">读写</a></li></ul></li></ul></li><li><a href="#swing">Swing</a><ul><li><a href="#3%E7%A7%8D%E9%A3%8E%E6%A0%BC">3种风格</a></li></ul></li><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96-%E6%96%87%E4%BB%B6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA">序列化 文件输入输出</a><ul><li><a href="#%E5%BA%8F%E5%88%97%E5%8C%96">序列化</a></li><li><a href="#%E8%A7%A3%E5%BA%8F%E5%88%97%E5%8C%96">解序列化</a></li><li><a href="#%E5%86%99%E6%96%87%E6%9C%AC">写文本</a></li><li><a href="#%E9%97%AE%E9%A2%98-%E4%B8%87%E4%B8%80%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B%E5%90%8E%E4%BF%AE%E6%94%B9%E7%B1%BB-%E6%80%8E%E4%B9%88%E5%8A%9E">问题 万一序列化之后修改类 怎么办</a></li></ul></li><li><a href="#%E7%BD%91%E7%BB%9C%E5%92%8C%E7%BA%BF%E7%A8%8B">网络和线程</a><ul><li><a href="#%E7%BD%91%E7%BB%9C">网络</a><ul><li><a href="#serversock%E7%9A%84backlog%E6%98%AF%E5%90%8C%E6%97%B6%E8%83%BD%E7%9B%91%E5%90%AC%E7%9A%84%E6%95%B0%E7%9B%AE-%E4%B8%8D%E5%8C%85%E6%8B%AC%E5%B7%B2%E6%8E%A5%E5%8F%97%E7%9A%84">ServerSock的Backlog是同时能监听的数目 （不包括已接受的）</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E8%AF%BB%E5%9B%BE">基本读图</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E5%86%99%E5%9B%BE">基本写图</a></li><li><a href="#%E5%8F%AF%E4%BB%A5%E7%94%A8-sockshutdownoutput%E4%BD%9C%E4%B8%BA%E7%BB%93%E6%9D%9F%E6%A0%87%E8%AF%86">可以用 sock.shutdownOutPut作为结束标识</a></li></ul></li><li><a href="#%E7%BA%BF%E7%A8%8B">线程</a><ul><li><a href="#synchornized">synchornized</a></li><li><a href="#lock-%E6%9D%A5%E8%8E%B7%E5%BE%97%E9%87%8A%E6%94%BE%E9%94%81">Lock 来获得释放锁</a></li><li><a href="#%E5%90%8C%E6%AD%A5%E5%8C%96%E5%AF%B9%E8%B1%A1">同步化对象</a></li><li><a href="#%E4%B8%A2%E5%A4%B1%E6%9B%B4%E6%96%B0">丢失更新</a></li></ul></li></ul></li><li><a href="#%E9%9B%86%E5%90%88%E4%B8%8E%E6%B3%9B%E5%9E%8B">集合与泛型</a><ul><li><a href="#%E7%82%B9%E6%AD%8C%E7%B3%BB%E7%BB%9F%E6%8E%92%E5%BA%8F-arraylist-%E6%B2%A1%E6%9C%89sort">点歌系统排序 ArrayList 没有sort</a></li><li><a href="#obeject-%E6%9C%89tostring-%E6%96%B9%E6%B3%95-%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E8%A6%86%E7%9B%96%E6%83%B3%E8%A6%81printf-%E5%B0%B1%E8%87%AA%E5%B7%B1%E8%A6%86%E7%9B%96">Obeject 有toString() 方法 可以自己覆盖想要printf 就自己覆盖</a></li><li><a href="#%E6%83%B3%E8%A6%81-sort-song4%E4%B8%AAstring%E5%B1%9E%E6%80%A7">想要 sort SONG(4个String属性)</a></li></ul></li><li><a href="#%E6%B3%9B%E5%9E%8B">泛型</a><ul><li><a href="#comparator-%E6%AF%94%E8%BE%83%E7%AC%A6%E5%8F%B7">Comparator 比较符号</a></li><li><a href="#comparable-%E4%BD%BF%E8%BF%99%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%8F%AF%E6%AF%94%E8%BE%83">Comparable 使这个对象可比较</a></li><li><a href="#song-%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0">Song 排序实现</a></li><li><a href="#%E8%BF%98%E6%83%B3%E8%A6%81%E9%80%9A%E8%BF%87%E6%AD%8C%E6%98%9F%E6%8E%92%E5%BA%8F">还想要通过歌星排序</a></li><li><a href="#%E5%A6%82%E6%9E%9C%E6%9C%89%E9%87%8D%E5%A4%8D%E7%9A%84%E6%AD%8C%E5%90%8D">如果有重复的歌名</a></li><li><a href="#set-%E4%B9%8B%E4%B8%AD%E6%80%8E%E4%B9%88%E7%AE%97%E4%B8%A4%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89">Set 之中怎么算两元素相等</a></li><li><a href="#equals-hashcode-%E8%A7%84%E5%AE%9A">equals hashCode 规定</a></li><li><a href="#treeset-%E5%8A%A0%E5%85%A5%E5%85%83%E7%B4%A0%E4%BC%9A%E9%BB%98%E8%AE%A4%E9%80%9A%E8%BF%87compareto%E6%8E%92%E5%BA%8F-%E6%88%96%E8%80%85comparator">TreeSet 加入元素会默认通过compareTo()排序 或者comparator</a></li><li><a href="#%E5%AF%B9%E4%BA%8Earraylistanimals%E5%8F%82%E6%95%B0-%E4%B8%8D%E8%83%BD%E7%94%A8arraylistdogs%E4%BB%A3%E6%9B%BF-%E5%92%8C%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E6%A0%B7">对于Arraylist<animals>参数 不能用Arraylist<dogs>代替 和数组的安全检查时间不一样</dogs></animals></a></li><li><a href="#%E7%94%A8%E4%B8%87%E7%94%A8%E5%AD%97%E7%AC%A6%E4%B8%80%E7%A7%8D%E6%B3%9B%E5%9E%8B-%E4%BC%9A%E9%98%BB%E6%AD%A2%E7%A0%B4%E5%9D%8F%E9%9B%86%E5%90%88%E7%9A%84%E6%93%8D%E4%BD%9C">用万用字符（一种泛型） 会阻止破坏集合的操作</a></li></ul></li><li><a href="#%E5%8F%91%E5%B8%83%E7%A8%8B%E5%BA%8F">发布程序</a><ul><li><a href="#%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F">几种方式</a></li><li><a href="#jar-%E4%B8%80%E7%BB%84%E7%B1%BB%E6%96%87%E4%BB%B6%E5%8C%85%E8%A3%85%E8%B5%B7%E6%9D%A5">JAR 一组类文件包装起来</a><ul><li><a href="#%E6%89%A7%E8%A1%8Cjar-java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%83%BD%E4%BB%8Ejar%E4%B8%AD%E6%89%BE%E5%88%B0main">执行JAR java虚拟机能从JAR中找到main</a></li><li><a href="#%E5%8C%85%E9%98%B2%E6%AD%A2%E7%B1%BB%E5%86%B2%E7%AA%81-%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C">包防止类冲突 编译执行</a></li></ul></li><li><a href="#java-web-start">JAVA web Start</a></li></ul></li><li><a href="#rmi-remote-method-innovacation-%E8%BF%9C%E7%A8%8B%E7%A8%8B%E5%BA%8F">RMI (Remote Method Innovacation) 远程程序</a><ul><li><a href="#servlet">servlet</a></li><li><a href="#jini--%E6%89%BE%E6%8E%A5%E5%8F%A3">JINI  找接口</a></li></ul></li><li><a href="#appendix">Appendix</a><ul><li><a href="#string-%E7%9A%84%E4%B8%8D%E5%8F%98%E6%80%A7-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E4%B8%8D%E5%8F%98%E6%80%A7">String 的不变性 包装类的不变性</a></li><li><a href="#%E6%96%AD%E8%A8%80">断言</a></li><li><a href="#%E9%9D%99%E6%80%81%E5%B5%8C%E5%A5%97%E7%B1%BB">静态嵌套类</a></li><li><a href="#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">多维数组</a></li><li><a href="#enum">enum</a></li></ul></li></ul><!-- /TOC --><h1 id="base"><a href="#base" class="headerlink" title="base"></a>base</h1><h2 id="对象引用问题"><a href="#对象引用问题" class="headerlink" title="对象引用问题"></a>对象引用问题</h2><p><img src="/2020/03/20/head-java-first/1.png"><br><img src="/2020/03/20/head-java-first/2.png"><br><img src="/2020/03/20/head-java-first/3.png"></p><h2 id="数组是一个对象"><a href="#数组是一个对象" class="headerlink" title="数组是一个对象"></a>数组是一个对象</h2><p><img src="/2020/03/20/head-java-first/4.png"><br><img src="/2020/03/20/head-java-first/5.png"></p><h2 id="类型转化-小到大-大到小需要显示指派"><a href="#类型转化-小到大-大到小需要显示指派" class="headerlink" title="类型转化 小到大  大到小需要显示指派"></a>类型转化 小到大  大到小需要显示指派</h2><h2 id="实例变量有默认值-（类里）-局部变量没有默认值-直接使用报错"><a href="#实例变量有默认值-（类里）-局部变量没有默认值-直接使用报错" class="headerlink" title="实例变量有默认值 （类里）  局部变量没有默认值 直接使用报错"></a>实例变量有默认值 （类里）  局部变量没有默认值 直接使用报错</h2><p><img src="/2020/03/20/head-java-first/6.png"></p><h2 id="只是比较里面的字节"><a href="#只是比较里面的字节" class="headerlink" title="== 只是比较里面的字节"></a>== 只是比较里面的字节</h2><h2 id="ArrayList-里面放的是对象-如果是主数据类型-会被包装成object"><a href="#ArrayList-里面放的是对象-如果是主数据类型-会被包装成object" class="headerlink" title="ArrayList 里面放的是对象  如果是主数据类型 会被包装成object"></a>ArrayList 里面放的是对象  如果是主数据类型 会被包装成object</h2><h1 id="多态-1-继承"><a href="#多态-1-继承" class="headerlink" title="多态 1 继承"></a>多态 1 继承</h1><h2 id="成员变量，静态方法看左边；非静态方法：编译看左边，运行看右边"><a href="#成员变量，静态方法看左边；非静态方法：编译看左边，运行看右边" class="headerlink" title="成员变量，静态方法看左边；非静态方法：编译看左边，运行看右边"></a>成员变量，静态方法看左边；非静态方法：编译看左边，运行看右边</h2><p>当父类变量引用子类对象时（Fu f = new Zi();在这个引用变量f指向的对象中，他的成员变量和静态方法与父类是一致的，他的非静态方法，在编译时是与父类一致的，运行时却与子类一致（发生了复写）。</p><p>个人分析：</p><p>Fu f = new Zi();———-首先了解变量F到底是什么，把这句子分2段：Fu f;这是声明一个变量f为Fu这个类，那么知道了f肯定是Fu类。然后我们f=newZi();中建立一个子类对象赋值给了f，结果是什么？？</p><p>结果是，拥有了被Zi类函数覆盖后的Fu类对象—-f——。</p><p>——————————————-也就是说：</p><p>只有子类的函数覆盖了父类的函数这一个变化，但是f肯定是Fu这个类，也就是说f不可能变成其他比如Zi这个类等等(突然f拥有了Zi类特有函数，成员变量等都是不可能的）。<font color="red" size="5">所以f所代表的是函数被复写后（多态的意义）的一个Fu类，而Fu类原来有的成员变量（不是成员函数不可能被复写）没有任何变化</font>—————-获得结论：A：成员变量：编译和运行都看Fu。</p><p>但是f的Fu类函数被复写了。————–获得结论：B：非静态方法：编译看Fu，运行看Zi</p><p>对于静态方法：编译和运行都看Fu！！</p><p>其实很简单，首先我们要理解静态情况下发生了什么？</p><p>—————-<font color="red" size="5">当静态时，Fu类的所有函数跟随Fu类加载而加载了。也就是Fu类的函数(是先于对象建立之前就存在了，无法被后出现的Zi类对象所复写的，所以没发生复写，那么获得：</font>C：静态方法：编译和运行都看Fu。</p><h2 id="子类想要引用父类的方法加上一些"><a href="#子类想要引用父类的方法加上一些" class="headerlink" title="子类想要引用父类的方法加上一些"></a>子类想要引用父类的方法加上一些</h2><p><img src="/2020/03/20/head-java-first/7.png"></p><h2 id="运用事态时，引用英型可以是实际对象类型的父类（多态）"><a href="#运用事态时，引用英型可以是实际对象类型的父类（多态）" class="headerlink" title="运用事态时，引用英型可以是实际对象类型的父类（多态）"></a>运用事态时，引用英型可以是实际对象类型的父类（多态）</h2><p>多态最强的地方 数组调用<br><img src="/2020/03/20/head-java-first/8.png"><br>或者在传递参数时 用父类引用来控制所有子类<br><img src="/2020/03/20/head-java-first/9.png"></p><h2 id="无法看到源码-又想修改方法-可以继承来做"><a href="#无法看到源码-又想修改方法-可以继承来做" class="headerlink" title="无法看到源码 又想修改方法 可以继承来做"></a>无法看到源码 又想修改方法 可以继承来做</h2><h2 id="final-标记方法防止覆盖"><a href="#final-标记方法防止覆盖" class="headerlink" title="final 标记方法防止覆盖"></a>final 标记方法防止覆盖</h2><h2 id="参数一样-返回类型兼容-不降低读取权限"><a href="#参数一样-返回类型兼容-不降低读取权限" class="headerlink" title="参数一样 返回类型兼容 不降低读取权限"></a>参数一样 返回类型兼容 不降低读取权限</h2><h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><p>与继承多态无关 只是刚好名称相同的不同方法<br>不能只改返回类型</p><h1 id="多态-2-接口与抽象类"><a href="#多态-2-接口与抽象类" class="headerlink" title="多态 2 接口与抽象类"></a>多态 2 接口与抽象类</h1><h2 id="抽象类-不能让animals-new-出来-（不知道什么动物是动物）"><a href="#抽象类-不能让animals-new-出来-（不知道什么动物是动物）" class="headerlink" title="抽象类  不能让animals new 出来 （不知道什么动物是动物）"></a>抽象类  不能让animals new 出来 （不知道什么动物是动物）</h2><p><img src="/2020/03/20/head-java-first/10.png"><br>抽象方法 必须在子类被实现</p><h1 id="所有类继承了Object"><a href="#所有类继承了Object" class="headerlink" title="所有类继承了Object"></a>所有类继承了Object</h1><h2 id="可以覆盖部分方法，但是部分是final-强烈建议覆盖hashcode-equals-toString"><a href="#可以覆盖部分方法，但是部分是final-强烈建议覆盖hashcode-equals-toString" class="headerlink" title="可以覆盖部分方法，但是部分是final(强烈建议覆盖hashcode equals toString)"></a>可以覆盖部分方法，但是部分是final(强烈建议覆盖hashcode equals toString)</h2><h2 id="不可把所有返回和参数设置成Object"><a href="#不可把所有返回和参数设置成Object" class="headerlink" title="不可把所有返回和参数设置成Object"></a>不可把所有返回和参数设置成Object</h2><p><img src="/2020/03/20/head-java-first/11.png"><br>对于Object来说定义出来只能是Object对象</p><p><img src="/2020/03/20/head-java-first/12.png"></p><p><img src="/2020/03/20/head-java-first/13.png"></p><p><img src="/2020/03/20/head-java-first/14.png"></p><h2 id="有些动物想要pets"><a href="#有些动物想要pets" class="headerlink" title="有些动物想要pets"></a>有些动物想要pets</h2><p><img src="/2020/03/20/head-java-first/15.png"></p><h2 id="接口类型作为多态-对象可以来自任何实现接口的子类"><a href="#接口类型作为多态-对象可以来自任何实现接口的子类" class="headerlink" title="接口类型作为多态 对象可以来自任何实现接口的子类"></a>接口类型作为多态 对象可以来自任何实现接口的子类</h2><h1 id="构造器和垃圾回收"><a href="#构造器和垃圾回收" class="headerlink" title="构造器和垃圾回收"></a>构造器和垃圾回收</h1><h2 id="只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造"><a href="#只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造" class="headerlink" title="只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造"></a>只有你什么构造函数都没写的情况下，编译器会写个默认的无参构造</h2><h2 id="创建子类对象-也相当于创建出父类对象"><a href="#创建子类对象-也相当于创建出父类对象" class="headerlink" title="创建子类对象 也相当于创建出父类对象"></a>创建子类对象 也相当于创建出父类对象</h2><p> <img src="/2020/03/20/head-java-first/16.png"><br> <img src="/2020/03/20/head-java-first/17.png"></p><h2 id="如果自己没写-编译器会默认在子类构造函数最前面加上super-构造父类"><a href="#如果自己没写-编译器会默认在子类构造函数最前面加上super-构造父类" class="headerlink" title="如果自己没写 编译器会默认在子类构造函数最前面加上super() 构造父类;"></a>如果自己没写 编译器会默认在子类构造函数最前面加上super() 构造父类;</h2><h2 id="this（）-调用同一类另一个构造函数-和super-不可兼得"><a href="#this（）-调用同一类另一个构造函数-和super-不可兼得" class="headerlink" title="this（） 调用同一类另一个构造函数 和super()不可兼得"></a>this（） 调用同一类另一个构造函数 和super()不可兼得</h2><h1 id="gc回收-对象没被引用"><a href="#gc回收-对象没被引用" class="headerlink" title="gc回收 对象没被引用"></a>gc回收 对象没被引用</h1><h1 id="10-数字局全局"><a href="#10-数字局全局" class="headerlink" title="10 数字局全局"></a>10 数字局全局</h1><h2 id="Math-类-private构造-全是静态方法-不需要也不知道-实例变量值"><a href="#Math-类-private构造-全是静态方法-不需要也不知道-实例变量值" class="headerlink" title="Math 类 private构造 全是静态方法 不需要也不知道 实例变量值"></a>Math 类 private构造 全是静态方法 不需要也不知道 实例变量值</h2><h2 id="同一个类所有实例共享一个静态变量-无对象先初始化"><a href="#同一个类所有实例共享一个静态变量-无对象先初始化" class="headerlink" title="同一个类所有实例共享一个静态变量 无对象先初始化"></a>同一个类所有实例共享一个静态变量 无对象先初始化</h2><p> <img src="/2020/03/20/head-java-first/18.png"></p><h2 id="Static-final-是-常量-比如PI"><a href="#Static-final-是-常量-比如PI" class="headerlink" title="Static final 是 常量 比如PI"></a>Static final 是 常量 比如PI</h2><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p><img src="/2020/03/20/head-java-first/19.png"></p><h1 id="autobox"><a href="#autobox" class="headerlink" title="autobox"></a>autobox</h1><p><img src="/2020/03/20/head-java-first/20.png"><br><img src="/2020/03/20/head-java-first/21.png"></p><h2 id="String转Primitive"><a href="#String转Primitive" class="headerlink" title="String转Primitive"></a>String转Primitive</h2><p><img src="/2020/03/20/head-java-first/22.png"></p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="如果有抛出异常-编译器一定要你处理-除了runtimeexp-一般是逻辑错误"><a href="#如果有抛出异常-编译器一定要你处理-除了runtimeexp-一般是逻辑错误" class="headerlink" title="如果有抛出异常 编译器一定要你处理 除了runtimeexp(一般是逻辑错误)"></a>如果有抛出异常 编译器一定要你处理 除了runtimeexp(一般是逻辑错误)</h2><p><img src="/2020/03/20/head-java-first/23.png"></p><h2 id="出现异常-try-直接到catch"><a href="#出现异常-try-直接到catch" class="headerlink" title="出现异常 try 直接到catch"></a>出现异常 try 直接到catch</h2><h2 id="finally-无论怎么样都执行"><a href="#finally-无论怎么样都执行" class="headerlink" title="finally 无论怎么样都执行"></a>finally 无论怎么样都执行</h2><p><img src="/2020/03/20/head-java-first/24.png"></p><h2 id="duck-给调用处理"><a href="#duck-给调用处理" class="headerlink" title="duck 给调用处理"></a>duck 给调用处理</h2><p><img src="/2020/03/20/head-java-first/25.png"></p><h1 id="Gui"><a href="#Gui" class="headerlink" title="Gui"></a>Gui</h1><h2 id="监听事件源"><a href="#监听事件源" class="headerlink" title="监听事件源"></a>监听事件源</h2><p><img src="/2020/03/20/head-java-first/26.png"></p><h2 id="同时监听两件事"><a href="#同时监听两件事" class="headerlink" title="同时监听两件事"></a>同时监听两件事</h2><p>方法1：在方法里查找是哪个事 （用单一的事件处理处理所有事件不太好）<br><img src="/2020/03/20/head-java-first/27.png"></p><p>方法2：创建不同的处理事件方法但是不能再一个类里面实现同一个方法两次<br>不同类的话又取不到GUI的对象<br><img src="/2020/03/20/head-java-first/28.png"></p><p>内部类解决这个问题<br><img src="/2020/03/20/head-java-first/29.png"></p><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h2 id="字节型"><a href="#字节型" class="headerlink" title="字节型"></a>字节型</h2><h3 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h3><p>InputStream 和OutputStream 两个抽象基类</p><p>InputStream i =new FileinputStream<br>OutputStream o =new FileoutputStream</p><p>加上缓存<br>BufferInputSteam b= new BufferInputSteam(new FileinputStream)<br>BufferOutputSteam b= new BufferOutputSteam(new FileinputStream)</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>不同系统换行符不一样<br>‘\r’.getbytes</p><ul><li>windows:\r\n</li><li>linux:\n</li><li>mac:\r</li></ul><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>为了解析不同地区的文字 ，一个汉字GBK2个字节，utf-8 3个字节<br>将字符编码二进制 要用相同方式解码</p><ul><li>ascill 现代英语 base127字符 扩展256字符</li><li>GBXXX  中文 小于127字符和原来一样 大于127的两个字符连一起就表示一个汉字  ascill 本身有的也重新编成两个字节常 <strong>叫全角字符</strong> 原来127以下哪些就是<strong>半角字符</strong> </li><li>Unicode 任意语言的任意字符 统一码 </li><li>utf-8  表示Unicode 1到4个字节编码<ul><li>127 US-ascill 一个字节编码</li><li>拉丁文 2个</li><li>大部分常用字（中文） 三个</li><li>极少Unicode辅助 4个<br>用什么编码就用什么解码 不然就乱码</li></ul></li></ul><h3 id="读写-1"><a href="#读写-1" class="headerlink" title="读写"></a>读写</h3><p>Reader 和 Writer  抽象基类</p><p>遍写边看的话 需要flush<br>普通读写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStreamReader</span> inputStreamReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStreamWriter</span> outputStreamWriter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileoutputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>便捷读写  按照默认方式编解码<span class="token class-name">InputStreamReader</span> inputStreamReader1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputStreamWriter</span> outputStreamWriter1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓存读写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> bufferedReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedWriter</span> bufferedWriter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h1><h2 id="3种风格"><a href="#3种风格" class="headerlink" title="3种风格"></a>3种风格</h2><p><img src="/2020/03/20/head-java-first/30.png"></p><h1 id="序列化-文件输入输出"><a href="#序列化-文件输入输出" class="headerlink" title="序列化 文件输入输出"></a>序列化 文件输入输出</h1><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>步骤<br><img src="/2020/03/20/head-java-first/31.png"></p><p>图示<br><img src="/2020/03/20/head-java-first/32.png"></p><p>需要被实例化的类 ,需要implements Serializeble(但是不需要实现什么方法)<br>包括里面的要保存的对象.也需要<br><img src="/2020/03/20/head-java-first/33.png"></p><p>不能或者 不需要序列化对象 用transient<br><img src="/2020/03/20/head-java-first/34.png"></p><h2 id="解序列化"><a href="#解序列化" class="headerlink" title="解序列化"></a>解序列化</h2><p>readObject 读到的对象 需要类型转化<br><img src="/2020/03/20/head-java-first/35.png"><br><img src="/2020/03/20/head-java-first/36.png"></p><h2 id="写文本"><a href="#写文本" class="headerlink" title="写文本"></a>写文本</h2><p>缓存效率高</p><p><img src="/2020/03/20/head-java-first/36.png"><br><img src="/2020/03/20/head-java-first/37.png"></p><h2 id="问题-万一序列化之后修改类-怎么办"><a href="#问题-万一序列化之后修改类-怎么办" class="headerlink" title="问题 万一序列化之后修改类 怎么办"></a>问题 万一序列化之后修改类 怎么办</h2><p>versionid 控制<br><img src="/2020/03/20/head-java-first/38.png"></p><h1 id="网络和线程"><a href="#网络和线程" class="headerlink" title="网络和线程"></a>网络和线程</h1><p>1-1023<br>1024-65535</p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="ServerSock的Backlog是同时能监听的数目-（不包括已接受的）"><a href="#ServerSock的Backlog是同时能监听的数目-（不包括已接受的）" class="headerlink" title="ServerSock的Backlog是同时能监听的数目 （不包括已接受的）"></a>ServerSock的Backlog是同时能监听的数目 （不包括已接受的）</h3><h3 id="基本读图"><a href="#基本读图" class="headerlink" title="基本读图"></a>基本读图</h3><p><img src="/2020/03/20/head-java-first/40.png"><br><img src="/2020/03/20/head-java-first/39.png"></p><h3 id="基本写图"><a href="#基本写图" class="headerlink" title="基本写图"></a>基本写图</h3><p>因为是写字符串 用PrintWriter<br>上一章 是BufferWriter<br><img src="/2020/03/20/head-java-first/41.png"></p><p><img src="/2020/03/20/head-java-first/42.png"></p><h3 id="可以用-sock-shutdownOutPut作为结束标识"><a href="#可以用-sock-shutdownOutPut作为结束标识" class="headerlink" title="可以用 sock.shutdownOutPut作为结束标识"></a>可以用 sock.shutdownOutPut作为结束标识</h3><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="synchornized"><a href="#synchornized" class="headerlink" title="synchornized"></a>synchornized</h3><ul><li><p>对对象代码块上锁 大家同步用一个obj synchornized（obj){<br>  sdds<br>}</p></li><li><p>对方法上锁（对象是this) </p></li><li><p>对静态方法上锁（ xxx.class)</p></li><li><p>不用vector 而是Collections.synchornizedList(new ArrayList());<br>不用HashTable 而是Collections.synchornizedMap(new HashMap());</p></li></ul><h3 id="Lock-来获得释放锁"><a href="#Lock-来获得释放锁" class="headerlink" title="Lock 来获得释放锁"></a>Lock 来获得释放锁</h3><p>lock.Lock();<br>lock.unLock();</p><h3 id="同步化对象"><a href="#同步化对象" class="headerlink" title="同步化对象"></a>同步化对象</h3><p><img src="/2020/03/20/head-java-first/43.png"></p><h3 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h3><p><img src="/2020/03/20/head-java-first/44.png"></p><h1 id="集合与泛型"><a href="#集合与泛型" class="headerlink" title="集合与泛型"></a>集合与泛型</h1><h2 id="点歌系统排序-ArrayList-没有sort"><a href="#点歌系统排序-ArrayList-没有sort" class="headerlink" title="点歌系统排序 ArrayList 没有sort"></a>点歌系统排序 ArrayList 没有sort</h2><p>还有其他集合<br><img src="/2020/03/20/head-java-first/45.png"></p><p>用Collection.sort() 可以排序ArratList</p><h2 id="Obeject-有toString-方法-可以自己覆盖想要printf-就自己覆盖"><a href="#Obeject-有toString-方法-可以自己覆盖想要printf-就自己覆盖" class="headerlink" title="Obeject 有toString() 方法 可以自己覆盖想要printf 就自己覆盖"></a>Obeject 有toString() 方法 可以自己覆盖想要printf 就自己覆盖</h2><h2 id="想要-sort-SONG-4个String属性"><a href="#想要-sort-SONG-4个String属性" class="headerlink" title="想要 sort SONG(4个String属性)"></a>想要 sort SONG(4个String属性)</h2><p>出错 处理不了 Song的list</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="Comparator-比较符号"><a href="#Comparator-比较符号" class="headerlink" title="Comparator 比较符号"></a>Comparator 比较符号</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArtistCompare</span> artistCompare <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArtistCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArtistCompare</span>实现了<span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> o1<span class="token punctuation">,</span><span class="token class-name">T</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>songList<span class="token punctuation">,</span> artistCompare<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Comparable-使这个对象可比较"><a href="#Comparable-使这个对象可比较" class="headerlink" title="Comparable 使这个对象可比较"></a>Comparable 使这个对象可比较</h2><p>Collections.sort(songlist) 默认用的就是对象的compareto 方法<br><img src="/2020/03/20/head-java-first/46.png"></p><p>String 只实现了 Comparable 并没有继承<br>但是对于泛型来说 extend 代表extend 或者Implement<br><img src="/2020/03/20/head-java-first/47.png"></p><p>但是对于泛型来说 extend 代表extend 或者Implement<br><img src="/2020/03/20/head-java-first/48.png"></p><h2 id="Song-排序实现"><a href="#Song-排序实现" class="headerlink" title="Song 排序实现"></a>Song 排序实现</h2><p>利用其中一个属性排序<br><img src="/2020/03/20/head-java-first/49.png"></p><h2 id="还想要通过歌星排序"><a href="#还想要通过歌星排序" class="headerlink" title="还想要通过歌星排序"></a>还想要通过歌星排序</h2><p>查API 还有重载的Sort 版本<br><img src="/2020/03/20/head-java-first/50.png"></p><p><img src="/2020/03/20/head-java-first/51.png"></p><p>内部类实现<br><img src="/2020/03/20/head-java-first/52.png"></p><h2 id="如果有重复的歌名"><a href="#如果有重复的歌名" class="headerlink" title="如果有重复的歌名"></a>如果有重复的歌名</h2><p>Collections是collection的帮助类 静态方法<br>三种Collection(虽然包不在Collection里面)</p><p><img src="/2020/03/20/head-java-first/53.png"></p><p>继承和实现 Collections </p><p><img src="/2020/03/20/head-java-first/54.png"><br><img src="/2020/03/20/head-java-first/55.png"></p><h2 id="Set-之中怎么算两元素相等"><a href="#Set-之中怎么算两元素相等" class="headerlink" title="Set 之中怎么算两元素相等"></a>Set 之中怎么算两元素相等</h2><p>两种相等 引用相等  hashCode 没覆盖就是根据对象内存地址算</p><p>hashSet 中加入元素时先计算hashCode 不相等就加入 相等在计算euqals</p><p>同样利用hashcode 存取元素<br><img src="/2020/03/20/head-java-first/56.png"><br>String 的hashCode 覆盖过 值相等 hashCode会相等</p><h2 id="equals-hashCode-规定"><a href="#equals-hashCode-规定" class="headerlink" title="equals hashCode 规定"></a>equals hashCode 规定</h2><p>两对象equals hashCode 一定相等 反之不一定</p><h2 id="TreeSet-加入元素会默认通过compareTo-排序-或者comparator"><a href="#TreeSet-加入元素会默认通过compareTo-排序-或者comparator" class="headerlink" title="TreeSet 加入元素会默认通过compareTo()排序 或者comparator"></a>TreeSet 加入元素会默认通过compareTo()排序 或者comparator</h2><p><font color="red" size="5"><strong>注意TreeSet 是通过compareTo()排序 或者comparator判断重复的 而不是hashcode 和equals</strong></font></p><h2 id="对于Arraylist参数-不能用Arraylist代替-和数组的安全检查时间不一样"><a href="#对于Arraylist参数-不能用Arraylist代替-和数组的安全检查时间不一样" class="headerlink" title="对于Arraylist参数 不能用Arraylist代替 和数组的安全检查时间不一样"></a>对于Arraylist<animals>参数 不能用Arraylist<dogs>代替 和数组的安全检查时间不一样</dogs></animals></h2><p>理由如下<br><img src="/2020/03/20/head-java-first/57.png"><br>数组是运行错误<br><img src="/2020/03/20/head-java-first/58.png"></p><h2 id="用万用字符（一种泛型）-会阻止破坏集合的操作"><a href="#用万用字符（一种泛型）-会阻止破坏集合的操作" class="headerlink" title="用万用字符（一种泛型） 会阻止破坏集合的操作"></a>用万用字符（一种泛型） 会阻止破坏集合的操作</h2><p><img src="/2020/03/20/head-java-first/59.png"><br><img src="/2020/03/20/head-java-first/60.png"></p><h1 id="发布程序"><a href="#发布程序" class="headerlink" title="发布程序"></a>发布程序</h1><h2 id="几种方式"><a href="#几种方式" class="headerlink" title="几种方式"></a>几种方式</h2><p><img src="/2020/03/20/head-java-first/62.png"></p><h2 id="JAR-一组类文件包装起来"><a href="#JAR-一组类文件包装起来" class="headerlink" title="JAR 一组类文件包装起来"></a>JAR 一组类文件包装起来</h2><h3 id="执行JAR-java虚拟机能从JAR中找到main"><a href="#执行JAR-java虚拟机能从JAR中找到main" class="headerlink" title="执行JAR java虚拟机能从JAR中找到main"></a>执行JAR java虚拟机能从JAR中找到main</h3><p><img src="/2020/03/20/head-java-first/61.png"></p><h3 id="包防止类冲突-编译执行"><a href="#包防止类冲突-编译执行" class="headerlink" title="包防止类冲突 编译执行"></a>包防止类冲突 编译执行</h3><p><img src="/2020/03/20/head-java-first/64.png"></p><h2 id="JAVA-web-Start"><a href="#JAVA-web-Start" class="headerlink" title="JAVA web Start"></a>JAVA web Start</h2><p><img src="/2020/03/20/head-java-first/65.png"></p><h1 id="RMI-Remote-Method-Innovacation-远程程序"><a href="#RMI-Remote-Method-Innovacation-远程程序" class="headerlink" title="RMI (Remote Method Innovacation) 远程程序"></a>RMI (Remote Method Innovacation) 远程程序</h1><p>目的想要取得其他电脑java虚拟机的对象<br><img src="/2020/03/20/head-java-first/66.png"></p><h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><p>请求步骤<br><img src="/2020/03/20/head-java-first/67.png"><br>编写步骤<br><img src="/2020/03/20/head-java-first/68.png"></p><h2 id="JINI-找接口"><a href="#JINI-找接口" class="headerlink" title="JINI  找接口"></a>JINI  找接口</h2><p>自适应探索<br>自恢复网络</p><h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><h2 id="String-的不变性-包装类的不变性"><a href="#String-的不变性-包装类的不变性" class="headerlink" title="String 的不变性 包装类的不变性"></a>String 的不变性 包装类的不变性</h2><p><img src="/2020/03/20/head-java-first/69.png"></p><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h2 id="静态嵌套类"><a href="#静态嵌套类" class="headerlink" title="静态嵌套类"></a>静态嵌套类</h2><p><img src="/2020/03/20/head-java-first/70.png"></p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p><img src="/2020/03/20/head-java-first/71.png"></p><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><p><img src="/2020/03/20/head-java-first/72.png"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-interview-day1</title>
      <link href="2020/03/16/java-base-day2/"/>
      <url>2020/03/16/java-base-day2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#jvm-jdk-%E5%92%8C-jre-%E6%9C%80%E8%AF%A6%E7%BB%86%E9%80%9A%E4%BF%97%E7%9A%84%E8%A7%A3%E7%AD%94">JVM JDK 和 JRE 最详细通俗的解答</a><ul><li><a href="#jvm">JVM</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E8%8A%82%E7%A0%81%E9%87%87%E7%94%A8%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%E4%BB%80%E4%B9%88">什么是字节码?采用字节码的好处是什么?</a></li><li><a href="#%E6%AD%A5%E9%AA%A4">步骤</a></li></ul></li><li><a href="#jdk-jre">JDK JRE</a></li></ul></li><li><a href="#%E5%A4%9A%E6%80%81">多态</a></li><li><a href="#string-stringbuffer-%E5%92%8C-stringbuilder-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88-string-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84">String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</a><ul><li><a href="#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">线程安全</a></li><li><a href="#%E6%80%A7%E8%83%BD">性能</a></li></ul></li><li><a href="#%E5%9C%A8-java-%E4%B8%AD%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%81%9A%E4%BA%8B%E4%B8%94%E6%B2%A1%E6%9C%89%E5%8F%82%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8">在 Java 中定义一个不做事且没有参数的构造方法的作用</a></li><li><a href="#%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">接口和抽象类的区别是什么？</a></li><li><a href="#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E6%9C%89%E4%BD%95%E4%B8%8D%E5%90%8C">静态方法和实例方法有何不同</a></li><li><a href="#%E5%9C%A8%E8%B0%83%E7%94%A8%E5%AD%90%E7%B1%BB%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E4%B9%8B%E5%89%8D%E4%BC%9A%E5%85%88%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E6%B2%A1%E6%9C%89%E5%8F%82%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%85%B6%E7%9B%AE%E7%9A%84%E6%98%AF">在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?</a></li><li><a href="#-%E4%B8%8E-equals%E9%87%8D%E8%A6%81">== 与 equals(重要)</a></li><li><a href="#%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E7%8A%B6%E6%80%81">线程基本状态</a></li><li><a href="#%E5%85%B3%E4%BA%8E-final-%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93">关于 final 关键字的一些总结</a></li><li><a href="#java-%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">Java 中的异常处理</a><ul><li><a href="#java-%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%9B%BE">Java 异常类层次结构图</a></li><li><a href="#throwable-%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">Throwable 类常用方法</a></li><li><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93">异常处理总结</a></li></ul></li><li><a href="#java-%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%AD%E5%A6%82%E6%9E%9C%E6%9C%89%E4%BA%9B%E5%AD%97%E6%AE%B5%E4%B8%8D%E6%83%B3%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%8E%E4%B9%88%E5%8A%9E">Java 序列化中如果有些字段不想进行序列化，怎么办？</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E7%94%A8%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95">获取用键盘输入常用的两种方法</a></li><li><a href="#java-%E4%B8%AD-io-%E6%B5%81">Java 中 IO 流</a><ul><li><a href="#java-%E4%B8%AD-io-%E6%B5%81%E5%88%86%E4%B8%BA%E5%87%A0%E7%A7%8D">Java 中 IO 流分为几种?</a></li><li><a href="#%E6%97%A2%E7%84%B6%E6%9C%89%E4%BA%86%E5%AD%97%E8%8A%82%E6%B5%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E6%9C%89%E5%AD%97%E7%AC%A6%E6%B5%81">既然有了字节流,为什么还要有字符流?</a></li><li><a href="#bionioaio-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">BIO,NIO,AIO 有什么区别?</a></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E5%85%B3%E9%94%AE%E5%AD%97%E6%80%BB%E7%BB%93staticfinalthissuper">常见关键字总结:static,final,this,super</a></li><li><a href="#collections-%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%92%8C-arrays-%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93">Collections 工具类和 Arrays 工具类常见方法总结</a></li><li><a href="#%E6%B7%B1%E6%8B%B7%E8%B4%9D-vs-%E6%B5%85%E6%8B%B7%E8%B4%9D">深拷贝 vs 浅拷贝</a></li></ul><!-- /TOC --><h1 id="JVM-JDK-和-JRE-最详细通俗的解答"><a href="#JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="JVM JDK 和 JRE 最详细通俗的解答"></a>JVM JDK 和 JRE 最详细通俗的解答</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><h3 id="什么是字节码-采用字节码的好处是什么"><a href="#什么是字节码-采用字节码的好处是什么" class="headerlink" title="什么是字节码?采用字节码的好处是什么?"></a>什么是字节码?采用字节码的好处是什么?</h3><blockquote><p>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><img src="/2020/03/16/java-base-day2/1.png"><br>我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。</p><h2 id="JDK-JRE"><a href="#JDK-JRE" class="headerlink" title="JDK JRE"></a>JDK JRE</h2><p>JDK 是 Java Development Kit，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。<br>JRE 是 Java 运行时环境。</p><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。</p><p>在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。</p><h1 id="String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的"><a href="#String-StringBuffer-和-StringBuilder-的区别是什么-String-为什么是不可变的" class="headerlink" title="String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?"></a>String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?</h1><p>简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，private final char value[]，所以 String 对象是不可变的。</p><blockquote><p>补充（来自issue 675）：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 private final byte[] value;</p></blockquote><p>而 StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰，所以这两种对象都是可变的。</p><p>StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">AbstractStringBuilder.javaabstract class AbstractStringBuilder implements Appendable, CharSequence {    /**     * The value is used for character storage.     */    char[] value;    /**     * The count is the number of characters used.     */    int count;    AbstractStringBuilder(int capacity) {        value = new char[capacity];    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p>对于三者使用的总结：</p><ul><li>操作少量的数据: 适用 String</li><li>单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer</li></ul><h1 id="在-Java-中定义一个不做事且没有参数的构造方法的作用"><a href="#在-Java-中定义一个不做事且没有参数的构造方法的作用" class="headerlink" title="在 Java 中定义一个不做事且没有参数的构造方法的作用"></a>在 Java 中定义一个不做事且没有参数的构造方法的作用</h1><p>Java 程序在执行子类的构造方法之前，如果没有用 super()来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super()来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。</p><h1 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h1><ul><li>接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。</li><li>接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。</li><li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。<br>备注：</li></ul><blockquote><p>在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:<a href="https://github.com/Snailclimb/JavaGuide/issues/146%E3%80%82">https://github.com/Snailclimb/JavaGuide/issues/146。</a><br>jdk9 的接口被允许定义私有方法 。</p></blockquote><p>总结一下 jdk7~jdk9 Java 中接口概念的变化（相关阅读）：</p><ul><li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li><li>jdk8 的时候接口可以有默认方法和静态方法功能。</li><li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li></ul><h1 id="静态方法和实例方法有何不同"><a href="#静态方法和实例方法有何不同" class="headerlink" title="静态方法和实例方法有何不同"></a>静态方法和实例方法有何不同</h1><ul><li><p>在外部调用静态方法时，可以使用”类名.方法名”的方式，也可以使用”对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</p></li><li><p>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</p></li></ul><h1 id="在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"><a href="#在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是" class="headerlink" title="在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?"></a>在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?</h1><p>帮助子类做初始化工作。</p><h1 id="与-equals-重要"><a href="#与-equals-重要" class="headerlink" title="== 与 equals(重要)"></a>== 与 equals(重要)</h1><p>== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。</p><p>equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：</p><ul><li>情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。</li><li>情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。</li></ul><p>说明：</p><ul><li>String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li></ul><h1 id="线程基本状态"><a href="#线程基本状态" class="headerlink" title="线程基本状态"></a>线程基本状态</h1><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。<br><img src="/2020/03/16/java-base-day2/2.png"><br>状态机<br><img src="/2020/03/16/java-base-day2/3.png"><br>由上图可以看出：</p><p>线程创建之后它将处于 NEW（新建） 状态，调用 start() 方法后开始运行，线程这时候处于 READY（可运行） 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 RUNNING（运行） 状态。</p><blockquote><p>操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源：HowToDoInJava：Java Thread Life Cycle and Thread States），所以 Java 系统一般将这两个状态统称为 RUNNABLE（运行中） 状态 。</p></blockquote><h1 id="关于-final-关键字的一些总结"><a href="#关于-final-关键字的一些总结" class="headerlink" title="关于 final 关键字的一些总结"></a>关于 final 关键字的一些总结</h1><p>final 关键字主要用在三个地方：变量、方法、类。</p><ul><li>对于一个 final 变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li><li>当用 final 修饰一个类时，表明这个类不能被继承。final 类中的所有成员方法都会被隐式地指定为 final 方法。</li><li>使用 final 方法的原因有两个。第一个原因是把方法锁定，以防任何继承*类修改它的含义；第二个原因是效率。在早期的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java 版本已经不需要使用 final 方法进行这些优化了）。类中所有的 private 方法都隐式地指定为 final。</li></ul><h1 id="Java-中的异常处理"><a href="#Java-中的异常处理" class="headerlink" title="Java 中的异常处理"></a>Java 中的异常处理</h1><h2 id="Java-异常类层次结构图"><a href="#Java-异常类层次结构图" class="headerlink" title="Java 异常类层次结构图"></a>Java 异常类层次结构图</h2><p><img src="/2020/03/16/java-base-day2/4.png"></p><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable： 有两个重要的子类：Exception（异常） 和 Error（错误） ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。</p><p><strong>Error（错误）:是程序无法处理的错误</strong></p><p><strong>Exception（异常）:是程序本身可以处理的异常。</strong><br>Exception 类有一个重要的子类 RuntimeException。RuntimeException 异常由 Java 虚拟机抛出。NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）、ArithmeticException（算术运算异常，一个整数除以 0 时，抛出该异常）和 ArrayIndexOutOfBoundsException （下标越界异常）。</p><h2 id="Throwable-类常用方法"><a href="#Throwable-类常用方法" class="headerlink" title="Throwable 类常用方法"></a>Throwable 类常用方法</h2><ul><li>public string getMessage():返回异常发生时的简要描述</li><li>public string toString():返回异常发生时的详细信息</li><li>public string getLocalizedMessage():返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage（）返回的结果相同</li><li>public void printStackTrace():在控制台上打印 Throwable 对象封装的异常信息</li></ul><h2 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h2><ul><li>try 块： 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。</li><li>catch 块： 用于处理 try 捕获到的异常。</li><li>finally 块： 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。</li></ul><p><strong>注意：</strong> 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value <span class="token operator">*</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>如果调用 <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>，返回值将是 <span class="token number">0</span>，因为 <span class="token keyword">finally</span> 语句的返回值覆盖了 <span class="token keyword">try</span> 语句块的返回值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Java-序列化中如果有些字段不想进行序列化，怎么办？"><a href="#Java-序列化中如果有些字段不想进行序列化，怎么办？" class="headerlink" title="Java 序列化中如果有些字段不想进行序列化，怎么办？"></a>Java 序列化中如果有些字段不想进行序列化，怎么办？</h1><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p><p>transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。</p><h1 id="获取用键盘输入常用的两种方法"><a href="#获取用键盘输入常用的两种方法" class="headerlink" title="获取用键盘输入常用的两种方法"></a>获取用键盘输入常用的两种方法</h1><p>方法 1：通过 Scanner</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s  <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>方法 2：通过 BufferedReader</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Java-中-IO-流"><a href="#Java-中-IO-流" class="headerlink" title="Java 中 IO 流"></a>Java 中 IO 流</h1><h2 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h2><ul><li><p>按照流的流向分，可以分为输入流和输出流；</p></li><li><p>按照操作单元划分，可以划分为字节流和字符流；</p></li><li><p>按照流的角色划分为节点流和处理流。<br>Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p></li><li><p>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</p></li><li><p>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</p></li><li><p>*按操作方式分类结构图：**<br><img src="/2020/03/16/java-base-day2/5.png"></p></li><li><p>*按操作对象分类结构图：**<br><img src="/2020/03/16/java-base-day2/6.png"></p></li></ul><h2 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h2><p>问题本质想问：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h2 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h2><p><strong>BIO (Blocking I/O)</strong>: 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。<br><strong>NIO (New I/O)</strong>: NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 Socket 和 ServerSocket 相对应的 SocketChannel 和 ServerSocketChannel 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发<br><strong>AIO (Asynchronous I/O)</strong>: AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。</p><h1 id="常见关键字总结-static-final-this-super"><a href="#常见关键字总结-static-final-this-super" class="headerlink" title="常见关键字总结:static,final,this,super"></a>常见关键字总结:static,final,this,super</h1><p>详见这篇文章: <a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super">https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super</a></p><h1 id="Collections-工具类和-Arrays-工具类常见方法总结"><a href="#Collections-工具类和-Arrays-工具类常见方法总结" class="headerlink" title="Collections 工具类和 Arrays 工具类常见方法总结"></a>Collections 工具类和 Arrays 工具类常见方法总结</h1><p>详见的这篇文章: <a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md">https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md</a></p><h1 id="深拷贝-vs-浅拷贝"><a href="#深拷贝-vs-浅拷贝" class="headerlink" title="深拷贝 vs 浅拷贝"></a>深拷贝 vs 浅拷贝</h1><ul><li>浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</li><li>深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。<br><img src="/2020/03/16/java-base-day2/7.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch06-应用层</title>
      <link href="2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/"/>
      <url>2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/</url>
      
        <content type="html"><![CDATA[<h1 id="DNS-domain-name-system"><a href="#DNS-domain-name-system" class="headerlink" title="DNS domain name system"></a>DNS domain name system</h1><p>域名到IP<br>多级域名<br><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/1.png"></p><p>分级解析 找根 后再分配<br>直接ping域名 ping <a href="http://www.baidu.com/">www.baidu.com</a><br>nslookup <a href="http://www.baidu.com/">www.baidu.com</a> 查ip</p><h2 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h2><p><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/2.png"></p><p>13套根<br>非授权域名 只能出去找<br><a href="http://www.xxxx.xx/">www.xxxx.xx</a>  www是主机<br>ftp.xxx.xxx ftp 是主机</p><h2 id="安装自己的DNS服务器好处"><a href="#安装自己的DNS服务器好处" class="headerlink" title="安装自己的DNS服务器好处"></a>安装自己的DNS服务器好处</h2><p>配置自己的DNS windows service</p><ul><li>解析内网域名  降低到Internet 域名解析</li><li>域环境</li></ul><h1 id="FTP-file-transfer-protocol"><a href="#FTP-file-transfer-protocol" class="headerlink" title="FTP file transfer protocol"></a>FTP file transfer protocol</h1><p>屏蔽系统传输<br><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/3.png"></p><h2 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h2><ul><li><p>主动模式<br>ftp客户端 告诉服务器使用说明端口侦听 主动连 客户端  （开防火墙）<br>服务器端口<br>21 控制<br>20 数据传输</p></li><li><p>被动模式<br>ftp服务器就和端口建立连接<br>服务器被动打开一个 等待<br>服务器端口<br>21 控制<br>xxxx 数据传输</p></li></ul><h2 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h2><p>远程修改文件</p><h1 id="talnet-远程终端"><a href="#talnet-远程终端" class="headerlink" title="talnet 远程终端"></a>talnet 远程终端</h1><p>23端口<br>net user administrator al! 更改用户密码<br>net user han al! /add 添加用户<br>加端口 变成端口扫描</p><h1 id="www-万维网"><a href="#www-万维网" class="headerlink" title="www 万维网"></a>www 万维网</h1><p>一个站点访问另一个站点<br><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/4.png"></p><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>他是客户服务器<br>浏览器就是客户程序</p><h2 id="需求问题"><a href="#需求问题" class="headerlink" title="需求问题"></a>需求问题</h2><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>标识独一资源<br><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/5.png"></p><h3 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h3><p>客户机和服务器使用http协议通信</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>实现到各个地方 </p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><h2 id="搭建HTTP服务"><a href="#搭建HTTP服务" class="headerlink" title="搭建HTTP服务"></a>搭建HTTP服务</h2><p>服务器有 不同网站采取方式</p><ul><li> 可以用不同端口  </li><li>服务器多加地址 保存默认都是80</li><li>只有一个公网地址  使用不同主机头只能用域名访问 </li></ul><h2 id="proxy-server-代理服务器"><a href="#proxy-server-代理服务器" class="headerlink" title="proxy server (代理服务器)"></a>proxy server (代理服务器)</h2><p><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/6.png"></p><h3 id="使用web-代理服务器访问网站"><a href="#使用web-代理服务器访问网站" class="headerlink" title="使用web 代理服务器访问网站"></a>使用web 代理服务器访问网站</h3><ol><li>节省内网访问internet带宽 （甚至不用网关）（静态）</li><li>利用web服务器翻墙</li><li>使用web 服务器代理 而 不让人知道 谁发的帖子（所以要实名）</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>跟踪用户活动传递用户状态</p><h1 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h1><p>发送邮件的协议：SMTP<br>读取邮件的协议：POP3 和 IMAP</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>中继过程要，要邮局转发<br>过程，域里面一个邮箱写一份信，给服务器，服务器查DNS ，放到另一个服务器里，然后另一个服务器域里的邮箱在去收下来<br><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/7.png"></p><p>在服务器pop3、IMAP服务（收） STMP（发）上创建邮箱</p><h2 id="邮箱格式"><a href="#邮箱格式" class="headerlink" title="邮箱格式"></a>邮箱格式</h2><p><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/8.png"><br>域下面加邮箱</p><h1 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h1><h2 id="获取ip过程"><a href="#获取ip过程" class="headerlink" title="获取ip过程"></a>获取ip过程</h2><p>向dhcp服务器广播，同网段所有计算机都能收到，但是DHCP服务器回应<br>先在数据库查是不是配过，没有得话在ip池分配</p><h2 id="跨网段"><a href="#跨网段" class="headerlink" title="跨网段"></a>跨网段</h2><p>并不是每个网段都有DHCP服务器，但至少有一个代理<br><img src="/2020/03/07/ji-suan-ji-wang-luo-ch06-ying-yong-ceng/9.png"><br>服务器静态ip<br>本网段 广播就直接得到不用经过路由了<br>在路由上加ip helper address （只需要在接着主机的地址配就行，然后收到网关，就会去找DHCP，跨网段 DHCP</p><h1 id="RDP远程桌面"><a href="#RDP远程桌面" class="headerlink" title="RDP远程桌面"></a>RDP远程桌面</h1><p>linux winserver多用户同时访问操作系统<br>xpwin7win8win10单用户<br>不想用管理员 可以用远程桌面组<br>还可以映射硬盘过去连远程</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch05-传输层</title>
      <link href="2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/"/>
      <url>2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E6%A6%82%E8%BF%B0">1. 概述</a><ul><li><a href="#11-%E8%BD%AF%E4%BB%B6%E7%AB%AF%E5%8F%A3">1.1. 软件端口</a></li><li><a href="#12-%E4%BC%A0%E8%BE%93%E5%B1%82%E5%92%8C%E5%BA%94%E7%94%A8%E5%B1%82%E5%85%B3%E7%B3%BB">1.2. 传输层和应用层关系</a></li><li><a href="#13-%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%9C%8D%E5%8A%A1%E4%B9%8B%E5%89%8D%E7%9A%84%E5%85%B3%E7%B3%BB">1.3. 应用层协议和服务之前的关系</a></li><li><a href="#14-%E9%98%B2%E7%81%AB%E5%A2%99%E4%B8%8E%E6%9C%A8%E9%A9%AC%E5%8E%9F%E7%90%86">1.4. 防火墙与木马原理</a></li></ul></li><li><a href="#2-%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE-udpuser-datagram-protocol">2. 用户数据报协议 UDP(User Datagram Protocol)</a></li><li><a href="#3-%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE-tcptransmission-control-protocol">3. 传输控制协议 TCP(Transmission Control Protocol)</a><ul><li><a href="#31-%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93">3.1. 可靠传输</a><ul><li><a href="#311-%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85">3.1.1. 停止等待</a></li><li><a href="#312-%E8%BF%9E%E7%BB%ADarp">3.1.2. 连续ARP</a></li><li><a href="#313-%E7%AA%97%E5%8F%A3">3.1.3. 窗口</a></li><li><a href="#314-%E8%B6%85%E6%97%B6%E9%87%8D%E4%BC%A0%E6%97%B6%E9%97%B4">3.1.4. 超时重传时间</a></li></ul></li><li><a href="#32-%E6%8A%A5%E6%96%87%E6%AE%B5%E9%A6%96%E9%83%A8">3.2. 报文段首部</a></li><li><a href="#33-%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6">3.3. 流量控制</a></li><li><a href="#34-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">3.4. 拥塞控制</a><ul><li><a href="#341-%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E5%85%B3%E7%B3%BB">3.4.1. 与流量控制关系</a></li><li><a href="#342-%E6%85%A2%E5%BC%80%E5%A7%8B">3.4.2. 慢开始</a></li></ul></li><li><a href="#35-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B">3.5. 三次握手</a><ul><li><a href="#351-%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E5%90%8E%E7%8A%B6%E6%80%81">3.5.1. 建立连接后状态</a><ul><li><a href="#3511-%E9%9C%80%E8%A6%81wait2ms%E5%8E%9F%E5%9B%A0">3.5.1.1. 需要wait2ms原因</a></li></ul></li><li><a href="#352-%E7%8A%B6%E6%80%81%E6%9C%BA">3.5.2. 状态机</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>边缘的主机才有协议栈，路由器只用下三层<br><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/1.png"></p><h2 id="1-1-软件端口"><a href="#1-1-软件端口" class="headerlink" title="1.1. 软件端口"></a>1.1. 软件端口</h2><ul><li>熟知端口，数值一般为 0~1023。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。 </li></ul><h2 id="1-2-传输层和应用层关系"><a href="#1-2-传输层和应用层关系" class="headerlink" title="1.2. 传输层和应用层关系"></a>1.2. 传输层和应用层关系</h2><p>http = TCP +80<br>https =TCP +443<br>ftp = TCP+21<br>SMTP=TCP+25<br>POP3=TCP+110<br>RDP=TCP+3389<br>共享文件夹 = TCP+445<br>SQL=CTP+1433<br>DNS =UDP +53 or TCP +53</p><h2 id="1-3-应用层协议和服务之前的关系"><a href="#1-3-应用层协议和服务之前的关系" class="headerlink" title="1.3. 应用层协议和服务之前的关系"></a>1.3. 应用层协议和服务之前的关系</h2><p>通过端口监听<br>可以更改服务端口<br>也可以只开哪些口<br>mstsc 远程桌面</p><h2 id="1-4-防火墙与木马原理"><a href="#1-4-防火墙与木马原理" class="headerlink" title="1.4. 防火墙与木马原理"></a>1.4. 防火墙与木马原理</h2><p>是把端口关闭  ping都ping 不通<br>可以ping别人 ，<strong>拦截进来的</strong> ，不拦截出去的<br>防火墙防不了木马 <strong>木马是连远程服务（出去的）</strong><br>从本地安全连接可以控制出入</p><h1 id="2-用户数据报协议-UDP-User-Datagram-Protocol"><a href="#2-用户数据报协议-UDP-User-Datagram-Protocol" class="headerlink" title="2. 用户数据报协议 UDP(User Datagram Protocol)"></a>2. 用户数据报协议 UDP(User Datagram Protocol)</h1><p>首部<br><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/7.png"><br>传输的UDP报文或用户数据报（与网络层的ip数据报有区别)<br>特点：</p><ul><li>不可靠逻辑信道 尽可能交付</li><li>不连接 不确认</li><li>无拥塞控制  适合多媒体</li><li>支持一对一、一对多、多对一和多对多的交互通信。<br><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/2.png"></li><li>一次发一个报文不管多大 需要应用程序控制发多大<h1 id="3-传输控制协议-TCP-Transmission-Control-Protocol"><a href="#3-传输控制协议-TCP-Transmission-Control-Protocol" class="headerlink" title="3. 传输控制协议 TCP(Transmission Control Protocol)"></a>3. 传输控制协议 TCP(Transmission Control Protocol)</h1></li></ul><p>特点：</p><ul><li>可靠全双工逻辑信道</li><li>传输的TCP报文段（segment）</li><li>分段 编号 流量控制 建立会话 netstat -n 可靠</li><li>只能一对一</li></ul><h2 id="3-1-可靠传输"><a href="#3-1-可靠传输" class="headerlink" title="3.1. 可靠传输"></a>3.1. 可靠传输</h2><h3 id="3-1-1-停止等待"><a href="#3-1-1-停止等待" class="headerlink" title="3.1.1. 停止等待"></a>3.1.1. 停止等待</h3><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/3.png"><br><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/4.png"><br>普通ARP（Automatic Repeat reQuest)信道利用率太低了</p><h3 id="3-1-2-连续ARP"><a href="#3-1-2-连续ARP" class="headerlink" title="3.1.2. 连续ARP"></a>3.1.2. 连续ARP</h3><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/5.png"><br><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/6.png"><br>累计确认不把每个字节确认 确认一堆 </p><h3 id="3-1-3-窗口"><a href="#3-1-3-窗口" class="headerlink" title="3.1.3. 窗口"></a>3.1.3. 窗口</h3><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/9.png"><br><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/10.png"></p><h3 id="3-1-4-超时重传时间"><a href="#3-1-4-超时重传时间" class="headerlink" title="3.1.4. 超时重传时间"></a>3.1.4. 超时重传时间</h3><p>complex<br>特点：</p><ul><li>TCP 连接的每一端都必须设有两个窗口——一个发送窗口和一个接收窗口。</li><li>TCP 的可靠传输机制用字节的序号进行控制。TCP 所有的确认都是基于序号而不是基于报文段。</li><li>TCP 两端的四个窗口经常处于动态变化之中。</li><li>TCP连接的往返时间 RTT 也不是固定不变的。需要使用特定的算法估算较为合理的重传时间。  </li></ul><h2 id="3-2-报文段首部"><a href="#3-2-报文段首部" class="headerlink" title="3.2. 报文段首部"></a>3.2. 报文段首部</h2><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/8.png"></p><ul><li>序号： 发送的第一个字节序号</li><li>确认号：期望收到对方的下一个报文段数据的第一个字节号</li><li>偏移：指出真正的TCP报文段在哪</li><li>URG：紧急数据 优先传输</li><li><strong>ACK</strong>：=1 确认号才有用</li><li>PSH：收到 PSH = 1 的报文段，就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。  </li><li>RST (ReSeT) —— 当 RST=1 时，表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立运输连接。 </li><li><strong>SYN</strong>：同步</li><li><strong>FIN</strong>：用来释放一个连接。FIN = 1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。 </li><li>发送窗口：让对方设置发送窗口的依据 （最大65535)</li></ul><h2 id="3-3-流量控制"><a href="#3-3-流量控制" class="headerlink" title="3.3. 流量控制"></a>3.3. 流量控制</h2><p>利用窗口<br><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/11.png"></p><h2 id="3-4-拥塞控制"><a href="#3-4-拥塞控制" class="headerlink" title="3.4. 拥塞控制"></a>3.4. 拥塞控制</h2><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/12.png"></p><h3 id="3-4-1-与流量控制关系"><a href="#3-4-1-与流量控制关系" class="headerlink" title="3.4.1. 与流量控制关系"></a>3.4.1. 与流量控制关系</h3><ul><li>拥塞控制就是网络能够承受现有的网络负荷。<br>拥塞控制是一个全局性的过程，涉及到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。 </li><li>流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制。 流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。 </li></ul><h3 id="3-4-2-慢开始"><a href="#3-4-2-慢开始" class="headerlink" title="3.4.2. 慢开始"></a>3.4.2. 慢开始</h3><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/13.png"></p><h2 id="3-5-三次握手"><a href="#3-5-三次握手" class="headerlink" title="3.5. 三次握手"></a>3.5. 三次握手</h2><p><strong>为什么要三次 两次不就 回来了吗</strong></p><blockquote><p>要是两次的话 服务器发过去的那个丢了 服务器会认为以及建立了<br>客户端认为还没回 然后就不发 这就卡着了<br>三次 的话 服务器看到没回 就接着发建立 </p></blockquote><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/14.png"></p><h3 id="3-5-1-建立连接后状态"><a href="#3-5-1-建立连接后状态" class="headerlink" title="3.5.1. 建立连接后状态"></a>3.5.1. 建立连接后状态</h3><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/15.png"></p><h4 id="3-5-1-1-需要wait2ms原因"><a href="#3-5-1-1-需要wait2ms原因" class="headerlink" title="3.5.1.1. 需要wait2ms原因"></a>3.5.1.1. 需要wait2ms原因</h4><p>第一，为了保证 A 发送的最后一个 ACK 报文段能够到达 B。<br>第二，防止 “已失效的连接请求报文段”出现在本连接中。A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段，都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</p><h3 id="3-5-2-状态机"><a href="#3-5-2-状态机" class="headerlink" title="3.5.2. 状态机"></a>3.5.2. 状态机</h3><p><img src="/2020/03/04/ji-suan-ji-wang-luo-ch05-chuan-shu-ceng/16.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP26-thread-level-Parallelism</title>
      <link href="2020/03/01/csapp26-thread-level-parallelism/"/>
      <url>2020/03/01/csapp26-thread-level-parallelism/</url>
      
        <content type="html"><![CDATA[<h1 id="多核和超线程"><a href="#多核和超线程" class="headerlink" title="多核和超线程"></a>多核和超线程</h1><p><img src="/2020/03/01/csapp26-thread-level-parallelism/1.png"><br>现在的计算机都是并行流水线<br><img src="/2020/03/01/csapp26-thread-level-parallelism/2.png"><br>超线程(hpyerthreading)意味着在单核的情况下多个线程同时走</p><h1 id="并行加法"><a href="#并行加法" class="headerlink" title="并行加法"></a>并行加法</h1><p>目标：加0到n-1<br>想法：使用多个进程用互斥量来加globel sum<br>结果<br><img src="/2020/03/01/csapp26-thread-level-parallelism/3.png"></p><p>改进：信号同步是很慢的，每个进程单独使用数组不同步,主进程等待所有进程结束然后相加<br>结果:<br><img src="/2020/03/01/csapp26-thread-level-parallelism/4.png"></p><p>再改进：不用每次改数组，而是用局部变量（寄存器)累加，最后给数组<br><img src="/2020/03/01/csapp26-thread-level-parallelism/5.png"><br><img src="/2020/03/01/csapp26-thread-level-parallelism/6.png"><br>可以看到这里超线程并没有帮到我们（本身就在很好的使用寄存器)<br><strong>但是实际中的程序复杂的多，并不是这么简单利用</strong></p><h1 id="Amdahl’s-Law（阿姆达尔定律）"><a href="#Amdahl’s-Law（阿姆达尔定律）" class="headerlink" title="Amdahl’s Law（阿姆达尔定律）"></a>Amdahl’s Law（阿姆达尔定律）</h1><p>研究一部分性能提升（使用并行)对总体性能的影响<br><img src="/2020/03/01/csapp26-thread-level-parallelism/7.png"></p><h1 id="快速排序（利用并行）"><a href="#快速排序（利用并行）" class="headerlink" title="快速排序（利用并行）"></a>快速排序（利用并行）</h1><p>原来的 排左 排右<br><img src="/2020/03/01/csapp26-thread-level-parallelism/8.png"></p><p>用线程递归  直到够小<br><img src="/2020/03/01/csapp26-thread-level-parallelism/9.png"><br>还要注意的是碎片太小 就不够并行性 太大就线程开销就太大了<br><img src="/2020/03/01/csapp26-thread-level-parallelism/10.png"></p><h1 id="线程连续性法则（Thread-consistency）"><a href="#线程连续性法则（Thread-consistency）" class="headerlink" title="线程连续性法则（Thread consistency）"></a>线程连续性法则（Thread consistency）</h1><p>决定了不会出现1，100  或者100,1<br><img src="/2020/03/01/csapp26-thread-level-parallelism/11.png"><br>但是如果有不耦合的缓存，就可能出现。<br><img src="/2020/03/01/csapp26-thread-level-parallelism/12.png"></p><h2 id="Snoopy-Cache-史努比缓存"><a href="#Snoopy-Cache-史努比缓存" class="headerlink" title="Snoopy Cache(史努比缓存)"></a>Snoopy Cache(史努比缓存)</h2><p>对缓存进行了三种标记<br><img src="/2020/03/01/csapp26-thread-level-parallelism/13.png"><br><img src="/2020/03/01/csapp26-thread-level-parallelism/14.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch04-网络层</title>
      <link href="2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/"/>
      <url>2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E4%B8%A4%E7%A7%8D%E6%9C%8D%E5%8A%A1">1. 两种服务</a><ul><li><a href="#11-%E8%99%9A%E7%94%B5%E8%B7%AF%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5">1.1. 虚电路(面向连接)</a></li><li><a href="#12-%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%9B%A0%E7%89%B9%E7%BD%91-%E4%B8%8D%E9%9C%80%E5%8F%AF%E9%9D%A0">1.2. 数据报(因特网 不需可靠)</a></li><li><a href="#13-%E5%AF%B9%E6%AF%94">1.3. 对比</a></li></ul></li><li><a href="#2-ip%E5%8D%8F%E8%AE%AE%E7%BB%84">2. IP协议组</a></li><li><a href="#3-ip%E5%9C%B0%E5%9D%80">3. IP地址</a><ul><li><a href="#31-arp-%E5%8D%8F%E8%AE%AE-adresss-resolution-protocol">3.1. ARP 协议 （Adresss resolution protocol)</a></li><li><a href="#32-%E6%95%B0%E6%8D%AE%E6%8A%A5">3.2. 数据报</a></li><li><a href="#33-%E6%A0%B9%E6%8D%AE%E6%89%80%E5%9C%A8%E8%B7%AF%E7%94%B1%E8%BD%AC%E5%8F%91">3.3. 根据所在路由转发</a><ul><li><a href="#331-%E7%89%B9%E5%AE%9A%E4%B8%BB%E6%9C%BA%E8%B7%AF%E7%94%B1">3.3.1. 特定主机路由</a></li><li><a href="#332-%E9%BB%98%E8%AE%A4%E8%B7%AF%E7%94%B1">3.3.2. 默认路由</a></li></ul></li></ul></li><li><a href="#4-%E5%88%92%E5%88%86%E5%AD%90%E7%BD%91">4. 划分子网</a><ul><li><a href="#41-%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81">4.1. 子网掩码</a><ul><li><a href="#411-%E6%9F%A5%E6%89%BE%E4%BE%8B%E5%AD%90">4.1.1. 查找例子</a></li></ul></li><li><a href="#42-%E5%9B%9E%E5%88%B0%E4%BA%8C%E7%BA%A7%E7%BD%91%E7%BB%9C-%E5%8F%AA%E7%9C%8B%E5%AD%90%E7%BD%91">4.2. 回到二级网络 （只看子网）</a></li><li><a href="#43-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE">4.3. 二叉查找</a></li></ul></li><li><a href="#5-icmpinternet-control-message-protocol">5. ICMP（Internet Control Message Protocol）</a></li><li><a href="#6-%E8%B7%AF%E7%94%B1%E7%BD%91%E5%85%B3%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE">6. 路由（网关）选择协议</a><ul><li><a href="#61-%E5%86%85%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE-igp-interior-gateway-protocol">6.1. 内部网关协议 IGP (Interior Gateway Protocol)</a><ul><li><a href="#611-riprouting-information-protocol%E8%A7%84%E6%A8%A1%E5%B0%8F">6.1.1. RIP（Routing Information Protocol）（规模小）</a></li><li><a href="#612-ospf-open-shortest-path-first%E5%A4%A7%E8%A7%84%E6%A8%A1">6.1.2. OSPF (Open Shortest Path First)（大规模）</a></li></ul></li><li><a href="#62-%E5%A4%96%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AEegp-external-gateway-protocol">6.2. 外部网关协议EGP (External Gateway Protocol)</a><ul><li><a href="#621-bgp">6.2.1. BGP</a></li></ul></li></ul></li><li><a href="#7-ip%E5%A4%9A%E6%92%AD">7. IP多播</a><ul><li><a href="#71-igmp-internet-group-management-protocol">7.1. IGMP (Internet Group Management Protocol)</a></li><li><a href="#72-rpb">7.2. RPB</a></li></ul></li><li><a href="#8-vpn-virtual-private-network">8. VPN （virtual private network）</a><ul><li><a href="#81-%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80">8.1. 本地地址</a></li><li><a href="#82-%E5%85%A8%E7%90%83%E5%9C%B0%E5%9D%80">8.2. 全球地址</a></li><li><a href="#83-%E5%85%A8%E7%A8%8B%E6%8E%A5%E5%85%A5vpn">8.3. 全程接入VPN</a></li><li><a href="#84-nat-network-address-translation">8.4. NAT （network Address translation）</a><ul><li><a href="#841-%E9%9D%99%E6%80%81nat">8.4.1. 静态NAT</a></li><li><a href="#842-%E5%8A%A8%E6%80%81nat">8.4.2. 动态NAT</a></li></ul></li><li><a href="#85-pat-port-address-translation">8.5. PAT （Port Address Translation）</a></li></ul></li></ul><!-- /TOC --><h1 id="1-两种服务"><a href="#1-两种服务" class="headerlink" title="1. 两种服务"></a>1. 两种服务</h1><h2 id="1-1-虚电路-面向连接"><a href="#1-1-虚电路-面向连接" class="headerlink" title="1.1. 虚电路(面向连接)"></a>1.1. 虚电路(面向连接)</h2><p><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/1.png"></p><h2 id="1-2-数据报-因特网-不需可靠"><a href="#1-2-数据报-因特网-不需可靠" class="headerlink" title="1.2. 数据报(因特网 不需可靠)"></a>1.2. 数据报(因特网 不需可靠)</h2><p><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/2.png"></p><h2 id="1-3-对比"><a href="#1-3-对比" class="headerlink" title="1.3. 对比"></a>1.3. 对比</h2><p><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/3.png"></p><h1 id="2-IP协议组"><a href="#2-IP协议组" class="headerlink" title="2. IP协议组"></a>2. IP协议组</h1><p><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/4.png"></p><h1 id="3-IP地址"><a href="#3-IP地址" class="headerlink" title="3. IP地址"></a>3. IP地址</h1><ul><li>A类：0-127.x.x.x 8位netid</li><li>B类：128-191.x.x.x 16位netid</li><li>C类：192-223.x.x.x 24位netid</li><li>D类：224-239.x.x.x 多播地址</li><li>E类：240.x.x.x 之后使用<br>一个netid 同一个局域网<br>一个路由 多个接口 每个接口就是一个地址<h2 id="3-1-ARP-协议-（Adresss-resolution-protocol"><a href="#3-1-ARP-协议-（Adresss-resolution-protocol" class="headerlink" title="3.1. ARP 协议 （Adresss resolution protocol)"></a>3.1. ARP 协议 （Adresss resolution protocol)</h2><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/5.png"><h2 id="3-2-数据报"><a href="#3-2-数据报" class="headerlink" title="3.2. 数据报"></a>3.2. 数据报</h2><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/6.png"><br>TTL生存时间 经过一个路由减一</li><li>unix TTL默认值256</li><li>win TTL 128</li><li>linux 64<h2 id="3-3-根据所在路由转发"><a href="#3-3-根据所在路由转发" class="headerlink" title="3.3. 根据所在路由转发"></a>3.3. 根据所在路由转发</h2>根据目标网络地址选择下一跳<br>通过ARP算<br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/7.png"><h3 id="3-3-1-特定主机路由"><a href="#3-3-1-特定主机路由" class="headerlink" title="3.3.1. 特定主机路由"></a>3.3.1. 特定主机路由</h3><h3 id="3-3-2-默认路由"><a href="#3-3-2-默认路由" class="headerlink" title="3.3.2. 默认路由"></a>3.3.2. 默认路由</h3></li></ul><h1 id="4-划分子网"><a href="#4-划分子网" class="headerlink" title="4. 划分子网"></a>4. 划分子网</h1><p>netid 不是刚好合适 从hostid前面拿几位subnetid<br><strong>二级变成三级网络</strong><br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/8.png"></p><h2 id="4-1-子网掩码"><a href="#4-1-子网掩码" class="headerlink" title="4.1. 子网掩码"></a>4.1. 子网掩码</h2><p><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/9.png"><br>路由器的路由表里必须同时要有目的地址和子网掩码</p><blockquote><p><strong>网络的第一个地址是子网地址，最后一个地址是广播地址 这个子网之前的地址都可用</strong>  </p></blockquote><h3 id="4-1-1-查找例子"><a href="#4-1-1-查找例子" class="headerlink" title="4.1.1. 查找例子"></a>4.1.1. 查找例子</h3><p><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/10.png"><br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/11.png"><br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/12.png"><br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/13.png"><br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/14.png"><br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/15.png"></p><h2 id="4-2-回到二级网络-（只看子网）"><a href="#4-2-回到二级网络-（只看子网）" class="headerlink" title="4.2. 回到二级网络 （只看子网）"></a>4.2. 回到二级网络 （只看子网）</h2><p>由于netid 不够了  通过202.0.68.0 /22 记录子网掩码位前22个1 </p><h2 id="4-3-二叉查找"><a href="#4-3-二叉查找" class="headerlink" title="4.3. 二叉查找"></a>4.3. 二叉查找</h2><h1 id="5-ICMP（Internet-Control-Message-Protocol）"><a href="#5-ICMP（Internet-Control-Message-Protocol）" class="headerlink" title="5. ICMP（Internet Control Message Protocol）"></a>5. ICMP（Internet Control Message Protocol）</h1><p>ping 测试连通<br>traceroute<br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/16.png"></p><h1 id="6-路由（网关）选择协议"><a href="#6-路由（网关）选择协议" class="headerlink" title="6. 路由（网关）选择协议"></a>6. 路由（网关）选择协议</h1><h2 id="6-1-内部网关协议-IGP-Interior-Gateway-Protocol"><a href="#6-1-内部网关协议-IGP-Interior-Gateway-Protocol" class="headerlink" title="6.1. 内部网关协议 IGP (Interior Gateway Protocol)"></a>6.1. 内部网关协议 IGP (Interior Gateway Protocol)</h2><h3 id="6-1-1-RIP（Routing-Information-Protocol）（规模小）"><a href="#6-1-1-RIP（Routing-Information-Protocol）（规模小）" class="headerlink" title="6.1.1. RIP（Routing Information Protocol）（规模小）"></a>6.1.1. RIP（Routing Information Protocol）（规模小）</h3><ul><li>根据经过的路由来判断最短路径</li><li>每30秒 交换路由信息 </li><li>只和相邻交换（导致网络故障需要 比较长时间才知道）</li></ul><h3 id="6-1-2-OSPF-Open-Shortest-Path-First-（大规模）"><a href="#6-1-2-OSPF-Open-Shortest-Path-First-（大规模）" class="headerlink" title="6.1.2. OSPF (Open Shortest Path First)（大规模）"></a>6.1.2. OSPF (Open Shortest Path First)（大规模）</h3><ul><li>根据时间判断最短路径</li><li>对所有路由发送信息</li><li>只有路由状态改变才再次发 </li><li>30分钟刷新一次链路（只看附近 对整体影响小）<h2 id="6-2-外部网关协议EGP-External-Gateway-Protocol"><a href="#6-2-外部网关协议EGP-External-Gateway-Protocol" class="headerlink" title="6.2. 外部网关协议EGP (External Gateway Protocol)"></a>6.2. 外部网关协议EGP (External Gateway Protocol)</h2><h3 id="6-2-1-BGP"><a href="#6-2-1-BGP" class="headerlink" title="6.2.1. BGP"></a>6.2.1. BGP</h3><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/17.png"><br><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/18.png"></li></ul><h1 id="7-IP多播"><a href="#7-IP多播" class="headerlink" title="7. IP多播"></a>7. IP多播</h1><p><img src="/2020/03/01/ji-suan-ji-wang-luo-ch04-wang-luo-ceng/19.png"></p><h2 id="7-1-IGMP-Internet-Group-Management-Protocol"><a href="#7-1-IGMP-Internet-Group-Management-Protocol" class="headerlink" title="7.1. IGMP (Internet Group Management Protocol)"></a>7.1. IGMP (Internet Group Management Protocol)</h2><h2 id="7-2-RPB"><a href="#7-2-RPB" class="headerlink" title="7.2. RPB"></a>7.2. RPB</h2><h1 id="8-VPN-（virtual-private-network）"><a href="#8-VPN-（virtual-private-network）" class="headerlink" title="8. VPN （virtual private network）"></a>8. VPN （virtual private network）</h1><h2 id="8-1-本地地址"><a href="#8-1-本地地址" class="headerlink" title="8.1. 本地地址"></a>8.1. 本地地址</h2><p>仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向因特网的管理机构申请。</p><ul><li>10.0.0.0 到 10.255.255.255</li><li>172.16.0.0 到 172.31.255.255</li><li>192.168.0.0 到 192.168.255.255<br>专用的 不能在因特网通信 机构内部通信<h2 id="8-2-全球地址"><a href="#8-2-全球地址" class="headerlink" title="8.2. 全球地址"></a>8.2. 全球地址</h2>全球唯一的IP地址，必须向因特网的管理机构申请。 </li></ul><h2 id="8-3-全程接入VPN"><a href="#8-3-全程接入VPN" class="headerlink" title="8.3. 全程接入VPN"></a>8.3. 全程接入VPN</h2><p>可拨号接入相当于 变成局域网的一个主机 可以选择是不是用远程网关</p><h2 id="8-4-NAT-（network-Address-translation）"><a href="#8-4-NAT-（network-Address-translation）" class="headerlink" title="8.4. NAT （network Address translation）"></a>8.4. NAT （network Address translation）</h2><p>VPN中怎么和外部相互通信 </p><h3 id="8-4-1-静态NAT"><a href="#8-4-1-静态NAT" class="headerlink" title="8.4.1. 静态NAT"></a>8.4.1. 静态NAT</h3><blockquote><p>将内部本地地址与内部全局地址进行一对一的明确转换。这种方法主要用在内部网络中有对外提供服务的服务器，如WEB、MAIL服务器时。该方法的缺点是需要独占宝贵的合法IP地址。即，如果某个合法IP地址已经被NAT静态地址转换定义，即使该地址当前没有被使用，也不能被用作其它的地址转换。</p></blockquote><h3 id="8-4-2-动态NAT"><a href="#8-4-2-动态NAT" class="headerlink" title="8.4.2. 动态NAT"></a>8.4.2. 动态NAT</h3><blockquote><p>动态地址转换也是将内部本地地址与内部全局地址进行一对一的转换。但是，是从内部全局地址池中动态地选择一个未使用的地址对内部本地地址进行转换。该地址是由未被使用的地址组成的地址池中在定义时排在最前面的一个。当数据传输完毕后，路由器将把使用完的内部全局地址放回到地址池中，以供其它内部本地地址进行转换。但是在该地址被使用时，不能用该地址再进行一次转换。</p></blockquote><h2 id="8-5-PAT-（Port-Address-Translation）"><a href="#8-5-PAT-（Port-Address-Translation）" class="headerlink" title="8.5. PAT （Port Address Translation）"></a>8.5. PAT （Port Address Translation）</h2><blockquote><p>复用地址转换也称为端口地址转换（Port Address Translation，PAT），首先是一种动态地址转换。路由器将通过记录地址、应用程序端口等唯一标识一个转换。通过这种转换，可以使多个内部本地地址同时与同一个内部全局地址进行转换并对外部网络进行访问。对于只申请到少量IP地址甚至只有一个合法IP地址，却经常有很多用户同时要求上网的情况，这种转换方式非常有用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch03-数据链路层</title>
      <link href="2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/"/>
      <url>2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E4%BF%A1%E9%81%93%E6%96%B9%E5%BC%8F">1. 信道方式</a><ul><li><a href="#11-%E7%82%B9%E5%AF%B9%E7%82%B9%E4%BF%A1%E9%81%93">1.1. 点对点信道</a><ul><li><a href="#111-%E4%BC%A0%E8%BE%93%E6%AD%A5%E9%AA%A4">1.1.1. 传输步骤</a><ul><li><a href="#1111-%E5%B0%81%E8%A3%85%E6%88%90%E5%B8%A7">1.1.1.1. 封装成帧</a></li><li><a href="#1112-%E9%80%8F%E6%98%8E%E4%BC%A0%E8%BE%93">1.1.1.2. 透明传输</a></li><li><a href="#1113-%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6">1.1.1.3. 差错控制</a></li></ul></li><li><a href="#112-ppp%E5%8D%8F%E8%AE%AE">1.1.2. PPP协议</a></li></ul></li><li><a href="#12-%E5%B9%BF%E6%92%AD%E4%BF%A1%E9%81%93">1.2. 广播信道</a><ul><li><a href="#121-%E5%B1%80%E5%9F%9F%E7%BD%91">1.2.1. 局域网</a></li><li><a href="#122-%E7%BD%91%E5%8D%A1%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D%E5%99%A8">1.2.2. 网卡（网络适配器）</a></li><li><a href="#123-%E4%BB%A5%E5%A4%AA%E7%BD%91-csmacd-%E4%B8%80%E7%A7%8D%E5%B1%80%E5%9F%9F%E7%BD%91">1.2.3. 以太网 CSMA/CD （一种局域网)</a></li><li><a href="#124-mac%E5%9C%B0%E5%9D%80">1.2.4. MAC地址</a></li><li><a href="#125-%E9%9B%86%E7%BA%BF%E5%99%A8">1.2.5. 集线器</a><ul><li><a href="#1251-%E9%9B%86%E7%BA%BF%E5%99%A8%E6%89%A9%E5%B1%95">1.2.5.1. 集线器扩展</a></li></ul></li><li><a href="#126-%E7%BD%91%E6%A1%A5">1.2.6. 网桥</a><ul><li><a href="#1261-%E9%80%8F%E6%98%8E%E7%BD%91%E6%A1%A5">1.2.6.1. 透明网桥</a></li></ul></li><li><a href="#127-%E4%BA%A4%E6%8D%A2%E6%9C%BA-%E7%BD%91%E6%A1%A5--%E9%9B%86%E7%BA%BF%E5%99%A8">1.2.7. 交换机 （网桥 + 集线器）</a></li><li><a href="#128-vlan-%E4%B8%8E%E4%BD%8D%E7%BD%AE%E6%97%A0%E5%85%B3%E5%92%8C%E5%8A%9F%E8%83%BD%E6%9C%89%E5%85%B3">1.2.8. VLAN (与位置无关和功能有关)</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-信道方式"><a href="#1-信道方式" class="headerlink" title="1. 信道方式"></a>1. 信道方式</h1><p>传输 数据帧</p><h2 id="1-1-点对点信道"><a href="#1-1-点对点信道" class="headerlink" title="1.1. 点对点信道"></a>1.1. 点对点信道</h2><h3 id="1-1-1-传输步骤"><a href="#1-1-1-传输步骤" class="headerlink" title="1.1.1. 传输步骤"></a>1.1.1. 传输步骤</h3><h4 id="1-1-1-1-封装成帧"><a href="#1-1-1-1-封装成帧" class="headerlink" title="1.1.1.1. 封装成帧"></a>1.1.1.1. 封装成帧</h4><p>加首部 尾部</p><h4 id="1-1-1-2-透明传输"><a href="#1-1-1-2-透明传输" class="headerlink" title="1.1.1.2. 透明传输"></a>1.1.1.2. 透明传输</h4><p>添加转义 防止数据里面有帧尾</p><h4 id="1-1-1-3-差错控制"><a href="#1-1-1-3-差错控制" class="headerlink" title="1.1.1.3. 差错控制"></a>1.1.1.3. 差错控制</h4><p>CRC 循环码  是FSC(Frame squence check)的一种<br>无差错接受</p><h3 id="1-1-2-PPP协议"><a href="#1-1-2-PPP协议" class="headerlink" title="1.1.2. PPP协议"></a>1.1.2. PPP协议</h3><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/1.png"></p><h2 id="1-2-广播信道"><a href="#1-2-广播信道" class="headerlink" title="1.2. 广播信道"></a>1.2. 广播信道</h2><h3 id="1-2-1-局域网"><a href="#1-2-1-局域网" class="headerlink" title="1.2.1. 局域网"></a>1.2.1. 局域网</h3><h3 id="1-2-2-网卡（网络适配器）"><a href="#1-2-2-网卡（网络适配器）" class="headerlink" title="1.2.2. 网卡（网络适配器）"></a>1.2.2. 网卡（网络适配器）</h3><h3 id="1-2-3-以太网-CSMA-CD-（一种局域网"><a href="#1-2-3-以太网-CSMA-CD-（一种局域网" class="headerlink" title="1.2.3. 以太网 CSMA/CD （一种局域网)"></a>1.2.3. 以太网 CSMA/CD （一种局域网)</h3><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/2.png"></p><h3 id="1-2-4-MAC地址"><a href="#1-2-4-MAC地址" class="headerlink" title="1.2.4. MAC地址"></a>1.2.4. MAC地址</h3><p>2^48 次方个<br><img src="/2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/3.png"></p><h3 id="1-2-5-集线器"><a href="#1-2-5-集线器" class="headerlink" title="1.2.5. 集线器"></a>1.2.5. 集线器</h3><p>相当于总线<br><img src="/2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/4.png"></p><h4 id="1-2-5-1-集线器扩展"><a href="#1-2-5-1-集线器扩展" class="headerlink" title="1.2.5.1. 集线器扩展"></a>1.2.5.1. 集线器扩展</h4><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/5.png"></p><h3 id="1-2-6-网桥"><a href="#1-2-6-网桥" class="headerlink" title="1.2.6. 网桥"></a>1.2.6. 网桥</h3><p>根据转发目的<br><img src="/2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/6.png"></p><h4 id="1-2-6-1-透明网桥"><a href="#1-2-6-1-透明网桥" class="headerlink" title="1.2.6.1. 透明网桥"></a>1.2.6.1. 透明网桥</h4><p>自学习 生成树</p><h3 id="1-2-7-交换机-（网桥-集线器）"><a href="#1-2-7-交换机-（网桥-集线器）" class="headerlink" title="1.2.7. 交换机 （网桥 + 集线器）"></a>1.2.7. 交换机 （网桥 + 集线器）</h3><p>全双工 独占信道</p><h3 id="1-2-8-VLAN-与位置无关和功能有关"><a href="#1-2-8-VLAN-与位置无关和功能有关" class="headerlink" title="1.2.8. VLAN (与位置无关和功能有关)"></a>1.2.8. VLAN (与位置无关和功能有关)</h3><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch03-shu-ju-lian-lu-ceng/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch02-物理层</title>
      <link href="2020/02/29/ji-suan-ji-wang-luo-ch02-wu-li-ceng/"/>
      <url>2020/02/29/ji-suan-ji-wang-luo-ch02-wu-li-ceng/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E5%8D%95%E5%B7%A5-%E5%8D%8A%E5%8F%8C%E5%B7%A5-%E5%8F%8C%E5%B7%A5">1. 单工 半双工 双工</a></li><li><a href="#2-%E5%A5%88%E6%B0%8F%E5%87%86%E5%88%99-%E9%A6%99%E5%86%9C%E5%85%AC%E5%BC%8F">2. 奈氏准则 香农公式</a><ul><li><a href="#21-%E5%A5%88%E6%B0%8F%E5%87%86%E5%88%99">2.1. 奈氏准则</a></li><li><a href="#22-%E9%A6%99%E5%86%9C%E5%85%AC%E5%BC%8F">2.2. 香农公式</a></li></ul></li><li><a href="#3-fdm-tdm-wdm%E5%85%89%E7%9A%84fdm-cdm">3. FDM TDM WDM(光的FDM) CDM</a></li><li><a href="#4-adsl-%E6%8B%A8%E5%8F%B7%E4%B8%8A%E7%BD%91">4. ADSL 拨号上网</a></li></ul><!-- /TOC --><h1 id="1-单工-半双工-双工"><a href="#1-单工-半双工-双工" class="headerlink" title="1. 单工 半双工 双工"></a>1. 单工 半双工 双工</h1><h1 id="2-奈氏准则-香农公式"><a href="#2-奈氏准则-香农公式" class="headerlink" title="2. 奈氏准则 香农公式"></a>2. 奈氏准则 香农公式</h1><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch02-wu-li-ceng/1.png"></p><h2 id="2-1-奈氏准则"><a href="#2-1-奈氏准则" class="headerlink" title="2.1. 奈氏准则"></a>2.1. 奈氏准则</h2><p>奈氏准则 多高频 传输快无串扰</p><h2 id="2-2-香农公式"><a href="#2-2-香农公式" class="headerlink" title="2.2. 香农公式"></a>2.2. 香农公式</h2><p>信噪比和带宽</p><h1 id="3-FDM-TDM-WDM-光的FDM-CDM"><a href="#3-FDM-TDM-WDM-光的FDM-CDM" class="headerlink" title="3. FDM TDM WDM(光的FDM) CDM"></a>3. FDM TDM WDM(光的FDM) CDM</h1><p>CDMA 利用正交 不同码元 正交0<br><img src="/2020/02/29/ji-suan-ji-wang-luo-ch02-wu-li-ceng/2.png"></p><h1 id="4-ADSL-拨号上网"><a href="#4-ADSL-拨号上网" class="headerlink" title="4. ADSL 拨号上网"></a>4. ADSL 拨号上网</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络：ch01-概述</title>
      <link href="2020/02/29/ji-suan-ji-wang-luo-ch01-gai-shu/"/>
      <url>2020/02/29/ji-suan-ji-wang-luo-ch01-gai-shu/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-internet%E5%9B%A0%E7%89%B9%E7%BD%91-%E5%92%8C-internet%E4%BA%92%E8%81%94%E7%BD%91">1. Internet（因特网) 和 internet（互联网)</a></li><li><a href="#2-%E4%B8%BB%E6%9C%BA%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F">2. 主机通信方式</a><ul><li><a href="#21-cs">2.1. CS</a></li><li><a href="#22-p-to-p">2.2. P to P</a></li></ul></li><li><a href="#3-%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%96%B9%E5%BC%8F">3. 数据交换方式</a><ul><li><a href="#31-%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2">3.1. 电路交换</a></li><li><a href="#32-%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2">3.2. 分组交换</a></li><li><a href="#33-%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2">3.3. 报文交换</a></li></ul></li><li><a href="#4-%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%BD%91%E7%BB%9C%E5%88%92%E5%88%86">4. 各种类型网络划分</a></li><li><a href="#5-%E8%B7%AF%E7%94%B1%E5%99%A8-router">5. 路由器 (router)</a></li><li><a href="#6-%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86-osirm--%E5%AE%9E%E9%99%85%E6%A0%87%E5%87%86-tcpip">6. 国际标准 OSI/RM  实际标准 TCP/IP</a></li><li><a href="#7-%E5%90%84%E5%B1%82%E6%93%8D%E4%BD%9C">7. 各层操作</a></li><li><a href="#8-%E8%B7%AF%E7%94%B1%E5%99%A8%E5%8F%AA%E7%94%A8%E4%BA%86%E7%BD%91%E7%BB%9C%E5%B1%82">8. 路由器只用了网络层</a></li></ul><!-- /TOC --><h1 id="1-Internet（因特网-和-internet（互联网"><a href="#1-Internet（因特网-和-internet（互联网" class="headerlink" title="1. Internet（因特网) 和 internet（互联网)"></a>1. Internet（因特网) 和 internet（互联网)</h1><p>Internet（因特网）全球最大的网络<br>internet（互联网) 多个计算机网络互连<br>ISP（Internet services provider)<br><img src="/2020/02/29/ji-suan-ji-wang-luo-ch01-gai-shu/1.png"></p><h1 id="2-主机通信方式"><a href="#2-主机通信方式" class="headerlink" title="2. 主机通信方式"></a>2. 主机通信方式</h1><h2 id="2-1-CS"><a href="#2-1-CS" class="headerlink" title="2.1. CS"></a>2.1. CS</h2><h2 id="2-2-P-to-P"><a href="#2-2-P-to-P" class="headerlink" title="2.2. P to P"></a>2.2. P to P</h2><p>使用P2P 软件 对等连接 不区分请求和提供</p><h1 id="3-数据交换方式"><a href="#3-数据交换方式" class="headerlink" title="3. 数据交换方式"></a>3. 数据交换方式</h1><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch01-gai-shu/5.png"></p><h2 id="3-1-电路交换"><a href="#3-1-电路交换" class="headerlink" title="3.1. 电路交换"></a>3.1. 电路交换</h2><p>直接线或者加上交换机连起来 </p><h2 id="3-2-分组交换"><a href="#3-2-分组交换" class="headerlink" title="3.2. 分组交换"></a>3.2. 分组交换</h2><p>将报文分段 重组</p><h2 id="3-3-报文交换"><a href="#3-3-报文交换" class="headerlink" title="3.3. 报文交换"></a>3.3. 报文交换</h2><h1 id="4-各种类型网络划分"><a href="#4-各种类型网络划分" class="headerlink" title="4. 各种类型网络划分"></a>4. 各种类型网络划分</h1><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch01-gai-shu/6.png"></p><h1 id="5-路由器-router"><a href="#5-路由器-router" class="headerlink" title="5. 路由器 (router)"></a>5. 路由器 (router)</h1><p>转发收到数据报分组</p><h1 id="6-国际标准-OSI-RM-实际标准-TCP-IP"><a href="#6-国际标准-OSI-RM-实际标准-TCP-IP" class="headerlink" title="6. 国际标准 OSI/RM  实际标准 TCP/IP"></a>6. 国际标准 OSI/RM  实际标准 TCP/IP</h1><p>TCP 4层  网络接口层分为 数据链路和物理层</p><h1 id="7-各层操作"><a href="#7-各层操作" class="headerlink" title="7. 各层操作"></a>7. 各层操作</h1><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch01-gai-shu/2.png"></p><h1 id="8-路由器只用了网络层"><a href="#8-路由器只用了网络层" class="headerlink" title="8. 路由器只用了网络层"></a>8. 路由器只用了网络层</h1><p><img src="/2020/02/29/ji-suan-ji-wang-luo-ch01-gai-shu/3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP25-synchronization-Advanced</title>
      <link href="2020/02/28/csapp25-synchronization-advanced/"/>
      <url>2020/02/28/csapp25-synchronization-advanced/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-use-semaphores-to-protectd-shared-variables">1. use semaphores to protectd shared variables</a><ul><li><a href="#11-two-classical-examples">1.1. two classical examples</a><ul><li><a href="#111-the-producer-consumer-probelm">1.1.1. the producer-consumer probelm</a></li><li><a href="#112-reader-writer-problem">1.1.2. reader writer problem</a></li></ul></li><li><a href="#12-put-it-together">1.2. put it together</a></li></ul></li><li><a href="#2-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">2. 线程安全</a><ul><li><a href="#21-unsafe-types-functions">2.1. unsafe types functions</a><ul><li><a href="#211-class1-%E6%B2%A1%E4%BF%9D%E6%8A%A4%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F">2.1.1. class1 没保护共享变量</a></li><li><a href="#212-class2-%E4%BE%9D%E8%B5%96%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%8A%B6%E6%80%81">2.1.2. class2 依赖全局变量状态</a></li><li><a href="#213-class3-%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%9C%B0%E5%9D%80">2.1.3. class3 返回一个静态变量的地址</a></li><li><a href="#214-class4-%E8%B0%83%E7%94%A8%E4%BB%BB%E4%BD%95%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E5%87%BD%E6%95%B0%E5%9C%A8%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2">2.1.4. class4 调用任何线程不安全的函数在函数里面</a></li><li><a href="#215-%E9%87%8D%E5%AE%9A%E4%BD%8D%E5%87%BD%E6%95%B0%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95shared%E5%8F%98%E9%87%8F">2.1.5. 重定位函数（没有任何shared变量）</a></li></ul></li><li><a href="#22-problems">2.2. problems</a><ul><li><a href="#221-races-%E4%B8%8D%E8%83%BD%E5%81%87%E8%AE%BE%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%85%88%E5%88%B0%E8%BE%BE%E4%B8%80%E4%B8%AA%E7%82%B9%E5%9C%A8%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%88%B0%E8%BE%BE%E9%82%A3%E4%B8%AA%E7%82%B9%E5%89%8D">2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）</a></li><li><a href="#222-deadlock%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%92%E7%9B%B8%E7%AD%89%E5%BE%85%E5%AF%B9%E6%96%B9%E9%87%8A%E6%94%BE">2.2.2. deadlock（两个线程互相等待对方释放）</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-use-semaphores-to-protectd-shared-variables"><a href="#1-use-semaphores-to-protectd-shared-variables" class="headerlink" title="1. use semaphores to protectd shared variables"></a>1. use semaphores to protectd shared variables</h1><p>mutex（互斥量）</p><h2 id="1-1-two-classical-examples"><a href="#1-1-two-classical-examples" class="headerlink" title="1.1. two classical examples"></a>1.1. two classical examples</h2><h3 id="1-1-1-the-producer-consumer-probelm"><a href="#1-1-1-the-producer-consumer-probelm" class="headerlink" title="1.1.1. the producer-consumer probelm"></a>1.1.1. the producer-consumer probelm</h3><p><img src="/2020/02/28/csapp25-synchronization-advanced/1.png"><br>生产者等待buffer的空槽 插入items<br>消费者等待items 将其重buffer中移除 告知生产者<br>图像渲染帧：帧被创建 然后在被渲染<br>图形页面驱动：鼠标等事件发生 然后响应</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">/* Insert item onto the rear of shared buffer sp */void sbuf_insert(sbuf_t *sp, int item){P(&amp;sp-&gt;slots); /* Wait for available slot */P(&amp;sp-&gt;mutex); /* Lock the buffer */sp-&gt;buf[(++sp-&gt;rear)%(sp-&gt;n)] = item; /* Insert the item */V(&amp;sp-&gt;mutex); /* Unlock the buffer */V(&amp;sp-&gt;items); /* Announce available item */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">/* Remove and return the first item from buffer sp */int sbuf_remove(sbuf_t *sp){int item;P(&amp;sp-&gt;items); /* Wait for available item */P(&amp;sp-&gt;mutex); /* Lock the buffer */item = sp-&gt;buf[(++sp-&gt;front)%(sp-&gt;n)]; /* Remove the item */V(&amp;sp-&gt;mutex); /* Unlock the buffer */V(&amp;sp-&gt;slots); /* Announce available slot */return item;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-2-reader-writer-problem"><a href="#1-1-2-reader-writer-problem" class="headerlink" title="1.1.2. reader writer problem"></a>1.1.2. reader writer problem</h3><p>读者只读 只有作者有权利写</p><ul><li>reader优先<br>当作者写完buffer后，同时等待时，读者优先 </li><li>writer优先<br>当作者写完buffer后，同时等待时，作者优先 </li></ul><h2 id="1-2-put-it-together"><a href="#1-2-put-it-together" class="headerlink" title="1.2. put it together"></a>1.2. put it together</h2><p><img src="/2020/02/28/csapp25-synchronization-advanced/2.png"><br><strong>预线程并发服务器</strong>好处显然：少了创建销毁进程或者线程 在buffer操作简单 效率高</p><h1 id="2-线程安全"><a href="#2-线程安全" class="headerlink" title="2. 线程安全"></a>2. 线程安全</h1><p>被线程函数调用的函数必须是线程安全的<br><strong>定义</strong>：被多个并发线程调用也无论多少次都能产生正确结果</p><h2 id="2-1-unsafe-types-functions"><a href="#2-1-unsafe-types-functions" class="headerlink" title="2.1. unsafe types functions"></a>2.1. unsafe types functions</h2><h3 id="2-1-1-class1-没保护共享变量"><a href="#2-1-1-class1-没保护共享变量" class="headerlink" title="2.1.1. class1 没保护共享变量"></a>2.1.1. class1 没保护共享变量</h3><p>改进：使用mutex 然后PV保护就行<br>问题：太慢了 同步</p><h3 id="2-1-2-class2-依赖全局变量状态"><a href="#2-1-2-class2-依赖全局变量状态" class="headerlink" title="2.1.2. class2 依赖全局变量状态"></a>2.1.2. class2 依赖全局变量状态</h3><p>比如rand函数 依赖种子 原理上种子不变随机数不变 但是如图next很有可能在调用的时候被改变（很多lic库的在写的时候还没有线程）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/* rand: return pseudo-random integer on 0..32767 */</span><span class="token keyword">int</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>next <span class="token operator">=</span> next<span class="token operator">*</span><span class="token number">1103515245</span> <span class="token operator">+</span> <span class="token number">12345</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>next<span class="token operator">/</span><span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">32768</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* srand: set seed for rand() */</span><span class="token keyword">void</span> <span class="token function">srand</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span><span class="token punctuation">{</span>next <span class="token operator">=</span> seed<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改进：用指针保存seed代替全局变量</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* rand_r - return pseudo-random integer on 0..32767 */</span><span class="token keyword">int</span> <span class="token function">rand_r</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nextp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">*</span>nextp <span class="token operator">=</span> <span class="token operator">*</span>nextp <span class="token operator">*</span> <span class="token number">1103515245</span> <span class="token operator">+</span> <span class="token number">12345</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>nextp<span class="token operator">/</span><span class="token number">65536</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">32768</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-3-class3-返回一个静态变量的地址"><a href="#2-1-3-class3-返回一个静态变量的地址" class="headerlink" title="2.1.3. class3 返回一个静态变量的地址"></a>2.1.3. class3 返回一个静态变量的地址</h3><p>比如time 返回的一直是一个相同的地址 只不过上面的字符串不一样<br>改进：重写库（难） 或者重写调用 把静态变量的地方改成每个独有的地址</p><h3 id="2-1-4-class4-调用任何线程不安全的函数在函数里面"><a href="#2-1-4-class4-调用任何线程不安全的函数在函数里面" class="headerlink" title="2.1.4. class4 调用任何线程不安全的函数在函数里面"></a>2.1.4. class4 调用任何线程不安全的函数在函数里面</h3><h3 id="2-1-5-重定位函数（没有任何shared变量）"><a href="#2-1-5-重定位函数（没有任何shared变量）" class="headerlink" title="2.1.5. 重定位函数（没有任何shared变量）"></a>2.1.5. 重定位函数（没有任何shared变量）</h3><p><img src="/2020/02/28/csapp25-synchronization-advanced/3.png"></p><p>所有Standard C的函数都是线程安全的</p><h2 id="2-2-problems"><a href="#2-2-problems" class="headerlink" title="2.2. problems"></a>2.2. problems</h2><h3 id="2-2-1-races-（不能假设一个线程先到达一个点在另一个线程到达那个点前）"><a href="#2-2-1-races-（不能假设一个线程先到达一个点在另一个线程到达那个点前）" class="headerlink" title="2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）"></a>2.2.1. races （不能假设一个线程先到达一个点在另一个线程到达那个点前）</h3><p><img src="/2020/02/28/csapp25-synchronization-advanced/4.png"><br><img src="/2020/02/28/csapp25-synchronization-advanced/5.png"></p><p><img src="/2020/02/28/csapp25-synchronization-advanced/6.png"></p><h3 id="2-2-2-deadlock（两个线程互相等待对方释放）"><a href="#2-2-2-deadlock（两个线程互相等待对方释放）" class="headerlink" title="2.2.2. deadlock（两个线程互相等待对方释放）"></a>2.2.2. deadlock（两个线程互相等待对方释放）</h3><p><img src="/2020/02/28/csapp25-synchronization-advanced/7.png"><br><img src="/2020/02/28/csapp25-synchronization-advanced/8.png"><br><img src="/2020/02/28/csapp25-synchronization-advanced/9.png"><br><img src="/2020/02/28/csapp25-synchronization-advanced/10.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> synchronization </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP24-synchronization-Basic</title>
      <link href="2020/02/27/csapp24-synchronization-basic/"/>
      <url>2020/02/27/csapp24-synchronization-basic/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-why-synchronization">1. why synchronization</a></li><li><a href="#2-what-is-shared-variables-in-thread">2. what is shared variables in thread</a><ul><li><a href="#21-%E9%80%9A%E8%BF%87%E5%B0%86%E5%8F%98%E9%87%8F%E6%94%BE%E5%85%A5%E5%86%85%E5%AD%98%E6%90%9E%E6%B8%85%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA%E5%AE%9E%E4%BE%8B">2.1. 通过将变量放入内存搞清一个变量有多少个实例</a></li></ul></li><li><a href="#3-probelems">3. probelems</a><ul><li><a href="#31-%E8%BF%9B%E7%A8%8B%E5%9B%BE%E5%88%86%E6%9E%90">3.1. 进程图分析</a></li><li><a href="#32-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphores">3.2. 信号量（Semaphores）</a></li></ul></li></ul><!-- /TOC --><h1 id="1-why-synchronization"><a href="#1-why-synchronization" class="headerlink" title="1. why synchronization"></a>1. why synchronization</h1><p>为了在关键步骤发生不必要的共享 导致错误</p><h1 id="2-what-is-shared-variables-in-thread"><a href="#2-what-is-shared-variables-in-thread" class="headerlink" title="2. what is shared variables in thread"></a>2. what is shared variables in thread</h1><p>不一定是全局变量（全局变量只被自己引用就不是，只要是被多个进程指向的变量就是分享变量）<br>虽然每个线程栈独立，由于指针的特性，程序是能影响其他栈的</p><h2 id="2-1-通过将变量放入内存搞清一个变量有多少个实例"><a href="#2-1-通过将变量放入内存搞清一个变量有多少个实例" class="headerlink" title="2.1. 通过将变量放入内存搞清一个变量有多少个实例"></a>2.1. 通过将变量放入内存搞清一个变量有多少个实例</h2><ul><li>global variables<br>放在全局区，在链接时链接器就只存放了同名全局变量的一个实例在虚拟内存里面</li><li>local variables<br>非static 变量放在栈上 每个进程有自己的栈</li><li>local static variables<br>放在全局区 虚拟内存里面只有一个实例<br><img src="/2020/02/27/csapp24-synchronization-basic/1.png"><br>从share的角度<br><img src="/2020/02/27/csapp24-synchronization-basic/2.png"></li><li>*ptr, cnt, and msgs are shared<br>n i and myid are not shared**</li></ul><h1 id="3-probelems"><a href="#3-probelems" class="headerlink" title="3. probelems"></a>3. probelems</h1><p>volatile 可以防止变量一直存在寄存器里面 （不写回）<br>交给内核完成上下文交换 只有系统调用和定时器中断 所以数字大的话错误概率就高<br><img src="/2020/02/27/csapp24-synchronization-basic/3.png"><br><strong>反汇编</strong> 发现改变cnt需要三个步骤 只有最后一个步骤写回<br><img src="/2020/02/27/csapp24-synchronization-basic/4.png"><br>正确顺序<br><img src="/2020/02/27/csapp24-synchronization-basic/5.png"><br>可能的顺序<br><img src="/2020/02/27/csapp24-synchronization-basic/6.png"><br><img src="/2020/02/27/csapp24-synchronization-basic/7.png"></p><h2 id="3-1-进程图分析"><a href="#3-1-进程图分析" class="headerlink" title="3.1. 进程图分析"></a>3.1. 进程图分析</h2><p><img src="/2020/02/27/csapp24-synchronization-basic/8.png"></p><h2 id="3-2-信号量（Semaphores）"><a href="#3-2-信号量（Semaphores）" class="headerlink" title="3.2. 信号量（Semaphores）"></a>3.2. 信号量（Semaphores）</h2><p>Monitors (Java)<br>Semaphores 是非负全局**<em>同步**</em>变量。</p><p>因此可以通过PV加减信号量来保证不会进入危险区域</p><p><img src="/2020/02/27/csapp24-synchronization-basic/9.png"></p><ul><li>P 减少 信号量 如果信号量是0 那么就会阻塞等待V增加信号量</li><li>V 不会阻塞 只是在增加后 会随机选择 多个阻塞线程中的一个<br><img src="/2020/02/27/csapp24-synchronization-basic/10.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> synchronization </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP23-concurrent-programming</title>
      <link href="2020/02/26/csapp23-concurrent-programming/"/>
      <url>2020/02/26/csapp23-concurrent-programming/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-probelms">1. Probelms</a></li><li><a href="#2-neccessity">2. Neccessity</a></li><li><a href="#3-approaches-for-writing-a-concurrent-program">3. Approaches for Writing a concurrent program</a><ul><li><a href="#31-progress-based">3.1. Progress-based</a><ul><li><a href="#311-features">3.1.1. Features</a></li><li><a href="#312-pros-and-cons">3.1.2. Pros and Cons</a></li></ul></li><li><a href="#32-event-based">3.2. Event-based</a><ul><li><a href="#321-pros-and-cons">3.2.1. Pros and Cons</a></li></ul></li><li><a href="#33-thread-based">3.3. Thread-based</a><ul><li><a href="#331-differences-and-similarities-between-process-and-thread">3.3.1. differences and similarities between process and thread</a></li><li><a href="#332-thread-mode">3.3.2. thread mode</a></li></ul></li></ul></li><li><a href="#4-summary">4. Summary</a></li></ul><!-- /TOC --><h1 id="1-Probelms"><a href="#1-Probelms" class="headerlink" title="1. Probelms"></a>1. Probelms</h1><ul><li>Races：结果取决于随机的调度(谁得到最后一张票,父进程在子进程加入列表前运行完了)</li><li>Deadlock: 等待着一个永远不发生的信号到来（主程序printf，信号处理程序同时printf；交通谁先谁通过，但是同时到达四个，就不知道怎么走)</li><li>livelock /starvations/ fairness: 两个进程内核总是安排一个</li></ul><h1 id="2-Neccessity"><a href="#2-Neccessity" class="headerlink" title="2. Neccessity"></a>2. Neccessity</h1><p><img src="/2020/02/26/csapp23-concurrent-programming/1.png"><br>如果不并发 客户端2 connect 就算没建立连接也会return  要等待服务端结束前一个再accept<br>再发</p><h1 id="3-Approaches-for-Writing-a-concurrent-program"><a href="#3-Approaches-for-Writing-a-concurrent-program" class="headerlink" title="3. Approaches for Writing a concurrent program"></a>3. Approaches for Writing a concurrent program</h1><h2 id="3-1-Progress-based"><a href="#3-1-Progress-based" class="headerlink" title="3.1. Progress-based"></a>3.1. Progress-based</h2><h3 id="3-1-1-Features"><a href="#3-1-1-Features" class="headerlink" title="3.1.1. Features"></a>3.1.1. Features</h3><ul><li>内核自动调度</li><li>单独地址空间<br>如图<br><img src="/2020/02/26/csapp23-concurrent-programming/2.png"></li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main(int argc, char **argv)!{int listenfd, connfd;socklen_t clientlen;struct sockaddr_storage clientaddr;Signal(SIGCHLD, sigchld_handler);listenfd = Open_listenfd(argv[1]);while (1) {clientlen = sizeof(struct sockaddr_storage);connfd = Accept(listenfd, (SA *) &amp;clientaddr, &amp;clientlen);if (Fork() == 0) {Close(listenfd); /* Child closes its listening socket */echo(connfd); /* Child services client */Close(connfd); /* Child closes connection with client */exit(0); /* Child exits */}Close(connfd); /* Parent closes connected socket (important!) */}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在程序里需要注意</strong>：<br>每个父进程和子进程里面都有listenfd和connfd，refcnt=2 所以需要分别在父进程关闭connfd 子进程关闭listenfd</p><h3 id="3-1-2-Pros-and-Cons"><a href="#3-1-2-Pros-and-Cons" class="headerlink" title="3.1.2. Pros and Cons"></a>3.1.2. Pros and Cons</h3><ul><li>pros：<ul><li>并发</li><li>清晰的共享模式：单独的描述符，共享描述符表已经打开文件表，不共享全局变量地址</li><li>简单</li></ul></li><li>cons<ul><li>额外进程开销</li><li>不共享数据地址<h2 id="3-2-Event-based"><a href="#3-2-Event-based" class="headerlink" title="3.2. Event-based"></a>3.2. Event-based</h2></li></ul></li><li>程序员调度多重的逻辑流</li><li>所有流 同样的地址</li><li>I/O 复用</li><li>可以Debug</li></ul><p>对所有输入都挂起读取</p><p><img src="/2020/02/26/csapp23-concurrent-programming/3.png"><br>如图现在挂起的三个输入然后又三个listenfd 也就是事件来了我再去读</p><h3 id="3-2-1-Pros-and-Cons"><a href="#3-2-1-Pros-and-Cons" class="headerlink" title="3.2.1. Pros and Cons"></a>3.2.1. Pros and Cons</h3><ul><li>pros：<ul><li>一个逻辑流，一个地址空间，可以Debug</li><li>没有进程线程控制开销，高并发数必要（Node.js, nginx, Tornado）</li></ul></li><li>cons<ul><li>难code</li><li>没利用多核</li></ul></li></ul><h2 id="3-3-Thread-based"><a href="#3-3-Thread-based" class="headerlink" title="3.3. Thread-based"></a>3.3. Thread-based</h2><ul><li>内核自动调度</li><li>每个flow 同样的地址</li><li>混合了Progress-based Event-based</li></ul><p>和进程很像<br><img src="/2020/02/26/csapp23-concurrent-programming/4.png"><br><img src="/2020/02/26/csapp23-concurrent-programming/5.png"><br><img src="/2020/02/26/csapp23-concurrent-programming/6.png"><br><img src="/2020/02/26/csapp23-concurrent-programming/7.png"><br><img src="/2020/02/26/csapp23-concurrent-programming/8.png"></p><h3 id="3-3-1-differences-and-similarities-between-process-and-thread"><a href="#3-3-1-differences-and-similarities-between-process-and-thread" class="headerlink" title="3.3.1. differences and similarities between process and thread"></a>3.3.1. differences and similarities between process and thread</h3><ul><li>similarities <ul><li>都有自己的逻辑流</li><li>都是上下文交换</li></ul></li><li>differences<ul><li>thread 共享除了栈的数据 进程是不能共享全局数据</li><li>thread 的开销低 一半</li></ul></li></ul><h3 id="3-3-2-thread-mode"><a href="#3-3-2-thread-mode" class="headerlink" title="3.3.2. thread mode"></a>3.3.2. thread mode</h3><p>detached 不被其他thread打扰 内核回收<br>防止内存泄漏<br>注意分享给主thread的指针</p><h1 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4. Summary"></a>4. Summary</h1><ul><li>process <ul><li>很难共享数据但是也避免了不想要的共享</li><li>建立断开开销大</li></ul></li><li>event<ul><li>难编程</li><li>可调试</li><li>底层</li><li>没利用多核</li></ul></li><li>thread <ul><li>容易共享数据（太容易了）</li><li>开销比 进程小</li><li>很难debug （事件的发生不是可重复的）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-secondTen-easyPart</title>
      <link href="2020/02/25/leetcode-secondten-easypart/"/>
      <url>2020/02/25/leetcode-secondten-easypart/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-q35">1. Q35</a></li><li><a href="#2-q38">2. Q38</a></li><li><a href="#3-q53">3. Q53</a></li><li><a href="#4-q58">4. Q58</a></li><li><a href="#5-q66">5. Q66</a></li><li><a href="#6-q67">6. Q67</a></li><li><a href="#7-q69">7. Q69</a></li><li><a href="#8-q70">8. Q70</a></li><li><a href="#9-q83">9. Q83</a></li><li><a href="#10-q88">10. Q88</a></li></ul><!-- /TOC --><h1 id="1-Q35"><a href="#1-Q35" class="headerlink" title="1. Q35"></a>1. Q35</h1><pre class="line-numbers language-none"><code class="language-none">给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。你可以假设数组中无重复元素。示例 1:输入: [1,3,5,6], 5输出: 2示例&nbsp;2:输入: [1,3,5,6], 2输出: 1示例 3:输入: [1,3,5,6], 7输出: 4示例 4:输入: [1,3,5,6], 0输出: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 直接遍历</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li><li><p><strong>折半查找：</strong> 注意细节 (left+right)&lt;&lt;&lt;1 无符号右移 不怕溢出。 </p><ul><li><p>第一种方法折半 left&lt;=right 注意防止死循环 可以利用right=mid-1 left=mid+1 return left</p></li><li><p>第二种方法折半 left&lt;right 分成两个区间[0,mid][mid+1,right] 然后提前判断最前面和最后面的位置防止死循环和错解。</p><p>时间复杂度：O(log2 N) 空间复杂度:O(1)</p></li></ul></li></ul><h1 id="2-Q38"><a href="#2-Q38" class="headerlink" title="2. Q38"></a>2. Q38</h1><pre class="line-numbers language-none"><code class="language-none">「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：1.     12.     113.     214.     12115.     1112211&nbsp;被读作&nbsp;&nbsp;"one 1"&nbsp;&nbsp;("一个一") , 即&nbsp;11。11 被读作&nbsp;"two 1s"&nbsp;("两个一"）, 即&nbsp;21。21 被读作&nbsp;"one 2", &nbsp;"one 1"&nbsp;（"一个二"&nbsp;,&nbsp;&nbsp;"一个一")&nbsp;, 即&nbsp;1211。给定一个正整数 n（1 ≤&nbsp;n&nbsp;≤ 30），输出外观数列的第 n 项。注意：整数序列中的每一项将表示为一个字符串。示例&nbsp;1:输入: 1输出: "1"解释：这是一个基本样例。示例 2:输入: 4输出: "1211"解释：当 n = 3 时，序列是 "21"，其中我们有 "2" 和 "1" 两组，"2" 可以读作 "12"，也就是出现频次 = 1 而 值 = 2；类似 "1" 可以读作 "11"。所以答案是 "12" 和 "11" 组合在一起，也就是 "1211"。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 迭代n轮 利用stringbuild.append 添加频率和值</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="3-Q53"><a href="#3-Q53" class="headerlink" title="3. Q53"></a>3. Q53</h1><pre class="line-numbers language-none"><code class="language-none">给定一个整数数组 nums&nbsp;，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。示例:输入: [-2,1,-3,4,-1,2,1,-5,4],输出: 6解释:&nbsp;连续子数组&nbsp;[4,-1,2,1] 的和最大，为&nbsp;6。进阶:如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 记录当前时刻的最大值 以及 所有时刻的最大值注意用math.max</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li><li><p><strong>分治法：</strong> 每一小块的最大值 </p><p>  时间复杂度：O(N*log2 N) 空间复杂度:O(N)</p></li></ul><h1 id="4-Q58"><a href="#4-Q58" class="headerlink" title="4. Q58"></a>4. Q58</h1><pre class="line-numbers language-none"><code class="language-none">给定一个仅包含大小写字母和空格&nbsp;' '&nbsp;的字符串 s，返回其最后一个单词的长度。如果字符串从左向右滚动显示，那么最后一个单词就是最后出现的单词。如果不存在最后一个单词，请返回 0&nbsp;。说明：一个单词是指仅由字母组成、不包含任何空格的 最大子字符串。&nbsp;示例:输入: "Hello World"输出: 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>反向遍历法(暴力法)：</strong> 遍历到’ ‘通过substring()位置取出子串 （末尾的空格不算</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="5-Q66"><a href="#5-Q66" class="headerlink" title="5. Q66"></a>5. Q66</h1><pre class="line-numbers language-none"><code class="language-none">给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。你可以假设除了整数 0 之外，这个整数不会以零开头。示例&nbsp;1:输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字 123。示例&nbsp;2:输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字 4321。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 根据十进制 从末位开始相加 %10 carry  加到最后在申请空间</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="6-Q67"><a href="#6-Q67" class="headerlink" title="6. Q67"></a>6. Q67</h1><pre class="line-numbers language-none"><code class="language-none">给定两个二进制字符串，返回他们的和（用二进制表示）。输入为非空字符串且只包含数字&nbsp;1&nbsp;和&nbsp;0。示例&nbsp;1:输入: a = "11", b = "1"输出: "100"示例&nbsp;2:输入: a = "1010", b = "1011"输出: "10101"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>函数法：</strong> 转换成int 然后加法 然后在转换回去（有溢出)<br>可以利用biginteger去掉溢出 但是效率很慢</p><p>  时间复杂度:O(n+m)) 空间复杂度:O(max(n,m))</p></li><li><p><strong>暴力法：</strong> 遍历常的一串 利用return 的方式选取长度大的在a 小的在b 然后遍历短的在遍历长的 思路清晰 需要注意可以利用stringbuild(性能最好) append reverse </p><p>  时间复杂度:O(max(n,m)) 空间复杂度:O(max(n,m))</p></li><li><p><strong>移位法：</strong> 在不允许加法的情况下 利用a|b+ carry(a&amp;b&lt;&lt;1)<br>反复得到</p><p>  时间复杂度:O(max(n,m)) 空间复杂度:O(max(n,m))</p></li></ul><h1 id="7-Q69"><a href="#7-Q69" class="headerlink" title="7. Q69"></a>7. Q69</h1><pre class="line-numbers language-none"><code class="language-none">实现&nbsp;int sqrt(int x)&nbsp;函数。计算并返回&nbsp;x&nbsp;的平方根，其中&nbsp;x 是非负整数。由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。示例 1:输入: 4输出: 2示例 2:输入: 8输出: 2说明: 8 的平方根是 2.82842..., &nbsp;    由于返回类型是整数，小数部分将被舍去。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>公式法：</strong> e^0.5lnx</p><p>  时间复杂度:O(1) 空间复杂度:O(1)</p></li><li><p><strong>牛顿法：</strong> 迭代n轮</p><p>  时间复杂度:O(log2n) 空间复杂度:O(1)</p></li></ul><h1 id="8-Q70"><a href="#8-Q70" class="headerlink" title="8. Q70"></a>8. Q70</h1><pre class="line-numbers language-none"><code class="language-none">假设你正在爬楼梯。需要 n&nbsp;阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？注意：给定 n 是一个正整数。示例 1：输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1.  1 阶 + 1 阶2.  2 阶示例 2：输入： 3输出： 3解释： 有三种方法可以爬到楼顶。1.  1 阶 + 1 阶 + 1 阶2.  1 阶 + 2 阶3.  2 阶 + 1 阶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>递归法：</strong> 爬一步爬两步 </p><p>  时间复杂度:O(2^n) 空间复杂度:O(N) （<strong>树的深度</strong>）</p></li><li><p><strong>动态规划DP：</strong> 当前等于前面两步的之和</p><p>  时间复杂度:O(N) 空间复杂度:O(N)</p></li><li><p><strong>数列法（规律）：</strong> 当前等于前面两步的之和</p><p>  时间复杂度:O(N) 空间复杂度:O(1)</p></li><li><p><strong>Binets 方法：</strong> 利用矩阵计算斐波那数列</p><p>  时间复杂度:O(logn) 空间复杂度:O(1)</p></li></ul><h1 id="9-Q83"><a href="#9-Q83" class="headerlink" title="9. Q83"></a>9. Q83</h1><pre class="line-numbers language-none"><code class="language-none">给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。示例&nbsp;1:输入: 1-&gt;1-&gt;2输出: 1-&gt;2示例&nbsp;2:输入: 1-&gt;1-&gt;2-&gt;3-&gt;3输出: 1-&gt;2-&gt;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>双指针：</strong> 记录当前的和已遍历</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul><h1 id="10-Q88"><a href="#10-Q88" class="headerlink" title="10. Q88"></a>10. Q88</h1><pre class="line-numbers language-none"><code class="language-none">给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。说明:初始化 nums1 和 nums2 的元素数量分别为 m 和 n。你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。示例:输入:nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6],       n = 3输出: [1,2,2,3,5,6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>双指针：</strong> 需要创建的新的空间（system.arraycopy 可以复制空间)</p><p>  时间复杂度:O(n) 空间复杂度:O(n)</p></li><li><p><strong>双指针（从后遍历）：</strong> 从后面遍历这样不需要新的空间</p><p>  时间复杂度:O(n) 空间复杂度:O(1)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> SecondTen </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP22-networking-programming-part1</title>
      <link href="2020/02/25/csapp22-networking-programming-part1/"/>
      <url>2020/02/25/csapp22-networking-programming-part1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-normal-tcp">1. Normal TCP</a><ul><li><a href="#11-key-part">1.1. Key part</a></li></ul></li><li><a href="#2-web-server">2. Web server</a><ul><li><a href="#21-http%E5%8D%8F%E8%AE%AE">2.1. http协议</a><ul><li><a href="#211-url">2.1.1. URL</a></li><li><a href="#212-http-requests">2.1.2. http requests</a><ul><li><a href="#2121-proxies">2.1.2.1. Proxies</a></li></ul></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-Normal-TCP"><a href="#1-Normal-TCP" class="headerlink" title="1. Normal TCP"></a>1. Normal TCP</h1><p><img src="/2020/02/25/csapp22-networking-programming-part1/1.png"></p><h2 id="1-1-Key-part"><a href="#1-1-Key-part" class="headerlink" title="1.1. Key part"></a>1.1. Key part</h2><p>client getaddrinfo （需要目标域名)<br>server getaddrinfo （不需要目标域名)</p><p>socket 返回整形（类似文件表述符，通信就是通过这个描述符来进行)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">,</span> <span class="token keyword">int</span> backlog<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的是从socket 转换的listenfd 在服务周期永远存在</p><p><strong>重点来了</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">int</span> listenfd<span class="token punctuation">,</span> SA <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说accept 会产生一个额外的clientfd 多线程就会有多个clientfd<br>如图<br><img src="/2020/02/25/csapp22-networking-programming-part1/2.png"></p><p>talnet 测试回响服务器（echo）</p><h1 id="2-Web-server"><a href="#2-Web-server" class="headerlink" title="2. Web server"></a>2. Web server</h1><h2 id="2-1-http协议"><a href="#2-1-http协议" class="headerlink" title="2.1. http协议"></a>2.1. http协议</h2><p><img src="/2020/02/25/csapp22-networking-programming-part1/3.png"></p><p>返回静态，或者动态的东西（需要执行程序)</p><h3 id="2-1-1-URL"><a href="#2-1-1-URL" class="headerlink" title="2.1.1. URL"></a>2.1.1. URL</h3><ul><li>Unique name for a file:URL (Universal Resource Locator)</li><li>client 用前缀prefix导入 例如：<a href="http://www.cmu.edu/">http://www.cmu.edu:80</a></li><li>server 用后缀决定静态动态内容 /index.html<br>如果不是特别的 就是/ 默认大多数是index.html</li></ul><h3 id="2-1-2-http-requests"><a href="#2-1-2-http-requests" class="headerlink" title="2.1.2. http requests"></a>2.1.2. http requests</h3><p>Request line: <method> <uri> <version><br>A URL is a type of URI(Uniform Resource Identifier)<br><img src="/2020/02/25/csapp22-networking-programming-part1/4.png"></version></uri></method></p><p>动态请求<br><img src="/2020/02/25/csapp22-networking-programming-part1/5.png"></p><h4 id="2-1-2-1-Proxies"><a href="#2-1-2-1-Proxies" class="headerlink" title="2.1.2.1. Proxies"></a>2.1.2.1. Proxies</h4><p><img src="/2020/02/25/csapp22-networking-programming-part1/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> networking programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP21-networking-programming-part0</title>
      <link href="2020/02/24/csapp21-networking-programming-part0/"/>
      <url>2020/02/24/csapp21-networking-programming-part0/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-cs%E6%9E%B6%E6%9E%84">1. CS架构</a><ul><li><a href="#11-ethernet">1.1. Ethernet</a></li><li><a href="#12-protocol">1.2. protocol</a></li><li><a href="#13-%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A7%92%E5%BA%A6%E7%9A%84%E7%BD%91%E7%BB%9C">1.3. 程序员角度的网络</a><ul><li><a href="#131-dnsdomain-naming-system">1.3.1. DNS(Domain Naming System)</a></li><li><a href="#132-%E9%80%9A%E8%BF%87%E7%AB%AF%E5%8F%A3%E8%BF%9E%E6%8E%A5%E4%B8%BA%E4%BA%86%E5%A4%9A%E7%94%A8%E6%88%B7-%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BF%E9%97%AE">1.3.2. 通过端口连接（为了多用户 多服务器访问)</a></li></ul></li></ul></li></ul><!-- /TOC --><h1 id="1-CS架构"><a href="#1-CS架构" class="headerlink" title="1. CS架构"></a>1. CS架构</h1><h2 id="1-1-Ethernet"><a href="#1-1-Ethernet" class="headerlink" title="1.1. Ethernet"></a>1.1. Ethernet</h2><ul><li>host链接上hub上，hub上的东西，每个host都看得到mac地址（48bit）</li><li>bridge 选择路线<br><img src="/2020/02/24/csapp21-networking-programming-part0/1.png"></li></ul><h2 id="1-2-protocol"><a href="#1-2-protocol" class="headerlink" title="1.2. protocol"></a>1.2. protocol</h2><p>怎么样让不同网络 不同地方兼容</p><ul><li><p>IP（Internet Protocol)协议 主机到主机 （不可靠 和基本的命名解析）<br><img src="/2020/02/24/csapp21-networking-programming-part0/2.png"></p></li><li><p>UDP (Unreliable Datagram Protocol)<br>使用IP 提供process to process 的数据包传输</p></li></ul><ul><li>TCP (Transmisson Control Protocol)<br>使用IP 提供可靠的process to process 数据流 基于连接</li></ul><h2 id="1-3-程序员角度的网络"><a href="#1-3-程序员角度的网络" class="headerlink" title="1.3. 程序员角度的网络"></a>1.3. 程序员角度的网络</h2><ul><li>主机是32bit IP address（IPv4) 128bit(IPV6)</li><li>IP address 映射成域名 （被DNS解析)<h3 id="1-3-1-DNS-Domain-Naming-System"><a href="#1-3-1-DNS-Domain-Naming-System" class="headerlink" title="1.3.1. DNS(Domain Naming System)"></a>1.3.1. DNS(Domain Naming System)</h3></li><li>本地域名localhost</li></ul><p>127.0.0.1</p><ul><li>真正的本地域名hostname</li><li>可以多对一也可以一对多 或者多对多 也可以是动态的（把你分配到哪由DNS服务器决定分配给你一个更近的地址）<br><img src="/2020/02/24/csapp21-networking-programming-part0/3.png"><br><img src="/2020/02/24/csapp21-networking-programming-part0/4.png"></li><li>由于存在分级的机制 有些有效的域名没有对应一个host<br><img src="/2020/02/24/csapp21-networking-programming-part0/5.png"></li></ul><h3 id="1-3-2-通过端口连接（为了多用户-多服务器访问"><a href="#1-3-2-通过端口连接（为了多用户-多服务器访问" class="headerlink" title="1.3.2. 通过端口连接（为了多用户 多服务器访问)"></a>1.3.2. 通过端口连接（为了多用户 多服务器访问)</h3><ul><li>公认提供特殊服务的端口<br><img src="/2020/02/24/csapp21-networking-programming-part0/6.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> networking programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP20-shortage-allocation-Advanced</title>
      <link href="2020/02/23/csapp20-shortage-allocation-advanced/"/>
      <url>2020/02/23/csapp20-shortage-allocation-advanced/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1free-block-strategy">1.free block strategy</a><ul><li><a href="#11-%E6%98%BE%E7%A4%BA%E8%A1%A8explicit-free-list">1.1 显示表（explicit free list)</a><ul><li><a href="#111-%E6%98%BE%E7%A4%BA%E8%A1%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%8F%92%E5%85%A5%E8%A7%84%E5%88%99%E5%9C%A8free-list-%E9%87%8C%E9%9D%A2%E5%8A%A0%E6%96%B0%E5%9D%97">1.1.1 显示表的两种插入规则（在free list 里面加新块）</a></li></ul></li><li><a href="#12-%E7%8B%AC%E7%AB%8B%E5%88%86%E6%95%A3%E8%A1%A8%E6%A0%B9%E6%8D%AE%E5%A4%A7%E5%B0%8F">1.2 独立分散表（根据大小）</a></li></ul></li><li><a href="#2-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5">2 垃圾回收策略</a></li></ul><!-- /TOC --><h1 id="1-free-block-strategy"><a href="#1-free-block-strategy" class="headerlink" title="1.free block strategy"></a>1.free block strategy</h1><p>除了前一天的隐式表(implicit free list)：最原始的方法需要大量搜索时间(吞吐量)，以及内存利用率也不高(字节对齐)<br>衍生出更现代的方法</p><h2 id="1-1-显示表（explicit-free-list"><a href="#1-1-显示表（explicit-free-list" class="headerlink" title="1.1 显示表（explicit free list)"></a>1.1 显示表（explicit free list)</h2><p>已分配的和隐式表一样 非分配用双向链表链接(不一定地址连续) 空闲的表<br><img src="/2020/02/23/csapp20-shortage-allocation-advanced/1.png"></p><h3 id="1-1-1-显示表的两种插入规则（在free-list-里面加新块）"><a href="#1-1-1-显示表的两种插入规则（在free-list-里面加新块）" class="headerlink" title="1.1.1 显示表的两种插入规则（在free list 里面加新块）"></a>1.1.1 显示表的两种插入规则（在free list 里面加新块）</h3><ul><li>LIFO （last-in-first-out）<ul><li>把新块加入到free list 首部<br><img src="/2020/02/23/csapp20-shortage-allocation-advanced/2.png"></li><li>优点: 简单的常数时间</li><li>缺点：研究表示内部碎片比地址顺序多</li></ul></li><li>地址顺序<ul><li>把地址插入到两个地址（大小）之中</li><li>优点：研究表明内部碎片少一点</li><li>缺点：需要搜索</li></ul></li></ul><p><strong>summary</strong> 显示表的搜索时间从隐式表的所有block到现在只是free的block，多了点内部碎片（两个指针)</p><h2 id="1-2-独立分散表（根据大小）"><a href="#1-2-独立分散表（根据大小）" class="headerlink" title="1.2 独立分散表（根据大小）"></a>1.2 独立分散表（根据大小）</h2><p>根据size分配到地方 地方不够就找更大的size<br><img src="/2020/02/23/csapp20-shortage-allocation-advanced/3.png"></p><p>优点：搜索时间更快 （吞吐量） 内存利用率高（内部碎片少 因为对应大小</p><h1 id="2-垃圾回收策略"><a href="#2-垃圾回收策略" class="headerlink" title="2 垃圾回收策略"></a>2 垃圾回收策略</h1><p>在动态语言差不多相同 （python java等）C++、C也有了 但是由于指针（会把大整数当指针)存在导致很多垃圾回收不了<br><strong>可以确定回收的垃圾，没有被指向或者间接指向</strong></p><p>最基础的 标记清理法（又可以利用字节对齐的3-4位bit）</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP19-shortage-allocation-Basic</title>
      <link href="2020/02/22/csapp19-shortage-allocation-basic/"/>
      <url>2020/02/22/csapp19-shortage-allocation-basic/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E5%A0%86">1. 动态分配内存（堆）</a><ul><li><a href="#11-%E5%9B%9E%E6%94%B6%E6%96%B9%E5%BC%8F">1.1 回收方式</a></li><li><a href="#12-%E8%A1%A1%E9%87%8F%E6%A0%87%E5%87%86">1.2 衡量标准</a></li></ul></li><li><a href="#2-%E5%88%86%E9%85%8D%E4%B8%AD%E7%9A%84%E7%BB%86%E8%8A%82">2. 分配中的细节</a><ul><li><a href="#21-%E6%80%8E%E4%B9%88free%E5%A4%9A%E5%B0%91%E5%86%85%E5%AD%98%E5%8F%AA%E9%9D%A0%E6%8C%87%E9%92%88">2.1 怎么free多少内存只靠指针</a></li><li><a href="#22-%E6%80%8E%E4%B9%88%E8%B7%9F%E8%B8%AA%E8%BF%99%E4%BA%9B%E6%B2%A1%E5%88%86%E9%85%8D%E7%9A%84%E5%86%85%E5%AD%98">2.2 怎么跟踪这些没分配的内存</a></li><li><a href="#23-%E6%80%8E%E4%B9%88%E5%BA%94%E5%AF%B9%E6%A0%BC%E5%A4%96%E7%9A%84%E7%A9%BA%E9%97%B4%E5%AD%97%E8%8A%82%E5%AF%B9%E9%BD%90%E9%80%A0%E6%88%90%E7%9A%84%E6%B5%AA%E8%B4%B9">2.3 怎么应对格外的空间（字节对齐造成的浪费）</a></li><li><a href="#24-%E6%80%8E%E4%B9%88%E6%89%BE%E7%A9%BA%E5%9D%97%E5%8E%BB%E5%88%86%E9%85%8D">2.4 怎么找空块去分配</a></li><li><a href="#25-%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E9%87%8A%E6%94%BE%E5%B7%B2%E7%BB%8F%E5%88%86%E9%85%8D%E7%9A%84%E5%9D%97">2.5 如何合理释放已经分配的块</a></li></ul></li></ul><!-- /TOC --><h1 id="1-动态分配内存（堆）"><a href="#1-动态分配内存（堆）" class="headerlink" title="1. 动态分配内存（堆）"></a>1. 动态分配内存（堆）</h1><h2 id="1-1-回收方式"><a href="#1-1-回收方式" class="headerlink" title="1.1 回收方式"></a>1.1 回收方式</h2><ul><li>c 显示分配 显示回收 </li><li>java等 显示分配 隐式回收</li></ul><h2 id="1-2-衡量标准"><a href="#1-2-衡量标准" class="headerlink" title="1.2 衡量标准"></a>1.2 衡量标准</h2><ul><li>吞吐量：每秒能调用多少次</li><li>内存利用率：就是分配中使用的有效内存<br>  影响因素<ul><li><p>内部碎片：字节对齐 需要标记等</p></li><li><p>外部碎片： 如下图<br><img src="/CSAPP19-shortage-allocation-Basic/1.png"></p><h1 id="2-分配中的细节"><a href="#2-分配中的细节" class="headerlink" title="2. 分配中的细节"></a>2. 分配中的细节</h1></li></ul></li></ul><h2 id="2-1-怎么free多少内存只靠指针"><a href="#2-1-怎么free多少内存只靠指针" class="headerlink" title="2.1 怎么free多少内存只靠指针"></a>2.1 怎么free多少内存只靠指针</h2><p>通过堆的header标识</p><h2 id="2-2-怎么跟踪这些没分配的内存"><a href="#2-2-怎么跟踪这些没分配的内存" class="headerlink" title="2.2 怎么跟踪这些没分配的内存"></a>2.2 怎么跟踪这些没分配的内存</h2><p>4种方法<br><img src="/CSAPP19-shortage-allocation-Basic/2.png"></p><p><strong><em>以下以第一种方法讲解后续问题</em></strong></p><h2 id="2-3-怎么应对格外的空间（字节对齐造成的浪费）"><a href="#2-3-怎么应对格外的空间（字节对齐造成的浪费）" class="headerlink" title="2.3 怎么应对格外的空间（字节对齐造成的浪费）"></a>2.3 怎么应对格外的空间（字节对齐造成的浪费）</h2><p>如下图<br><img src="/CSAPP19-shortage-allocation-Basic/3.png"><br><strong><em>无可避免，但是可以节省</em></strong></p><p>因为size的大小总是8的倍数或者16的 所以要存一些东西的时候回出现空的</p><p>也因为size的大小总是8的倍数或者16的 所以不需要一个额外的word来存状态 只需存在size的 最后3位bit里面的一位 因为他们一直是0</p><h2 id="2-4-怎么找空块去分配"><a href="#2-4-怎么找空块去分配" class="headerlink" title="2.4 怎么找空块去分配"></a>2.4 怎么找空块去分配</h2><ul><li>first fit：从头开始找（线性时间 terrible)</li><li>Next fit: 从上次找结束的地方开始够放置的就行 （也并不好）</li><li>best fit：找到最好的块放置</li><li>good fit：first fit + best fit 再开始的地方找一些最合适的块存放</li></ul><h2 id="2-5-如何合理释放已经分配的块"><a href="#2-5-如何合理释放已经分配的块" class="headerlink" title="2.5 如何合理释放已经分配的块"></a>2.5 如何合理释放已经分配的块</h2><ul><li><p>直接释放 （置位释放）<br><img src="/CSAPP19-shortage-allocation-Basic/4.png"><br>waste too much  内存会逐渐崩溃</p></li><li><p>连接的下一个释放<br><img src="/CSAPP19-shortage-allocation-Basic/5.png"><br>但是处理不了上面一块</p></li><li><p>通过添加foot 连接的上下释放<br><img src="/CSAPP19-shortage-allocation-Basic/6.png"><br>但是这样有点太浪费了，因为对于分配过的内存是不需要合并的。<br>可以通过利用size那最后3位都是0，拿出一位来标记上面是否是已分配的块，这样不是的话它肯定有foot， 一切一样是的话就不做操作。（tricks)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP18-virtual-memory(real system)</title>
      <link href="2020/02/21/csapp18-virtual-memory-real-system/"/>
      <url>2020/02/21/csapp18-virtual-memory-real-system/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-symple-system-memory-address-translastion">1 symple system memory address translastion</a></li><li><a href="#2-i7-linux-memory-system">2 i7 linux memory system</a></li><li><a href="#3-memory-mapping">3 memory mapping</a></li></ul><!-- /TOC --><h1 id="1-symple-system-memory-address-translastion"><a href="#1-symple-system-memory-address-translastion" class="headerlink" title="1 symple system memory address translastion"></a>1 symple system memory address translastion</h1><p><img src="/CSAPP18-virtual-memory-real-system/1.png"><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>hit 直接得到PPN 然后VPO和PPO是完全相等的</li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><p><img src="/CSAPP18-virtual-memory-real-system/1.png"><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>没有hit 得去PTE里面找了 发现在里面 没有page falut </li><li>得到了PPN </li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><h1 id="2-i7-linux-memory-system"><a href="#2-i7-linux-memory-system" class="headerlink" title="2 i7 linux memory system"></a>2 i7 linux memory system</h1><p><img src="/CSAPP18-virtual-memory-real-system/3.png"><br>Key  Point</p><ul><li>L1:4 cycle L2:10 cycle L3: 40-50 cyclce ps:L3是四核共用</li><li>有d-cache 和i-cache d-TLB 和 i-TLB</li><li>为什么不把L2 L1 合并原因有: d i占比不一定一样 还有就是缓存的限制大小<br>具体流程<br><img src="/CSAPP18-virtual-memory-real-system/4.png"></li></ul><p>技巧可以VPO=PPO=CI+CO先找到对应的位置在等tag（translation）匹配<br><img src="/CSAPP18-virtual-memory-real-system/6.png"></p><p>linux 把VM看做一个链表类似<br><img src="/CSAPP18-virtual-memory-real-system/8.png"></p><h1 id="3-memory-mapping"><a href="#3-memory-mapping" class="headerlink" title="3 memory mapping"></a>3 memory mapping</h1><p>两种分享方式</p><ol><li><p>共享地址<br><img src="/CSAPP18-virtual-memory-real-system/9.png"></p></li><li><p>私密的共享（such as fork and execve)<br><img src="/CSAPP18-virtual-memory-real-system/11.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual-memory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP17-virtual-memory-concept</title>
      <link href="2020/02/20/csapp17-virtual-memory-concept/"/>
      <url>2020/02/20/csapp17-virtual-memory-concept/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-what-is-virtual-memory">1. What is virtual memory</a></li><li><a href="#2why-vm">2.Why VM</a><ul><li><a href="#21-for-cache">2.1 for cache</a><ul><li><a href="#211-overview">2.1.1 overview</a></li><li><a href="#212-pte">2.1.2 PTE</a></li></ul></li><li><a href="#22-for-memory-management">2.2 for memory management</a></li><li><a href="#23-for-memory-protection">2.3 for memory protection</a></li></ul></li><li><a href="#3-detail-va-virtual-address">3 detail VA virtual address</a></li><li><a href="#4-summary">4 Summary</a></li></ul><!-- /TOC --><h1 id="1-What-is-virtual-memory"><a href="#1-What-is-virtual-memory" class="headerlink" title="1. What is virtual memory"></a>1. What is virtual memory</h1><p>cpu访问的都是虚拟内存通过MMU</p><h1 id="2-Why-VM"><a href="#2-Why-VM" class="headerlink" title="2.Why VM"></a>2.Why VM</h1><h2 id="2-1-for-cache"><a href="#2-1-for-cache" class="headerlink" title="2.1 for cache"></a>2.1 for cache</h2><h3 id="2-1-1-overview"><a href="#2-1-1-overview" class="headerlink" title="2.1.1 overview"></a>2.1.1 overview</h3><p>如下图<br><img src="https://i.loli.net/2020/02/05/yc96l5gPtokXm7O.png" alt="image.png"><br><strong>注意</strong> ：</p><ul><li>virtual pages代表着磁盘上的地址 </li><li>有些被缓存了 </li><li>有些没有还在磁盘上 </li><li>有些未分配代表连磁盘上都没</li></ul><p>DRAM slower than SRAM 10x</p><p>Disk slower 10000x than DRAM</p><p>so</p><ul><li>page sizes 4KB to 4MB</li><li>全相缓存 （尽管要很久搜索）</li></ul><h3 id="2-1-2-PTE"><a href="#2-1-2-PTE" class="headerlink" title="2.1.2 PTE"></a>2.1.2 PTE</h3><p>使用Page table entries 去map VP 到 PP<br><img src="https://i.loli.net/2020/02/05/qPa5F8gHERhOb61.png" alt="image.png"></p><p>如果CPU给的VP没有page hit 会有page falut 然后和缓存一样替代进去</p><h2 id="2-2-for-memory-management"><a href="#2-2-for-memory-management" class="headerlink" title="2.2 for memory management"></a>2.2 for memory management</h2><p><strong>关键点</strong> 每个进程都有独立的虚拟地址从0开始 似乎都有独立的空间 共享库也得益于此 每个进程似乎<br>单独拥有一个共享库函数代码<br><img src="https://i.loli.net/2020/02/05/1E94grucImyD2YR.png" alt="image.png"></p><h2 id="2-3-for-memory-protection"><a href="#2-3-for-memory-protection" class="headerlink" title="2.3 for memory protection"></a>2.3 for memory protection</h2><p>在PTE上对每个PP 有4个bit位<br>intel 虚拟内存是48位的 剩下的地址有些只能内核去用 高位<br><img src="https://i.loli.net/2020/02/05/IQbFqrRsKTo8mNV.png" alt="image.png"></p><h1 id="3-detail-VA-virtual-address"><a href="#3-detail-VA-virtual-address" class="headerlink" title="3 detail VA virtual address"></a>3 detail VA virtual address</h1><p><img src="https://i.loli.net/2020/02/05/GnjrcmY6t2JWH9L.png" alt="image.png"><br><img src="https://i.loli.net/2020/02/06/qcUxJmFO3vaWLdb.png" alt="2.png"><br><img src="https://i.loli.net/2020/02/06/7f5OK1IrH9FkqTd.png" alt="3.png"></p><h1 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4 Summary"></a>4 Summary</h1><ul><li>程序角度角度 VM<ul><li>每个进程有独立空间 不会被其他进程打乱</li></ul></li><li>系统角度 VM<ul><li>使得内存 更好缓存 （局部性是关键）</li><li>简化了内存管理 </li><li>内存保护</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual-memory </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP16-System_level-I/O</title>
      <link href="2020/02/19/csapp16-system-level-i-o/"/>
      <url>2020/02/19/csapp16-system-level-i-o/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>一个文件就是一串字节 所有的I/O设备都被当做文件（linux）</p><p><img src="/2020/02/19/csapp16-system-level-i-o/1.png"></p><p>unix IO open close read write seek(当前读的位置）</p><h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><ul><li><p>（1）平常的文件  应用程序会区分文本文件（ASCII 或者Unicode为了非英文的编码的文件）结束读一行是以‘\n’  （0xa)决定的。（EOL end of line) linx mac 是’\n’ windows 和internet protocol 是’/r /n’ (0xd 0xa)回车换行和二进制文件（以某种编码存放的 如图片 ）</p></li><li><p>（2） 目录 </p></li><li><p>（3）socket</p></li></ul><h1 id="file-operate"><a href="#file-operate" class="headerlink" title="file operate"></a>file operate</h1><p>对文件的操作</p><h2 id="open-会返回文件描述符-int-型-每个进程linux-shell-都会打开3个文件描述符链接终端"><a href="#open-会返回文件描述符-int-型-每个进程linux-shell-都会打开3个文件描述符链接终端" class="headerlink" title="open 会返回文件描述符 int 型  每个进程linux shell 都会打开3个文件描述符链接终端"></a>open 会返回文件描述符 int 型  每个进程linux shell 都会打开3个文件描述符链接终端</h2><p><img src="/2020/02/19/csapp16-system-level-i-o/2.png"></p><h2 id="close-已经close-的会出错（尤其是并发的这种）"><a href="#close-已经close-的会出错（尤其是并发的这种）" class="headerlink" title="close 已经close 的会出错（尤其是并发的这种）"></a>close 已经close 的会出错（尤其是并发的这种）</h2><p><img src="/2020/02/19/csapp16-system-level-i-o/3.png"></p><p>nbytes小于0代表出错了  但是 很有可能小于sizeof(buf)并不是错误（short count）</p><p>wirte 一样 也有可能Short count</p><h3 id="Short-conut的出现"><a href="#Short-conut的出现" class="headerlink" title="Short conut的出现"></a>Short conut的出现</h3><ul><li><p>1.读到了EOF（end of file) </p></li><li><p>2.正在从终端读取一行</p></li><li><p>3.读写 socket</p></li></ul><p><font color="red" font="" size="4">Short conut永不出现在读写磁盘文件</font></p><p>永远允许short count</p><h1 id="Rio-package-对robust-IO的封装使得-不出现short-count-在socket中特别有用）"><a href="#Rio-package-对robust-IO的封装使得-不出现short-count-在socket中特别有用）" class="headerlink" title="Rio package (对robust IO的封装使得 不出现short count  在socket中特别有用）"></a>Rio package (对robust IO的封装使得 不出现short count  在socket中特别有用）</h1><p>没带cache的rio read write  就是反复读取直到 读到目标数目 或者EOF</p><p>带cache的rio read write (就是  已经读取从文件中 但是还未被读在缓存里</p><p><img src="/2020/02/19/csapp16-system-level-i-o/4.png"></p><h1 id="metedata"><a href="#metedata" class="headerlink" title="metedata"></a>metedata</h1><p>每个文件在内核有个元数据<br><img src="/2020/02/19/csapp16-system-level-i-o/5.png"></p><h1 id="kernel-response-to-kernel"><a href="#kernel-response-to-kernel" class="headerlink" title="kernel response to kernel"></a>kernel response to kernel</h1><p><img src="/2020/02/19/csapp16-system-level-i-o/6.png">    </p><p>两个文件描述符指向相同磁盘<br><img src="/2020/02/19/csapp16-system-level-i-o/7.png"></p><p>fork 之后 子进程和父进程共享 文件描述符 但是refcnt+1<br><img src="/2020/02/19/csapp16-system-level-i-o/8.png"></p><h1 id="Redirection"><a href="#Redirection" class="headerlink" title="Redirection"></a>Redirection</h1><p><img src="/2020/02/19/csapp16-system-level-i-o/9.png"></p><p><img src="/2020/02/19/csapp16-system-level-i-o/10.png"></p><h1 id="Standard-IO"><a href="#Standard-IO" class="headerlink" title="Standard IO"></a>Standard IO</h1><p><img src="/2020/02/19/csapp16-system-level-i-o/11.png"></p><p><img src="/2020/02/19/csapp16-system-level-i-o/12.png"></p><h1 id="Sum-up"><a href="#Sum-up" class="headerlink" title="Sum up"></a>Sum up</h1><p><img src="/2020/02/19/csapp16-system-level-i-o/13.png"></p><ul><li>unix IO 更底层（系统调用 信号处理）  </li><li>standard IO  适用绝大数场景 除了网络 </li><li>rio  used for Socket</li></ul><p>二进制文件不应该 读行的这种  需要特殊字符</p><p><img src="/2020/02/19/csapp16-system-level-i-o/14.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP15-ECF-signals</title>
      <link href="2020/02/18/csapp15-ecf-signals/"/>
      <url>2020/02/18/csapp15-ecf-signals/</url>
      
        <content type="html"><![CDATA[<h1 id="signals-是更高层的ECF-利用应用软件和内核软件"><a href="#signals-是更高层的ECF-利用应用软件和内核软件" class="headerlink" title="signals 是更高层的ECF 利用应用软件和内核软件"></a>signals 是更高层的ECF 利用应用软件和内核软件</h1><h1 id="linux-处理分层"><a href="#linux-处理分层" class="headerlink" title="linux 处理分层"></a>linux 处理分层</h1><p>初始化一些服务 然后<br><img src="/2020/02/18/csapp15-ecf-signals/1.png"></p><h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>shell其实是一个应用程序<br><img src="/2020/02/18/csapp15-ecf-signals/2.png"></p><h1 id="signals"><a href="#signals" class="headerlink" title="signals"></a>signals</h1><p><img src="/2020/02/18/csapp15-ecf-signals/3.png"></p><p><img src="/2020/02/18/csapp15-ecf-signals/4.png"></p><p><img src="/2020/02/18/csapp15-ecf-signals/5.png"></p><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>1.信号不会排队 一个进程正挂起一种类型的信号（信号发送 但未接受）</li><li>2.相同的信号给这个进程会被取消  </li><li>3.挂起的信号只能被接受一次</li></ul><p>因为本质上是置位一些bit位</p><p>杀死进程 和进程组  利用SIGKILL信号<br><img src="/2020/02/18/csapp15-ecf-signals/6.png"></p><p>ctrl+c （ctrl+z ） 发出SIGINT 停止信号 （ SIGTSTP 挂起信号）</p><h1 id="处理信号过程"><a href="#处理信号过程" class="headerlink" title="处理信号过程"></a>处理信号过程</h1><p><img src="/2020/02/18/csapp15-ecf-signals/7.png"></p><p>A发生异常  交给内核处理 在内核处理玩然后上下文交换到B时会检查所有挂起的信号 （pending signals)</p><h1 id="信号处理函数"><a href="#信号处理函数" class="headerlink" title="信号处理函数"></a>信号处理函数</h1><p>是一个单独的类似过程一样的 逻辑流 也会并发</p><p><img src="/2020/02/18/csapp15-ecf-signals/8.png"></p><p><img src="/2020/02/18/csapp15-ecf-signals/9.png"></p><p>处理能被其他信号函数打断（除了相同的信号）</p><p><img src="/2020/02/18/csapp15-ecf-signals/10.png"></p><h1 id="Block-singals-method"><a href="#Block-singals-method" class="headerlink" title="Block singals method"></a>Block singals method</h1><p>1.信号处理时会屏蔽本身的interrupt</p><p>2.显式屏蔽sigprocmask</p><p><img src="/2020/02/18/csapp15-ecf-signals/11.png"></p><h1 id="safe-signals-handlers"><a href="#safe-signals-handlers" class="headerlink" title="safe signals handlers"></a>safe signals handlers</h1><p>它和主程序并发且享有相同的全局变量（这会很脆弱）<br><img src="/2020/02/18/csapp15-ecf-signals/12.png"></p><p>第一 就是尽量简单 </p><p>第二 只调用异步信号安全的函数 （就是变量都在栈上 或者不怕被打断）</p><p>第三 保存errno 避免被重写</p><p>第四 为了保护全局变量 先屏蔽其他所有信号</p><p>第五 直接写和读 不要用++这种</p><h1 id="信号处理函数-1"><a href="#信号处理函数-1" class="headerlink" title="信号处理函数"></a>信号处理函数</h1><p>不能使用信号去计算事件</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-firstTen-easyPart</title>
      <link href="2020/02/18/leetcode-firstten-easypart/"/>
      <url>2020/02/18/leetcode-firstten-easypart/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-q1">1. Q1：</a></li><li><a href="#2-q7">2. Q7：</a></li><li><a href="#3-q9">3. Q9：</a></li><li><a href="#4-q13">4. Q13：</a></li><li><a href="#5-q14">5. Q14：</a></li><li><a href="#6-q20">6. Q20：</a></li><li><a href="#7-q21">7. Q21：</a></li><li><a href="#8-q26">8. Q26：</a></li><li><a href="#9-q27">9. Q27：</a></li><li><a href="#10-q28kmp">10. Q28(kmp)：</a></li></ul><!-- /TOC --><h1 id="1-Q1："><a href="#1-Q1：" class="headerlink" title="1. Q1："></a>1. Q1：</h1><pre class="line-numbers language-none"><code class="language-none">给定一个整数数组 nums&nbsp;和一个目标值 target，请你在该数组中找出和为目标值的那&nbsp;两个&nbsp;整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>暴力法：</strong> 拿到一个数就把数组遍历一遍 </p><p>  时间复杂度:O(n^2) 空间复杂度:O(1)</p></li><li><p><strong>Hashmap：</strong> 存储key（ 能被查询的）value  index (利用两个互相匹配的idea 可以一次循环 不需要先存在查)</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li></ul><h1 id="2-Q7："><a href="#2-Q7：" class="headerlink" title="2. Q7："></a>2. Q7：</h1><pre class="line-numbers language-none"><code class="language-none">&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。示例&nbsp;1:输入: 123输出: 321&nbsp;示例 2:输入: -123输出: -321示例 3:输入: 120输出: 21**注意:**假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为&nbsp;[−2^31,&nbsp; 2^31&nbsp;− 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas: </p><ul><li><p><strong>String法：</strong> 利用reverse</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li><li><p><strong>取余法：</strong> 取余得个位 除10在取余得十位 需要注意判断 最大值、最小值条件<br>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="3-Q9："><a href="#3-Q9：" class="headerlink" title="3. Q9："></a>3. Q9：</h1><pre class="line-numbers language-none"><code class="language-none">&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。示例 1:输入: 121输出: true示例&nbsp;2:输入: -121输出: false解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。示例 3:输入: 10输出: false解释: 从右向左读, 为 01 。因此它不是一个回文数。**进阶:**你能不将整数转为字符串来解决这个问题吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>String法：</strong> 利用reverse</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li><li><p><strong>取余法：</strong> 取余得个位 除10在取余得十位 (只需一半回文即可，遍历到反转的比正常的大)</p><p>  时间复杂度：O(n/2) 空间复杂度:O(1)</p></li></ul><h1 id="4-Q13："><a href="#4-Q13：" class="headerlink" title="4. Q13："></a>4. Q13：</h1><pre class="line-numbers language-none"><code class="language-none">罗马数字包含以下七种字符:&nbsp;I，&nbsp;V，&nbsp;X，&nbsp;L，C，D&nbsp;和&nbsp;M。字符          数值I             1V             5X             10L             50C             100D             500M             1000例如， 罗马数字 2 写做&nbsp;II&nbsp;，即为两个并列的 1。12 写做&nbsp;XII&nbsp;，即为&nbsp;X&nbsp;+&nbsp;II&nbsp;。 27 写做&nbsp;&nbsp;XXVII, 即为&nbsp;XX&nbsp;+&nbsp;V&nbsp;+&nbsp;II&nbsp;。通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做&nbsp;IIII，而是&nbsp;IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为&nbsp;IX。这个特殊的规则只适用于以下六种情况：I&nbsp;可以放在&nbsp;V&nbsp;(5) 和&nbsp;X&nbsp;(10) 的左边，来表示 4 和 9。X&nbsp;可以放在&nbsp;L&nbsp;(50) 和&nbsp;C&nbsp;(100) 的左边，来表示 40 和&nbsp;90。&nbsp;C&nbsp;可以放在&nbsp;D&nbsp;(500) 和&nbsp;M&nbsp;(1000) 的左边，来表示&nbsp;400 和&nbsp;900。给定一个罗马数字，将其转换成整数。输入确保在 1&nbsp;到 3999 的范围内。示例&nbsp;1:输入:&nbsp;"III"输出: 3示例&nbsp;2:输入:&nbsp;"IV"输出: 4示例&nbsp;3:输入:&nbsp;"IX"输出: 9示例&nbsp;4:输入:&nbsp;"LVIII"输出: 58解释: L = 50, V= 5, III = 3.示例&nbsp;5:输入:&nbsp;"MCMXCIV"输出: 1994解释: M = 1000, CM = 900, XC = 90, IV = 4.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>暴力法</strong>： 找到’I’ ‘X’ ‘C’ 然后匹配左边计算 （程序比较乱)</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li><li><p><strong>list表 加value数组</strong> ： 通过index判断左右 通过value计算</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li><li><p><strong>双指针：switch得到值 pre_num和当前比较 （罗马字的特点只要之前是小的就一定减) 根据大小加减</strong></p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="5-Q14："><a href="#5-Q14：" class="headerlink" title="5. Q14："></a>5. Q14：</h1><pre class="line-numbers language-none"><code class="language-none">编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串&nbsp;""。示例&nbsp;1:输入: ["flower","flow","flight"]输出: "fl"示例&nbsp;2:输入: ["dog","racecar","car"]输出: ""解释: 输入不存在公共前缀。说明:所有输入只包含小写字母&nbsp;a-z&nbsp;。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>暴力法</strong>： 找到最小串。从他开始遍历 </p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li><li><p><strong>迭代法</strong> ： 找两个前缀 继续迭代</p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li><li><p><strong>暴力法2</strong>：从第一个串的第一个字符开始 直到每个子串没了 或者不匹配利用indexof查找字符串的最后位置（short and beauty)</p><p>  时间复杂度：O(nm) 空间复杂度:O(m)</p></li></ul><h1 id="6-Q20："><a href="#6-Q20：" class="headerlink" title="6. Q20："></a>6. Q20：</h1><pre class="line-numbers language-none"><code class="language-none">给定一个只包括 '('，')'，'{'，'}'，'['，']'&nbsp;的字符串，判断字符串是否有效。有效字符串需满足：左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。注意空字符串可被认为是有效字符串。示例 1:输入: "()"输出: true示例&nbsp;2:输入: "()[]{}"输出: true示例&nbsp;3:输入: "(]"输出: false示例&nbsp;4:输入: "([)]"输出: false示例&nbsp;5:输入: "{[]}"输出: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>栈</strong>： 注意边界问题(可以把匹配的存进Hashmap)</p><p>  时间复杂度：O(n) 空间复杂度:O(n)</p></li></ul><h1 id="7-Q21："><a href="#7-Q21：" class="headerlink" title="7. Q21："></a>7. Q21：</h1><pre class="line-numbers language-none"><code class="language-none">将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&nbsp;示例：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：<br><strong>注意 链表的空间已经有了 尽量在没申请其他空间的情况下链接他们，而不是复制</strong></p><p><strong>递归法</strong>：递归合并 遍历到空 </p><pre><code>时间复杂度：O(2n) 空间复杂度:O(n)</code></pre><p><strong>迭代法</strong>: 迭代（与上面一样的思路) (要注意保存链表头)</p><pre><code>时间复杂度：O(2n) 空间复杂度:O(n)</code></pre><h1 id="8-Q26："><a href="#8-Q26：" class="headerlink" title="8. Q26："></a>8. Q26：</h1><pre class="line-numbers language-none"><code class="language-none">给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。示例&nbsp;1:给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。示例&nbsp;2:给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>双指针</strong>：记录当前位置和遍历 位置</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="9-Q27："><a href="#9-Q27：" class="headerlink" title="9. Q27："></a>9. Q27：</h1><pre class="line-numbers language-none"><code class="language-none">给定一个数组 nums&nbsp;和一个值 val，你需要原地移除所有数值等于&nbsp;val&nbsp;的元素，返回移除后数组的新长度。不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。示例 1:给定 nums = [3,2,2,3], val = 3,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。示例&nbsp;2:给定 nums = [0,1,2,2,3,0,4,2], val = 2,函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>双指针</strong>：记录当前位置和遍历 位置</p><p>  时间复杂度：O(n) 空间复杂度:O(1)</p></li></ul><h1 id="10-Q28-kmp-："><a href="#10-Q28-kmp-：" class="headerlink" title="10. Q28(kmp)："></a>10. Q28(kmp)：</h1><pre class="line-numbers language-none"><code class="language-none">实现&nbsp;strStr()&nbsp;函数。给定一个&nbsp;haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回&nbsp; -1。示例 1:输入: haystack = "hello", needle = "ll"输出: 2示例 2:输入: haystack = "aaaaa", needle = "bba"输出: -1说明:当&nbsp;needle&nbsp;是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。对于本题而言，当&nbsp;needle&nbsp;是空字符串时我们应当返回 0 。这与C语言的&nbsp;strstr()&nbsp;以及 Java的&nbsp;indexOf()&nbsp;定义相符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>review ideas：</p><ul><li><p><strong>匹配第一个字符子串法</strong>：正常想法</p><p>  时间复杂度：O(nm) 空间复杂度:O(1)</p></li></ul><ul><li><p><strong>KMP(查找效率高，状态机)**：</strong>状态机来节省时间 当大型数据时候特别有效**</p><p>  时间复杂度：O(n) 空间复杂度:O(m)（二维数组时空复杂度O(m))</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
          <category> FirstTen </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP14-ECF-exception-and-processes</title>
      <link href="2020/02/17/csapp14-ecf-exception-and-processes/"/>
      <url>2020/02/17/csapp14-ecf-exception-and-processes/</url>
      
        <content type="html"><![CDATA[<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/1.png"></p><h1 id="exceptions"><a href="#exceptions" class="headerlink" title="exceptions"></a>exceptions</h1><p>异常就是系统状态改变了比如</p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/2.png"><br><img src="/2020/02/17/csapp14-ecf-exception-and-processes/3.png"></p><p>每一种异常对应一个句柄</p><ul><li><p>异步异常（Asynchronous Exceptions (Interrupts))  I/O 或者 timer</p></li><li><p>同步异常（Synchronous Exceptions）执行完指令发生的 </p><ul><li><p>（1）trap： systme call 故意的回来后继续执行</p></li><li><p>（2） Faults ：Examples:    page    faults    (recoverable),    protection    faults    (unrecoverable),    ﬂoating    point    exceptions  重新执行或者abort页错误就是指向的内存有的不在主存里面</p></li><li><p> (3) abort:    illegal    instruc;on,    parity    error,    machine    check      直接退出</p></li></ul></li></ul><h1 id="system-call"><a href="#system-call" class="headerlink" title="system call"></a>system call</h1><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/4.png"></p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/5.png"></p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/6.png"></p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/7.png"></p><h1 id="processes"><a href="#processes" class="headerlink" title="processes"></a>processes</h1><p>每个进程单独似乎上单独享有cpu 内存</p><p>实际上是cpu 去并发执行这些进程</p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/8.png"></p><p>虽然现代系统有多核 但是本质没有变 只不过 可以同时的多了</p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/9.png"></p><h2 id="并发-或者连续"><a href="#并发-或者连续" class="headerlink" title="并发 或者连续"></a>并发 或者连续</h2><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/10.png"></p><p>进程切换通过上下文 交换 （context switch）操作系统常驻的内存 叫做 内存</p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/11.png"></p><h1 id="processes-control"><a href="#processes-control" class="headerlink" title="processes control"></a>processes control</h1><p>使用syscall一定要检查返回值 可以用wrapper 来装饰 简化代码</p><p>就是在fork 变大写</p><p>程序员角度 进程的三种状态</p><ul><li>1.运行中 （running）：要不正在执行 要不就已经被安排了</li><li>2.暂停中（stopped）：没有被安排 等待安排 </li><li>3.停止（terminated） ：永远停止了</li></ul><p>进程停止通过：1.收到信号 2. 主函数返回 3。exit</p><p>exit 从不返回<br><img src="/2020/02/17/csapp14-ecf-exception-and-processes/12.png"></p><p>fork 创建进程  自进程和自己享受同样的内存和栈堆</p><p><font color="red" font="" size="4"><strong>调用一次返回两次  返回0代表是子进程 返回pid号代表父进程</strong></font></p><p>用进程图来看</p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/13.png"></p><h2 id="进程停止了-为何还是消耗系统资源"><a href="#进程停止了-为何还是消耗系统资源" class="headerlink" title="进程停止了 为何还是消耗系统资源"></a>进程停止了 为何还是消耗系统资源</h2><ul><li>第一种 子进程停止 但是父进程没有  杀死父进程时会回收<br><img src="/2020/02/17/csapp14-ecf-exception-and-processes/14.png"></li><li>第二种  子进程不停止 父进程停止 只能单独杀子进程</li></ul><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/15.png"></p><p>用wait 等待子进程 来回收 </p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/16.png"></p><p>execve 会重写 栈 推 数据 而且永不返回 </p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/17.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/18.png"></p><p><img src="/2020/02/17/csapp14-ecf-exception-and-processes/16.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-variables-type</title>
      <link href="2020/02/17/java-variables-type/"/>
      <url>2020/02/17/java-variables-type/</url>
      
        <content type="html"><![CDATA[<p><strong>数组、类、接口按值传递的时候都是传递对象的地址。</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static void main(String[] args) {            int []a={10,20};        System.out.println("a[0] :"a[0]+"a[1] : "+a[1]);//a[0]=10,a[1]=20;              swap(a, 0, 1);        System.out.println("a[0] :"a[0]+"a[1] : "+a[1]);//a[0]=20,a[1]=10;      }public static void swap(int []a,int i,int j){        int temp=a[i];        a[i]=a[j];        a[j]=temp;        System.out.println("a[0] :"a[0]+"a[1] : "+a[1]);//a[0]=20,a[1]=10;    }//输出/*a[0]=10 a[1]=20  a[0]=20 a[1]=10  a[0]=20 a[1]=10   */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/02/17/java-variables-type/1.png"></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Main{     public static void main(String[] args){          Foo f = new Foo("f");          changeReference(f); // It won't change the reference!          modifyReference(f); // It will modify the object that the reference variable "f" refers to!     }     public static void changeReference(Foo a){          Foo b = new Foo("b");          a = b;     }     public static void modifyReference(Foo c){          c.setAttribute("c");     }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>changerefernce(f)</strong><br><img src="/2020/02/17/java-variables-type/2.png"></p><p>String 类值不可改</p><p>StringBuffer 可以</p><p><a href="https://blog.csdn.net/u013309870/article/details/75499175">https://blog.csdn.net/u013309870/article/details/75499175</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Base </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP13-Linking</title>
      <link href="2020/02/16/csapp13-linking/"/>
      <url>2020/02/16/csapp13-linking/</url>
      
        <content type="html"><![CDATA[<h1 id="reason"><a href="#reason" class="headerlink" title="reason"></a>reason</h1><p><img src="/2020/02/16/csapp13-linking/1.png"></p><p>为了模块化（一个模块一个o) 和效率(  对于单独修改 只需单独编译)</p><h1 id="do-what"><a href="#do-what" class="headerlink" title="do what"></a>do what</h1><ul><li><p>解析所有符号（全局变量和函数 定义与引用的唯一位置）</p></li><li><p>重定位（Relocation) (把编译过的o文件里面需要重定位的 符号以及函数地址进行具体地址覆盖）</p></li></ul><h1 id="file-format-o-out-so"><a href="#file-format-o-out-so" class="headerlink" title="file format (.o .out .so)"></a>file format (.o .out .so)</h1><p><img src="/2020/02/16/csapp13-linking/2.png"></p><p>Key Part</p><p><img src="/2020/02/16/csapp13-linking/3.png"><br>better save space</p><h1 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h1><p>Global symbols 在m模块定义能被其他模块引用 （非static的全局函数和变量）</p><p>Externel symbols 在m模块使用的全局符号但是是被其他模块定义的</p><p>Local symbols 在m模块使用和定义的（只能模块用static 全局函数变量)</p><p>注意：编辑器只对上述三种符号解析 (局部非static 变量 在栈上）</p><h1 id="how-to-deal-with-same-symbols"><a href="#how-to-deal-with-same-symbols" class="headerlink" title="how to deal with same symbols"></a>how to deal with same symbols</h1><p><img src="/2020/02/16/csapp13-linking/4.png"></p><p>规则1：两个强 不允许</p><p>规则2：一个强 几个弱 取强</p><p>规则3： 几个弱 就随机取一个</p><p><img src="/2020/02/16/csapp13-linking/5.png"></p><p>对于第三个： 在p2里面对double x  操作 如果linker 随机选到了int x的内存地址 那么就会改8个字节改到y</p><p>第四个：int x=7是强的 所以只会存它  在p2 对double x 修改一定会覆盖y</p><p>第五个： 只是修改变量 </p><h2 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h2><p>1.尽量避免重名</p><p>2.不能避免就 （看看能不能用static，能不能初始化，在引用外部全局的时候用externel 提示编译器）</p><h1 id="Relocation"><a href="#Relocation" class="headerlink" title="Relocation"></a>Relocation</h1><p><img src="/2020/02/16/csapp13-linking/6.png"></p><p>定位前的o文件</p><p><img src="/2020/02/16/csapp13-linking/7.png">    </p><p>之后的就是把 那个entry红的地方都分配好地址</p><h1 id="Static-Libraries（old-）"><a href="#Static-Libraries（old-）" class="headerlink" title="Static Libraries（old ）"></a>Static Libraries（old ）</h1><p>(.a archive files)</p><p>通过列表查找使用的o</p><p><img src="/2020/02/16/csapp13-linking/8.png"></p><p>缺点 ： 比如有很多个printf 就需要多次解析prinf.o</p><h1 id="Shared-libraries-so、dll）"><a href="#Shared-libraries-so、dll）" class="headerlink" title="Shared libraries (so、dll）"></a>Shared libraries (so、dll）</h1><p>Dynamic Linking</p><p>可以在运行 的时候加载</p><h1 id="Library-interpositoning-（截获共享库调用）"><a href="#Library-interpositoning-（截获共享库调用）" class="headerlink" title="Library interpositoning （截获共享库调用）"></a>Library interpositoning （截获共享库调用）</h1><p>分为编译时  链接时  运行时 </p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP12-cache-memory</title>
      <link href="2020/02/15/csapp12-cache-memory/"/>
      <url>2020/02/15/csapp12-cache-memory/</url>
      
        <content type="html"><![CDATA[<h1 id="Cache-Meories"><a href="#Cache-Meories" class="headerlink" title="Cache Meories"></a>Cache Meories</h1><p><img src="/2020/02/15/csapp12-cache-memory/1.png"></p><h1 id="典型结构"><a href="#典型结构" class="headerlink" title="典型结构"></a>典型结构</h1><p><img src="/2020/02/15/csapp12-cache-memory/2.png"></p><h1 id="Direct-Mapped-Cache-直接映射寻址-E-1"><a href="#Direct-Mapped-Cache-直接映射寻址-E-1" class="headerlink" title="Direct Mapped Cache(直接映射寻址) (E=1)"></a>Direct Mapped Cache(直接映射寻址) (E=1)</h1><h2 id="直接find-set-（valid-标志位相同）-hit-后在返回对应的block"><a href="#直接find-set-（valid-标志位相同）-hit-后在返回对应的block" class="headerlink" title="直接find set + （valid+标志位相同） =hit  后在返回对应的block"></a>直接find set + （valid+标志位相同） =hit  后在返回对应的block</h2><p><img src="/2020/02/15/csapp12-cache-memory/3.png"></p><p><img src="/2020/02/15/csapp12-cache-memory/4.png"></p><p>这样的问题  很容易miss（并且是在还有set 的情况下）  之前存过的又没了 </p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p><img src="/2020/02/15/csapp12-cache-memory/5.png"></p><h2 id="写命中呢？-（write-hit"><a href="#写命中呢？-（write-hit" class="headerlink" title="写命中呢？ （write hit)"></a>写命中呢？ （write hit)</h2><p>两种方法 一种直接写内存（write through’） 另一种等到这个缓存被替代在写 （write back）</p><h2 id="Write-miss"><a href="#Write-miss" class="headerlink" title="Write miss?"></a>Write miss?</h2><p>一种 直接写内存（no-write-allocate) 另一种 还是写缓存等待替换(write-allocate)<br><img src="/2020/02/15/csapp12-cache-memory/6.png"></p><p><img src="/2020/02/15/csapp12-cache-memory/7.png"></p><h1 id="命中率差-2百分-性能可能差一倍"><a href="#命中率差-2百分-性能可能差一倍" class="headerlink" title="命中率差 2百分 性能可能差一倍"></a>命中率差 2百分 性能可能差一倍</h1><p><img src="/2020/02/15/csapp12-cache-memory/8.png"></p><p>所以后面都使用miss rate 来看倍数</p><h1 id="利用对缓存的了解在程序运用"><a href="#利用对缓存的了解在程序运用" class="headerlink" title="利用对缓存的了解在程序运用"></a>利用对缓存的了解在程序运用</h1><p>通过读取吞吐量来算速度内存山</p><p><img src="/2020/02/15/csapp12-cache-memory/9.png"></p><p>可以看出 遍历数组不同的大小（时间本地性）决定了 缓存的级别   （stride 决定空间复杂的miss rate 也就是坡度）当到达8的时候就平坦了 因为缓存本来就最多8个double （注意在stride1 的时候就算size 大 可以在L2 和L1时候保持 相同的速度 应该是intel工程师对stride1 的优化)</p><h1 id="空间本地性"><a href="#空间本地性" class="headerlink" title="空间本地性"></a>空间本地性</h1><p>要点尽可能访问 行 </p><p>矩阵乘法里</p><p>ijk</p><p><img src="/2020/02/15/csapp12-cache-memory/10.png"></p><p><img src="/2020/02/15/csapp12-cache-memory/11.png"></p><p>ikj</p><p><img src="/2020/02/15/csapp12-cache-memory/12.png"></p><p><img src="/2020/02/15/csapp12-cache-memory/13.png"></p><p>kji</p><p><img src="/2020/02/15/csapp12-cache-memory/14.png"></p><p><img src="/2020/02/15/csapp12-cache-memory/15.png"></p><p><strong>就是看哪两个是固定的就是 比如 kj固定 就是kji (和jki相等）</strong></p><p><img src="/2020/02/15/csapp12-cache-memory/16.png"></p><h2 id="通过分块（BLOCKing-来改善时间本地性）"><a href="#通过分块（BLOCKing-来改善时间本地性）" class="headerlink" title="通过分块（BLOCKing 来改善时间本地性）"></a>通过分块（BLOCKing 来改善时间本地性）</h2><p>正常访问</p><p>总共一行miss rate ：1/8  列miss rate ：1   个数一行n个  一列也是n个</p><p><img src="/2020/02/15/csapp12-cache-memory/17.png">   </p><p>分块访问 </p><p>分块 每一块用 ijk 这样missrate 都是1/8 </p><p><img src="/2020/02/15/csapp12-cache-memory/18.png"></p><p><img src="/2020/02/15/csapp12-cache-memory/19.png"></p><p><img src="/2020/02/15/csapp12-cache-memory/20.png"></p><p>C是Cache size</p><p>有至少3个block 放进去运算 所以 这些block要小于总的cache size</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-String-getEveryChar</title>
      <link href="2020/02/15/java-string-geteverychar/"/>
      <url>2020/02/15/java-string-geteverychar/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E5%AF%BC%E8%AF%ADstring-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95">1. 导语(string 常用方法)</a></li><li><a href="#2-%E8%8E%B7%E5%8F%96string-%E6%AF%8F%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%9A%84%E6%96%B9%E6%B3%95">2. 获取String 每个字符的方法</a><ul><li><a href="#21-scharati">2.1. s.charAt(i)</a></li><li><a href="#22-ssubstringii1">2.2. s.subString(i,i+1)</a></li><li><a href="#23-stochararray-csize">2.3. s.toCharArray(), c.size()</a></li></ul></li></ul><!-- /TOC --><h1 id="1-导语-string-常用方法"><a href="#1-导语-string-常用方法" class="headerlink" title="1. 导语(string 常用方法)"></a>1. 导语(string 常用方法)</h1><p>对于字符串的操作，我们常用的就是trim()去除前后空格、subString()截取子字符串<br><img src="/2020/02/15/java-string-geteverychar/1.jpg"></p><h1 id="2-获取String-每个字符的方法"><a href="#2-获取String-每个字符的方法" class="headerlink" title="2. 获取String 每个字符的方法"></a>2. 获取String 每个字符的方法</h1><h2 id="2-1-s-charAt-i"><a href="#2-1-s-charAt-i" class="headerlink" title="2.1. s.charAt(i)"></a>2.1. s.charAt(i)</h2><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">String s = "aaabbbbccccdddd";List&lt;String&gt; list = new ArrayList&lt;String&gt;(); //定义对象依次存放每一个字符  for(int i = 0; i &lt; str.length() ; i++){    String ss = String.valueOf(str.charAt(i));    list.add(ss);}  System.out.println(list.toString());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-s-subString-i-i-1"><a href="#2-2-s-subString-i-i-1" class="headerlink" title="2.2. s.subString(i,i+1)"></a>2.2. s.subString(i,i+1)</h2><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">String s = "aaabbbbccccdddd";List&lt;String&gt; list = new ArrayList&lt;String&gt;(); //定义对象依次存放每一个字符  for(int i = 0; i &lt; str.length() ; i++){    String ss = String.subString(i,i+1);    list.add(ss);}System.out.println(list.toString());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3-s-toCharArray-c-size"><a href="#2-3-s-toCharArray-c-size" class="headerlink" title="2.3. s.toCharArray(), c.size()"></a>2.3. s.toCharArray(), c.size()</h2><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">String s = "aaabbbbccccdddd";List&lt;String&gt; list = new ArrayList&lt;String&gt;(); //定义对象依次存放每一个字符  for(int i = 0; i &lt; str.length() ; i++){    String ss = String.subString(i,i+1);    list.add(ss);}System.out.println(list.toString());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP11-memory-memory</title>
      <link href="2020/02/14/csapp11-memory-hierarchy/"/>
      <url>2020/02/14/csapp11-memory-hierarchy/</url>
      
        <content type="html"><![CDATA[<h1 id="存储器-RAM-ROM"><a href="#存储器-RAM-ROM" class="headerlink" title="存储器 RAM ROM"></a>存储器 RAM ROM</h1><p>RAM random-access memory<br><img src="/2020/02/14/csapp11-memory-hierarchy/1.png"></p><p>SRAM 每个bit需要 4 到6个晶体管</p><p><img src="/2020/02/14/csapp11-memory-hierarchy/2.png"></p><h1 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h1><p>总线的重点是总线上的值 大家都知道 也就是把值放入总线</p><p>System bus  Memory bus</p><p><img src="/2020/02/14/csapp11-memory-hierarchy/3.png"></p><h1 id="机器硬盘"><a href="#机器硬盘" class="headerlink" title="机器硬盘"></a>机器硬盘</h1><p><img src="/2020/02/14/csapp11-memory-hierarchy/4.png"></p><p><img src="/2020/02/14/csapp11-memory-hierarchy/5.png"></p><p>根据那个扳手 选择区域 </p><p>typical time 交换数据 seek time( 3-9ms） + rotation time（4ms） +transfer time （0.002ms）</p><h1 id="固态硬盘-（Solid-State-disk-SSD"><a href="#固态硬盘-（Solid-State-disk-SSD" class="headerlink" title="固态硬盘 （Solid State disk)  SSD"></a>固态硬盘 （Solid State disk)  SSD</h1><p>按页写入读取数据  pages：512KB to 4MB blocks：32 to 128 pages </p><p>10w次寿命</p><h1 id="各个memory速度比较"><a href="#各个memory速度比较" class="headerlink" title="各个memory速度比较"></a>各个memory速度比较</h1><p><img src="/2020/02/14/csapp11-memory-hierarchy/6.png"></p><p>2003年 cpu开始变慢是因为 功率跟不上了 太热了 所以开始使用多核 多线程</p><h1 id="Locality循环-临时本地性）-和临近访问（空间本地性）"><a href="#Locality循环-临时本地性）-和临近访问（空间本地性）" class="headerlink" title="Locality循环 (临时本地性） 和临近访问（空间本地性）"></a>Locality循环 (临时本地性） 和临近访问（空间本地性）</h1><p><img src="/2020/02/14/csapp11-memory-hierarchy/7.png"></p><p>建议就是使用循环 (临时本地性） 和临近访问（空间本地性）</p><h1 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h1><p><img src="/2020/02/14/csapp11-memory-hierarchy/8.png"></p><p>其实每一层的缓存相当于下一层的一些数据</p><p>读取内存都是先是多少行 然后多少列 最好</p><p>enhance DRAM</p><p><img src="/2020/02/14/csapp11-memory-hierarchy/9.png"></p><p><img src="/2020/02/14/csapp11-memory-hierarchy/10.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP10-program-optimization</title>
      <link href="2020/02/13/csapp10-program-optimization/"/>
      <url>2020/02/13/csapp10-program-optimization/</url>
      
        <content type="html"><![CDATA[<h1 id="每一次-都strlen"><a href="#每一次-都strlen" class="headerlink" title="每一次 都strlen"></a>每一次 都strlen</h1><p><img src="/2020/02/13/csapp10-program-optimization/1.png"></p><h1 id="内存的反复的读取b-i-和写入"><a href="#内存的反复的读取b-i-和写入" class="headerlink" title="内存的反复的读取b[i] 和写入"></a>内存的反复的读取b[i] 和写入</h1><p><img src="/2020/02/13/csapp10-program-optimization/2.png"></p><p>修改</p><p><img src="/2020/02/13/csapp10-program-optimization/3.png"></p><h1 id="程序流水线"><a href="#程序流水线" class="headerlink" title="程序流水线"></a>程序流水线</h1><p><img src="/2020/02/13/csapp10-program-optimization/4.png"></p><p>除法是比较耗内存的 开源库 都会把除法换成 乘以倒数分之一</p><p>Latency Bound 机器延迟的限制（顺序执行）</p><h1 id="Loop-Unrooling-每次处理两个"><a href="#Loop-Unrooling-每次处理两个" class="headerlink" title="Loop Unrooling  每次处理两个"></a>Loop Unrooling  每次处理两个</h1><p><img src="/2020/02/13/csapp10-program-optimization/5.png"></p><p>这样没改乘法流水线</p><p><img src="/2020/02/13/csapp10-program-optimization/6.png"></p><p>因为d[i]和x 没关系 所以可以同时进行</p><h1 id="浮点的话不一定满足结合-和交换-所以优化的时候一般不改结合性"><a href="#浮点的话不一定满足结合-和交换-所以优化的时候一般不改结合性" class="headerlink" title="浮点的话不一定满足结合 和交换 所以优化的时候一般不改结合性"></a>浮点的话不一定满足结合 和交换 所以优化的时候一般不改结合性</h1><h1 id="Throughput-吞吐量极限（硬件限制）"><a href="#Throughput-吞吐量极限（硬件限制）" class="headerlink" title="Throughput 吞吐量极限（硬件限制）"></a>Throughput 吞吐量极限（硬件限制）</h1><p><img src="/2020/02/13/csapp10-program-optimization/7.png"></p><p><img src="/2020/02/13/csapp10-program-optimization/8.png"></p><p>gcc  做的不好 这方面  可以利用扩展补充</p><p>intel 自带编译器 </p><h1 id="现代-为了读取尽可能多指令-分支预测"><a href="#现代-为了读取尽可能多指令-分支预测" class="headerlink" title="现代 为了读取尽可能多指令 分支预测"></a>现代 为了读取尽可能多指令 分支预测</h1><p><img src="/2020/02/13/csapp10-program-optimization/9.png"></p><p>CPU 对每个寄存器有多个副本（几百个时间点）  </p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP09-machine-level-programing-5-advanced</title>
      <link href="2020/02/12/csapp09-machine-level-programing-5-advanced/"/>
      <url>2020/02/12/csapp09-machine-level-programing-5-advanced/</url>
      
        <content type="html"><![CDATA[<h1 id="总共-47位地址（128TB）-栈-8MB"><a href="#总共-47位地址（128TB）-栈-8MB" class="headerlink" title="总共 47位地址（128TB）  栈 8MB"></a>总共 47位地址（128TB）  栈 8MB</h1><p><img src="/2020/02/12/csapp09-machine-level-programing-5-advanced/1.png"></p><p>空白区域没有对应的物理内存映射</p><p><img src="/2020/02/12/csapp09-machine-level-programing-5-advanced/2.png"></p><p>可以通过看地址 判断是什么区域</p><p>buffer overflow</p><p>gets  会一直读 不管 目标的缓冲区 scanf 等等</p><p>Address Space Layout Randomization ASLR  空间地址随机化 比如在主函数开始前在栈上分配随机大小的空间</p><p>malloc 分配时具有随机性</p><p><img src="/2020/02/12/csapp09-machine-level-programing-5-advanced/3.png"></p><p>大小端模式</p><p><img src="/2020/02/12/csapp09-machine-level-programing-5-advanced/4.png"></p><p>LSB、MSB 最低最高有效位</p><p>BIG-Endian 低地址高位</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> machine-level-programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-algorithm-HashMap</title>
      <link href="2020/02/12/java-algorithm-hashmap/"/>
      <url>2020/02/12/java-algorithm-hashmap/</url>
      
        <content type="html"><![CDATA[<p><strong>推荐链接</strong><br><a href="https://blog.csdn.net/woshimaxiao1/article/details/83661464">https://blog.csdn.net/woshimaxiao1/article/details/83661464</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP08-machine-level-programing-4-data</title>
      <link href="2020/02/11/csapp08-machine-level-programing-4-data/"/>
      <url>2020/02/11/csapp08-machine-level-programing-4-data/</url>
      
        <content type="html"><![CDATA[<p>C语言没有越界检测  </p><p><img src="/2020/02/11/csapp08-machine-level-programing-4-data/1.png"></p><p>i取任意</p><p>struct   alignment 对齐  硬件原因 ：硬件一般取64字节 如果不对齐  操作系统可能需要额外处理</p><p><img src="/2020/02/11/csapp08-machine-level-programing-4-data/2.png"></p><p><img src="/2020/02/11/csapp08-machine-level-programing-4-data/3.png"></p><p>会分配地址是数据结构的整数倍位置 </p><p><img src="/2020/02/11/csapp08-machine-level-programing-4-data/4.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> machine-level-programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-BaseConcept-Day2</title>
      <link href="2020/02/11/java-features-day0/"/>
      <url>2020/02/11/java-features-day0/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E7%BB%A7%E6%89%BF">1. 继承</a><ul><li><a href="#11-extends">1.1. extends</a></li><li><a href="#12-instanceof-%E5%85%B3%E9%94%AE%E5%AD%97">1.2. instanceof 关键字</a></li><li><a href="#13-implements">1.3. implements</a></li></ul></li><li><a href="#2-%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD">2. 重写和重载</a><ul><li><a href="#21-override-%E9%87%8D%E5%86%99">2.1. Override 重写</a></li><li><a href="#22-overload-%E9%87%8D%E8%BD%BD">2.2. Overload 重载</a></li><li><a href="#23-%E4%BA%8C%E8%80%85%E5%8C%BA%E5%88%AB">2.3. 二者区别</a></li></ul></li><li><a href="#3-%E6%8A%BD%E8%B1%A1%E7%B1%BB">3. 抽象类</a><ul><li><a href="#31-%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95">3.1. 抽象方法</a></li></ul></li><li><a href="#4-%E5%B0%81%E8%A3%85">4. 封装</a></li><li><a href="#5-%E6%8E%A5%E5%8F%A3">5. 接口</a><ul><li><a href="#51-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%B1%BB%E7%9B%B8%E4%BC%BC%E7%82%B9">5.1. 接口与类相似点：</a></li><li><a href="#52-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB">5.2. 接口与类的区别：</a></li><li><a href="#53-implements">5.3. implements</a></li><li><a href="#54-%E6%A0%87%E8%AE%B0%E6%8E%A5%E5%8F%A3">5.4. 标记接口</a></li></ul></li><li><a href="#6-%E5%8C%85">6. 包</a><ul><li><a href="#61-%E4%BD%9C%E7%94%A8">6.1. 作用</a></li><li><a href="#62-tips">6.2. tips</a></li></ul></li><li><a href="#7-%E5%A4%9A%E6%80%81">7. 多态</a></li></ul><!-- /TOC --><h1 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h1><h2 id="1-1-extends"><a href="#1-1-extends" class="headerlink" title="1.1. extends"></a>1.1. extends</h2><p>IS-A关系</p><h2 id="1-2-instanceof-关键字"><a href="#1-2-instanceof-关键字" class="headerlink" title="1.2. instanceof 关键字"></a>1.2. instanceof 关键字</h2><p>可以使用 instanceof 运算符来检验Mammal和dog对象是否是Animal类的一个实例。</p><h2 id="1-3-implements"><a href="#1-3-implements" class="headerlink" title="1.3. implements"></a>1.3. implements</h2><p>Java只支持单继承（继承基本类和抽象类），但是我们可以用接口来实现（多继承接口来实现）,脚本结构如：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Apple extends Fruit implements Fruit1, Fruit2{}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-重写和重载"><a href="#2-重写和重载" class="headerlink" title="2. 重写和重载"></a>2. 重写和重载</h1><h2 id="2-1-Override-重写"><a href="#2-1-Override-重写" class="headerlink" title="2.1. Override 重写"></a>2.1. Override 重写</h2><p>子类重写父类<br>用到的父类被重写方法 super</p><h2 id="2-2-Overload-重载"><a href="#2-2-Overload-重载" class="headerlink" title="2.2. Overload 重载"></a>2.2. Overload 重载</h2><h2 id="2-3-二者区别"><a href="#2-3-二者区别" class="headerlink" title="2.3. 二者区别"></a>2.3. 二者区别</h2><p><img src="/2020/02/11/java-features-day0/1.png"></p><h1 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3. 抽象类"></a>3. 抽象类</h1><p>类没有足够的信息描绘对象 （抽象类）abstract<br>继承使用</p><h2 id="3-1-抽象方法"><a href="#3-1-抽象方法" class="headerlink" title="3.1. 抽象方法"></a>3.1. 抽象方法</h2><p>继承抽象类的子类必须重写此 方法</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public abstract double computePay();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h1><p>Getter Setter 类的private数据</p><p>这样的好处 这种数据的访问被严格控制 而且可以修改实现而不是调用 </p><h1 id="5-接口"><a href="#5-接口" class="headerlink" title="5. 接口"></a>5. 接口</h1><p>interface<br>与类的异同 </p><h2 id="5-1-接口与类相似点："><a href="#5-1-接口与类相似点：" class="headerlink" title="5.1. 接口与类相似点："></a>5.1. 接口与类相似点：</h2><p>一个接口可以有多个方法。</p><ul><li>接口文件保存在.java结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在.class结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ul><h2 id="5-2-接口与类的区别："><a href="#5-2-接口与类的区别：" class="headerlink" title="5.2. 接口与类的区别："></a>5.2. 接口与类的区别：</h2><ul><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法。(隐式抽象不用abstract)</li><li>接口不能包含成员变量，除了static和final变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多重继承。</li></ul><h2 id="5-3-implements"><a href="#5-3-implements" class="headerlink" title="5.3. implements"></a>5.3. implements</h2><p>实现接口</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class MammalInt implements Animal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在实现接口的时候，也要注意一些规则：</p><ul><li>一个类可以同时实现多个接口。</li><li>一个类只能继承一个类，但是能实现多个接口。</li><li>一个接口能继承另一个接口，这和类之间的继承比较相似。(而且可以多重继承)</li></ul><h2 id="5-4-标记接口"><a href="#5-4-标记接口" class="headerlink" title="5.4. 标记接口"></a>5.4. 标记接口</h2><p>没有任何方法的接口</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">package java.util;public interface EventListener{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>目的</p><ul><li><p>建立一个公共的父接口：<br>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p></li><li><p>向一个类添加数据类型：<br>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul><h1 id="6-包"><a href="#6-包" class="headerlink" title="6. 包"></a>6. 包</h1><p>如果一个源文件中没有使用包声明，那么其中的类，函数，枚举，注释等将被放在一个无名的包（unnamed package）中。通常小写避免与类冲突。</p><h2 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1. 作用"></a>6.1. 作用</h2><p>包的作用</p><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</li><li>如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。<br>java.lang-打包基础的类<br>java.io-包含输入输出功能的函数</li></ul><h2 id="6-2-tips"><a href="#6-2-tips" class="headerlink" title="6.2. tips"></a>6.2. tips</h2><p>一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是apple.com，所有的包名都以com.apple开头。包名中的每一个部分对应一个子目录。</p><p>例如：这个公司有一个com.apple.computers的包，这个包包含一个叫做Dell.java的源文件，那么相应的，应该有如下面的一连串子目录：</p><p>这样，你可以将你的类目录分享给其他的编程人员，而不用透露自己的源码。用这种方法管理源码和类文件可以让编译器和java虚拟机（JVM）可以找到你程序中使用的所有类型。</p><p>类目录的绝对路径叫做class path。设置在系统变量CLASSPATH中。编译器和java虚拟机通过将package名字加到class path后来构造.class文件的路径。</p><p><path- two="">\classes是class path，package名字是com.apple.computers,而编译器和JVM会在 <path-two>\classes\com\apple\compters中找.class文件。</path-two></path-></p><p>一个class path可能会包含好几个路径。多路径应该用分隔符分开。默认情况下，编译器和JVM查找当前目录。JAR文件按包含Java平台相关的类，所以他们的目录默认放在了class path中。</p><h1 id="7-多态"><a href="#7-多态" class="headerlink" title="7. 多态"></a>7. 多态</h1><p>在Java中，所有的对象都具有多态性，因为任何对象都能通过IS-A测试的类型和Object类。</p><p>当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。</p><p>要想调用父类中被重写的方法，则必须使用关键字super。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BaseConcept </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP07-machine-level-programing-3-procedures</title>
      <link href="2020/02/10/csapp07-machine-level-programing-3-procedures/"/>
      <url>2020/02/10/csapp07-machine-level-programing-3-procedures/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/1.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/2.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/3.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/4.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/5.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/6.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/7.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/8.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/9.png"></p><p>caller saved</p><p>callee saved</p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/10.png"></p><p><img src="/2020/02/10/csapp07-machine-level-programing-3-procedures/11.png"></p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> machine-level-programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP06-machine-level-programing-2</title>
      <link href="2020/02/09/csapp06-machine-level-programing-2/"/>
      <url>2020/02/09/csapp06-machine-level-programing-2/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/09/csapp06-machine-level-programing-2/1.png"></p><p>movzbl  al ，eax   movzbl 意味着zero extension byte to long 就是放在低位字节，像高位补0</p><p><img src="/2020/02/09/csapp06-machine-level-programing-2/2.png"></p><p><img src="/2020/02/09/csapp06-machine-level-programing-2/3.png"></p><p><img src="/2020/02/09/csapp06-machine-level-programing-2/4.png"></p><p>GCC -02 级别</p><p><img src="/2020/02/09/csapp06-machine-level-programing-2/5.png"></p><p>没出现的 就是defalut  0 4</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> machine-level-programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-BaseConcept-day1</title>
      <link href="2020/02/09/java-base-day1/"/>
      <url>2020/02/09/java-base-day1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#1-%E5%8F%AA%E5%86%99%E6%A8%A1%E7%B3%8A%E7%9A%84">1. <strong><em>只写模糊的</em></strong></a><ul><li><a href="#11-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F">1.1. 正则表达式</a><ul><li><a href="#111-pattern%E7%B1%BB">1.1.1. Pattern类</a></li><li><a href="#112-matcher%E7%B1%BB">1.1.2. Matcher类</a></li></ul></li><li><a href="#12-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0-%E6%9C%89%E7%82%B9%E5%83%8F%E6%8C%87%E9%92%88">1.2. 可变参数 （有点像指针)</a></li><li><a href="#13-finalize%E6%96%B9%E6%B3%95">1.3. finalize()方法</a></li><li><a href="#14-stream-file-io">1.4. Stream File IO</a><ul><li><a href="#141-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5-systemin%E5%AF%B9%E8%B1%A1">1.4.1. 控制台输入 System.in对象</a></li><li><a href="#142-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5-systemout%E5%AF%B9%E8%B1%A1">1.4.2. 控制台输入 System.out对象</a></li></ul></li><li><a href="#15-%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6">1.5. 读写文件</a><ul><li><a href="#151-fileoutputstream">1.5.1. FileOutputStream</a></li><li><a href="#152-%E7%9B%AE%E5%BD%95">1.5.2. 目录</a></li></ul></li><li><a href="#16-scanner%E7%B1%BB">1.6. Scanner类</a></li><li><a href="#17-try-catch-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">1.7. try catch 异常处理</a></li></ul></li></ul><!-- /TOC --><h1 id="1-只写模糊的"><a href="#1-只写模糊的" class="headerlink" title="1. 只写模糊的"></a>1. <strong><em>只写模糊的</em></strong></h1><h2 id="1-1-正则表达式"><a href="#1-1-正则表达式" class="headerlink" title="1.1. 正则表达式"></a>1.1. 正则表达式</h2><h3 id="1-1-1-Pattern类"><a href="#1-1-1-Pattern类" class="headerlink" title="1.1.1. Pattern类"></a>1.1.1. Pattern类</h3><p>pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。</p><h3 id="1-1-2-Matcher类"><a href="#1-1-2-Matcher类" class="headerlink" title="1.1.2. Matcher类"></a>1.1.2. Matcher类</h3><p>Matcher类：<br>Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。</p><h2 id="1-2-可变参数-（有点像指针"><a href="#1-2-可变参数-（有点像指针" class="headerlink" title="1.2. 可变参数 （有点像指针)"></a>1.2. 可变参数 （有点像指针)</h2><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class VarargsDemo {   public static void main(String args[]) {      // 调用可变参数的方法  printMax(34, 3, 3, 2, 56.5);      printMax(new double[]{1, 2, 3});   }   public static void printMax( double... numbers) {   if (numbers.length == 0) {      System.out.println("No argument passed");      return;   }   double result = numbers[0];   for (int i = 1; i &lt;  numbers.length; i++)       if (numbers[i] &gt;  result)      result = numbers[i];      System.out.println("The max value is " + result);   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-finalize-方法"><a href="#1-3-finalize-方法" class="headerlink" title="1.3. finalize()方法"></a>1.3. finalize()方法</h2><p>Java允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做finalize( )，它用来清除回收对象。</p><h2 id="1-4-Stream-File-IO"><a href="#1-4-Stream-File-IO" class="headerlink" title="1.4. Stream File IO"></a>1.4. Stream File IO</h2><h3 id="1-4-1-控制台输入-System-in对象"><a href="#1-4-1-控制台输入-System-in对象" class="headerlink" title="1.4.1. 控制台输入 System.in对象"></a>1.4.1. 控制台输入 System.in对象</h3><p>read() readline</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">// 使用 BufferedReader 在控制台读取字符import java.io.*;public class BRReadLines {   public static void main(String args[]) throws IOException   {      // 使用 System.in 创建 BufferedReader       BufferedReader br = new BufferedReader(new                              InputStreamReader(System.in));      String str;      System.out.println("Enter lines of text.");      System.out.println("Enter 'end' to quit.");      do {         str = br.readLine();         System.out.println(str);      } while(!str.equals("end"));   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-2-控制台输入-System-out对象"><a href="#1-4-2-控制台输入-System-out对象" class="headerlink" title="1.4.2. 控制台输入 System.out对象"></a>1.4.2. 控制台输入 System.out对象</h3><p>write()不常用 因为print() 和println()好用</p><h2 id="1-5-读写文件"><a href="#1-5-读写文件" class="headerlink" title="1.5. 读写文件"></a>1.5. 读写文件</h2><p><img src="/2020/02/09/java-base-day1/1.png"></p><h3 id="1-5-1-FileOutputStream"><a href="#1-5-1-FileOutputStream" class="headerlink" title="1.5.1. FileOutputStream"></a>1.5.1. FileOutputStream</h3><p>使用字符串类型的文件名来创建一个输出流对象：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">OutputStream f = new FileOutputStream("C:/java/hello")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">File f = new File("C:/java/hello");OutputStream f = new FileOutputStream(f);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-5-2-目录"><a href="#1-5-2-目录" class="headerlink" title="1.5.2. 目录"></a>1.5.2. 目录</h3><p>mkdir()</p><h2 id="1-6-Scanner类"><a href="#1-6-Scanner类" class="headerlink" title="1.6. Scanner类"></a>1.6. Scanner类</h2><h2 id="1-7-try-catch-异常处理"><a href="#1-7-try-catch-异常处理" class="headerlink" title="1.7. try catch 异常处理"></a>1.7. try catch 异常处理</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BaseConcept </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP05-machine-level-programing-1</title>
      <link href="2020/02/08/csapp05-machine-level-programing-1/"/>
      <url>2020/02/08/csapp05-machine-level-programing-1/</url>
      
        <content type="html"><![CDATA[<p>Cache 无法访问 只能让下次访问内存更快</p><p>gcc -Og  -S sum.c 生成sum.s就停止<br>gcc -Og sum.c -0 sum</p><p>objdump -d sum 反汇编程序<br>objdump -d sum 》 sum.d</p><p>gdb disassemble sumstore</p><p>winword.exe 反汇编</p><p>%e %r的低32位</p><p>只剩一个special %rsp 栈指针 其他寄存器通用了</p><p><img src="/2020/02/08/csapp05-machine-level-programing-1/1.png"></p><p><img src="/2020/02/08/csapp05-machine-level-programing-1/2.png"></p><p><img src="/2020/02/08/csapp05-machine-level-programing-1/3.png"></p><p><img src="/2020/02/08/csapp05-machine-level-programing-1/4.png"></p><p>leaq src dst </p><p>src的地址移到 dst</p><p><img src="/2020/02/08/csapp05-machine-level-programing-1/5.png"></p><p>算术移位和逻辑移位  对应有符号 无符号 和有符号</p><p>只有算术右移和逻辑右移不一样 (最高位补1)</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> machine-level-programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP04-float</title>
      <link href="2020/02/07/csapp04-float/"/>
      <url>2020/02/07/csapp04-float/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/02/07/csapp04-float/1.png"></p><p><img src="/2020/02/07/csapp04-float/2.png"><br>n:normalize </p><p>d:denormalize</p><p><img src="/2020/02/07/csapp04-float/3.png"></p><p><img src="/2020/02/07/csapp04-float/4.png"></p><p>隐含的M=1.xxxx  xxx就是frac  </p><p><img src="/2020/02/07/csapp04-float/5.png"></p><p>为了想表示 0 </p><p><img src="/2020/02/07/csapp04-float/6.png"></p><p><img src="/2020/02/07/csapp04-float/7.png"></p><p><img src="/2020/02/07/csapp04-float/8.png"></p><p><img src="/2020/02/07/csapp04-float/9.png"></p><p><img src="/2020/02/07/csapp04-float/10.png"></p><p><img src="/2020/02/07/csapp04-float/11.png"></p><p><img src="/2020/02/07/csapp04-float/12.png"></p><p><img src="/2020/02/07/csapp04-float/13.png"><br>等间隔代表e相等</p><p>取精度问题<br><img src="/2020/02/07/csapp04-float/14.png"></p><p><img src="/2020/02/07/csapp04-float/15.png"></p><p>commtativate YES</p><p>Associative No</p><p><img src="/2020/02/07/csapp04-float/16.png"><br>总共只能表示 10的7位精度      没有足够的位</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP02~03-bits-ints</title>
      <link href="2020/02/06/csapp02-03-bits-ints/"/>
      <url>2020/02/06/csapp02-03-bits-ints/</url>
      
        <content type="html"><![CDATA[<h1 id="bits"><a href="#bits" class="headerlink" title="bits"></a>bits</h1><p>负溢出 4位 bit 补码  -6 + -3 会等于 7   正溢出 7 +5 = -4</p><p>无符号做运算就相当于结果取模  4bit</p><p>5 * 5 =25    11001 discard1  1001 =9</p><p>有符号运算</p><p>5*4 =20   10100  0100 4</p><p>5*5=25 11001  1001 -7</p><p>1101 -3 13（unsigned）</p><p>1110 -2  14  </p><p>13<em>14 =182  10110110   0110 = 6= -3</em>-2</p><p>sizeof运算符 返回size_t  (unsigned long)</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP01-overview</title>
      <link href="2020/02/05/csapp01-overview/"/>
      <url>2020/02/05/csapp01-overview/</url>
      
        <content type="html"><![CDATA[<h1 id="Course-Theme"><a href="#Course-Theme" class="headerlink" title="Course   &nbsp;Theme"></a>Course   &nbsp;Theme</h1><p>Abstraction   &nbsp;Is   &nbsp;Good   &nbsp;But   &nbsp;Don’t   &nbsp;Forget   &nbsp;Reality</p><ul><li>收获<ul><li>成为效率更高的程序员<ul><li>能够效率找到消除bugs</li><li>能够理解和调整程序性能</li></ul></li><li>基础课<ul><li>编译器、操作系统、网络、计算机体系结构、嵌入式系统、存储系统等。</li></ul></li></ul></li></ul><h1 id="Ints-are-not-Integers-Floats-are-not-Reals"><a href="#Ints-are-not-Integers-Floats-are-not-Reals" class="headerlink" title="Ints are &nbsp;not &nbsp;Integers, Floats are &nbsp;not  Reals"></a>Ints are &nbsp;not &nbsp;Integers, Floats are &nbsp;not  Reals</h1><ul><li>不生成随机值<ul><li>算术运算有重要的数学性质</li></ul></li><li>不能假设所有”常用”数学属性<ul><li>由于表示的有限性</li></ul></li></ul><p><img src="/2020/02/05/csapp01-overview/1.png"></p><h1 id="You’ve-Got-to-Know-Assembly"><a href="#You’ve-Got-to-Know-Assembly" class="headerlink" title="You’ve Got  to  Know  Assembly"></a>You’ve Got  to  Know  Assembly</h1><ul><li>很可能你永远不会在汇编中编写程序<ul><li>编译器比你更强大</li></ul></li><li>但是：理解汇编是机器级执行模型的关键<ul><li>程序在存在错误时的行为<ul><li>高级语言模型崩溃</li></ul></li><li>调整程序性能<ul><li>了解编译器完成/未完成的操作</li><li>了解程序低效的根源</li></ul></li></ul></li><li>实现系统软件<ul><li>编译器以机器代码为目标</li><li>系统必须管理进程状态</li></ul></li><li>创建、VS恶意软件<ul><li>x86汇编语言是首选！</li></ul></li></ul><h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h1><ul><li><p>内存不是无限的</p><ul><li>它必须被分配和管理</li><li>许多应用程序都是以内存为主的</li></ul></li><li><p>内存引用错误，尤其是有害的</p><ul><li>影响在时间和空间</li></ul></li><li><p>内存性能不均匀</p><ul><li>缓存和虚拟内存效应会极大地影响程序性能</li><li>对程序进行自适应处理，可以大大提高存储系统的速度</li></ul></li></ul><h1 id="不只有和空间复杂度有关系"><a href="#不只有和空间复杂度有关系" class="headerlink" title="不只有和空间复杂度有关系"></a>不只有和空间复杂度有关系</h1><ul><li>常数也很重要</li><li>即使是精确的操作数也无法预测性能，<ul><li>根据代码如何编写很容易看到10:1的性能范围</li><li>必须在多个级别（算法、数据表示、过程和循环）执行操作，</li></ul></li><li>必须了解系统优化性能<ul><li>如何编译和执行程序</li><li>如何衡量程序性能和识别瓶颈；</li><li>如何在不破坏代码模块性和通用性的前提下提高性能</li></ul></li></ul><p><img src="/2020/02/05/csapp01-overview/2.png"></p><h1 id="计算机不仅仅是执行程序"><a href="#计算机不仅仅是执行程序" class="headerlink" title="计算机不仅仅是执行程序"></a>计算机不仅仅是执行程序</h1><ul><li><p>他们需要输入和输出数据</p><ul><li>IO系统编程可靠性和性能</li></ul></li><li><p>它们通过网络相互通信</p><ul><li>许多系统级问题在存在网络<ul><li>自主进程并发操作</li><li>应对不可靠的媒体 </li><li>跨平台比较</li><li>复杂的性能问题</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 课程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
