<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSAPP20-shortage-allocation-Advanced</title>
      <link href="/2020/02/09/CSAPP20-shortage-allocation-Advanced/"/>
      <url>/2020/02/09/CSAPP20-shortage-allocation-Advanced/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1free-block-strategy">1.free block strategy</a><ul><li><a href="#11-显示表explicit-free-list">1.1 显示表（explicit free list)</a><ul><li><a href="#111-显示表的两种插入规则在free-list-里面加新块">1.1.1 显示表的两种插入规则（在free list 里面加新块）</a></li></ul></li><li><a href="#12-独立分散表根据大小">1.2 独立分散表（根据大小）</a></li></ul></li><li><a href="#2-垃圾回收策略">2 垃圾回收策略</a></li></ul><!-- /TOC --><h1 id="1-free-block-strategy"><a href="#1-free-block-strategy" class="headerlink" title="1.free block strategy"></a>1.free block strategy</h1><p>除了前一天的隐式表(implicit free list)：最原始的方法需要大量搜索时间(吞吐量)，以及内存利用率也不高(字节对齐)<br>衍生出更现代的方法</p><h2 id="1-1-显示表（explicit-free-list"><a href="#1-1-显示表（explicit-free-list" class="headerlink" title="1.1 显示表（explicit free list)"></a>1.1 显示表（explicit free list)</h2><p>已分配的和隐式表一样 非分配用双向链表链接(不一定地址连续) 空闲的表<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/1.png" alt></p><h3 id="1-1-1-显示表的两种插入规则（在free-list-里面加新块）"><a href="#1-1-1-显示表的两种插入规则（在free-list-里面加新块）" class="headerlink" title="1.1.1 显示表的两种插入规则（在free list 里面加新块）"></a>1.1.1 显示表的两种插入规则（在free list 里面加新块）</h3><ul><li>LIFO （last-in-first-out）<ul><li>把新块加入到free list 首部<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/2.png" alt></li><li>优点: 简单的常数时间</li><li>缺点：研究表示内部碎片比地址顺序多</li></ul></li><li>地址顺序<ul><li>把地址插入到两个地址（大小）之中</li><li>优点：研究表明内部碎片少一点</li><li>缺点：需要搜索</li></ul></li></ul><p><strong>summary</strong> 显示表的搜索时间从隐式表的所有block到现在只是free的block，多了点内部碎片（两个指针)</p><h2 id="1-2-独立分散表（根据大小）"><a href="#1-2-独立分散表（根据大小）" class="headerlink" title="1.2 独立分散表（根据大小）"></a>1.2 独立分散表（根据大小）</h2><p>根据size分配到地方 地方不够就找更大的size<br><img src="/2020/02/09/CSAPP20-shortage-allocation-Advanced/3.png" alt></p><p>优点：搜索时间更快 （吞吐量） 内存利用率高（内部碎片少 因为对应大小</p><h1 id="2-垃圾回收策略"><a href="#2-垃圾回收策略" class="headerlink" title="2 垃圾回收策略"></a>2 垃圾回收策略</h1><p>在动态语言差不多相同 （python java等）C++、C也有了 但是由于指针（会把大整数当指针)存在导致很多垃圾回收不了<br><strong>可以确定回收的垃圾，没有被指向或者间接指向</strong></p><p>最基础的 标记清理法（又可以利用字节对齐的3-4位bit）</p>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
          <category> Advanced </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-Base-day1</title>
      <link href="/2020/02/09/Java-Base-day1/"/>
      <url>/2020/02/09/Java-Base-day1/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-只写模糊的">1. <strong><em>只写模糊的</em></strong></a><ul><li><a href="#11-正则表达式">1.1. 正则表达式</a><ul><li><a href="#111-pattern类">1.1.1. Pattern类</a></li><li><a href="#112-matcher类">1.1.2. Matcher类</a></li></ul></li><li><a href="#12-可变参数-有点像指针">1.2. 可变参数 （有点像指针)</a></li><li><a href="#13-finalize方法">1.3. finalize()方法</a></li><li><a href="#14-stream-file-io">1.4. Stream File IO</a><ul><li><a href="#141-控制台输入-systemin对象">1.4.1. 控制台输入 System.in对象</a></li><li><a href="#142-控制台输入-systemout对象">1.4.2. 控制台输入 System.out对象</a></li></ul></li><li><a href="#15-读写文件">1.5. 读写文件</a><ul><li><a href="#151-fileoutputstream">1.5.1. FileOutputStream</a></li><li><a href="#152-目录">1.5.2. 目录</a></li></ul></li><li><a href="#16-scanner类">1.6. Scanner类</a></li><li><a href="#17-try-catch-异常处理">1.7. try catch 异常处理</a></li></ul></li></ul><!-- /TOC --><h1 id="1-只写模糊的"><a href="#1-只写模糊的" class="headerlink" title="1. 只写模糊的"></a>1. <strong><em>只写模糊的</em></strong></h1><h2 id="1-1-正则表达式"><a href="#1-1-正则表达式" class="headerlink" title="1.1. 正则表达式"></a>1.1. 正则表达式</h2><h3 id="1-1-1-Pattern类"><a href="#1-1-1-Pattern类" class="headerlink" title="1.1.1. Pattern类"></a>1.1.1. Pattern类</h3><p>pattern对象是一个正则表达式的编译表示。Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其公共静态编译方法，它返回一个Pattern对象。该方法接受一个正则表达式作为它的第一个参数。</p><h3 id="1-1-2-Matcher类"><a href="#1-1-2-Matcher类" class="headerlink" title="1.1.2. Matcher类"></a>1.1.2. Matcher类</h3><p>Matcher类：<br>Matcher对象是对输入字符串进行解释和匹配操作的引擎。与Pattern类一样，Matcher也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。</p><h2 id="1-2-可变参数-（有点像指针"><a href="#1-2-可变参数-（有点像指针" class="headerlink" title="1.2. 可变参数 （有点像指针)"></a>1.2. 可变参数 （有点像指针)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VarargsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 调用可变参数的方法</span></span><br><span class="line">  printMax(<span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">56.5</span>);</span><br><span class="line">      printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">( <span class="keyword">double</span>... numbers)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"No argument passed"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">double</span> result = numbers[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;  numbers.length; i++)       <span class="keyword">if</span> (numbers[i] &gt;  result)</span><br><span class="line">      result = numbers[i];</span><br><span class="line">      System.out.println(<span class="string">"The max value is "</span> + result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-finalize-方法"><a href="#1-3-finalize-方法" class="headerlink" title="1.3. finalize()方法"></a>1.3. finalize()方法</h2><p>Java允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做finalize( )，它用来清除回收对象。</p><h2 id="1-4-Stream-File-IO"><a href="#1-4-Stream-File-IO" class="headerlink" title="1.4. Stream File IO"></a>1.4. Stream File IO</h2><h3 id="1-4-1-控制台输入-System-in对象"><a href="#1-4-1-控制台输入-System-in对象" class="headerlink" title="1.4.1. 控制台输入 System.in对象"></a>1.4.1. 控制台输入 System.in对象</h3><p>read() readline</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 BufferedReader 在控制台读取字符</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BRReadLines</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="comment">// 使用 System.in 创建 BufferedReader </span></span><br><span class="line">      BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span></span><br><span class="line">                              InputStreamReader(System.in));</span><br><span class="line">      String str;</span><br><span class="line">      System.out.println(<span class="string">"Enter lines of text."</span>);</span><br><span class="line">      System.out.println(<span class="string">"Enter 'end' to quit."</span>);</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         str = br.readLine();</span><br><span class="line">         System.out.println(str);</span><br><span class="line">      &#125; <span class="keyword">while</span>(!str.equals(<span class="string">"end"</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-控制台输入-System-out对象"><a href="#1-4-2-控制台输入-System-out对象" class="headerlink" title="1.4.2. 控制台输入 System.out对象"></a>1.4.2. 控制台输入 System.out对象</h3><p>write()不常用 因为print() 和println()好用</p><h2 id="1-5-读写文件"><a href="#1-5-读写文件" class="headerlink" title="1.5. 读写文件"></a>1.5. 读写文件</h2><p><img src="/2020/02/09/Java-Base-day1/1.png" alt></p><h3 id="1-5-1-FileOutputStream"><a href="#1-5-1-FileOutputStream" class="headerlink" title="1.5.1. FileOutputStream"></a>1.5.1. FileOutputStream</h3><p>使用字符串类型的文件名来创建一个输出流对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">"C:/java/hello"</span>)</span><br></pre></td></tr></table></figure><p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"C:/java/hello"</span>);</span><br><span class="line">OutputStream f = <span class="keyword">new</span> FileOutputStream(f);</span><br></pre></td></tr></table></figure><h3 id="1-5-2-目录"><a href="#1-5-2-目录" class="headerlink" title="1.5.2. 目录"></a>1.5.2. 目录</h3><p>mkdir()</p><h2 id="1-6-Scanner类"><a href="#1-6-Scanner类" class="headerlink" title="1.6. Scanner类"></a>1.6. Scanner类</h2><h2 id="1-7-try-catch-异常处理"><a href="#1-7-try-catch-异常处理" class="headerlink" title="1.7. try catch 异常处理"></a>1.7. try catch 异常处理</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Base day0</title>
      <link href="/2020/02/08/Java-Base-day0/"/>
      <url>/2020/02/08/Java-Base-day0/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-只写模糊的">1. <strong><em>只写模糊的</em></strong></a></li><li><a href="#2-修饰符">2. 修饰符</a><ul><li><a href="#21-访问修饰符">2.1. 访问修饰符</a></li><li><a href="#22-非访问修饰符">2.2. 非访问修饰符</a></li></ul></li><li><a href="#3-运算符">3. 运算符</a></li><li><a href="#4-特殊类">4. 特殊类</a></li><li><a href="#5-数组">5. 数组</a></li><li><a href="#6-arrays-类">6. Arrays 类</a></li><li><a href="#7-data-calendar-gregoriancalendar">7. Data Calendar GregorianCalendar</a></li></ul><!-- /TOC --><h1 id="1-只写模糊的"><a href="#1-只写模糊的" class="headerlink" title="1. 只写模糊的"></a>1. <strong><em>只写模糊的</em></strong></h1><h1 id="2-修饰符"><a href="#2-修饰符" class="headerlink" title="2. 修饰符"></a>2. 修饰符</h1><h2 id="2-1-访问修饰符"><a href="#2-1-访问修饰符" class="headerlink" title="2.1. 访问修饰符"></a>2.1. 访问修饰符</h2><ul><li><p>默认的，也称为default，在同一包内可见，不使用任何修饰符。<br>接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。</p></li><li><p>受保护的，以protected修饰符指定，对同一包内的类和所有子类可见（只为了子类访问）</p><ul><li>Protected访问修饰符不能修饰类和接口，方法和成员变量能够声明为protected，但是接口的成员变量和成员方法不能声明为protected。</li><li>父类中声明为protected的方法在子类中要么声明为protected，要么声明为public。不能声明为private。</li></ul></li><li><p>私有的，以private修饰符指定，在同一类内可见。</p></li><li><p>共有的，以public修饰符指定，对所有类可见。</p></li></ul><h2 id="2-2-非访问修饰符"><a href="#2-2-非访问修饰符" class="headerlink" title="2.2. 非访问修饰符"></a>2.2. 非访问修饰符</h2><ul><li>static修饰符，用来创建类方法和类变量(静态方法使用静态变量)<ul><li>static 变量 类变量</li><li>static 方法 静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</li></ul></li><li>final修饰符，用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。<ul><li>final变量：final变量能被显式地初始化并且只能初始化一次。但是final对象里的数据可以被改变。也就是说final对象的引用不能改变，但是里面的值可以改变。</li><li>final方法:类中的Final方法可以被子类继承，但是不能被子类修改。声明final方法的主要目的是防止该方法的内容被修改。</li></ul></li></ul><p>final修饰符通常和static修饰符一起使用来创建类常量。</p><ul><li><p>abstract修饰符，用来创建抽象类和抽象方法。</p><ul><li>抽象类：抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充 extend。</li><li>抽象方法： 抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。<br>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</li></ul></li><li><p>synchronized和volatile修饰符，主要用于线程的编程。</p></li></ul><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h1><ul><li><p>instanceOf 运算符<br>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p></li><li><p>增强for循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-特殊类"><a href="#4-特殊类" class="headerlink" title="4. 特殊类"></a>4. 特殊类</h1><ul><li><p>Number类：在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。<br><img src="/2020/02/08/Java-Base-day0/1.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Integer x = <span class="number">5</span>; <span class="comment">// boxes int to an Integer object</span></span><br><span class="line">      x =  x + <span class="number">10</span>;   <span class="comment">// unboxes the Integer to a int</span></span><br><span class="line">      System.out.println(x); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Math 类:数学操作</p></li><li><p>Character 类:我们经常会遇到需要使用对象，而不是内置数据类型的情况，</p><ul><li>装拆箱：例如，将一个char类型的参数传递给需要一个Character类型参数时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</li></ul></li><li><p>String 类:</p><ul><li><strong>注意</strong>:String类是不可改变的，所以你一旦创建了String对象，那它的值就无法改变了。 如果需要对字符串做很多修改，那么应该选择使用StringBuffer &amp; StringBuilder 类。</li><li>StringBuffer &amp; StringBuilder 类。<br>由于StringBuilder相较于StringBuffer有速度优势，所以多数情况下建议使用StringBuilder类。然而在应用程序要求线程安全(数据加锁)的情况下，则必须使用StringBuffer类。</li></ul></li></ul><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h1><p>dataType[] arrayRefVar;   // 首选的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><h1 id="6-Arrays-类"><a href="#6-Arrays-类" class="headerlink" title="6. Arrays 类"></a>6. Arrays 类</h1><p>java.util.Arrays类能方便地操作数组，它提供的所有方法都是静态的。具有以下功能：</p><ul><li><p>给数组赋值：通过fill方法。</p></li><li><p>对数组排序：通过sort方法,按升序。</p></li><li><p>比较数组：通过equals方法比较数组中元素值是否相等。</p></li><li><p>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找法操作。</p></li></ul><h1 id="7-Data-Calendar-GregorianCalendar"><a href="#7-Data-Calendar-GregorianCalendar" class="headerlink" title="7. Data Calendar GregorianCalendar"></a>7. Data Calendar GregorianCalendar</h1>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> BASE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 自学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP19: shortage allocation:Basic</title>
      <link href="/2020/02/07/CSAPP19-shortage-allocation-Basic/"/>
      <url>/2020/02/07/CSAPP19-shortage-allocation-Basic/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-动态分配内存堆">1. 动态分配内存（堆）</a><ul><li><a href="#11-回收方式">1.1 回收方式</a></li><li><a href="#12-衡量标准">1.2 衡量标准</a></li></ul></li><li><a href="#2-分配中的细节">2. 分配中的细节</a><ul><li><a href="#21-怎么free多少内存只靠指针">2.1 怎么free多少内存只靠指针</a></li><li><a href="#22-怎么跟踪这些没分配的内存">2.2 怎么跟踪这些没分配的内存</a></li><li><a href="#23-怎么应对格外的空间字节对齐造成的浪费">2.3 怎么应对格外的空间（字节对齐造成的浪费）</a></li><li><a href="#24-怎么找空块去分配">2.4 怎么找空块去分配</a></li><li><a href="#25-如何合理释放已经分配的块">2.5 如何合理释放已经分配的块</a></li></ul></li></ul><!-- /TOC --><h1 id="1-动态分配内存（堆）"><a href="#1-动态分配内存（堆）" class="headerlink" title="1. 动态分配内存（堆）"></a>1. 动态分配内存（堆）</h1><h2 id="1-1-回收方式"><a href="#1-1-回收方式" class="headerlink" title="1.1 回收方式"></a>1.1 回收方式</h2><ul><li>c 显示分配 显示回收 </li><li>java等 显示分配 隐式回收</li></ul><h2 id="1-2-衡量标准"><a href="#1-2-衡量标准" class="headerlink" title="1.2 衡量标准"></a>1.2 衡量标准</h2><ul><li>吞吐量：每秒能调用多少次</li><li>内存利用率：就是分配中使用的有效内存<br>  影响因素<ul><li>内部碎片：字节对齐 需要标记等</li><li>外部碎片： 如下图<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/1.png" alt></li></ul></li></ul><h1 id="2-分配中的细节"><a href="#2-分配中的细节" class="headerlink" title="2. 分配中的细节"></a>2. 分配中的细节</h1><h2 id="2-1-怎么free多少内存只靠指针"><a href="#2-1-怎么free多少内存只靠指针" class="headerlink" title="2.1 怎么free多少内存只靠指针"></a>2.1 怎么free多少内存只靠指针</h2><p>通过堆的header标识</p><h2 id="2-2-怎么跟踪这些没分配的内存"><a href="#2-2-怎么跟踪这些没分配的内存" class="headerlink" title="2.2 怎么跟踪这些没分配的内存"></a>2.2 怎么跟踪这些没分配的内存</h2><p>4种方法<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/2.png" alt></p><p><strong><em>以下以第一种方法讲解后续问题</em></strong></p><h2 id="2-3-怎么应对格外的空间（字节对齐造成的浪费）"><a href="#2-3-怎么应对格外的空间（字节对齐造成的浪费）" class="headerlink" title="2.3 怎么应对格外的空间（字节对齐造成的浪费）"></a>2.3 怎么应对格外的空间（字节对齐造成的浪费）</h2><p>如下图<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/3.png" alt><br><strong><em>无可避免，但是可以节省</em></strong></p><p>因为size的大小总是8的倍数或者16的 所以要存一些东西的时候回出现空的</p><p>也因为size的大小总是8的倍数或者16的 所以不需要一个额外的word来存状态 只需存在size的 最后3位bit里面的一位 因为他们一直是0</p><h2 id="2-4-怎么找空块去分配"><a href="#2-4-怎么找空块去分配" class="headerlink" title="2.4 怎么找空块去分配"></a>2.4 怎么找空块去分配</h2><ul><li>first fit：从头开始找（线性时间 terrible)</li><li>Next fit: 从上次找结束的地方开始够放置的就行 （也并不好）</li><li>best fit：找到最好的块放置</li><li>good fit：first fit + best fit 再开始的地方找一些最合适的块存放</li></ul><h2 id="2-5-如何合理释放已经分配的块"><a href="#2-5-如何合理释放已经分配的块" class="headerlink" title="2.5 如何合理释放已经分配的块"></a>2.5 如何合理释放已经分配的块</h2><ul><li><p>直接释放 （置位释放）<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/4.png" alt><br>waste too much  内存会逐渐崩溃</p></li><li><p>连接的下一个释放<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/5.png" alt><br>但是处理不了上面一块</p></li><li><p>通过添加foot 连接的上下释放<br><img src="/2020/02/07/CSAPP19-shortage-allocation-Basic/6.png" alt><br>但是这样有点太浪费了，因为对于分配过的内存是不需要合并的。<br>可以通过利用size那最后3位都是0，拿出一位来标记上面是否是已分配的块，这样不是的话它肯定有foot， 一切一样是的话就不做操作。（tricks)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> shortage allocation </category>
          
          <category> Basic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP18: virtual memory(real system)</title>
      <link href="/2020/02/07/CSAPP18-virtual-memory-real-system/"/>
      <url>/2020/02/07/CSAPP18-virtual-memory-real-system/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-symple-system-memory-address-translastion">1 symple system memory address translastion</a></li><li><a href="#2-i7-linux-memory-system">2 i7 linux memory system</a></li><li><a href="#3-memory-mapping">3 memory mapping</a></li></ul><!-- /TOC --><h1 id="1-symple-system-memory-address-translastion"><a href="#1-symple-system-memory-address-translastion" class="headerlink" title="1 symple system memory address translastion"></a>1 symple system memory address translastion</h1><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/1.png" alt><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>hit 直接得到PPN 然后VPO和PPO是完全相等的</li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/1.png" alt><br>步骤如下</p><ol><li>得到一个VA 拆解成VPN VPO</li><li>VPN=TLBI+TLBT 去look看TLBI上hit了没</li><li>没有hit 得去PTE里面找了 发现在里面 没有page falut </li><li>得到了PPN </li><li>再去Cache里面找  CI 找 然后匹配tag 然后取出CO位置</li></ol><h1 id="2-i7-linux-memory-system"><a href="#2-i7-linux-memory-system" class="headerlink" title="2 i7 linux memory system"></a>2 i7 linux memory system</h1><p><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/3.png" alt><br>Key  Point</p><ul><li>L1:4 cycle L2:10 cycle L3: 40-50 cyclce ps:L3是四核共用</li><li>有d-cache 和i-cache d-TLB 和 i-TLB</li><li>为什么不把L2 L1 合并原因有: d i占比不一定一样 还有就是缓存的限制大小<br>具体流程<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/4.png" alt></li></ul><p>技巧可以VPO=PPO=CI+CO先找到对应的位置在等tag（translation）匹配<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/6.png" alt></p><p>linux 把VM看做一个链表类似<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/8.png" alt></p><h1 id="3-memory-mapping"><a href="#3-memory-mapping" class="headerlink" title="3 memory mapping"></a>3 memory mapping</h1><p>两种分享方式</p><ol><li><p>共享地址<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/9.png" alt></p></li><li><p>私密的共享（such as fork and execve)<br><img src="/2020/02/07/CSAPP18-virtual-memory-real-system/11.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual memory </category>
          
          <category> real system </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP17: virtual memory concept</title>
      <link href="/2020/02/05/CSAPP17-virtual-memory-concept/"/>
      <url>/2020/02/05/CSAPP17-virtual-memory-concept/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1what-is-virtual-memory">1.what is virtual memory</a></li><li><a href="#2why-vm">2.why VM</a><ul><li><a href="#21-for-cache">2.1 for cache</a><ul><li><a href="#211-overview">2.1.1 overview</a></li><li><a href="#212-pte">2.1.2 PTE</a></li></ul></li><li><a href="#22-for-memory-management">2.2 for memory management</a></li><li><a href="#23-for-memory-protection">2.3 for memory protection</a></li></ul></li><li><a href="#3-detail-va-virtual-address">3 detail VA virtual address</a></li><li><a href="#4-summary">4 Summary</a></li></ul><!-- /TOC --><h1 id="1-What-is-virtual-memory"><a href="#1-What-is-virtual-memory" class="headerlink" title="1. What is virtual memory"></a>1. What is virtual memory</h1><p>cpu访问的都是虚拟内存通过MMU</p><h1 id="2-Why-VM"><a href="#2-Why-VM" class="headerlink" title="2.Why VM"></a>2.Why VM</h1><h2 id="2-1-for-cache"><a href="#2-1-for-cache" class="headerlink" title="2.1 for cache"></a>2.1 for cache</h2><h3 id="2-1-1-overview"><a href="#2-1-1-overview" class="headerlink" title="2.1.1 overview"></a>2.1.1 overview</h3><p>如下图<br><img src="https://i.loli.net/2020/02/05/yc96l5gPtokXm7O.png" alt="image.png"><br><strong>注意</strong> ：</p><ul><li>virtual pages代表着磁盘上的地址 </li><li>有些被缓存了 </li><li>有些没有还在磁盘上 </li><li>有些未分配代表连磁盘上都没</li></ul><p>DRAM slower than SRAM 10x</p><p>Disk slower 10000x than DRAM</p><p>so</p><ul><li>page sizes 4KB to 4MB</li><li>全相缓存 （尽管要很久搜索）</li></ul><h3 id="2-1-2-PTE"><a href="#2-1-2-PTE" class="headerlink" title="2.1.2 PTE"></a>2.1.2 PTE</h3><p>使用Page table entries 去map VP 到 PP<br><img src="https://i.loli.net/2020/02/05/qPa5F8gHERhOb61.png" alt="image.png"></p><p>如果CPU给的VP没有page hit 会有page falut 然后和缓存一样替代进去</p><h2 id="2-2-for-memory-management"><a href="#2-2-for-memory-management" class="headerlink" title="2.2 for memory management"></a>2.2 for memory management</h2><p><strong>关键点</strong> 每个进程都有独立的虚拟地址从0开始 似乎都有独立的空间 共享库也得益于此 每个进程似乎<br>单独拥有一个共享库函数代码<br><img src="https://i.loli.net/2020/02/05/1E94grucImyD2YR.png" alt="image.png"></p><h2 id="2-3-for-memory-protection"><a href="#2-3-for-memory-protection" class="headerlink" title="2.3 for memory protection"></a>2.3 for memory protection</h2><p>在PTE上对每个PP 有4个bit位<br>intel 虚拟内存是48位的 剩下的地址有些只能内核去用 高位<br><img src="https://i.loli.net/2020/02/05/IQbFqrRsKTo8mNV.png" alt="image.png"></p><h1 id="3-detail-VA-virtual-address"><a href="#3-detail-VA-virtual-address" class="headerlink" title="3 detail VA virtual address"></a>3 detail VA virtual address</h1><p><img src="https://i.loli.net/2020/02/05/GnjrcmY6t2JWH9L.png" alt="image.png"><br><img src="https://i.loli.net/2020/02/06/qcUxJmFO3vaWLdb.png" alt="2.png"><br><img src="https://i.loli.net/2020/02/06/7f5OK1IrH9FkqTd.png" alt="3.png"></p><h1 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4 Summary"></a>4 Summary</h1><ul><li>程序角度角度 VM<ul><li>每个进程有独立空间 不会被其他进程打乱</li></ul></li><li>系统角度 VM<ul><li>使得内存 更好缓存 （局部性是关键）</li><li>简化了内存管理 </li><li>内存保护</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSAPP </category>
          
          <category> virtual memory </category>
          
          <category> concept </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
